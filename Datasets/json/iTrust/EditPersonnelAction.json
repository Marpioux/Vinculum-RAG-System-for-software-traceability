[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    personnelForm.setMID(pid);\r\n    validator.validate(personnelForm);\r\n    personnelDAO.editPersonnel(personnelForm);\r\n    transDAO.logTransaction(TransactionType.CREATE_DISABLE_PATIENT_HCP, loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void updateInformation(PersonnelBean)",
                "comments": "Optional[/**\r\n * Takes information from the personnelForm param and updates the patient\r\n *\r\n * @param personnelForm\r\n *            PersonnelBean with new information\r\n * @throws iTrustException\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates the information of a personnel in the system.\n * \n * @param personnelForm the PersonnelBean object containing the updated information\n * \n * This method sets the personnel's ID, validates the updated information using a validator,\n * and then edits the personnel's information in the database using a personnelDAO.\n * It also logs the transaction of creating/disabling a patient's healthcare provider using a transDAO.\n */"
            },
            {
                "body": "Optional[{\r\n    PersonnelBean b = personnelDAO.getPersonnel(this.getPid());\r\n    b.setMessageFilter(filter);\r\n    this.updateInformation(b);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void editMessageFilter(String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Updates the message filter for the personnel associated with this object.\n * \n * @param filter the new message filter to be set\n * \n * This method retrieves the personnel object using the current object's PID,\n * updates the message filter with the provided filter, and then updates the\n * personnel information with the new message filter. \n * \n * @return void\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    long pidlong = Long.parseLong(pidString);\r\n    Role editor = authDAO.getUserRole(loggedInMID);\r\n    Role editing = authDAO.getUserRole(pidlong);\r\n    if (editor == editing && pidlong != loggedInMID)\r\n        throw new iTrustException(\"You can only edit your own demographics!\");\r\n    else if (editor == Role.HCP && editing == Role.ADMIN || editor == Role.UAP && editing == Role.HCP || editor == Role.ADMIN && editing == Role.UAP)\r\n        throw new iTrustException(\"You are not authorized to edit this record!\");\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public EditPersonnelAction(DAOFactory, long, String)",
                "comments": "Optional[/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory The DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID The MID of the user editing this personnel.\r\n * @param pidString The ID of the user being edited.\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new EditPersonnelAction object with the given DAOFactory, person ID, and logged in MID.\n * \n * @param factory the DAOFactory used to retrieve data access objects\n * @param pidString the person ID as a String\n * @param loggedInMID the MID of the logged in user\n * \n * @throws iTrustException if the logged in user is not authorized to edit the specified personnel record\n */\npublic EditPersonnelAction(DAOFactory factory, String pidString, long loggedInMID) {\n    super(factory, pidString);\n    this.authDAO = factory.getAuthDAO();\n    long pidlong = Long.parseLong(pidString);\n    Role editor = authDAO.getUserRole(loggedInMID);\n    Role editing = authDAO.getUserRole(pidlong);\n    if (editor == editing && pidlong != loggedInMID)\n        throw new iTrustException(\"You can only edit your own demographics!\");\n    else if (editor == Role.HCP && editing == Role.ADMIN || editor == Role.UAP && editing == Role.HCP || editor == Role.ADMIN && editing == Role.UAP)\n        throw new iTrustException(\"You are not authorized to edit this record!\");\n    this.personnelDAO = factory.getPersonnelDAO();\n    this.transDAO = factory.getTransactionDAO();\n    this.loggedInMID = loggedInMID;\n}\n*/"
            }
        ],
        "signature": "EditPersonnelAction",
        "variables": [
            "private long loggedInMID",
            "private PersonnelDAO personnelDAO",
            "private TransactionDAO transDAO",
            "private AuthDAO authDAO",
            "private PersonnelValidator validator"
        ],
        "generated_class_comment": "/**\n * The PersonnelUpdater class is responsible for updating information related to personnel in the system.\n * It contains methods to update personnel information, such as updating patient information and message filters.\n * \n * Main functionalities include:\n * - Updating personnel information based on a PersonnelBean object\n * - Editing message filters for personnel\n * \n * Overall behavior:\n * - The class allows for updating personnel information by setting the personnel's ID, validating the information,\n *   and editing the personnel's information in the database.\n * - It also provides functionality to edit message filters for personnel by retrieving the personnel object,\n *   updating the message filter, and updating the personnel information with the new message filter.\n * \n * @author [Your Name]\n * @version 1.0\n */\npublic class PersonnelUpdater {\n    // Class implementation goes here\n}\n*/\n/**\n * The EditPersonnelAction class is responsible for handling the editing of personnel records in the iTrust system.\n * It validates the user's authorization to edit a personnel record and performs the necessary actions to update the record.\n * \n * The main functionalities of this class include:\n * - Checking if the logged-in user has the necessary permissions to edit a personnel record\n * - Retrieving the roles of the editor and the personnel being edited\n * - Handling exceptions if the user is not authorized to edit the record\n * - Initializing the necessary DAO objects for accessing personnel and transaction data\n * \n * The overall behavior of this class is to ensure that only authorized users can edit personnel records and to update the records accordingly.\n * \n * @param factory the DAOFactory used to retrieve data access objects\n * @param pidString the person ID as a String\n * @param loggedInMID the MID of the logged-in user\n * \n * @throws iTrustException if the logged-in user is not authorized to edit the specified personnel record\n */\npublic EditPersonnelAction(DAOFactory factory, String pidString, long loggedInMID) {\n    super(factory, pidString);\n    this.authDAO = factory.getAuthDAO();\n    long pidlong = Long.parseLong(pidString);\n    Role editor = authDAO.getUserRole(loggedInMID);\n    Role editing = authDAO.getUserRole(pidlong);\n    \n    if (editor == editing && pidlong != loggedInMID) {\n        throw new iTrustException(\"You can only edit your own demographics!\");\n    } else if (editor == Role.HCP && editing == Role.ADMIN || editor == Role.UAP && editing == Role.HCP || editor == Role.ADMIN && editing == Role.UAP) {\n        throw new iTrustException(\"You are not authorized to edit this record!\");\n    }\n    \n    this.personnelDAO = factory.getPersonnelDAO();\n    this.transDAO = factory.getTransactionDAO();\n    this.loggedInMID = loggedInMID;\n}\n*/\n/**\n * The EditPersonnelAction class is responsible for handling the editing of personnel records in the system.\n * It ensures that only authorized users with the role of ADMIN or UAP are able to edit personnel records.\n * This class interacts with the PersonnelDAO, TransactionDAO, AuthDAO, and PersonnelValidator to perform the necessary operations.\n * \n * Main functionalities include:\n * - Checking if the logged-in user has the necessary permissions to edit personnel records\n * - Retrieving personnel information from the database\n * - Validating the edited personnel information\n * - Updating the personnel record in the database\n * \n * Overall behavior:\n * - Upon instantiation, the EditPersonnelAction class checks if the logged-in user has the required role for editing personnel records\n * - It initializes the necessary DAO objects for interacting with the database\n * - The class allows for editing personnel records by validating the changes and updating the database accordingly\n * - If the logged-in user does not have the required permissions, an iTrustException is thrown\n */\npublic class EditPersonnelAction {\n    private long loggedInMID;\n    private PersonnelDAO personnelDAO;\n    private TransactionDAO transDAO;\n    private AuthDAO authDAO;\n    private PersonnelValidator validator;\n    \n    // Constructor and methods for editing personnel records\n}\n*/"
    }
]