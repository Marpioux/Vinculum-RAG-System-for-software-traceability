[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    List<PersonnelBean> list = new ArrayList<PersonnelBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    }\r\n    return list;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public List<PersonnelBean> loadList(ResultSet)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads a list of PersonnelBean objects from the given ResultSet.\n * \n * @param rs the ResultSet containing the data to be loaded into PersonnelBean objects\n * @return a List of PersonnelBean objects loaded from the ResultSet\n * @throws SQLException if an error occurs while accessing the ResultSet\n */\npublic List<PersonnelBean> loadList(ResultSet rs) throws SQLException {\n    List<PersonnelBean> list = new ArrayList<PersonnelBean>();\n    while (rs.next()) {\n        list.add(loadSingle(rs));\n    }\n    return list;\n}"
            },
            {
                "body": "Optional[{\r\n    PersonnelBean p = new PersonnelBean();\r\n    p.setMID(rs.getLong(\"MID\"));\r\n    p.setAMID(rs.getLong(\"amid\"));\r\n    p.setRole(Role.parse(rs.getString(\"role\")));\r\n    p.setLastName(rs.getString(\"lastName\"));\r\n    p.setFirstName(rs.getString(\"firstName\"));\r\n    p.setPhone1(rs.getString(\"phone1\"));\r\n    p.setPhone2(rs.getString(\"phone2\"));\r\n    p.setPhone3(rs.getString(\"phone3\"));\r\n    p.setStreetAddress1(rs.getString(\"address1\"));\r\n    p.setStreetAddress2(rs.getString(\"address2\"));\r\n    p.setCity(rs.getString(\"city\"));\r\n    p.setState(rs.getString(\"state\"));\r\n    p.setZip1((rs.getString(\"zip1\")));\r\n    p.setZip2((rs.getString(\"zip2\")));\r\n    p.setEmail(rs.getString(\"email\"));\r\n    p.setSpecialty(rs.getString(\"specialty\"));\r\n    p.setMessageFilter(rs.getString(\"MessageFilter\"));\r\n    return p;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public PersonnelBean loadSingle(ResultSet)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads a single PersonnelBean object from the given ResultSet.\n * \n * @param rs the ResultSet containing the data for the PersonnelBean object\n * @return a PersonnelBean object populated with data from the ResultSet\n */\npublic PersonnelBean loadSingle(ResultSet rs) {\n    PersonnelBean p = new PersonnelBean();\n    p.setMID(rs.getLong(\"MID\"));\n    p.setAMID(rs.getLong(\"amid\"));\n    p.setRole(Role.parse(rs.getString(\"role\")));\n    p.setLastName(rs.getString(\"lastName\"));\n    p.setFirstName(rs.getString(\"firstName\"));\n    p.setPhone1(rs.getString(\"phone1\"));\n    p.setPhone2(rs.getString(\"phone2\"));\n    p.setPhone3(rs.getString(\"phone3\"));\n    p.setStreetAddress1(rs.getString(\"address1\"));\n    p.setStreetAddress2(rs.getString(\"address2\"));\n    p.setCity(rs.getString(\"city\"));\n    p.setState(rs.getString(\"state\"));\n    p.setZip1((rs.getString(\"zip1\")));\n    p.setZip2((rs.getString(\"zip2\")));\n    p.setEmail(rs.getString(\"email\"));\n    p.setSpecialty(rs.getString(\"specialty\"));\n    p.setMessageFilter(rs.getString(\"MessageFilter\"));\n    return p;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    int i = 1;\r\n    ps.setLong(i++, p.getAMID());\r\n    ps.setString(i++, p.getFirstName());\r\n    ps.setString(i++, p.getLastName());\r\n    ps.setString(i++, p.getPhone1());\r\n    ps.setString(i++, p.getPhone2());\r\n    ps.setString(i++, p.getPhone3());\r\n    ps.setString(i++, p.getStreetAddress1());\r\n    ps.setString(i++, p.getStreetAddress2());\r\n    ps.setString(i++, p.getCity());\r\n    ps.setString(i++, p.getState());\r\n    ps.setString(i++, p.getZip());\r\n    ps.setString(i++, p.getZip1());\r\n    ps.setString(i++, p.getZip2());\r\n    //ps.setString(i++, p.getSpecialty());\r\n    ps.setString(i++, p.getEmail());\r\n    ps.setString(i++, p.getMessageFilter());\r\n    return ps;\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public PreparedStatement loadParameters(PreparedStatement, PersonnelBean)",
                "comments": null,
                "innerComments": "Optional[[//ps.setString(i++, p.getSpecialty());\r\n]]",
                "generated_comment": "/**\n * Loads the parameters of a PersonnelBean object into a PreparedStatement.\n * \n * @param ps the PreparedStatement object to load the parameters into\n * @param p the PersonnelBean object containing the parameters to be loaded\n * @return the PreparedStatement object with the parameters loaded\n * \n * This method takes a PersonnelBean object and sets its attributes as parameters in the given PreparedStatement object.\n * The parameters set include AMID, first name, last name, phone numbers, street addresses, city, state, zip codes, email, and message filter.\n * \n * @throws SQLException if a database access error occurs\n */"
            }
        ],
        "constructors": [],
        "signature": "PersonnelLoader",
        "variables": [],
        "generated_class_comment": "/**\n * The PersonnelLoader class is responsible for loading PersonnelBean objects from a ResultSet.\n * It contains methods to load a single PersonnelBean object and a list of PersonnelBean objects.\n * \n * Main functionalities:\n * - loadSingle(ResultSet rs): Loads a single PersonnelBean object from the given ResultSet.\n * - loadList(ResultSet rs): Loads a list of PersonnelBean objects from the given ResultSet.\n * \n * Overall behavior:\n * The PersonnelLoader class provides methods to extract data from a ResultSet and populate PersonnelBean objects with the retrieved information.\n * It handles the mapping of ResultSet columns to PersonnelBean attributes and returns either a single PersonnelBean object or a list of PersonnelBean objects.\n * \n * @author [Your Name]\n * @version 1.0\n */\n/**\n * This method loads the parameters of a PersonnelBean object into a PreparedStatement.\n * It takes a PersonnelBean object as input and sets the parameters in the PreparedStatement accordingly.\n * The PreparedStatement is then returned with the parameters set.\n * \n * @param ps The PreparedStatement to set the parameters in\n * @param p The PersonnelBean object containing the data to set in the PreparedStatement\n * @return The PreparedStatement with the parameters set\n */\npublic PreparedStatement loadParameters(PreparedStatement ps, PersonnelBean p) {\n    int i = 1;\n    ps.setLong(i++, p.getAMID());\n    ps.setString(i++, p.getFirstName());\n    ps.setString(i++, p.getLastName());\n    ps.setString(i++, p.getPhone1());\n    ps.setString(i++, p.getPhone2());\n    ps.setString(i++, p.getPhone3());\n    ps.setString(i++, p.getStreetAddress1());\n    ps.setString(i++, p.getStreetAddress2());\n    ps.setString(i++, p.getCity());\n    ps.setString(i++, p.getState());\n    ps.setString(i++, p.getZip());\n    ps.setString(i++, p.getZip1());\n    ps.setString(i++, p.getZip2());\n    //ps.setString(i++, p.getSpecialty()); // Commented out for some reason\n    ps.setString(i++, p.getEmail());\n    ps.setString(i++, p.getMessageFilter());\n    \n    return ps;\n}\n*/\n/**\n * The PersonnelLoader class is responsible for loading parameters from a PersonnelBean object into a PreparedStatement object.\n * \n * @param ps the PreparedStatement object to load the parameters into\n * @param p the PersonnelBean object containing the parameters to be loaded\n * @return the PreparedStatement object with the parameters loaded\n * \n * This method takes a PersonnelBean object and sets its attributes as parameters in the given PreparedStatement object.\n * The parameters set include AMID, first name, last name, phone numbers, street addresses, city, state, zip codes, email, and message filter.\n * \n * @throws SQLException if a database access error occurs\n */"
    }
]