[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    messVal.validate(mBean);\r\n    emailVal.validate(mBean);\r\n    messageDAO.addMessage(mBean);\r\n    Email email = new Email();\r\n    String senderName;\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    if (8999999999L < mBean.getFrom() && 8999999999L < mBean.getTo()) {\r\n        PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\r\n        PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n        toList.add(receiver.getEmail());\r\n        senderName = sender.getFullName();\r\n        fromEmail = sender.getEmail();\r\n    } else {\r\n        if (6999999999L < mBean.getFrom()) {\r\n            PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\r\n            if (6999999999L < mBean.getTo()) {\r\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n            } else {\r\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n            }\r\n            senderName = sender.getFullName();\r\n            fromEmail = sender.getEmail();\r\n        } else {\r\n            PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n            if (6999999999L < mBean.getTo()) {\r\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n            } else {\r\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n            }\r\n            senderName = sender.getFullName();\r\n            fromEmail = sender.getEmail();\r\n        }\r\n    }\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"A new message from %s\", senderName));\r\n    email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, log in to iTrust and go to \\\"View My Messages\\\"\", senderName));\r\n    emailer.sendEmail(email);\r\n    transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void sendMessage(MessageBean)",
                "comments": "Optional[/**\r\n * Sends a message\r\n *\r\n * @param mBean message to be sent\r\n * @throws iTrustException\r\n * @throws SQLException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Sends a message using the provided MessageBean object. Validates the message, adds it to the database, \n * and sends an email notification to the recipient. The email notification includes the sender's name, \n * the subject of the message, and a link to view the message in iTrust. Logs the transaction in the \n * database. If the sender is a PersonnelBean, the recipient can be either a PersonnelBean or a PatientBean. \n * If the sender is a PatientBean, the recipient can be either a PersonnelBean or a PatientBean. \n * \n * @param mBean the MessageBean object containing the message details\n */\npublic void sendMessage(MessageBean mBean) {\n    // Validate the message\n    messVal.validate(mBean);\n    emailVal.validate(mBean);\n    \n    // Add the message to the database\n    messageDAO.addMessage(mBean);\n    \n    // Create and send an email notification\n    Email email = new Email();\n    String senderName;\n    String fromEmail;\n    email.setFrom(\"noreply@itrust.com\");\n    List<String> toList = new ArrayList<String>();\n    \n    // Determine sender and recipient types based on phone numbers\n    if (8999999999L < mBean.getFrom() && 8999999999L < mBean.getTo()) {\n        // Sender is a PersonnelBean\n        PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\n        PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n        toList.add(receiver.getEmail());\n        senderName = sender.getFullName();\n        fromEmail = sender.getEmail();\n    } else {\n        if (6999999999L < mBean.getFrom()) {\n            // Sender is a PersonnelBean\n            PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\n            if (6999999999L < mBean.getTo()) {\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n                toList.add(receiver.getEmail());\n            } else {\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\n                toList.add(receiver.getEmail());\n            }\n            senderName = sender.getFullName();\n            fromEmail = sender.getEmail();\n        } else {\n            // Sender is a PatientBean\n            PatientBean sender = patientDAO.getPatient(loggedInMID);\n            if (6999999999L < mBean.getTo()) {\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n                toList.add(receiver.getEmail());\n            } else {\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\n                toList.add(receiver.getEmail());\n            }\n            senderName = sender.getFullName();\n            fromEmail = sender.getEmail();\n        }\n    }\n    \n    // Set email details\n    email.setToList(toList);\n    email.setFrom(fromEmail);\n    email.setSubject(String.format(\"A new message from %s\", senderName));\n    email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, log in to iTrust and go to \\\"View My Messages\\\"\", senderName));\n    \n    // Send the email\n    emailer.sendEmail(email);\n    \n    // Log the transaction\n    transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    return patientDAO.getName(mid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getPatientName(long)",
                "comments": "Optional[/**\r\n * Returns the patient's name\r\n *\r\n * @param mid MId of the patient\r\n * @return the name of the patient\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the name of a patient based on their unique identifier.\n * \n * @param mid the unique identifier of the patient\n * @return the name of the patient associated with the given identifier\n */"
            },
            {
                "body": "Optional[{\r\n    return personnelDAO.getName(mid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getPersonnelName(long)",
                "comments": "Optional[/**\r\n * Returns the personnel's name\r\n *\r\n * @param mid MId of the personnel\r\n * @return the name of the personnel\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the name of a personnel based on the given personnel ID.\n * \n * @param mid the unique identifier of the personnel\n * @return the name of the personnel associated with the given ID\n */"
            },
            {
                "body": "Optional[{\r\n    List<PatientBean> representees = new ArrayList<PatientBean>();\r\n    try {\r\n        representees = patientDAO.getRepresented(loggedInMID);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return representees;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PatientBean> getMyRepresentees()",
                "comments": "Optional[/**\r\n * Returns a list of the patients that the logged in HCP represents\r\n *\r\n * @return list of the patients that the logged in HCP represents\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of PatientBeans representing patients that are being represented by the currently logged in patient.\n * \n * @return A List of PatientBeans representing patients being represented by the currently logged in patient.\n */\npublic List<PatientBean> getMyRepresentees() {\n    List<PatientBean> representees = new ArrayList<PatientBean>();\n    try {\n        representees = patientDAO.getRepresented(loggedInMID);\n    } catch (DBException e) {\n        e.printStackTrace();\n    }\n    return representees;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    return getDLHCPsFor(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PersonnelBean> getMyDLHCPs()",
                "comments": "Optional[/**\r\n * Returns the designated HCPs for the logged in patient.\r\n *\r\n * @return designated HCPs for the logged in patient.\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of personnel beans representing the Direct Local Health Care Providers (DLHCPs) associated with the currently logged-in member.\n * \n * @return A list of personnel beans representing the DLHCPs associated with the currently logged-in member\n */"
            },
            {
                "body": "Optional[{\r\n    List<PersonnelBean> dlhcps = new ArrayList<PersonnelBean>();\r\n    try {\r\n        dlhcps = patientDAO.getDeclaredHCPs(pid);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return dlhcps;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PersonnelBean> getDLHCPsFor(long)",
                "comments": "Optional[/**\r\n * Returns the designated HCPs for the given patient.\r\n *\r\n * @return designated HCPs for the given patient.\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of designated primary healthcare providers (DLHCPs) for a given patient ID.\n * \n * @param pid the patient ID for which to retrieve DLHCPs\n * @return a list of PersonnelBean objects representing the DLHCPs for the specified patient\n * @throws DBException if there is an error accessing the database\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.transactionDAO = factory.getTransactionDAO();\r\n    this.emailVal = new EMailValidator();\r\n    this.messVal = new MessageValidator();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public SendMessageAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Sets up defaults\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the user sending the message.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new SendMessageAction object with the given DAOFactory and loggedInMID.\n * Initializes the various data access objects and validators needed for sending messages.\n * \n * @param factory the DAOFactory used to retrieve data access objects\n * @param loggedInMID the ID of the currently logged in user\n */"
            }
        ],
        "signature": "SendMessageAction",
        "variables": [
            "private long loggedInMID",
            "private EmailUtil emailer",
            "private PatientDAO patientDAO",
            "private PersonnelDAO personnelDAO",
            "private MessageDAO messageDAO",
            "private TransactionDAO transactionDAO",
            "private EMailValidator emailVal",
            "private MessageValidator messVal"
        ],
        "generated_class_comment": "/**\n * This class represents a MessageController that handles the sending of messages in the iTrust system.\n * It contains methods for validating and adding messages, as well as sending email notifications to recipients.\n * The main functionalities of this class include validating message data, adding messages to the database,\n * determining the sender and recipient of the message, and sending email notifications to the recipient.\n * \n * The behavior of this class involves validating the message data, adding the message to the database,\n * determining the sender and recipient based on their roles (personnel or patient), constructing an email notification\n * with the message details, and sending the email notification to the recipient. Additionally, a transaction log\n * is created for each message sent.\n * \n * @author [Author Name]\n * @version 1.0\n */\npublic class MessageController {\n    /**\n     * Validates the message data, adds the message to the database, determines the sender and recipient,\n     * constructs an email notification, and sends the email notification to the recipient.\n     * \n     * @param mBean The MessageBean containing the message data to be sent.\n     * @param loggedInMID The MID of the logged-in user sending the message.\n     */\n    public void sendMessage(MessageBean mBean, long loggedInMID) {\n        // Validate message and email data\n        messVal.validate(mBean);\n        emailVal.validate(mBean);\n        \n        // Add message to database\n        messageDAO.addMessage(mBean);\n        \n        // Determine sender and recipient based on roles\n        Email email = new Email();\n        String senderName;\n        String fromEmail;\n        email.setFrom(\"noreply@itrust.com\");\n        List<String> toList = new ArrayList<String>();\n        \n        if (8999999999L < mBean.getFrom() && 8999999999L < mBean.getTo()) {\n            PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\n            PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n            toList.add(receiver.getEmail());\n            senderName = sender.getFullName();\n            fromEmail = sender.getEmail();\n        } else {\n            if (6999999999L < mBean.getFrom()) {\n                PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\n                if (6999999999L < mBean.getTo()) {\n                    PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n                    toList.add(receiver.getEmail());\n                } else {\n                    PatientBean receiver = patientDAO.getPatient(mBean.getTo());\n                    toList.add(receiver.getEmail());\n                }\n                senderName = sender.getFullName();\n                fromEmail = sender.getEmail();\n            } else {\n                PatientBean sender = patientDAO.getPatient(loggedInMID);\n                if (6999999999L < mBean.getTo()) {\n                    PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n                    toList.add(receiver.getEmail());\n                } else {\n                    PatientBean receiver = patientDAO.getPatient(mBean.getTo());\n                    toList.add(receiver.getEmail());\n                }\n                senderName = sender.getFullName();\n                fromEmail = sender.getEmail();\n            }\n        }\n        \n        email.setToList(toList);\n        email.setFrom(fromEmail);\n        email.setSubject(String.format(\"A new message from %s\", senderName));\n        email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, log in to iTrust and go to \\\"View My Messages\\\"\", senderName));\n        \n        // Send email notification\n        emailer.sendEmail(email);\n        \n        // Log transaction\n        transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\n    }\n}\n*/\n/**\n * This class is responsible for sending messages using the provided MessageBean object. \n * It validates the message content, adds it to the database, and sends an email notification to the recipient. \n * The email notification includes the sender's name, the subject of the message, and a link to view the message in iTrust. \n * It also logs the transaction in the database. \n * \n * If the sender is a PersonnelBean, the recipient can be either a PersonnelBean or a PatientBean. \n * If the sender is a PatientBean, the recipient can be either a PersonnelBean or a PatientBean. \n * \n * The sendMessage method takes a MessageBean object as a parameter and performs the following steps:\n * 1. Validates the message content using MessageValidator.\n * 2. Validates the email content using EmailValidator.\n * 3. Adds the message to the database using MessageDAO.\n * 4. Creates and sends an email notification to the recipient using Email.\n * 5. Determines the sender and recipient types based on phone numbers and retrieves sender and receiver details from PersonnelDAO.\n * \n * @param mBean the MessageBean object containing the message details\n */\npublic void sendMessage(MessageBean mBean) {\n    // Validate the message\n    messVal.validate(mBean);\n    emailVal.validate(mBean);\n    \n    // Add the message to the database\n    messageDAO.addMessage(mBean);\n    \n    // Create and send an email notification\n    Email email = new Email();\n    String senderName;\n    String fromEmail;\n    email.setFrom(\"noreply@itrust.com\");\n    List<String> toList = new ArrayList<String>();\n    \n    // Determine sender and recipient types based on phone numbers\n    if (8999999999L < mBean.getFrom() && 8999999999L < mBean.getTo()) {\n        // Sender is a PersonnelBean\n        PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\n        PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n        toList.add(receiver.getEmail());\n        senderName = sender.getFullName();\n        fromEmail = sender.getEmail();\n    } else {\n        if (6999999999L < mBean.getFrom()) {\n            // Sender is a PersonnelBean\n            PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\n            if (6999999999L < mBean.getTo()) {\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n                toList.add(receiver.getEmail());\n            } else {\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\n                toList.add(receiver.getEmail());\n            }\n            senderName = sender.getFullName();\n            fromEmail = sender.getEmail();\n        } else {\n            // Sender is a PatientBean\n            PatientBean sender = patientDAO.getPatient(loggedInMID);\n            if (8999999999L < mBean.getTo()) {\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\n                toList.add(receiver.getEmail());\n            } else {\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\n                toList.add(receiver.getEmail());\n            }\n            senderName = sender.getFullName();\n            fromEmail = sender.getEmail();\n        }\n    }\n}\n*/\n*/\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Retrieves the name of a personnel based on their unique identifier.\\n * \\n * @param mid the unique identifier of the personnel\\n * @return the name of the personnel associated with the given identifier\\n */\" }]\n/**\n * This class represents an iTrustException, which is used to handle exceptions specific to the iTrust application.\n * \n * The class contains methods to retrieve the name of a personnel based on the given personnel ID, get a list of patients that the logged in HCP represents, and retrieve a list of Direct Local Health Care Providers (DLHCPs) for the logged in patient.\n * \n * Methods:\n * 1. getMyRepresentees(): Retrieves a list of PatientBeans representing patients that are being represented by the currently logged in patient.\n * 2. getMyDLHCPs(): Retrieves a list of personnel beans representing the Direct Local Health Care Providers (DLHCPs) associated with the currently logged-in member.\n * \n * This class provides essential functionalities for managing personnel, patients, and health care providers within the iTrust application. It helps in handling exceptions specific to iTrust and provides methods to retrieve important information related to personnel, patients, and health care providers.\n */\n*/\n* This class represents an action for sending messages within the iTrust system. It initializes various data access objects and validators needed for sending messages. The main functionalities of this class include retrieving designated primary healthcare providers (DLHCPs) for a given patient, sending messages to DLHCPs, and handling exceptions that may occur during the process. The overall behavior of this class is to facilitate communication between patients and their designated healthcare providers, ensuring timely and efficient exchange of information within the iTrust system.\n/**\n * This class represents an action that allows a user to send a message to another user within the system.\n * It retrieves data access objects for patients, personnel, messages, and transactions to facilitate the sending of messages.\n * The class requires the ID of the currently logged in user to perform the send message action.\n * It also utilizes an EmailUtil object for sending email notifications, as well as validators for email and message content.\n * \n * The main functionalities of this class include:\n * - Retrieving patient, personnel, message, and transaction data access objects\n * - Sending messages between users within the system\n * - Validating email addresses and message content before sending\n * \n * Overall, this class provides the necessary functionality for users to communicate with each other through messages,\n * while ensuring that the messages are sent securely and meet certain validation criteria.\n */"
    }
]