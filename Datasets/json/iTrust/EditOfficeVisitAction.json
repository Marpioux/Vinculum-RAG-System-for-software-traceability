[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    OfficeVisitBean officeVisit = ovDAO.getOfficeVisit(ovID);\r\n    transDAO.logTransaction(TransactionType.VIEW_OFFICE_VISIT, loggedInMID, pid, \"EditOffceVisit - View office visits\");\r\n    return officeVisit;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public OfficeVisitBean getOfficeVisit()",
                "comments": "Optional[/**\r\n * Returns the office visit bean for the office visit\r\n *\r\n * @return the OfficeVisitBean of the office visit\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the office visit details for a specific office visit ID.\n * \n * @return The OfficeVisitBean object containing the details of the office visit\n */"
            },
            {
                "body": "Optional[{\r\n    transDAO.logTransaction(TransactionType.VIEW_LAB_PROCEDURE, loggedInMID, pid, \"EditOffceVisit - View lab procedures\");\r\n    return lpDAO.getAllLabProceduresForDocOV(mid, ovid);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public List<LabProcedureBean> getLabProcedures(long, long)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of LabProcedureBeans associated with a specific office visit for a given doctor.\n * \n * @param mid the MID of the doctor requesting the lab procedures\n * @param ovid the ID of the office visit for which lab procedures are being retrieved\n * @return a List of LabProcedureBeans containing all lab procedures associated with the specified office visit\n */"
            },
            {
                "body": "Optional[{\r\n    List<HospitalBean> hcpsHospitals = personnelDAO.getHospitals(hcpID);\r\n    List<HospitalBean> allHospitals = hospitalDAO.getAllHospitals();\r\n    return combineLists(hcpsHospitals, allHospitals);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<HospitalBean> getHospitals(long)",
                "comments": "Optional[/**\r\n * This is a list of all hospitals, ordered by the office visit's hcp FIRST\r\n *\r\n * @param hcpID\r\n * @return\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of hospitals associated with a specific healthcare professional and combines it with a list of all hospitals.\n * \n * @param hcpID the ID of the healthcare professional\n * @return a list of HospitalBean objects containing hospitals associated with the healthcare professional and all hospitals\n */"
            },
            {
                "body": "Optional[{\r\n    for (HospitalBean hos : allHospitals) {\r\n        if (!hcpsHospitals.contains(hos))\r\n            hcpsHospitals.add(hos);\r\n    }\r\n    return hcpsHospitals;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private List<HospitalBean> combineLists(List<HospitalBean>, List<HospitalBean>)",
                "comments": "Optional[/**\r\n * Combines two lists of hospitals\r\n *\r\n * @param hcpsHospitals hospitals the HCP is assigned to\r\n * @param allHospitals all hopsitals\r\n * @return the combined list\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Combines two lists of HospitalBeans into one list, removing duplicates.\n * \n * @param allHospitals the first list of HospitalBeans to be combined\n * @param hcpsHospitals the second list of HospitalBeans to be combined\n * @return a List of HospitalBeans containing all unique elements from both input lists\n */"
            },
            {
                "body": "Optional[{\r\n    String confirm = \"\";\r\n    try {\r\n        checkAddSubAction(OVSubAction.ADD_DIAGNOSIS, form.getAddDiagID(), ovID, null);\r\n        checkAddSubAction(OVSubAction.ADD_PROCEDURE, form.getAddProcID(), ovID, null);\r\n        checkAddSubAction(OVSubAction.ADD_IMMUNIZATION, form.getAddImmunizationID(), ovID, null, form.getHcpID());\r\n        checkAddSubAction(OVSubAction.ADD_LAB_PROCEDURE, form.getAddLabProcID(), ovID, null);\r\n        checkAddPrescription(form, ovID);\r\n        checkRemoveSubAction(OVSubAction.REMOVE_DIAGNOSIS, form.getRemoveDiagID());\r\n        checkRemoveSubAction(OVSubAction.REMOVE_LAB_PROCEDURE, form.getRemoveLabProcID());\r\n        checkRemoveSubAction(OVSubAction.REMOVE_PROCEDURE, form.getRemoveProcID());\r\n        checkRemoveSubAction(OVSubAction.REMOVE_IMMUNIZATION, form.getRemoveImmunizationID());\r\n        checkRemoveSubAction(OVSubAction.REMOVE_MEDICATION, form.getRemoveMedID());\r\n        updateOv(form);\r\n        transDAO.logTransaction(TransactionType.DOCUMENT_OFFICE_VISIT, loggedInMID, getOfficeVisit().getPatientID(), \"EditOfficeVisit - edited office visit \" + ovID);\r\n        confirm = \"success\";\r\n        return confirm;\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String updateInformation(EditOfficeVisitForm)",
                "comments": "Optional[/**\r\n * Updates the office visit with information from the form passed in\r\n *\r\n * @param form\r\n *            information to update\r\n * @return \"success\" or exception's message\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates the information of an office visit based on the provided EditOfficeVisitForm.\n * This method performs various checks and updates on the office visit including adding and removing diagnoses, procedures, immunizations, lab procedures, and prescriptions.\n * It also logs the transaction of editing the office visit.\n * \n * @param form the EditOfficeVisitForm containing the updated information for the office visit\n * @return a String indicating the result of the update operation, either \"success\" if the update was successful or an error message if an exception occurred\n */"
            },
            {
                "body": "Optional[{\r\n    String response = \"\";\r\n    try {\r\n        SimpleDateFormat original = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat needed = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n        Date start = original.parse(startdate);\r\n        startdate = needed.format(start);\r\n        Date end = original.parse(enddate);\r\n        enddate = needed.format(end);\r\n        startdate = startdate.replaceAll(\"/\", \"-\");\r\n        enddate = enddate.replaceAll(\"/\", \"-\");\r\n        List<PrescriptionReportBean> prBeanList = ovDAO.getPrescriptionReportsByDate(Long.parseLong(pid), startdate, enddate);\r\n        List<DrugInteractionBean> dBeanList = drugDAO.getInteractions(drug);\r\n        for (PrescriptionReportBean prBean : prBeanList) {\r\n            String presDrug = prBean.getPrescription().getMedication().getNDCode();\r\n            for (DrugInteractionBean dBean : dBeanList) {\r\n                String intDrug1 = dBean.getFirstDrug();\r\n                String intDrug2 = dBean.getSecondDrug();\r\n                if (presDrug.equals(intDrug1) && drug.equals(intDrug2)) {\r\n                    response += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \". Start Date: \" + prBean.getPrescription().getStartDateStr() + \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\r\n                    response += \"Interactions: \" + prBean.getPrescription().getMedication().getDescription() + \" - \" + ndcDAO.getNDCode((dBean.getSecondDrug())).getDescription() + \". \";\r\n                    response += \"Description: \" + dBean.getDescription() + \"  \";\r\n                } else if (presDrug.equals(intDrug2) && drug.equals(intDrug1)) {\r\n                    response += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \". Start Date: \" + prBean.getPrescription().getStartDateStr() + \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\r\n                    response += \"Interactions: \" + prBean.getPrescription().getMedication().getDescription() + \" - \" + ndcDAO.getNDCode(dBean.getFirstDrug()).getDescription() + \". \";\r\n                    response += \"Description: \" + dBean.getDescription() + \"  \";\r\n                }\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return response;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public String hasInteraction(String, String, String, String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks for drug interactions between a given drug and a patient's prescribed medications within a specified date range.\n * \n * @param pid The patient's ID.\n * @param startdate The start date of the date range in MM/dd/yyyy format.\n * @param enddate The end date of the date range in MM/dd/yyyy format.\n * @param drug The drug for which interactions are being checked.\n * @return A String containing information about any interactions found, including the prescribed medication, start and end dates, interacting drugs, and description of the interaction.\n * @throws iTrustException If there is an issue with database access or parsing dates.\n */\npublic String hasInteraction(String pid, String startdate, String enddate, String drug) {\n    String response = \"\";\n    try {\n        SimpleDateFormat original = new SimpleDateFormat(\"MM/dd/yyyy\");\n        SimpleDateFormat needed = new SimpleDateFormat(\"yyyy/MM/dd\");\n        Date start = original.parse(startdate);\n        startdate = needed.format(start);\n        Date end = original.parse(enddate);\n        enddate = needed.format(end);\n        startdate = startdate.replaceAll(\"/\", \"-\");\n        enddate = enddate.replaceAll(\"/\", \"-\");\n        List<PrescriptionReportBean> prBeanList = ovDAO.getPrescriptionReportsByDate(Long.parseLong(pid), startdate, enddate);\n        List<DrugInteractionBean> dBeanList = drugDAO.getInteractions(drug);\n        for (PrescriptionReportBean prBean : prBeanList) {\n            String presDrug = prBean.getPrescription().getMedication().getNDCode();\n            for (DrugInteractionBean dBean : dBeanList) {\n                String intDrug1 = dBean.getFirstDrug();\n                String intDrug2 = dBean.getSecondDrug();\n                if (presDrug.equals(intDrug1) && drug.equals(intDrug2)) {\n                    response += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \". Start Date: \" + prBean.getPrescription().getStartDateStr() + \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\n                    response += \"Interactions: \" + prBean.getPrescription().getMedication().getDescription() + \" - \" + ndcDAO.getNDCode((dBean.getSecondDrug())).getDescription() + \". \";\n                    response += \"Description: \" + dBean.getDescription() + \"  \";\n                } else if (presDrug.equals(intDrug2) && drug.equals(intDrug1)) {\n                    response += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \". Start Date: \" + prBean.getPrescription().getStartDateStr() + \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\n                    response += \"Interactions: \" + prBean.getPrescription().getMedication().getDescription() + \" - \" + ndcDAO.getNDCode(dBean.getFirstDrug()).getDescription() + \". \";\n                    response += \"Description: \" + dBean.getDescription() + \"  \";\n                }\n            }\n        }\n    } catch (DBException e) {\n        e.printStackTrace();\n        throw new iTrustException(e.getMessage());\n    } catch (ParseException e) {\n        e.printStackTrace();\n        throw new iTrustException(e.getMessage());\n    }\n    return response;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    String response = \"\";\r\n    try {\r\n        List<AllergyBean> allergyList = allergyDAO.getAllergies(Long.parseLong(patMID));\r\n        if (allergyList.isEmpty())\r\n            return response;\r\n        MedicationBean medBean = ndcDAO.getNDCode(ndcode);\r\n        if (medBean == null)\r\n            return response;\r\n        String newDrug = medBean.getDescription();\r\n        for (AllergyBean allergyBean : allergyList) {\r\n            String currentAllerDrug = allergyBean.getDescription();\r\n            //Allergy: Aspirin. First Found: 12/20/2008.\r\n            if (newDrug.equals(currentAllerDrug)) {\r\n                response += \"Allergy: \" + newDrug + \". First Found: \" + allergyBean.getFirstFoundStr();\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return response;\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public String isAllergyOnList(String, String)",
                "comments": null,
                "innerComments": "Optional[[//Allergy: Aspirin. First Found: 12/20/2008.\r\n]]",
                "generated_comment": "/**\n * Checks if a given medication is present on a patient's allergy list.\n * \n * @param patMID the patient's MID\n * @param ndcode the NDC code of the medication to check\n * @return a String containing information about the allergy if the medication is found on the allergy list, \n *         an empty String otherwise\n * @throws iTrustException if there is an issue with the database\n */\npublic String isAllergyOnList(String patMID, String ndcode) {\n    String response = \"\";\n    try {\n        List<AllergyBean> allergyList = allergyDAO.getAllergies(Long.parseLong(patMID));\n        if (allergyList.isEmpty())\n            return response;\n        MedicationBean medBean = ndcDAO.getNDCode(ndcode);\n        if (medBean == null)\n            return response;\n        String newDrug = medBean.getDescription();\n        for (AllergyBean allergyBean : allergyList) {\n            String currentAllerDrug = allergyBean.getDescription();\n            //Allergy: Aspirin. First Found: 12/20/2008.\n            if (newDrug.equals(currentAllerDrug)) {\n                response += \"Allergy: \" + newDrug + \". First Found: \" + allergyBean.getFirstFoundStr();\n            }\n        }\n    } catch (DBException e) {\n        e.printStackTrace();\n        throw new iTrustException(e.getMessage());\n    }\n    return response;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    PatientBean p = patDAO.getPatient(Long.parseLong(patID));\r\n    String hcpName = personnelDAO.getName(hcpID);\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"HCP has prescribed you a potentially dangerous medication\");\r\n    email.setBody(String.format(\"%s has prescribed a medication that you are allergic to or that has a known interaction with a drug you are currently taking. %s\", hcpName, problem));\r\n    return email;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public Email makeEmailApp(long, String, String)",
                "comments": "Optional[/**\r\n * Sends e-mail regarding the prescribed dangerous drug.\r\n *\r\n * @param hcpID HCP the prescription is made by\r\n * @param patID ID of the patient prescription is for\r\n * @param problem The allergy and/or interaction that is the problem\r\n * @return the sent e-mail\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Creates an email notification for a patient when a healthcare provider prescribes a potentially dangerous medication.\n * \n * @param patID the ID of the patient to whom the medication is prescribed\n * @param hcpID the ID of the healthcare provider who prescribed the medication\n * @param problem the issue with the prescribed medication (e.g. allergy or drug interaction)\n * @return an Email object containing the notification email with the necessary details\n */"
            },
            {
                "body": "Optional[{\r\n    if (form.getAddMedID() != null && !\"\".equals(form.getAddMedID())) {\r\n        new EditOfficeVisitValidator(true).validate(form);\r\n        PrescriptionBean pres = new PrescriptionBean();\r\n        pres.setDosage(Integer.valueOf(form.getDosage()));\r\n        pres.setEndDateStr(form.getEndDate());\r\n        pres.setStartDateStr(form.getStartDate());\r\n        pres.setInstructions(form.getInstructions());\r\n        MedicationBean med = new MedicationBean();\r\n        med.setNDCode(form.getAddMedID());\r\n        pres.setMedication(med);\r\n        pres.setVisitID(ovID);\r\n        transDAO.logTransaction(TransactionType.ADD_PRESCRIPTION, loggedInMID, pid, \"EditOffceVisit - Add prescription - \" + pres.getMedication().getNDCode());\r\n        ovDAO.addPrescription(pres);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private void checkAddPrescription(EditOfficeVisitForm, long)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method checks if a prescription should be added to an office visit and adds it if necessary.\n * \n * @param form the EditOfficeVisitForm containing the prescription information\n * @param ovID the ID of the office visit to which the prescription should be added\n */\nprivate void checkAddPrescription(EditOfficeVisitForm form, long ovID) {\n    if (form.getAddMedID() != null && !\"\".equals(form.getAddMedID())) {\n        // Validate the form data\n        new EditOfficeVisitValidator(true).validate(form);\n        \n        // Create a new PrescriptionBean and set its attributes\n        PrescriptionBean pres = new PrescriptionBean();\n        pres.setDosage(Integer.valueOf(form.getDosage()));\n        pres.setEndDateStr(form.getEndDate());\n        pres.setStartDateStr(form.getStartDate());\n        pres.setInstructions(form.getInstructions());\n        \n        // Create a new MedicationBean and set its NDCode\n        MedicationBean med = new MedicationBean();\n        med.setNDCode(form.getAddMedID());\n        pres.setMedication(med);\n        \n        // Set the visit ID for the prescription\n        pres.setVisitID(ovID);\n        \n        // Log the transaction and add the prescription to the office visit\n        transDAO.logTransaction(TransactionType.ADD_PRESCRIPTION, loggedInMID, pid, \"EditOffceVisit - Add prescription - \" + pres.getMedication().getNDCode());\n        ovDAO.addPrescription(pres);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    validator.validate(form);\r\n    OfficeVisitBean ov = new OfficeVisitBean(ovID);\r\n    ov.setNotes(form.getNotes());\r\n    ov.setVisitDateStr(form.getVisitDate());\r\n    ov.setHcpID(Long.valueOf(form.getHcpID()));\r\n    ov.setPatientID(Long.valueOf(form.getPatientID()));\r\n    ov.setHospitalID(form.getHospitalID());\r\n    transDAO.logTransaction(TransactionType.UPDATE_OFFICE_VISIT, loggedInMID, pid, \"EditOffceVisit - Update office visit\");\r\n    ovDAO.update(ov);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void updateOv(EditOfficeVisitForm)",
                "comments": "Optional[/**\r\n * Updates the office visit.\r\n *\r\n * @param form form with all the information\r\n * @throws DBException\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates an existing office visit with the information provided in the EditOfficeVisitForm.\n * \n * @param form the EditOfficeVisitForm containing the updated information for the office visit\n * \n * This method validates the form data, creates a new OfficeVisitBean object with the updated information,\n * sets the notes, visit date, HCP ID, patient ID, and hospital ID for the office visit, logs the transaction,\n * and updates the office visit in the database using the OfficeVisitDAO.\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (code == null || \"\".equals(code)) {\r\n        return false;\r\n    } else {\r\n        switch(action) {\r\n            case ADD_DIAGNOSIS:\r\n                ovDAO.addDiagnosisToOfficeVisit(Double.valueOf(code), visitID);\r\n                break;\r\n            case ADD_IMMUNIZATION:\r\n            case ADD_PROCEDURE:\r\n                ovDAO.addProcedureToOfficeVisit(code, visitID, \"\");\r\n                break;\r\n            case ADD_LAB_PROCEDURE:\r\n                ovDAO.addLabProcedureToOfficeVisit(code, visitID, pid);\r\n                break;\r\n            default:\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private boolean checkAddSubAction(OVSubAction, String, long, String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks and performs the specified action for adding a sub action to an office visit.\n * \n * @param action The type of sub action to be performed (ADD_DIAGNOSIS, ADD_IMMUNIZATION, ADD_PROCEDURE, ADD_LAB_PROCEDURE)\n * @param code The code associated with the sub action\n * @param visitID The ID of the office visit to add the sub action to\n * @param pid The ID of the procedure for lab procedures\n * @return true if the sub action was successfully added, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    if (code == null || \"\".equals(code)) {\r\n        return false;\r\n    } else {\r\n        ovDAO.addProcedureToOfficeVisit(code, visitID, hcpid);\r\n        return true;\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private boolean checkAddSubAction(OVSubAction, String, long, String, String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a sub action can be added to an office visit.\n * \n * @param subAction the OVSubAction object representing the sub action to be added\n * @param code the String code of the sub action\n * @param visitID the long ID of the office visit\n * @param hcpid the String ID of the healthcare provider\n * @return true if the sub action is successfully added to the office visit, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    if (input == null || \"\".equals(input))\r\n        return false;\r\n    long removeID;\r\n    try {\r\n        removeID = Long.valueOf(input);\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n    switch(action) {\r\n        case REMOVE_DIAGNOSIS:\r\n            ovDAO.removeDiagnosisFromOfficeVisit(removeID);\r\n            break;\r\n        case REMOVE_IMMUNIZATION:\r\n        case REMOVE_PROCEDURE:\r\n            ovDAO.removeProcedureFromOfficeVisit(removeID);\r\n            break;\r\n        case REMOVE_MEDICATION:\r\n            ovDAO.removePrescription(removeID);\r\n            break;\r\n        case REMOVE_LAB_PROCEDURE:\r\n            ovDAO.removeLabProcedureFromOfficeVisit(removeID);\r\n            break;\r\n    }\r\n    return true;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private boolean checkRemoveSubAction(OVSubAction, String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the input string is valid for removing a sub action from an office visit.\n * \n * @param input the string representing the ID of the sub action to be removed\n * @param action the type of sub action to be removed (e.g. diagnosis, immunization, procedure, medication, lab procedure)\n * @return true if the sub action was successfully removed, false otherwise\n */\nprivate boolean checkRemoveSubAction(String input, OVSubAction action) {\n    if (input == null || \"\".equals(input))\n        return false;\n    long removeID;\n    try {\n        removeID = Long.valueOf(input);\n    } catch (NumberFormatException e) {\n        e.printStackTrace();\n        return false;\n    }\n    switch(action) {\n        case REMOVE_DIAGNOSIS:\n            ovDAO.removeDiagnosisFromOfficeVisit(removeID);\n            break;\n        case REMOVE_IMMUNIZATION:\n        case REMOVE_PROCEDURE:\n            ovDAO.removeProcedureFromOfficeVisit(removeID);\n            break;\n        case REMOVE_MEDICATION:\n            ovDAO.removePrescription(removeID);\n            break;\n        case REMOVE_LAB_PROCEDURE:\n            ovDAO.removeLabProcedureFromOfficeVisit(removeID);\n            break;\n    }\n    return true;\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(factory, pidString, ovIDString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.lpDAO = factory.getLabProcedureDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.drugDAO = factory.getDrugInteractionDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.ndcDAO = factory.getNDCodesDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public EditOfficeVisitAction(DAOFactory, long, String, String)",
                "comments": "Optional[/**\r\n * Patient id and office visit id validated by super class\r\n *\r\n * @param factory The DAOFactory to be used in creating the DAOs for this action.\r\n * @param loggedInMID The MID of the user who is authorizing this action.\r\n * @param pidString The patient who this action is performed on.\r\n * @param ovIDString The ID of the office visit in play.\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new EditOfficeVisitAction with the specified DAOFactory, patient ID, office visit ID, and logged in MID.\n * \n * @param factory the DAOFactory used to retrieve data access objects\n * @param pidString the String representation of the patient ID\n * @param ovIDString the String representation of the office visit ID\n * @param loggedInMID the logged in MID of the user performing the action\n */\npublic EditOfficeVisitAction(DAOFactory factory, String pidString, String ovIDString, long loggedInMID) {\n    super(factory, pidString, ovIDString);\n    pid = Long.parseLong(pidString);\n    ovDAO = factory.getOfficeVisitDAO();\n    this.personnelDAO = factory.getPersonnelDAO();\n    this.hospitalDAO = factory.getHospitalsDAO();\n    this.lpDAO = factory.getLabProcedureDAO();\n    this.transDAO = factory.getTransactionDAO();\n    this.drugDAO = factory.getDrugInteractionDAO();\n    this.allergyDAO = factory.getAllergyDAO();\n    this.ndcDAO = factory.getNDCodesDAO();\n    this.patDAO = factory.getPatientDAO();\n    this.loggedInMID = loggedInMID;\n}\n*/"
            }
        ],
        "signature": "EditOfficeVisitAction",
        "variables": [
            "private EditOfficeVisitValidator validator",
            "private PersonnelDAO personnelDAO",
            "private HospitalsDAO hospitalDAO",
            "private OfficeVisitDAO ovDAO",
            "private LabProcedureDAO lpDAO",
            "private TransactionDAO transDAO",
            "private DrugInteractionDAO drugDAO",
            "private AllergyDAO allergyDAO",
            "private PatientDAO patDAO",
            "private NDCodesDAO ndcDAO",
            "private long loggedInMID",
            "private long pid"
        ],
        "generated_class_comment": "*/\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Retrieves a list of hospitals associated with a specific healthcare provider.\\n * \\n * @param hcpID the ID of the healthcare provider\\n * @return a List of HospitalBeans containing all hospitals associated with the specified healthcare provider\\n */\" } ], \"class_comment\": \"/**\\n * This class provides methods for retrieving and manipulating office visit data.\\n * It includes methods for retrieving office visit details, lab procedures, and hospitals.\\n * \\n * @author Your Name\\n * @version 1.0\\n */\" } ]\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class contains methods for handling various actions related to a healthcare professional's interactions with hospitals.\n * It includes methods for retrieving a list of hospitals associated with a specific healthcare professional, combining lists of hospitals, and performing various actions such as adding diagnoses, procedures, immunizations, lab procedures, prescriptions, and removing diagnoses and lab procedures.\n * \n * The main functionalities of this class include:\n * - Retrieving a list of hospitals associated with a specific healthcare professional\n * - Combining two lists of hospitals into one list, removing duplicates\n * - Checking and adding diagnoses, procedures, immunizations, lab procedures, and prescriptions\n * - Checking and removing diagnoses and lab procedures\n * \n * Overall, this class provides a comprehensive set of methods for managing a healthcare professional's interactions with hospitals and handling various actions related to patient care.\n */\n/**\n * This class contains a method to update the information of an office visit based on the provided EditOfficeVisitForm.\n * The method performs various checks and updates on the office visit including adding and removing diagnoses, procedures, immunizations, lab procedures, and prescriptions.\n * It also logs the transaction of editing the office visit.\n * \n * @param form the EditOfficeVisitForm containing the updated information for the office visit\n * @return a String indicating the result of the update operation, either \"success\" if the update was successful or an error message if an exception occurred\n */ \n*/\n/**\n * This class contains a method that checks for drug interactions between a given drug and a patient's prescribed medications within a specified date range. \n * It retrieves prescription reports and drug interactions from the database and compares them to identify any potential interactions.\n * If a drug interaction is found, it constructs a response message detailing the prescribed medication, interaction details, and description.\n * The method takes in the patient ID, start date, end date, and drug name as parameters.\n * \n * @param pid The patient ID for whom drug interactions are being checked.\n * @param startdate The start date of the date range for checking interactions.\n * @param enddate The end date of the date range for checking interactions.\n * @param drug The name of the drug for which interactions are being checked.\n * @return A response message indicating any drug interactions found with the prescribed medications.\n * @throws iTrustException If an error occurs while retrieving data from the database.\n */\npublic String hasInteraction(String pid, String startdate, String enddate, String drug) {\n    try {\n        // Replace '/' with '-' in dates for consistency\n        startdate = startdate.replaceAll(\"/\", \"-\");\n        enddate = enddate.replaceAll(\"/\", \"-\");\n        \n        // Retrieve prescription reports and drug interactions from the database\n        List<PrescriptionReportBean> prBeanList = ovDAO.getPrescriptionReportsByDate(Long.parseLong(pid), startdate, enddate);\n        List<DrugInteractionBean> dBeanList = drugDAO.getInteractions(drug);\n        \n        // Check for drug interactions between prescribed medications and the given drug\n        for (PrescriptionReportBean prBean : prBeanList) {\n            String presDrug = prBean.getPrescription().getMedication().getNDCode();\n            \n            for (DrugInteractionBean dBean : dBeanList) {\n                String intDrug1 = dBean.getFirstDrug();\n                String intDrug2 = dBean.getSecondDrug();\n                \n                if (presDrug.equals(intDrug1) && drug.equals(intDrug2)) {\n                    // Construct response message for drug interaction\n                    response += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \". Start Date: \" + prBean.getPrescription().getStartDateStr() + \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\n                    response += \"Interactions: \" + prBean.getPrescription().getMedication().getDescription() + \" - \" + ndcDAO.getNDCode((dBean.getSecondDrug())).getDescription() + \". \";\n                    response += \"Description: \" + dBean.getDescription() + \" \";\n                } else if (presDrug.equals(intDrug2) && drug.equals(intDrug1)) {\n                    // Construct response message for drug interaction\n                    response += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \". Start Date: \" + prBean.getPrescription().getStartDateStr() + \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\n                    response += \"Interactions: \" + prBean.getPrescription().getMedication().getDescription() + \" - \" + ndcDAO.getNDCode(dBean.getFirstDrug()).getDescription() + \". \";\n                    response += \"Description: \" + dBean.getDescription() + \" \";\n                }\n            }\n        }\n    } catch (DBException e) {\n        e.printStackTrace();\n        throw new iTrustException(e.getMessage());\n    } catch (ParseException e) {\n        e.printStackTrace();\n        throw new iTrustException(e.getMessage());\n    }\n    \n    return response;\n}\n*/\n/**\n * This class represents a DrugInteractionChecker that checks for drug interactions between a given drug and a patient's prescribed medications within a specified date range.\n * It provides a method hasInteraction() which takes the patient's ID, start date, end date, and drug as input parameters and returns information about any interactions found.\n * \n * The hasInteraction() method parses the input dates, retrieves prescription reports and drug interactions from the database, and compares them to identify any interactions.\n * It then constructs a response string containing details of the interactions found, including prescribed medication, start and end dates, interacting drugs, and description of the interaction.\n * \n * @author [Your Name]\n * @version 1.0\n * @since [Date]\n */\npublic class DrugInteractionChecker {\n\n    /**\n     * Checks for drug interactions between a given drug and a patient's prescribed medications within a specified date range.\n     * \n     * @param pid The patient's ID.\n     * @param startdate The start date of the date range in MM/dd/yyyy format.\n     * @param enddate The end date of the date range in MM/dd/yyyy format.\n     * @param drug The drug for which interactions are being checked.\n     * @return A String containing information about any interactions found, including the prescribed medication, start and end dates, interacting drugs, and description of the interaction.\n     * @throws iTrustException If there is an issue with database access or parsing dates.\n     */\n    public String hasInteraction(String pid, String startdate, String enddate, String drug) {\n        String response = \"\";\n        \n        try {\n            SimpleDateFormat original = new SimpleDateFormat(\"MM/dd/yyyy\");\n            SimpleDateFormat needed = new SimpleDateFormat(\"yyyy/MM/dd\");\n            Date start = original.parse(startdate);\n            startdate = needed.format(start);\n            Date end = original.parse(enddate);\n            enddate = needed.format(end);\n            startdate = startdate.replaceAll(\"/\", \"-\");\n            enddate = enddate.replaceAll(\"/\", \"-\");\n            \n            List<PrescriptionReportBean> prBeanList = ovDAO.getPrescriptionReportsByDate(Long.parseLong(pid), startdate, enddate);\n            List<DrugInteractionBean> dBeanList = drugDAO.getInteractions(drug);\n            \n            for (PrescriptionReportBean prBean : prBeanList) {\n                String presDrug = prBean.getPrescription().getMedication().getNDCode();\n                \n                for (DrugInteractionBean dBean : dBeanList) {\n                    String intDrug1 = dBean.getFirstDrug();\n                    String intDrug2 = dBean.getSecondDrug();\n                    \n                    if (presDrug.equals(intDrug1) && drug.equals(intDrug2)) {\n                        response += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \". Start Date: \" + prBean.getPrescription().getStartDateStr() + \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\n                    }\n                }\n            }\n        } catch (Exception e) {\n            // Handle exceptions\n        }\n        \n        return response;\n    }\n}\n```\nSure, here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class contains methods for checking drug interactions and allergies for a patient.\n * It provides functionality to determine if a prescribed drug interacts with other drugs in the patient's history,\n * as well as checking if a newly prescribed drug is on the patient's allergy list.\n * \n * The main method in this class, isDrugInteractingWithHistory, takes in prescription and drug information\n * and checks for interactions with previously prescribed drugs. It returns a response detailing any interactions found.\n * \n * The isAllergyOnList method checks if a newly prescribed drug is on the patient's allergy list. \n * It returns a response indicating whether the drug is an allergen for the patient.\n * \n * This class handles exceptions related to database operations and parsing errors, \n * throwing iTrustException with appropriate error messages.\n */\n \nI hope this JavaDoc comment provides a clear understanding of the purpose and functionality of the class. Let me know if you need any further clarification.\n* This class contains a method that creates an email to be sent to a patient regarding a prescribed dangerous drug. \n * The method takes in the patient's ID, the healthcare provider's ID, and information about the prescribed medication. \n * It retrieves the patient's email address, the healthcare provider's name, and constructs an email with a specific subject and body. \n * The email informs the patient that a potentially dangerous medication has been prescribed, either due to allergies or drug interactions. \n * The purpose of this method is to notify the patient of potential risks associated with the prescribed medication. \n * \n * @param patID the patient's ID\n * @param hcpID the healthcare provider's ID\n * @param problem information about the prescribed medication\n * @return an Email object containing the notification email to be sent to the patient\n */\n/**\n * This class contains methods related to managing prescriptions in a healthcare system. It provides functionality to create email notifications for patients when a healthcare provider prescribes potentially dangerous medications and to add prescriptions to office visits.\n * \n * The createEmailNotification method generates an email notification for a patient when a healthcare provider prescribes a medication that may pose a risk due to allergies or drug interactions. It takes the patient ID, healthcare provider ID, and the issue with the prescribed medication as parameters and returns an Email object containing the notification email.\n * \n * The checkAddPrescription method checks if a prescription should be added to an office visit based on the information provided in an EditOfficeVisitForm. If the form includes a medication ID and other necessary details, it validates the form, creates a PrescriptionBean object with the prescription information, logs the transaction, and adds the prescription to the specified office visit.\n * \n * Overall, this class facilitates the management of prescriptions by enabling the creation of email notifications for patients and the addition of prescriptions to office visits in a healthcare system.\n */\n**/\n/**\n * This class contains methods for adding and updating prescriptions and office visits in the system.\n * The checkAddPrescription method is used to add a new prescription to an existing office visit. It validates the form data, creates a new PrescriptionBean with the provided attributes, sets the medication details, and logs the transaction before adding the prescription to the office visit.\n * The updateOv method is used to update an existing office visit with the information provided in the EditOfficeVisitForm. It sets the new notes, visit date, HCP ID, patient ID, and hospital ID for the office visit before logging the transaction and updating the office visit in the database.\n * \n * @param form the EditOfficeVisitForm containing the necessary information for adding or updating prescriptions and office visits\n * @throws DBException if there is an issue with the database operations\n * @throws FormValidationException if there is an issue with the form validation\n */\n*/\n/**\n * This class represents a utility for managing office visits in a healthcare system.\n * It contains methods for validating form data, creating new OfficeVisitBean objects with updated information,\n * setting notes, visit date, HCP ID, patient ID, and hospital ID for office visits, logging transactions,\n * and updating office visits in the database using the OfficeVisitDAO.\n * \n * The class includes methods for checking and performing specific actions for adding sub actions to office visits,\n * such as adding diagnoses, immunizations, procedures, and lab procedures. These methods handle different scenarios\n * based on the type of sub action and input parameters.\n * \n * Overall, this class serves as a central component for managing office visits, ensuring data integrity, and facilitating\n * interactions between healthcare providers, patients, and the database. It plays a crucial role in maintaining accurate\n * and up-to-date information related to patient visits and medical procedures.\n */\n**/\n/**\n * This class represents a set of actions that can be added to an office visit. It provides methods to add sub actions to an office visit and remove sub actions from an office visit.\n * \n * The main functionalities of this class include:\n * - Adding a sub action to an office visit\n * - Removing a sub action from an office visit\n * \n * The behavior of this class is to validate input strings for adding or removing sub actions from an office visit. It checks if the input is valid and performs the corresponding action based on the type of sub action specified.\n * \n * @param subAction the OVSubAction object representing the sub action to be added\n * @param code the String code of the sub action\n * @param visitID the long ID of the office visit\n * @param hcpid the String ID of the healthcare provider\n * @return true if the sub action is successfully added to the office visit, false otherwise\n */\n */\n/**\n * The EditOfficeVisitAction class is responsible for handling actions related to editing office visits in the iTrust system.\n * It extends the EditHealthRecordsAction class and provides methods for removing diagnoses, procedures, medications, lab procedures, and immunizations from office visits.\n * \n * This class requires a DAOFactory, patient ID, office visit ID, and logged in MID to perform its actions. It utilizes various DAOs such as OfficeVisitDAO, PersonnelDAO, HospitalDAO, LabProcedureDAO, TransactionDAO, DrugInteractionDAO, AllergyDAO, NDCodesDAO, and PatientDAO to interact with the database.\n * \n * The main functionalities of this class include removing specific components from an office visit based on the provided removeID and action type. It also validates the patient ID and office visit ID before performing any actions.\n * \n * Overall, the EditOfficeVisitAction class plays a crucial role in managing and updating office visit information within the iTrust system, ensuring data accuracy and integrity.\n */\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString) {\n    super(factory, pidString, ovIDString);\n    pid = Long.parseLong(pidString);\n    ovDAO = factory.getOfficeVisitDAO();\n    this.personnelDAO = factory.getPersonnelDAO();\n    this.hospitalDAO = factory.getHospitalsDAO();\n    this.lpDAO = factory.getLabProcedureDAO();\n    this.transDAO = factory.getTransactionDAO();\n    this.drugDAO = factory.getDrugInteractionDAO();\n    this.allergyDAO = factory.getAllergyDAO();\n    this.ndcDAO = factory.getNDCodesDAO();\n    this.patDAO = factory.getPatientDAO();\n    this.loggedInMID = loggedInMID;\n}\n*/\n/**\n * The EditOfficeVisitAction class represents an action that allows editing office visits in the system.\n * It extends the OfficeVisitAction class and provides additional functionalities for editing office visits.\n * The class includes methods for validating office visit edits, accessing personnel, hospitals, lab procedures, transactions,\n * drug interactions, allergies, patient information, NDC codes, and managing the logged-in MID and PID.\n * \n * @author [Author Name]\n * @version 1.0\n * @since [Date]\n */"
    }
]