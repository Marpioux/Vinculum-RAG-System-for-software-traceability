[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    OfficeVisitBean officeVisit = ovDAO.getOfficeVisit(ovID);\r\n    transDAO.logTransaction(TransactionType.VIEW_OFFICE_VISIT, loggedInMID, pid, \"EditOffceVisit - View office visits\");\r\n    return officeVisit;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public OfficeVisitBean getOfficeVisit()",
                "comments": "Optional[/**\r\n * Returns the office visit bean for the office visit\r\n *\r\n * @return the OfficeVisitBean of the office visit\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    transDAO.logTransaction(TransactionType.VIEW_LAB_PROCEDURE, loggedInMID, pid, \"EditOffceVisit - View lab procedures\");\r\n    return lpDAO.getAllLabProceduresForDocOV(mid, ovid);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public List<LabProcedureBean> getLabProcedures(long, long)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    List<HospitalBean> hcpsHospitals = personnelDAO.getHospitals(hcpID);\r\n    List<HospitalBean> allHospitals = hospitalDAO.getAllHospitals();\r\n    return combineLists(hcpsHospitals, allHospitals);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<HospitalBean> getHospitals(long)",
                "comments": "Optional[/**\r\n * This is a list of all hospitals, ordered by the office visit's hcp FIRST\r\n *\r\n * @param hcpID\r\n * @return\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    for (HospitalBean hos : allHospitals) {\r\n        if (!hcpsHospitals.contains(hos))\r\n            hcpsHospitals.add(hos);\r\n    }\r\n    return hcpsHospitals;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private List<HospitalBean> combineLists(List<HospitalBean>, List<HospitalBean>)",
                "comments": "Optional[/**\r\n * Combines two lists of hospitals\r\n *\r\n * @param hcpsHospitals hospitals the HCP is assigned to\r\n * @param allHospitals all hopsitals\r\n * @return the combined list\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String confirm = \"\";\r\n    try {\r\n        checkAddSubAction(OVSubAction.ADD_DIAGNOSIS, form.getAddDiagID(), ovID, null);\r\n        checkAddSubAction(OVSubAction.ADD_PROCEDURE, form.getAddProcID(), ovID, null);\r\n        checkAddSubAction(OVSubAction.ADD_IMMUNIZATION, form.getAddImmunizationID(), ovID, null, form.getHcpID());\r\n        checkAddSubAction(OVSubAction.ADD_LAB_PROCEDURE, form.getAddLabProcID(), ovID, null);\r\n        checkAddPrescription(form, ovID);\r\n        checkRemoveSubAction(OVSubAction.REMOVE_DIAGNOSIS, form.getRemoveDiagID());\r\n        checkRemoveSubAction(OVSubAction.REMOVE_LAB_PROCEDURE, form.getRemoveLabProcID());\r\n        checkRemoveSubAction(OVSubAction.REMOVE_PROCEDURE, form.getRemoveProcID());\r\n        checkRemoveSubAction(OVSubAction.REMOVE_IMMUNIZATION, form.getRemoveImmunizationID());\r\n        checkRemoveSubAction(OVSubAction.REMOVE_MEDICATION, form.getRemoveMedID());\r\n        updateOv(form);\r\n        transDAO.logTransaction(TransactionType.DOCUMENT_OFFICE_VISIT, loggedInMID, getOfficeVisit().getPatientID(), \"EditOfficeVisit - edited office visit \" + ovID);\r\n        confirm = \"success\";\r\n        return confirm;\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String updateInformation(EditOfficeVisitForm)",
                "comments": "Optional[/**\r\n * Updates the office visit with information from the form passed in\r\n *\r\n * @param form\r\n *            information to update\r\n * @return \"success\" or exception's message\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String response = \"\";\r\n    try {\r\n        SimpleDateFormat original = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat needed = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n        Date start = original.parse(startdate);\r\n        startdate = needed.format(start);\r\n        Date end = original.parse(enddate);\r\n        enddate = needed.format(end);\r\n        startdate = startdate.replaceAll(\"/\", \"-\");\r\n        enddate = enddate.replaceAll(\"/\", \"-\");\r\n        List<PrescriptionReportBean> prBeanList = ovDAO.getPrescriptionReportsByDate(Long.parseLong(pid), startdate, enddate);\r\n        List<DrugInteractionBean> dBeanList = drugDAO.getInteractions(drug);\r\n        for (PrescriptionReportBean prBean : prBeanList) {\r\n            String presDrug = prBean.getPrescription().getMedication().getNDCode();\r\n            for (DrugInteractionBean dBean : dBeanList) {\r\n                String intDrug1 = dBean.getFirstDrug();\r\n                String intDrug2 = dBean.getSecondDrug();\r\n                if (presDrug.equals(intDrug1) && drug.equals(intDrug2)) {\r\n                    response += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \". Start Date: \" + prBean.getPrescription().getStartDateStr() + \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\r\n                    response += \"Interactions: \" + prBean.getPrescription().getMedication().getDescription() + \" - \" + ndcDAO.getNDCode((dBean.getSecondDrug())).getDescription() + \". \";\r\n                    response += \"Description: \" + dBean.getDescription() + \"  \";\r\n                } else if (presDrug.equals(intDrug2) && drug.equals(intDrug1)) {\r\n                    response += \"Currently Prescribed: \" + prBean.getPrescription().getMedication().getDescription() + \". Start Date: \" + prBean.getPrescription().getStartDateStr() + \", End Date: \" + prBean.getPrescription().getEndDateStr() + \". \";\r\n                    response += \"Interactions: \" + prBean.getPrescription().getMedication().getDescription() + \" - \" + ndcDAO.getNDCode(dBean.getFirstDrug()).getDescription() + \". \";\r\n                    response += \"Description: \" + dBean.getDescription() + \"  \";\r\n                }\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return response;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public String hasInteraction(String, String, String, String)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String response = \"\";\r\n    try {\r\n        List<AllergyBean> allergyList = allergyDAO.getAllergies(Long.parseLong(patMID));\r\n        if (allergyList.isEmpty())\r\n            return response;\r\n        MedicationBean medBean = ndcDAO.getNDCode(ndcode);\r\n        if (medBean == null)\r\n            return response;\r\n        String newDrug = medBean.getDescription();\r\n        for (AllergyBean allergyBean : allergyList) {\r\n            String currentAllerDrug = allergyBean.getDescription();\r\n            //Allergy: Aspirin. First Found: 12/20/2008.\r\n            if (newDrug.equals(currentAllerDrug)) {\r\n                response += \"Allergy: \" + newDrug + \". First Found: \" + allergyBean.getFirstFoundStr();\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return response;\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public String isAllergyOnList(String, String)",
                "comments": null,
                "innerComments": "Optional[[//Allergy: Aspirin. First Found: 12/20/2008.\r\n]]"
            },
            {
                "body": "Optional[{\r\n    PatientBean p = patDAO.getPatient(Long.parseLong(patID));\r\n    String hcpName = personnelDAO.getName(hcpID);\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"HCP has prescribed you a potentially dangerous medication\");\r\n    email.setBody(String.format(\"%s has prescribed a medication that you are allergic to or that has a known interaction with a drug you are currently taking. %s\", hcpName, problem));\r\n    return email;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public Email makeEmailApp(long, String, String)",
                "comments": "Optional[/**\r\n * Sends e-mail regarding the prescribed dangerous drug.\r\n *\r\n * @param hcpID HCP the prescription is made by\r\n * @param patID ID of the patient prescription is for\r\n * @param problem The allergy and/or interaction that is the problem\r\n * @return the sent e-mail\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (form.getAddMedID() != null && !\"\".equals(form.getAddMedID())) {\r\n        new EditOfficeVisitValidator(true).validate(form);\r\n        PrescriptionBean pres = new PrescriptionBean();\r\n        pres.setDosage(Integer.valueOf(form.getDosage()));\r\n        pres.setEndDateStr(form.getEndDate());\r\n        pres.setStartDateStr(form.getStartDate());\r\n        pres.setInstructions(form.getInstructions());\r\n        MedicationBean med = new MedicationBean();\r\n        med.setNDCode(form.getAddMedID());\r\n        pres.setMedication(med);\r\n        pres.setVisitID(ovID);\r\n        transDAO.logTransaction(TransactionType.ADD_PRESCRIPTION, loggedInMID, pid, \"EditOffceVisit - Add prescription - \" + pres.getMedication().getNDCode());\r\n        ovDAO.addPrescription(pres);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private void checkAddPrescription(EditOfficeVisitForm, long)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    validator.validate(form);\r\n    OfficeVisitBean ov = new OfficeVisitBean(ovID);\r\n    ov.setNotes(form.getNotes());\r\n    ov.setVisitDateStr(form.getVisitDate());\r\n    ov.setHcpID(Long.valueOf(form.getHcpID()));\r\n    ov.setPatientID(Long.valueOf(form.getPatientID()));\r\n    ov.setHospitalID(form.getHospitalID());\r\n    transDAO.logTransaction(TransactionType.UPDATE_OFFICE_VISIT, loggedInMID, pid, \"EditOffceVisit - Update office visit\");\r\n    ovDAO.update(ov);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void updateOv(EditOfficeVisitForm)",
                "comments": "Optional[/**\r\n * Updates the office visit.\r\n *\r\n * @param form form with all the information\r\n * @throws DBException\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (code == null || \"\".equals(code)) {\r\n        return false;\r\n    } else {\r\n        switch(action) {\r\n            case ADD_DIAGNOSIS:\r\n                ovDAO.addDiagnosisToOfficeVisit(Double.valueOf(code), visitID);\r\n                break;\r\n            case ADD_IMMUNIZATION:\r\n            case ADD_PROCEDURE:\r\n                ovDAO.addProcedureToOfficeVisit(code, visitID, \"\");\r\n                break;\r\n            case ADD_LAB_PROCEDURE:\r\n                ovDAO.addLabProcedureToOfficeVisit(code, visitID, pid);\r\n                break;\r\n            default:\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private boolean checkAddSubAction(OVSubAction, String, long, String)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (code == null || \"\".equals(code)) {\r\n        return false;\r\n    } else {\r\n        ovDAO.addProcedureToOfficeVisit(code, visitID, hcpid);\r\n        return true;\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private boolean checkAddSubAction(OVSubAction, String, long, String, String)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (input == null || \"\".equals(input))\r\n        return false;\r\n    long removeID;\r\n    try {\r\n        removeID = Long.valueOf(input);\r\n    } catch (NumberFormatException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    }\r\n    switch(action) {\r\n        case REMOVE_DIAGNOSIS:\r\n            ovDAO.removeDiagnosisFromOfficeVisit(removeID);\r\n            break;\r\n        case REMOVE_IMMUNIZATION:\r\n        case REMOVE_PROCEDURE:\r\n            ovDAO.removeProcedureFromOfficeVisit(removeID);\r\n            break;\r\n        case REMOVE_MEDICATION:\r\n            ovDAO.removePrescription(removeID);\r\n            break;\r\n        case REMOVE_LAB_PROCEDURE:\r\n            ovDAO.removeLabProcedureFromOfficeVisit(removeID);\r\n            break;\r\n    }\r\n    return true;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private boolean checkRemoveSubAction(OVSubAction, String)",
                "comments": null,
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(factory, pidString, ovIDString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.lpDAO = factory.getLabProcedureDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.drugDAO = factory.getDrugInteractionDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.ndcDAO = factory.getNDCodesDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public EditOfficeVisitAction(DAOFactory, long, String, String)",
                "comments": "Optional[/**\r\n * Patient id and office visit id validated by super class\r\n *\r\n * @param factory The DAOFactory to be used in creating the DAOs for this action.\r\n * @param loggedInMID The MID of the user who is authorizing this action.\r\n * @param pidString The patient who this action is performed on.\r\n * @param ovIDString The ID of the office visit in play.\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "signature": "EditOfficeVisitAction",
        "variables": [
            "private EditOfficeVisitValidator validator",
            "private PersonnelDAO personnelDAO",
            "private HospitalsDAO hospitalDAO",
            "private OfficeVisitDAO ovDAO",
            "private LabProcedureDAO lpDAO",
            "private TransactionDAO transDAO",
            "private DrugInteractionDAO drugDAO",
            "private AllergyDAO allergyDAO",
            "private PatientDAO patDAO",
            "private NDCodesDAO ndcDAO",
            "private long loggedInMID",
            "private long pid"
        ]
    }
]