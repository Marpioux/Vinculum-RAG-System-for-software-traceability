[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"LOINC\", b.getLoinc(), ValidationFormat.LOINC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Commentary\", b.getCommentary(), ValidationFormat.COMMENTS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Results\", b.getCommentary(), ValidationFormat.COMMENTS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Status\", b.getStatus(), ValidationFormat.LAB_STATUS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Rights\", b.getRights(), ValidationFormat.LAB_RIGHTS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void validate(LabProcedureBean)",
                "comments": "Optional[/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p A bean of the type to be validated.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Validates a LabProcedureBean object by checking the format of its attributes.\n * \n * @param b the LabProcedureBean object to validate\n * @throws FormValidationException if any validation errors are found\n */\npublic void validate(LabProcedureBean b) {\n    ErrorList errorList = new ErrorList();\n    errorList.addIfNotNull(checkFormat(\"LOINC\", b.getLoinc(), ValidationFormat.LOINC, false));\n    errorList.addIfNotNull(checkFormat(\"Commentary\", b.getCommentary(), ValidationFormat.COMMENTS, true));\n    errorList.addIfNotNull(checkFormat(\"Results\", b.getCommentary(), ValidationFormat.COMMENTS, true));\n    errorList.addIfNotNull(checkFormat(\"Status\", b.getStatus(), ValidationFormat.LAB_STATUS, false));\n    errorList.addIfNotNull(checkFormat(\"Rights\", b.getRights(), ValidationFormat.LAB_RIGHTS, false));\n    \n    if (errorList.hasErrors()) {\n        throw new FormValidationException(errorList);\n    }\n}"
            },
            {
                "body": "Optional[{\r\n    String errorMessage = name + \": \" + format.getDescription();\r\n    if (value == null || \"\".equals(value))\r\n        return isNullable ? \"\" : errorMessage;\r\n    if (format.getRegex().matcher(value).matches())\r\n        return \"\";\r\n    else\r\n        return errorMessage;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "protected String checkFormat(String, String, ValidationFormat, boolean)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a given value matches a specified validation format.\n * \n * @param name the name of the value being checked\n * @param value the value to be checked against the validation format\n * @param format the validation format to be applied\n * @param isNullable flag indicating if the value can be null or empty\n * @return an error message if the value does not match the validation format, \n *         or an empty string if the value is valid or nullable\n */\nprotected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\n    String errorMessage = name + \": \" + format.getDescription();\n    if (value == null || \"\".equals(value))\n        return isNullable ? \"\" : errorMessage;\n    if (format.getRegex().matcher(value).matches())\n        return \"\";\n    else\n        return errorMessage;\n}\n```"
            }
        ],
        "constructors": [],
        "signature": "LabProcedureValidator",
        "variables": [],
        "generated_class_comment": "/**\n * The LabProcedureValidator class is responsible for validating LabProcedureBean objects by checking the format of their attributes.\n * \n * This class contains a method, validate, which takes a LabProcedureBean object as input and performs validation on its attributes.\n * If any validation errors are found, a FormValidationException is thrown.\n * \n * The validate method checks the format of the LOINC code, commentary, results, status, and rights attributes of the LabProcedureBean.\n * It uses the ErrorList class to collect any validation errors and throws a FormValidationException if errors are present.\n * \n * This class also includes a JavaDoc comment for the validate method, which explains its purpose and usage.\n * \n * Overall, the LabProcedureValidator class provides a way to ensure that LabProcedureBean objects meet the required format standards before further processing.\n */\npublic class LabProcedureValidator {\n    // class implementation goes here\n}\n**/\n/**\n * The LabProcedureValidator class is responsible for validating lab procedure data\n * according to specified validation formats. It provides methods for checking the\n * validity of various data fields such as name, code, and description based on\n * predefined formats. Additionally, it allows for checking if a value matches a\n * specified validation format and provides error messages if validation fails.\n * \n * This class encapsulates the logic for validating lab procedure information and\n * ensures that data entered meets the required criteria. It helps maintain data\n * integrity and accuracy by enforcing validation rules and providing feedback on\n * invalid data entries.\n * \n * The main functionalities of the LabProcedureValidator class include:\n * - Validating lab procedure name, code, and description fields\n * - Checking if a value matches a specified validation format\n * - Generating error messages for invalid data entries\n * \n * Overall, the LabProcedureValidator class serves as a crucial component in\n * ensuring the quality and consistency of lab procedure data within an application.\n */\n**/"
    }
]