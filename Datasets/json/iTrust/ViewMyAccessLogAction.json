[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    List<TransactionBean> accesses;\r\n    if (lowerDate == null || upperDate == null)\r\n        return transDAO.getAllRecordAccesses(loggedInMID, getByRole);\r\n    String message = \"\";\r\n    try {\r\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\r\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\r\n        if (lower.after(upper))\r\n            throw new FormValidationException(\"Start date must be before end date!\");\r\n        message = \"for dates between \" + lowerDate + \" and \" + upperDate;\r\n        transDAO.logTransaction(TransactionType.VIEW_ACCESS_LOG, loggedInMID, 0L, message);\r\n        accesses = transDAO.getRecordAccesses(loggedInMID, lower, upper, getByRole);\r\n    } catch (ParseException e) {\r\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\r\n    }\r\n    return accesses;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<TransactionBean> getAccesses(String, String, boolean)",
                "comments": "Optional[/**\r\n * Returns a list of TransactionBeans between the two dates passed as params\r\n *\r\n * @param lowerDate\r\n *            the first date\r\n * @param upperDate\r\n *            the second date\r\n * @return list of TransactionBeans\r\n * @throws DBException\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of TransactionBean objects representing record accesses within a specified date range.\n * If either lowerDate or upperDate is null, all record accesses are returned.\n * \n * @param lowerDate the lower bound of the date range in MM/dd/yyyy format\n * @param upperDate the upper bound of the date range in MM/dd/yyyy format\n * @param getByRole a boolean indicating whether to filter record accesses by role\n * @return a list of TransactionBean objects representing record accesses within the specified date range\n * @throws FormValidationException if the date format is incorrect or if the start date is after the end date\n */\npublic List<TransactionBean> getAccesses(String lowerDate, String upperDate, boolean getByRole) {\n    List<TransactionBean> accesses;\n    if (lowerDate == null || upperDate == null)\n        return transDAO.getAllRecordAccesses(loggedInMID, getByRole);\n    String message = \"\";\n    try {\n        Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\n        Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\n        if (lower.after(upper))\n            throw new FormValidationException(\"Start date must be before end date!\");\n        message = \"for dates between \" + lowerDate + \" and \" + upperDate;\n        transDAO.logTransaction(TransactionType.VIEW_ACCESS_LOG, loggedInMID, 0L, message);\n        accesses = transDAO.getRecordAccesses(loggedInMID, lower, upper, getByRole);\n    } catch (ParseException e) {\n        throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\n    }\n    return accesses;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    String startDate = \"\";\r\n    if (accesses.size() > 0) {\r\n        startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(accesses.get(accesses.size() - 1).getTimeLogged().getTime()));\r\n    } else {\r\n        startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    }\r\n    return startDate;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getDefaultStart(List<TransactionBean>)",
                "comments": "Optional[/**\r\n * Returns the date of the first Transaction in the list passed as a param if the list is not empty\r\n * otherwise, returns today's date\r\n *\r\n * @param accesses A java.util.List of TransactionBeans for the accesses.\r\n * @return A String representing the date of the first transaction.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns the default start date for a list of transaction beans.\n * If the list is not empty, the start date is set to the date of the last transaction logged.\n * If the list is empty, the start date is set to the current date.\n * \n * @param accesses a list of TransactionBean objects\n * @return a String representing the default start date in the format \"MM/dd/yyyy\"\n */"
            },
            {
                "body": "Optional[{\r\n    String endDate = \"\";\r\n    if (accesses.size() > 0) {\r\n        endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date(accesses.get(0).getTimeLogged().getTime()));\r\n    } else {\r\n        endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(new Date());\r\n    }\r\n    return endDate;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getDefaultEnd(List<TransactionBean>)",
                "comments": "Optional[/**\r\n * Returns the date of the last Transaction in the list passed as a param if the list is not empty\r\n * otherwise, returns today's date\r\n *\r\n * @param accesses A java.util.List of TransactionBeans storing the access.\r\n * @return A String representation of the date of the last transaction.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns the default end date for a list of transaction beans.\n * If the list is not empty, the end date is set to the date of the first transaction.\n * If the list is empty, the end date is set to the current date.\n * \n * @param accesses a list of TransactionBean objects\n * @return a String representing the default end date in the format \"MM/dd/yyyy\"\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ViewMyAccessLogAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Set up\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the person retrieving the logs.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ViewMyAccessLogAction object with the given DAOFactory and logged in member ID.\n * \n * @param factory the DAOFactory used to retrieve the TransactionDAO\n * @param loggedInMID the ID of the logged in member\n */\npublic ViewMyAccessLogAction(DAOFactory factory, long loggedInMID) {\n    this.loggedInMID = loggedInMID;\n    this.transDAO = factory.getTransactionDAO();\n}\n*/"
            }
        ],
        "signature": "ViewMyAccessLogAction",
        "variables": [
            "private TransactionDAO transDAO",
            "private long loggedInMID"
        ],
        "generated_class_comment": "/**\n * This class represents a service for retrieving record accesses within a specified date range.\n * It provides methods to get a list of TransactionBean objects between two dates, log transactions, and handle form validation exceptions.\n * \n * The main functionality of this class is to retrieve record accesses based on the date range provided by the user.\n * If either lowerDate or upperDate is null, all record accesses are returned.\n * \n * The class contains a method getAccesses(String lowerDate, String upperDate, boolean getByRole) that returns a list of TransactionBean objects representing record accesses within the specified date range.\n * It also logs a transaction of type VIEW_ACCESS_LOG with the user's ID and a message indicating the date range.\n * \n * If the date format is incorrect or the start date is after the end date, a FormValidationException is thrown.\n * \n * @author [Author Name]\n * @version 1.0\n * @since [Date]\n */\npublic class RecordAccessService {\n    /**\n     * Returns a list of TransactionBeans between the two dates passed as params\n     * \n     * @param lowerDate the first date in MM/dd/yyyy format\n     * @param upperDate the second date in MM/dd/yyyy format\n     * @param getByRole a boolean indicating whether to filter record accesses by role\n     * @return list of TransactionBeans representing record accesses within the specified date range\n     * @throws FormValidationException if the date format is incorrect or if the start date is after the end date\n     */\n    public List<TransactionBean> getAccesses(String lowerDate, String upperDate, boolean getByRole) {\n        List<TransactionBean> accesses;\n        if (lowerDate == null || upperDate == null)\n            return transDAO.getAllRecordAccesses(loggedInMID, getByRole);\n        String message = \"\";\n        try {\n            Date lower = new SimpleDateFormat(\"MM/dd/yyyy\").parse(lowerDate);\n            Date upper = new SimpleDateFormat(\"MM/dd/yyyy\").parse(upperDate);\n            if (lower.after(upper))\n                throw new FormValidationException(\"Start date must be before end date!\");\n            message = \"for dates between \" + lowerDate + \" and \" + upperDate;\n            transDAO.logTransaction(TransactionType.VIEW_ACCESS_LOG, loggedInMID, 0L, message);\n            accesses = transDAO.getRecordAccesses(loggedInMID, lower, upper, getByRole);\n        } catch (ParseException e) {\n            throw new FormValidationException(\"Enter dates in MM/dd/yyyy\");\n        }\n        return accesses;\n    }\n}\n**/\n* accesses A java.util.List of TransactionBeans for the accesses.\n * @return A String representing the date of the first transaction.\n */\n/**\n * This class represents an action to view the access log of a user. It provides methods to retrieve and display access log information.\n * \n * The class includes methods to get the default start and end dates for the access log, as well as to retrieve a list of TransactionBean objects.\n * \n * The getDefaultStart method returns the default start date for the access log. If the list of transactions is not empty, it returns the date of the first transaction. Otherwise, it returns today's date.\n * \n * The getDefaultEnd method returns the default end date for the access log. If the list of transactions is not empty, it returns the date of the last transaction. Otherwise, it returns today's date.\n * \n * The class also includes a constructor to set up the ViewMyAccessLogAction object with the DAOFactory and the logged in member ID.\n * \n * @param factory The DAOFactory used to create the DAOs used in this action.\n * @param loggedInMID The MID of the person retrieving the logs.\n */\n*/\n/**\n * This class represents an action to view the access log of the logged in member.\n * It allows the logged in member to retrieve and view their access log information.\n * The class requires a DAOFactory and the ID of the logged in member to be instantiated.\n * \n * @param loggedInMID the ID of the logged in member\n */\npublic ViewMyAccessLogAction(DAOFactory factory, long loggedInMID) {\n    this.loggedInMID = loggedInMID;\n    this.transDAO = factory.getTransactionDAO();\n}\n*/"
    }
]