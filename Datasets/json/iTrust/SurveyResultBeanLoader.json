[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    ArrayList<SurveyResultBean> list = new ArrayList<SurveyResultBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    }\r\n    return list;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public List<SurveyResultBean> loadList(ResultSet)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads a list of SurveyResultBean objects from a ResultSet.\n * \n * @param rs the ResultSet containing the data to be loaded into SurveyResultBean objects\n * @return a List of SurveyResultBean objects populated with data from the ResultSet\n */\npublic List<SurveyResultBean> loadList(ResultSet rs) {\n    ArrayList<SurveyResultBean> list = new ArrayList<SurveyResultBean>();\n    while (rs.next()) {\n        list.add(loadSingle(rs));\n    }\n    return list;\n}"
            },
            {
                "body": "Optional[{\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public PreparedStatement loadParameters(PreparedStatement, SurveyResultBean)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads the parameters of a SurveyResultBean into a PreparedStatement.\n * \n * @param preparedStatement the PreparedStatement to load the parameters into\n * @param surveyResultBean the SurveyResultBean containing the parameters to be loaded\n * @return the PreparedStatement with the parameters loaded\n * @throws IllegalStateException if the method is not implemented\n */"
            },
            {
                "body": "Optional[{\r\n    SurveyResultBean surveyResult = new SurveyResultBean();\r\n    surveyResult.setHCPMID(rs.getLong(\"mid\"));\r\n    surveyResult.setAvgExamRoomMinutes(rs.getFloat(\"AvgExamRoomMinutes\"));\r\n    surveyResult.setAvgTreatmentSatisfaction(rs.getFloat(\"AvgTreatmentSatisfation\"));\r\n    surveyResult.setAvgVisitSatisfaction(rs.getFloat(\"AvgVisitSatisfaction\"));\r\n    surveyResult.setAvgWaitingRoomMinutes(rs.getFloat(\"AvgWaitingRoomMinutes\"));\r\n    surveyResult.setHCPaddress1(rs.getString(\"address1\"));\r\n    surveyResult.setHCPaddress2(rs.getString(\"address2\"));\r\n    surveyResult.setHCPcity(rs.getString(\"city\"));\r\n    surveyResult.setHCPstate(rs.getString(\"state\"));\r\n    surveyResult.setHCPzip(rs.getString(\"zip\"));\r\n    surveyResult.setHCPhospital(rs.getString(\"hospitalID\"));\r\n    surveyResult.setHCPFirstName(rs.getString(\"firstName\"));\r\n    surveyResult.setHCPLastName(rs.getString(\"lastName\"));\r\n    surveyResult.setHCPspecialty(rs.getString(\"specialty\"));\r\n    surveyResult.setPercentSatisfactionResults(rs.getFloat(\"PercentSatisfactionResults\"));\r\n    return surveyResult;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public SurveyResultBean loadSingle(ResultSet)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads a single SurveyResultBean object from the given ResultSet.\n * \n * @param rs the ResultSet containing the survey result data\n * @return the SurveyResultBean object populated with data from the ResultSet\n * \n * This method creates a new SurveyResultBean object and sets its properties based on the data\n * retrieved from the ResultSet. The properties include HCPMID, AvgExamRoomMinutes, AvgTreatmentSatisfaction,\n * AvgVisitSatisfaction, AvgWaitingRoomMinutes, HCPaddress1, HCPaddress2, HCPcity, HCPstate, HCPzip,\n * HCPhospital, HCPFirstName, HCPLastName, HCPspecialty, and PercentSatisfactionResults.\n * \n * @throws SQLException if there is an error accessing data from the ResultSet\n */"
            }
        ],
        "constructors": [],
        "signature": "SurveyResultBeanLoader",
        "variables": [],
        "generated_class_comment": "/**\n * This class represents a utility class for handling SurveyResultBean objects. It provides methods for loading a list of SurveyResultBean objects from a ResultSet, loading parameters of a SurveyResultBean into a PreparedStatement, and loading individual SurveyResultBean objects from a ResultSet.\n * \n * The main functionalities of this class include:\n * - Loading a list of SurveyResultBean objects from a ResultSet using the loadList method\n * - Loading parameters of a SurveyResultBean into a PreparedStatement using the loadParameters method\n * - Loading individual SurveyResultBean objects from a ResultSet using the loadSingle method\n * \n * The overall behavior of this class is to facilitate the loading and manipulation of SurveyResultBean objects from database queries. It provides convenient methods for extracting data from ResultSets and populating SurveyResultBean objects with the retrieved data.\n */\npublic class SurveyResultBeanUtil {\n    /**\n     * Loads a list of SurveyResultBean objects from a ResultSet.\n     * \n     * @param rs the ResultSet containing the data to be loaded into SurveyResultBean objects\n     * @return a List of SurveyResultBean objects populated with data from the ResultSet\n     */\n    public List<SurveyResultBean> loadList(ResultSet rs) {\n        ArrayList<SurveyResultBean> list = new ArrayList<SurveyResultBean>();\n        while (rs.next()) {\n            list.add(loadSingle(rs));\n        }\n        return list;\n    }\n\n    /**\n     * Loads the parameters of a SurveyResultBean into a PreparedStatement.\n     * \n     * @param preparedStatement the PreparedStatement to load the parameters into\n     * @param surveyResultBean the SurveyResultBean containing the parameters to be loaded\n     * @return the PreparedStatement with the parameters loaded\n     * @throws IllegalStateException if the method is not implemented\n     */\n    public PreparedStatement loadParameters(PreparedStatement preparedStatement, SurveyResultBean surveyResultBean) {\n        throw new IllegalStateException(\"unimplemented!\");\n    }\n\n    /**\n     * Loads an individual SurveyResultBean object from a ResultSet.\n     * \n     * @param rs the ResultSet containing the data to be loaded into a SurveyResultBean object\n     * @return a SurveyResultBean object populated with data from the ResultSet\n     */\n    private SurveyResultBean loadSingle(ResultSet rs) {\n        SurveyResultBean surveyResult = new SurveyResultBean();\n        surveyResult.setHCPMID(rs.getLong(\"mid\"));\n        surveyResult.setAvgExamRoomMinutes(rs.getFloat(\"AvgExamRoomMinutes\"));\n        surveyResult.setAvgTreatmentSatisfaction(rs.getFloat(\"AvgTreatmentSatisfation\"));\n        surveyResult.setAvgVisitSatisfaction(rs.getFloat(\"AvgVisitSatisfaction\"));\n        surveyResult.setAvgWaitingRoomMinutes(rs.getFloat(\"AvgWaitingRoomMinutes\"));\n        return surveyResult;\n    }\n}\n*/\n/**\n * The SurveyResultBeanLoader class is responsible for loading SurveyResultBean objects from a ResultSet.\n * It provides a method to load a single SurveyResultBean object from the given ResultSet.\n * \n * This class handles the extraction of data from the ResultSet and populates a SurveyResultBean object\n * with properties such as HCPMID, AvgExamRoomMinutes, AvgTreatmentSatisfaction, AvgVisitSatisfaction,\n * AvgWaitingRoomMinutes, HCPaddress1, HCPaddress2, HCPcity, HCPstate, HCPzip, HCPhospital, HCPFirstName,\n * HCPLastName, HCPspecialty, and PercentSatisfactionResults.\n * \n * The loadSingle method takes a ResultSet as input and returns a populated SurveyResultBean object.\n * It sets the properties of the SurveyResultBean object based on the data retrieved from the ResultSet.\n * \n * This class is essential for retrieving and processing survey result data from a database and converting\n * it into SurveyResultBean objects for further analysis and reporting.\n * \n * @author [Your Name]\n * @version 1.0\n * @since [Date]\n */"
    }
]