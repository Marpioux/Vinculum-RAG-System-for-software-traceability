[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return patientDAO.getPatient(patientID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PatientBean getPatient(long)",
                "comments": "Optional[/**\r\n * Gets a PatientBean from an MID\r\n *\r\n * @param patientID MID of the patient\r\n * @return PatientBean for the MID given\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a patient from the database based on the given patient ID.\n * \n * @param patientID the unique identifier of the patient to retrieve\n * @return the PatientBean object representing the patient with the specified ID\n */"
            },
            {
                "body": "Optional[{\r\n    return patientDAO.getRepresented(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PatientBean> getRepresentees()",
                "comments": "Optional[/**\r\n * Gets the logged in person's representees\r\n *\r\n * @return list of PatientBeans holding the representees\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of PatientBeans representing patients that are being represented by the currently logged in user.\n * \n * @return A List of PatientBeans representing patients being represented by the currently logged in user.\n */"
            },
            {
                "body": "Optional[{\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PersonnelBean getPrescribingDoctor(PrescriptionBean)",
                "comments": "Optional[/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription item in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the prescribing doctor associated with the given prescription.\n * \n * @param prescription the PrescriptionBean object for which to retrieve the prescribing doctor\n * @return the PersonnelBean object representing the prescribing doctor\n */"
            },
            {
                "body": "Optional[{\r\n    PatientBean patient = patientDAO.getPatient(patientID);\r\n    if (loggedInMID == patientID) {\r\n        transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\r\n        return patientDAO.getPrescriptions(patientID);\r\n    }\r\n    List<String> toList = new ArrayList<String>();\r\n    toList.add(patient.getEmail());\r\n    List<PatientBean> representatives = patientDAO.getRepresenting(patientID);\r\n    for (PatientBean representative : representatives) {\r\n        if (loggedInMID == representative.getMID()) {\r\n            transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\r\n            return patientDAO.getPrescriptions(patientID);\r\n        }\r\n        toList.add(representative.getEmail());\r\n    }\r\n    List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);\r\n    for (PersonnelBean dlhcp : dlhcps) {\r\n        if (loggedInMID == dlhcp.getMID()) {\r\n            transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\r\n            return patientDAO.getPrescriptions(patientID);\r\n        }\r\n        List<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());\r\n        for (PersonnelBean uap : uaps) {\r\n            if (loggedInMID == uap.getMID()) {\r\n                transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\r\n                return patientDAO.getPrescriptions(patientID);\r\n            }\r\n        }\r\n    }\r\n    Email email = new Email();\r\n    email.setToList(toList);\r\n    //$NON-NLS-1$\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    //$NON-NLS-1$\r\n    email.setSubject(Messages.getString(\"ViewPrescriptionRecordsAction.1\"));\r\n    //$NON-NLS-1$\r\n    email.setBody(Messages.getString(\"ViewPrescriptionRecordsAction.2\"));\r\n    emailer.sendEmail(email);\r\n    transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\r\n    return patientDAO.getPrescriptions(patientID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public List<PrescriptionBean> getPrescriptionsForPatient(long)",
                "comments": "Optional[/**\r\n * Returns all the prescriptions for a given patient\r\n *\r\n * @param patientID patient in question\r\n * @return list of all the prescriptions for that patient\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": "Optional[[//$NON-NLS-1$\r\n, //$NON-NLS-1$\r\n, //$NON-NLS-1$\r\n]]",
                "generated_comment": "/**\n * Retrieves a list of prescriptions for a given patient based on the logged-in user's permissions.\n * If the logged-in user is the patient or a representative, their prescriptions are returned.\n * If the logged-in user is a declared HCP or UAP for the patient, their prescriptions are returned.\n * If the logged-in user does not have permission to view the prescriptions, an email notification is sent to the appropriate parties.\n * \n * @param patientID the ID of the patient for whom prescriptions are being retrieved\n * @return a list of PrescriptionBean objects representing the prescriptions for the patient\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ViewPrescriptionRecordsAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Set up defaults\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the person viewing prescription records.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ViewPrescriptionRecordsAction object with the specified DAOFactory and loggedInMID.\n * This constructor initializes the emailer, patientDAO, personnelDAO, and transDAO fields using the provided DAOFactory.\n * It also sets the loggedInMID field to the specified value.\n * \n * @param factory the DAOFactory to be used for accessing data\n * @param loggedInMID the MID of the logged in user\n */"
            }
        ],
        "signature": "ViewPrescriptionRecordsAction",
        "variables": [
            "private PatientDAO patientDAO",
            "private PersonnelDAO personnelDAO",
            "private TransactionDAO transDAO",
            "private EmailUtil emailer",
            "private long loggedInMID"
        ],
        "generated_class_comment": "/**\n * This class represents a collection of methods for retrieving information about patients and healthcare personnel from the database.\n * \n * The class includes methods for retrieving a specific PatientBean object based on a given patient ID, \n * retrieving a list of PatientBeans representing patients being represented by the currently logged in user, \n * and retrieving the prescribing doctor associated with a given prescription.\n * \n * Each method includes a JavaDoc comment describing its purpose, parameters, return value, and any potential exceptions that may be thrown.\n * \n * Overall, this class provides a convenient interface for accessing and retrieving important information about patients and healthcare personnel within the system.\n */\n**/\n/**\n * This class represents the functionality for viewing prescription records for a patient.\n * It retrieves the patient's information and prescriptions based on the logged-in user's permissions.\n * If the logged-in user is the patient or one of their representatives or healthcare providers, \n * it logs the transaction and returns the patient's prescriptions.\n * If the logged-in user does not have permission to view the prescriptions, it sends an email notification to the authorized parties.\n * \n * @return the list of PrescriptionBean objects representing the patient's prescriptions\n */ \npublic List<PrescriptionBean> viewPrescriptionRecords() {\n    PatientBean patient = patientDAO.getPatient(patientID);\n    if (loggedInMID == patientID) {\n        transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n        return patientDAO.getPrescriptions(patientID);\n    }\n    List<String> toList = new ArrayList<String>();\n    toList.add(patient.getEmail());\n    List<PatientBean> representatives = patientDAO.getRepresenting(patientID);\n    for (PatientBean representative : representatives) {\n        if (loggedInMID == representative.getMID()) {\n            transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n            return patientDAO.getPrescriptions(patientID);\n        }\n        toList.add(representative.getEmail());\n    }\n    List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);\n    for (PersonnelBean dlhcp : dlhcps) {\n        if (loggedInMID == dlhcp.getMID()) {\n            transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n            return patientDAO.getPrescriptions(patientID);\n        }\n        List<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());\n        for (PersonnelBean uap : uaps) {\n            if (loggedInMID == uap.getMID()) {\n                transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n                return patientDAO.getPrescriptions(patientID);\n            }\n        }\n    }\n    Email email = new Email();\n    email.setToList(toList);\n    email.setFrom(\"noreply@itrust.com\");\n    email.setSubject(Messages.getString(\"ViewPrescriptionRecordsAction.1\"));\n    email.setBody(Messages.getString(\"ViewPrescriptionRecordsAction.2\"));\n    emailer.sendEmail(email);\n    transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\n    return patientDAO.getPrescriptions(patientID);\n}\n*/\n/**\n * The ViewPrescriptionRecordsAction class is responsible for retrieving a list of prescriptions for a given patient based on the logged-in user's permissions.\n * \n * This class provides the functionality to retrieve prescriptions for a patient based on the user's role:\n * - If the logged-in user is the patient or a representative, their prescriptions are returned.\n * - If the logged-in user is a declared HCP (HealthCare Provider) or UAP (Unspecified Actor) for the patient, their prescriptions are returned.\n * - If the logged-in user does not have permission to view the prescriptions, an email notification is sent to the appropriate parties.\n * \n * This class contains a method getPrescriptionsForPatient(long patientID) that returns a list of PrescriptionBean objects representing the prescriptions for the specified patient.\n * \n * The constructor ViewPrescriptionRecordsAction(DAOFactory factory, long loggedInMID) initializes the emailer, patientDAO, personnelDAO, and transDAO fields using the provided DAOFactory.\n * It also sets the loggedInMID field to the specified value.\n * \n * @param factory The DAOFactory used to create the DAOs used in this action.\n * @param loggedInMID The MID of the person viewing prescription records.\n */\npublic class ViewPrescriptionRecordsAction {\n    \n    private EmailUtil emailer;\n    private PatientDAO patientDAO;\n    private PersonnelDAO personnelDAO;\n    private TransactionDAO transDAO;\n    private long loggedInMID;\n    \n    /**\n     * Constructs a new ViewPrescriptionRecordsAction object with the specified DAOFactory and loggedInMID.\n     * This constructor initializes the emailer, patientDAO, personnelDAO, and transDAO fields using the provided DAOFactory.\n     * It also sets the loggedInMID field to the specified value.\n     * \n     * @param factory the DAOFactory used to create the DAOs used in this action.\n     * @param loggedInMID the MID of the person viewing prescription records.\n     */\n    public ViewPrescriptionRecordsAction(DAOFactory factory, long loggedInMID) {\n        this.emailer = new EmailUtil(factory);\n        this.patientDAO = factory.getPatientDAO();\n        this.personnelDAO = factory.getPersonnelDAO();\n        this.transDAO = factory.getTransactionDAO();\n        this.loggedInMID = loggedInMID;\n    }\n    \n    /**\n     * Returns all the prescriptions for a given patient.\n     * \n     * @param patientID the ID of the patient in question.\n     * @return a list of all the prescriptions for that patient.\n     * @throws iTrustException if an error occurs during the retrieval of prescriptions.\n     */\n    public List<PrescriptionBean> getPrescriptionsForPatient(long patientID) throws iTrustException {\n        // Implementation details for retrieving prescriptions for the patient\n    }\n}\n*/\n/**\n * The DAOFactory class is responsible for providing access to data for the ViewPrescriptionRecordsAction class.\n * It contains references to various DAO classes such as PatientDAO, PersonnelDAO, and TransactionDAO, as well as an EmailUtil object for sending emails.\n * The loggedInMID variable stores the MID of the logged in user.\n * \n * This class allows the ViewPrescriptionRecordsAction to interact with the database and retrieve information about patients, personnel, and transactions.\n * It also provides functionality for sending emails using the EmailUtil object.\n * \n * Overall, the DAOFactory class serves as a central hub for data access within the ViewPrescriptionRecordsAction, enabling seamless communication with the underlying database and email services.\n */"
    }
]