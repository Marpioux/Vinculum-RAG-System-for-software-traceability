[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE SenderID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<ReferralBean> getReferralsSentFrom(long)",
                "comments": "Optional[/**\r\n * Gets a list of all referrals sent from an HCP\r\n * @param mid The HCP's mid.\r\n * @return The list of the referrals they sent.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of ReferralBeans sent from a specific sender ID.\n * \n * @param senderID the ID of the sender whose referrals are to be retrieved\n * @return a list of ReferralBeans sent from the specified sender ID\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM referrals WHERE ReceiverID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return referralLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<ReferralBean> getReferralsSentTo(long)",
                "comments": "Optional[/**\r\n * Gets a list of all referrals sent to an HCP\r\n * @param mid The HCP's mid.\r\n * @return The list of the referrals sent to them.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of ReferralBeans sent to a specific user.\n * \n * @param receiverID the ID of the user who received the referrals\n * @return a list of ReferralBean objects representing the referrals sent to the specified user\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE referrals SET PatientID=?,SenderID=?,ReceiverID=?,\" + \"ReferralDetails=?,ConsultationDetails=?,Status=?  WHERE ID=?\");\r\n        referralLoader.loadParameters(ps, r);\r\n        ps.setLong(7, r.getId());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void editReferral(ReferralBean)",
                "comments": "Optional[/**\r\n * Updates a given referral in the database.\r\n * @param r The referral to update.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates a referral in the database with the provided ReferralBean object.\n * \n * @param r the ReferralBean object containing the updated referral information\n * @throws DBException if there is an error accessing the database\n */\npublic void editReferral(ReferralBean r) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"UPDATE referrals SET PatientID=?,SenderID=?,ReceiverID=?,\" + \"ReferralDetails=?,ConsultationDetails=?,Status=?  WHERE ID=?\");\n        referralLoader.loadParameters(ps, r);\n        ps.setLong(7, r.getId());\n        ps.executeUpdate();\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO referrals (PatientID,SenderID,ReceiverID,\" + \"ReferralDetails,ConsultationDetails,Status)  \" + \"VALUES (?,?,?,?,?,?)\");\r\n        referralLoader.loadParameters(ps, r);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void addReferral(ReferralBean)",
                "comments": "Optional[/**\r\n * Adds a given referral to the database.\r\n * @param r The referral to add.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a new referral to the database.\n * \n * @param referral The referral bean containing the details of the referral to be added\n * @throws DBException if there is an error accessing the database\n */\npublic void addReferral(ReferralBean referral) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"INSERT INTO referrals (PatientID,SenderID,ReceiverID,\" + \"ReferralDetails,ConsultationDetails,Status)  \" + \"VALUES (?,?,?,?,?,?)\");\n        referralLoader.loadParameters(ps, referral);\n        ps.executeUpdate();\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n```"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.factory = factory;\r\n    referralLoader = new ReferralBeanLoader();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ReferralDAO(DAOFactory)",
                "comments": "Optional[/**\r\n * The typical constructor.\r\n * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ReferralDAO with the specified DAOFactory.\n * \n * @param factory the DAOFactory used to create data access objects\n * \n * This constructor initializes the ReferralDAO with the given DAOFactory and creates a new ReferralBeanLoader.\n */"
            }
        ],
        "signature": "ReferralDAO",
        "variables": [
            "private DAOFactory factory",
            "private ReferralBeanLoader referralLoader"
        ],
        "generated_class_comment": "/**\n * The ReferralDAO class is responsible for handling database operations related to referrals.\n * It provides methods to retrieve a list of referrals sent from or sent to a specific healthcare provider (HCP).\n * \n * The class contains methods to get referrals sent from a specific sender ID and referrals sent to a specific receiver ID.\n * \n * The getReferralsSentFrom method retrieves a list of referrals sent from a specific sender ID. It takes the sender's ID as a parameter\n * and returns a list of ReferralBean objects representing the referrals sent by the sender. If there is an error accessing the database,\n * a DBException is thrown.\n * \n * The getReferralsSentTo method retrieves a list of referrals sent to a specific receiver ID. It takes the receiver's ID as a parameter\n * and returns a list of ReferralBean objects representing the referrals sent to the receiver. If there is an error accessing the database,\n * a DBException is thrown.\n * \n * This class ensures proper database connection management by opening and closing connections in a try-catch-finally block.\n * \n * @author [Author Name]\n * @version 1.0\n */\n**/\n\\r\\n conn = factory.getConnection();\\r\\n ps = conn.prepareStatement(\\\"SELECT * FROM referrals WHERE ReceiverID=?\\\");\\r\\n ps.setLong(1, receiverID);\\r\\n ResultSet rs = ps.executeQuery();\\r\\n List<ReferralBean> referrals = new ArrayList<>();\\r\\n while (rs.next()) {\\r\\n ReferralBean referral = referralLoader.loadSingle(rs);\\r\\n referrals.add(referral);\\r\\n }\\r\\n return referrals;\\r\\n } catch (SQLException e) {\\r\\n e.printStackTrace();\\r\\n throw new DBException(e);\\r\\n } finally {\\r\\n DBUtil.closeConnection(conn, ps);\\r\\n }\\r\\n}]\", \"hasComment\": true, \"hasInnerComment\": false, \"signature\": \"public List<ReferralBean> getReferralsByReceiverID(long)\", \"comments\": \"Optional[/**\\r\\n * Retrieves a list of referrals sent to a specific user.\\r\\n * @param receiverID the ID of the user who received the referrals\\r\\n * @return a list of ReferralBean objects representing the referrals sent to the specified user\\r\\n * @throws DBException if there is an error accessing the database\\r\\n */\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Retrieves a list of referrals sent to a specific user.\\n * \\n * @param receiverID the ID of the user who received the referrals\\n * @return a list of ReferralBean objects representing the referrals sent to the specified user\\n * @throws DBException if there is an error accessing the database\\n */\\npublic List<ReferralBean> getReferralsByReceiverID(long receiverID) {\\n Connection conn = null;\\n PreparedStatement ps = null;\\n try {\\n conn = factory.getConnection();\\n ps = conn.prepareStatement(\\\"SELECT * FROM referrals WHERE ReceiverID=?\\\");\\n ps.setLong(1, receiverID);\\n ResultSet rs = ps.executeQuery();\\n List<ReferralBean> referrals = new ArrayList<>();\\n while (rs.next()) {\\n ReferralBean referral = referralLoader.loadSingle(rs);\\n referrals.add(referral);\\n }\\n return referrals;\\n } catch (SQLException e) {\\n e.printStackTrace();\\n throw new DBException(e);\\n } finally {\\n DBUtil.closeConnection(conn, ps);\\n }\\n}\\n*/\" }]\n/**\n * The ReferralDAO class is responsible for handling database operations related to referrals.\n * It provides methods to add, update, delete, and retrieve referral information from the database.\n * \n * This class uses a DAOFactory to obtain SQL connections and a ReferralBeanLoader to load referral parameters.\n * \n * The addReferral method adds a new referral to the database by inserting the referral details into the 'referrals' table.\n * \n * The updateReferral method updates an existing referral in the database based on the referral ID.\n * \n * The deleteReferral method removes a referral from the database based on the referral ID.\n * \n * The getReferralById method retrieves a referral from the database based on the referral ID.\n * \n * This class also handles exceptions by throwing a DBException if there is an error accessing the database.\n */\npublic class ReferralDAO {\n    private DAOFactory factory;\n    private ReferralBeanLoader referralLoader;\n    \n    /**\n     * Constructs a new ReferralDAO with the specified DAOFactory.\n     * \n     * @param factory The DAOFactory associated with this DAO, used for obtaining SQL connections.\n     */\n    public ReferralDAO(DAOFactory factory) {\n        this.factory = factory;\n        referralLoader = new ReferralBeanLoader();\n    }\n    \n    /**\n     * Adds a new referral to the database.\n     * \n     * @param referral The referral bean containing the details of the referral to be added\n     * @throws DBException if there is an error accessing the database\n     */\n    public void addReferral(ReferralBean referral) {\n        Connection conn = null;\n        PreparedStatement ps = null;\n        try {\n            conn = factory.getConnection();\n            ps = conn.prepareStatement(\"INSERT INTO referrals (PatientID,SenderID,ReceiverID,\" + \"ReferralDetails,ConsultationDetails,Status) \" + \"VALUES (?,?,?,?,?,?)\");\n            referralLoader.loadParameters(ps, referral);\n            ps.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            throw new DBException(e);\n        } finally {\n            DBUtil.closeConnection(conn, ps);\n        }\n    }\n    \n    // Add updateReferral, deleteReferral, and getReferralById methods here\n}\n*/\n/**\n * The DAOFactory class is used to create data access objects for interacting with the database.\n * It contains a constructor that initializes the ReferralDAO with the given DAOFactory and creates a new ReferralBeanLoader.\n * \n * The main functionalities of this class include:\n * - Creating data access objects for interacting with the database\n * - Initializing the ReferralDAO with the given DAOFactory\n * - Creating a new ReferralBeanLoader for loading referral beans\n * \n * This class serves as a factory for creating data access objects and provides a way to interact with the database in a structured manner.\n * It encapsulates the logic for creating and initializing data access objects, making it easier to manage and maintain the codebase.\n * \n * Overall, the DAOFactory class plays a crucial role in providing a centralized way to create and manage data access objects for interacting with the database.\n */"
    }
]