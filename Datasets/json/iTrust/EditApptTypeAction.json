[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return apptTypeDAO.getApptTypes();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public List<ApptTypeBean> getApptTypes()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of appointment types from the database.\n * \n * @return A list of ApptTypeBean objects representing different appointment types.\n */"
            },
            {
                "body": "Optional[{\r\n    validator.validate(apptType);\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(apptType.getName()))\r\n            return \"Appointment Type: \" + apptType.getName() + \" already exists.\";\r\n    }\r\n    try {\r\n        if (apptTypeDAO.addApptType(apptType)) {\r\n            transDAO.logTransaction(TransactionType.ADD_APPT_TYPE, loggedInMID, 0L, \"Added Appointment Type \" + apptType.getName());\r\n            return \"Success: \" + apptType.getName() + \" - Duration: \" + apptType.getDuration() + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public String addApptType(ApptTypeBean)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Adds a new appointment type to the system.\n * \n * @param apptType The appointment type to be added\n * @return A message indicating the outcome of the operation:\n *         - If the appointment type already exists, returns a message stating so\n *         - If the appointment type is successfully added, returns a success message with the details of the added type\n *         - If an error occurs during the database operation, returns an error message\n */\npublic String addApptType(ApptTypeBean apptType) {\n    validator.validate(apptType);\n    List<ApptTypeBean> list = this.getApptTypes();\n    for (ApptTypeBean a : list) {\n        if (a.getName().equals(apptType.getName()))\n            return \"Appointment Type: \" + apptType.getName() + \" already exists.\";\n    }\n    try {\n        if (apptTypeDAO.addApptType(apptType)) {\n            transDAO.logTransaction(TransactionType.ADD_APPT_TYPE, loggedInMID, 0L, \"Added Appointment Type \" + apptType.getName());\n            return \"Success: \" + apptType.getName() + \" - Duration: \" + apptType.getDuration() + \" added\";\n        } else\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\n    } catch (DBException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    validator.validate(apptType);\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    int flag = 0;\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(apptType.getName())) {\r\n            flag = 1;\r\n            if (a.getDuration() == apptType.getDuration())\r\n                return \"Appointment Type: \" + apptType.getName() + \" already has a duration of \" + apptType.getDuration() + \" minutes.\";\r\n            break;\r\n        }\r\n    }\r\n    if (flag == 0) {\r\n        return \"Appointment Type: \" + apptType.getName() + \" you are trying to update does not exist.\";\r\n    }\r\n    try {\r\n        if (apptTypeDAO.editApptType(apptType)) {\r\n            transDAO.logTransaction(TransactionType.UPDATE_APPT_TYPE, loggedInMID, 0L, \"Updated Appointment Type \" + apptType.getName());\r\n            return \"Success: \" + apptType.getName() + \" - Duration: \" + apptType.getDuration() + \" updated\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public String editApptType(ApptTypeBean)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Validates and updates an existing appointment type in the system.\n * \n * @param apptType The appointment type bean to be updated.\n * @return A message indicating the success or failure of the update operation.\n *         If the appointment type does not exist, a message is returned indicating\n *         that the appointment type does not exist. If the appointment type already\n *         has the same duration as the one being updated, a message is returned \n *         indicating that the appointment type already has the same duration. \n *         If the update is successful, a success message is returned.\n */\npublic String editApptType(ApptTypeBean apptType) {\n    validator.validate(apptType);\n    List<ApptTypeBean> list = this.getApptTypes();\n    int flag = 0;\n    for (ApptTypeBean a : list) {\n        if (a.getName().equals(apptType.getName())) {\n            flag = 1;\n            if (a.getDuration() == apptType.getDuration())\n                return \"Appointment Type: \" + apptType.getName() + \" already has a duration of \" + apptType.getDuration() + \" minutes.\";\n            break;\n        }\n    }\n    if (flag == 0) {\n        return \"Appointment Type: \" + apptType.getName() + \" you are trying to update does not exist.\";\n    }\n    try {\n        if (apptTypeDAO.editApptType(apptType)) {\n            transDAO.logTransaction(TransactionType.UPDATE_APPT_TYPE, loggedInMID, 0L, \"Updated Appointment Type \" + apptType.getName());\n            return \"Success: \" + apptType.getName() + \" - Duration: \" + apptType.getDuration() + \" updated\";\n        } else\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\n    } catch (DBException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(at))\r\n            return a.getDuration();\r\n    }\r\n    return 0;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public int getDurationByType(String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Returns the duration of an appointment type specified by the given name.\n * \n * @param at the name of the appointment type to retrieve the duration for\n * @return the duration of the appointment type, or 0 if the type is not found\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.apptTypeDAO = factory.getApptTypeDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public EditApptTypeAction(DAOFactory, long)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new EditApptTypeAction object with the specified DAOFactory and loggedInMID.\n * This constructor initializes the loggedInMID field with the provided value,\n * and initializes the apptTypeDAO and transDAO fields using the DAOFactory.\n * \n * @param factory the DAOFactory used to retrieve the ApptTypeDAO and TransactionDAO\n * @param loggedInMID the ID of the logged-in user\n */"
            }
        ],
        "signature": "EditApptTypeAction",
        "variables": [
            "private long loggedInMID",
            "private ApptTypeDAO apptTypeDAO",
            "private TransactionDAO transDAO",
            "private ApptTypeBeanValidator validator"
        ],
        "generated_class_comment": "/**\n * This class represents a service for managing appointment types in the system.\n * It provides methods for retrieving a list of appointment types from the database and adding a new appointment type.\n * The class ensures that duplicate appointment types are not added and logs transactions for adding appointment types.\n * \n * Main functionalities include:\n * - Retrieving a list of appointment types from the database\n * - Adding a new appointment type to the system\n * \n * Overall behavior:\n * - The getApptTypes method retrieves a list of existing appointment types from the database.\n * - The addApptType method adds a new appointment type to the system, ensuring no duplicates are added.\n * - If the addition is successful, a success message is returned with details of the added type.\n * - If an error occurs during the database operation, an error message is returned.\n */\n/**\n * This class represents a service for managing appointment types in the system. It provides methods for adding, editing, and retrieving appointment types from the database.\n * \n * The main functionalities of this class include:\n * - Validating and adding a new appointment type to the system\n * - Validating and updating an existing appointment type in the system\n * - Logging transactions for adding and updating appointment types\n * \n * The behavior of this class is as follows:\n * - When adding a new appointment type, it checks if the type already exists in the system. If it does, it returns an error message. Otherwise, it adds the new type to the database and logs the transaction.\n * - When editing an existing appointment type, it validates the type and checks if it exists in the system. If it does not exist, it returns an error message. If it exists, it updates the type in the database and logs the transaction.\n * - If any database exceptions occur during the process, it catches the exception, prints the stack trace, and returns an error message.\n * \n * @param apptType The appointment type bean to be added or updated.\n * @return A message indicating the success or failure of the operation.\n */\npublic String editApptType(ApptTypeBean apptType) {\n    validator.validate(apptType);\n    List<ApptTypeBean> list = this.getApptTypes();\n    int flag = 0;\n    for (ApptTypeBean a : list) {\n        if (a.getName().equals(apptType.getName())) {\n            flag = 1;\n            if (a.getDuration() == apptType.getDuration())\n                return \"Appointment Type: \" + apptType.getName() + \" already has a duration of \" + apptType.getDuration() + \" minutes.\";\n            break;\n        }\n    }\n    if (flag == 0) {\n        return \"Appointment Type: \" + apptType.getName() + \" you are trying to update does not exist.\";\n    }\n    try {\n        if (apptTypeDAO.editApptType(apptType)) {\n            transDAO.logTransaction(TransactionType.UPDATE_APPT_TYPE, loggedInMID, 0L, \"Updated Appointment Type \" + apptType.getName());\n            return \"Success: \" + apptType.getName() + \" - Duration: \" + apptType.getDuration() + \" updated\";\n        } else\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\n    } catch (DBException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    }\n}\n*/\n/**\n * This class represents a service for editing appointment types. It provides a method to edit an existing appointment type by updating its duration.\n * \n * The editApptType method takes an ApptTypeBean object as input and validates it using a validator. It then retrieves a list of existing appointment types and checks if the specified appointment type exists. If the appointment type does not exist, a message is returned indicating that the appointment type does not exist. If the appointment type already has the same duration as the one being updated, a message is returned indicating that the appointment type already has the same duration. If the update is successful, a success message is returned.\n * \n * The getDurationByType method takes a String parameter representing the name of an appointment type and returns the duration of that appointment type. It retrieves a list of existing appointment types and searches for the specified appointment type. If found, it returns the duration of that appointment type. If not found, it returns 0.\n * \n * Overall, this class provides functionality for editing appointment types and retrieving the duration of specific appointment types. It handles validation, database operations, and logging of transactions.\n */\n*/\n/**\n * The EditApptTypeAction class represents an action that allows a user to edit an appointment type.\n * This class is responsible for handling the logic related to editing appointment types, such as retrieving\n * the necessary data from the database, validating the input, and updating the appointment type information.\n * \n * The main functionalities of this class include:\n * - Initializing the loggedInMID field with the ID of the logged-in user\n * - Initializing the apptTypeDAO and transDAO fields using the provided DAOFactory\n * - Validating the input data using the ApptTypeBeanValidator\n * - Retrieving and updating appointment type information from the database\n * \n * This class provides a constructor that takes a DAOFactory and a long value as parameters to initialize\n * the necessary fields. It also contains a method to execute the edit appointment type action.\n * \n * @author [Your Name]\n * @version 1.0\n */"
    }
]