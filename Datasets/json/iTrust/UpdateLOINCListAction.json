[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    validator.validate(diagn);\r\n    List<LOINCbean> lblist = lDAO.getAllLOINC();\r\n    boolean correctID = false;\r\n    for (int i = 0; i < lblist.size(); i++) {\r\n        if (lblist.get(i).getLabProcedureCode().equals(diagn.getLabProcedureCode())) {\r\n            correctID = true;\r\n            i = lblist.size();\r\n        }\r\n    }\r\n    if (correctID) {\r\n        throw new FormValidationException(\"Error: Code already exists.\");\r\n    }\r\n    lDAO.addLOINC(diagn);\r\n    transDAO.logTransaction(TransactionType.MANAGE_LOINC, performerID, 0L, \"added LOINC code \" + diagn.getLabProcedureCode());\r\n    return \"Success: \" + diagn.getLabProcedureCode() + \" added\";\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String add(LOINCbean)",
                "comments": "Optional[/**\r\n * Adds a new LOINC\r\n *\r\n * @param diagn\r\n *            New LOINC\r\n * @return Status message\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a new LOINC code to the database if it does not already exist.\n * \n * @param diagn the LOINCbean object to be added\n * @return a success message if the LOINC code was successfully added\n * @throws FormValidationException if the LOINC code already exists in the database\n */\npublic String add(LOINCbean diagn) {\n    validator.validate(diagn);\n    List<LOINCbean> lblist = lDAO.getAllLOINC();\n    boolean correctID = false;\n    for (int i = 0; i < lblist.size(); i++) {\n        if (lblist.get(i).getLabProcedureCode().equals(diagn.getLabProcedureCode())) {\n            correctID = true;\n            i = lblist.size();\n        }\n    }\n    if (correctID) {\n        throw new FormValidationException(\"Error: Code already exists.\");\n    }\n    lDAO.addLOINC(diagn);\n    transDAO.logTransaction(TransactionType.MANAGE_LOINC, performerID, 0L, \"added LOINC code \" + diagn.getLabProcedureCode());\n    return \"Success: \" + diagn.getLabProcedureCode() + \" added\";\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    validator.validate(diagn);\r\n    try {\r\n        int rows = lDAO.update(diagn);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            transDAO.logTransaction(TransactionType.MANAGE_LOINC, performerID, 0L, \"updated LOINC code \" + diagn.getLabProcedureCode());\r\n            return \"Success: \" + diagn.getLabProcedureCode() + \" updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String updateInformation(LOINCbean)",
                "comments": "Optional[/**\r\n * Updates a LOINC\r\n *\r\n * @param diagn\r\n *            new information to update (but same code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates the information of a LOINC code in the database.\n * \n * @param diagn the LOINCbean object containing the information to be updated\n * @return a String indicating the outcome of the update operation\n *         - \"Error: Code not found.\" if the code is not found in the database\n *         - \"Success: [LabProcedureCode] updated\" if the code is successfully updated\n */\npublic String updateInformation(LOINCbean diagn) {\n    validator.validate(diagn);\n    try {\n        int rows = lDAO.update(diagn);\n        if (0 == rows) {\n            return \"Error: Code not found.\";\n        } else {\n            transDAO.logTransaction(TransactionType.MANAGE_LOINC, performerID, 0L, \"updated LOINC code \" + diagn.getLabProcedureCode());\n            return \"Success: \" + diagn.getLabProcedureCode() + \" updated\";\n        }\n    } catch (DBException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.performerID = performerID;\r\n    transDAO = factory.getTransactionDAO();\r\n    lDAO = factory.getLOINCDAO();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public UpdateLOINCListAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Sets up defaults\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID The MID of the person updating the LOINCs.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new UpdateLOINCListAction with the specified DAOFactory and performer ID.\n * \n * @param factory the DAOFactory used to retrieve the TransactionDAO and LOINCDAO\n * @param performerID the ID of the performer associated with the action\n */\npublic UpdateLOINCListAction(DAOFactory factory, long performerID) {\n    this.performerID = performerID;\n    transDAO = factory.getTransactionDAO();\n    lDAO = factory.getLOINCDAO();\n}\n*/"
            }
        ],
        "signature": "UpdateLOINCListAction",
        "variables": [
            "private long performerID",
            "private LOINCDAO lDAO",
            "private TransactionDAO transDAO",
            "private LOINCBeanValidator validator"
        ],
        "generated_class_comment": "Sure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a service for managing LOINC codes in a database.\n * It provides methods for adding, updating, and deleting LOINC codes.\n * \n * The main functionalities of this class include:\n * - Adding a new LOINC code to the database if it does not already exist\n * - Updating an existing LOINC code with new information\n * - Deleting a LOINC code from the database\n * \n * The overall behavior of this class is to interact with the database to perform CRUD operations on LOINC codes.\n * It ensures that the LOINC codes are validated before being added or updated, and logs transactions for auditing purposes.\n * \n * This class follows the MVC (Model-View-Controller) design pattern to separate concerns and maintain code modularity.\n * \n * @author [Your Name]\n * @version 1.0\n */\n \nI hope this helps! Let me know if you need any more assistance.\n*/\\npublic UpdateLOINCListAction(DAOFactory factory, long performerID) {\\n /**\\n * Sets up defaults\\n *\\n * @param factory The DAOFactory used to create the DAOs used in this class\\n * @param performerID The ID of the performer\\n */\\n this.performerID = performerID;\\n transDAO = factory.getTransactionDAO();\\n lDAO = factory.getLOINCDAO();\\n}\\n*/\" } ], \"methods\": [ { \"body\": \"{\\r\\n validator.validate(diagn);\\r\\n try {\\r\\n int rows = lDAO.update(diagn);\\r\\n if (0 == rows) {\\r\\n return \\\"Error: Code not found.\\\";\\r\\n } else {\\r\\n transDAO.logTransaction(TransactionType.MANAGE_LOINC, performerID, 0L, \\\"updated LOINC code \\\" + diagn.getLabProcedureCode());\\r\\n return \\\"Success: \\\" + diagn.getLabProcedureCode() + \\\" updated\\\";\\r\\n }\\r\\n } catch (DBException e) {\\r\\n e.printStackTrace();\\r\\n return e.getMessage();\\r\\n }\\r\\n}\", \"hasComment\": true, \"hasInnerComment\": false, \"signature\": \"public String updateInformation(LOINCbean)\", \"comments\": \"Optional[/**\\r\\n * Updates a LOINC\\r\\n *\\r\\n * @param diagn\\r\\n * new information to update (but same code)\\r\\n * @return Status message\\r\\n * @throws FormValidationException\\r\\n */\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Updates the information of a LOINC code in the database.\\n * \\n * @param diagn the LOINCbean object containing the information to be updated\\n * @return a String indicating the outcome of the update operation\\n * - \\\"Error: Code not found.\\\" if the code is not found in the database\\n * - \\\"Success: [LabProcedureCode] updated\\\" if the code is successfully updated\\n */\\npublic String updateInformation(LOINCbean diagn) {\\n validator.validate(diagn);\\n try {\\n int rows = lDAO.update(diagn);\\n if (0 == rows) {\\n return \\\"Error: Code not found.\\\";\\n } else {\\n transDAO.logTransaction(TransactionType.MANAGE_LOINC, performerID, 0L, \\\"updated LOINC code \\\" + diagn.getLabProcedureCode());\\n return \\\"Success: \\\" + diagn.getLabProcedureCode() + \\\" updated\\\";\\n }\\n } catch (DBException e) {\\n e.printStackTrace();\\n return e.getMessage();\\n }\\n}\\n*/\" } ] }\n/**\n * The UpdateLOINCListAction class represents an action that allows updating the list of LOINCs in the system.\n * It is responsible for handling the process of updating LOINCs by interacting with the DAOFactory, TransactionDAO, and LOINCDAO.\n * \n * This class requires a performer ID to associate the action with a specific user performing the update.\n * \n * The main functionalities of this class include:\n * - Constructing a new UpdateLOINCListAction with the specified DAOFactory and performer ID.\n * - Retrieving the TransactionDAO and LOINCDAO from the DAOFactory to facilitate the update process.\n * \n * The overall behavior of this class is to provide a mechanism for updating LOINCs in the system by utilizing the provided performer ID and interacting with the necessary data access objects.\n */\n \npublic UpdateLOINCListAction(DAOFactory factory, long performerID) {\n    this.performerID = performerID;\n    transDAO = factory.getTransactionDAO();\n    lDAO = factory.getLOINCDAO();\n}\n*/"
    }
]