[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return code;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public int getCode()",
                "comments": "Optional[/**\r\n * Returns the code of the transaction type.\r\n *\r\n * @return the code of the transaction type.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the code associated with this object.\n * \n * @return the code value\n */"
            },
            {
                "body": "Optional[{\r\n    return description;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getDescription()",
                "comments": "Optional[/**\r\n * Returns the description of the transaction type.\r\n *\r\n * @return the description of the transaction type.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the description of the object.\n * \n * @return The description of the object as a String.\n */"
            },
            {
                "body": "Optional[{\r\n    for (TransactionType type : TransactionType.values()) {\r\n        if (type.code == code)\r\n            return type;\r\n    }\r\n    throw new IllegalArgumentException(\"No transaction type exists for code \" + code);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public static TransactionType parse(int code)",
                "comments": "Optional[/**\r\n * Parses the input code and returns the corresponding TransactionType enum value.\r\n *\r\n * @param code the code to parse.\r\n * @return the corresponding TransactionType enum value.\r\n * @throws IllegalArgumentException if no transaction type exists for the given code.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Parses the given code to find the corresponding TransactionType.\n * \n * @param code the code to parse and find the TransactionType for\n * @return the TransactionType corresponding to the given code\n * @throws IllegalArgumentException if no TransactionType exists for the given code\n */\npublic static TransactionType parse(int code) {\n    for (TransactionType type : TransactionType.values()) {\n        if (type.code == code)\n            return type;\n    }\n    throw new IllegalArgumentException(\"No transaction type exists for code \" + code);\n}"
            }
        ],
        "constructors": [
            {
                "body": "Optional[{\r\n    this.code = code;\r\n    this.description = description;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private TransactionType(int code, String description)",
                "comments": "Optional[/**\r\n * Constructs a TransactionType enum with the specified code and description.\r\n *\r\n * @param code the code of the transaction type.\r\n * @param description the description of the transaction type.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new TransactionType with the specified code and description.\n * \n * @param code the code of the transaction type\n * @param description the description of the transaction type\n */\nprivate TransactionType(int code, String description) {\n    this.code = code;\n    this.description = description;\n}"
            }
        ],
        "signature": "TransactionType",
        "variables": [
            "private int code",
            "private String description"
        ],
        "enumConstants": [
            "ENTER_EDIT_DEMOGRAPHICS(1, \"Enter/Edit patient/personnel demographics\")",
            "DECLARE_HCP(2, \"View HCP / Change designation\")",
            "ALLOW_DISALLOW_ACCESS(3, \"Allow/Disallow access to patient diagnosis\")",
            "VIEW_ACCESS_LOG(4, \"View patient's record access log\")",
            "VIEW_RECORDS(5, \"View patient's medical records\")",
            "AUTHENTICATE_USER(6, \"Authenticate user\")",
            "ENTER_EDIT_PHR(7, \"Enter/Edit Personal Health Information\")",
            "DOCUMENT_OFFICE_VISIT(8, \"Document an office visit\")",
            "CREATE_DISABLE_PATIENT_HCP(9, \"Create or disable a patient or hcp\")",
            "MANAGE_DIAGNOSIS_CODE(10, \"Manage ICD9CM diagnosis codes\")",
            "REQUEST_BIOSURVEILLANCE(11, \"Request biosurveillance\")",
            "MANAGE_PROCEDURE_CODE(12, \"Manage CPT Procedure Codes\")",
            "MANAGE_DRUG_CODE(13, \"Manage ND Drug Codes\")",
            "IDENTIFY_RISK_FACTORS(14, \"Identify risk factors for chronic diseases\")",
            "CAUSE_OF_DEATH(15, \"Examine cause-of-death trends\")",
            "DECLARE_REPRESENTATIVE(16, \"Declare Personal Health Representative\")",
            "PATIENT_REMINDERS(17, \"Proactively determine necessary patient care\")",
            "MAINTAIN_HOSPITALS(18, \"Maintain hospital listing\")",
            "VIEW_PRESCRIPTION_REPORT(19, \"View prescription report\")",
            "VIEW_HOSPITAL_STATS(20, \"View hospital statistics\")",
            "VIEW_COMPREHENSIVE_RECORD(21, \"View comprehensive patient report\")",
            "VIEW_EMERGENCY_REPORT(22, \"View emergency patient report\")",
            "COMPREHENSIVE_REPORT_REQUEST(28, \"Comprehensive patient report\")",
            "VIEW_LAB_PROCEDURE(29, \"View lab procedure\")",
            "ENTER_EDIT_LAB_PROCEDURE(30, \"Enter/Edit lab procedure\")",
            "MANAGE_LOINC(31, \"Enter/Edit LOINC Code\")",
            "ADD_PATIENT_SURVEY(32, \"Added Patient Survey\")",
            "VIEW_HCP_SURVEY_RESULTS(33, \"View HCP survey results\")",
            "VIEW_PATIENT_LIST(34, \"View Patient List\")",
            "FIND_HCPS_WITH_EXP(35, \"Find LHCPs with experience with a diagnosis\")",
            "VIEW_HEALTH_RECORDS(36, \"View Patient Health Records\")",
            "VIEW_OFFICE_VISIT(37, \"View Office Visit\")",
            "ADD_PRESCRIPTION(38, \"Add Prescription\")",
            "UPDATE_OFFICE_VISIT(39, \"Update an Office Visit\")",
            "SEND_MESSAGE(40, \"Send a Message\")",
            "VIEW_RENEWAL_NEEDS_PATIENTS(41, \"View renewal needs patients\")",
            "SEND_REFERRAL(42, \"Refer patient to hcp\")",
            "CREATE_DISABLE_ER(43, \"Create/disable emergency responder\")",
            "TELEMEDICINE_MONITORING(45, \"Telemedicine monitoring\")",
            "CREATE_DISABLE_PHA(47, \"Create/disable public health agent\")",
            "DRUG_INTERACTION(48, \"Drug Interaction\")",
            "ADVERSE_EVENT(49, \"Adverse Event Report\")",
            "LOGIN_FAILURE(50, \"Login Failure\")",
            "UPDATE_APPT_TYPE(51, \"Update an Appointment Type\")",
            "ADD_APPT_TYPE(52, \"Add an Appointment Type\")",
            "ADD_APPT(53, \"Appointment Added\")",
            "SEND_REMINDERS(54, \"Reminders Sent\")"
        ],
        "staticFields": [
            {
                "name": "patientViewableStr",
                "type": "String",
                "value": "1,3,5,7,8,14,16,19,21,22,30,39,45",
                "comments": "Optional[/**\r\n * String representation of patient viewable transaction types.\r\n */\r\n]"
            },
            {
                "name": "patientViewable",
                "type": "int[]",
                "value": "[1, 3, 5, 7, 8, 14, 16, 19, 21, 22, 30, 39, 45]",
                "comments": "Optional[/**\r\n * Array of patient viewable transaction type codes.\r\n */\r\n]"
            }
        ],
        "generated_class_comment": "/**\n * This class represents a TransactionType enum that defines various types of transactions in a healthcare system.\n * It provides methods to retrieve the code and description of a transaction type, as well as to parse a code and return the corresponding TransactionType enum value.\n * The class also includes a list of enums that represent different transaction types along with their descriptions.\n * \n * The main functionalities of this class include:\n * - Retrieving the code and description of a transaction type\n * - Parsing a code to find the corresponding TransactionType enum value\n * - Defining a set of enums that represent different transaction types in a healthcare system\n * \n * The overall behavior of this class is to provide a convenient way to work with transaction types in the healthcare system, allowing users to easily retrieve information about each type and parse codes to find the corresponding enum value.\n * \n * Enums:\n * - ENTER_EDIT_DEMOGRAPHICS: Enter/Edit patient/personnel demographics\n * - DECLARE_HCP: View HCP / Change designation\n * - ALLOW_DISALLOW_ACCESS: Allow/Disallow access to patient diagnosis\n * - VIEW_ACCESS_LOG: View patient's record access log\n * - VIEW_RECORDS: View patient's medical records\n * - AUTHENTICATE_USER: Authenticate user\n * - ENTER_EDIT_PHR: Enter/Edit Personal Health Information\n * - DOCUMENT_OFFICE_VISIT: Document an office visit\n * - CREATE_DISABLE_PATIENT_HCP: Create or disable a patient or hcp\n * - MANAGE_DIAGNOSIS_CODE: Manage ICD9CM diagnosis codes\n * - REQUEST_BIOSURVEILLANCE: Request biosurveillance\n * - MANAGE_PROCEDURE_CODE: Manage CPT Procedure Codes\n * - MANAGE_DRUG_CODE: Manage ND Drug Codes\n * - IDENTIFY_RISK_FACTORS: Identify risk factors for chronic diseases\n * - CAUSE_OF_DEATH: Examine cause-of-death trends\n * - DECLARE_REPRESENTATIVE: Declare Personal Health Representative\n * - PATIENT_REMINDERS: Proactively determine necessary patient care\n * - MAINTAIN_HOSPITALS: Maintain hospital listing\n * - VIEW_PRESCRIPTION_REPORT: View prescription report\n * - VIEW_HOSPITAL_STATS: View hospital statistics\n * - VIEW_COMPREHENSIVE_RECORD: View comprehensive patient report\n * - VIEW_EMERGENCY_REPORT: View emergency patient report\n * - COMPREHENSIVE_REPORT_REQUEST: Comprehensive patient report\n * - VIEW_LAB_PROCEDURE: View lab procedure\n * - ENTER_EDIT_LAB_PROCEDURE: Enter/Edit lab procedure\n * - MANAGE_LOINC: Enter/Edit LOINC Code\n * - ADD_PATIENT_SURVEY: Added Patient Survey\n * - VIEW_HCP_SURVEY_RESULTS: View HCP survey results\n * - VIEW_PATIENT_LIST: View Patient List\n * - FIND_HCPS_WITH_EXP: Find LHCPs with experience with a diagnosis\n * - VIEW_HEALTH_RECORDS: View Patient Health Records\n * - VIEW_OFFICE_VISIT: View Office Visit\n * - ADD_PRESCRIPTION: Add Prescription\n * - UPDATE_OFFICE_VISIT: Update an Office Visit\n * - SEND_MESSAGE: Send a Message\n * - VIEW_RENEWAL_NEEDS_PATIENTS: View renewal needs patients\n * - SEND_REFERRAL: Refer patient to hcp\n * - CREATE_DISABLE_ER: Create/disable emergency responder\n * - TELEMEDICINE_MONITORING: Telemedicine monitoring\n * - CREATE_DISABLE_PHA: Create/disable public health agent\n * - DRUG_INTERACTION: Drug Interaction\n * - ADVERSE_EVENT: Adverse Event Report\n * - LOGIN_FAILURE: Login Failure\n * - UPDATE_APPT_TYPE: Update an Appointment Type\n * - ADD_APPT_TYPE: Add an Appointment Type\n * - ADD_APPT: Appointment Added\n * - SEND_REMINDERS: Reminders Sent\n */\n**/\n/**\n * The TransactionType class represents different types of transactions that can be performed in a system.\n * Each transaction type has a unique code and description associated with it.\n * \n * This class provides a way to retrieve a TransactionType based on its code, and also contains a list of predefined enums\n * that represent common transaction types along with their codes and descriptions.\n * \n * The main functionalities of this class include:\n * - Retrieving a TransactionType based on its code\n * - Defining and accessing predefined transaction types using enums\n * \n * The overall behavior of this class is to provide a centralized way to manage and access different transaction types\n * in a system, making it easier to work with and identify specific types of transactions.\n * \n * Enums in this class represent various transaction types such as entering/editing patient demographics, viewing medical records,\n * managing diagnosis codes, requesting biosurveillance, and many more. Each enum has a unique code and description that\n * describes the purpose of the transaction type.\n */\n**/\n/**\n * This class represents a list of functionalities related to patient health records and management.\n * It includes various operations such as viewing patient records, managing hospital listings, \n * adding prescriptions, sending reminders, and more. The class provides a comprehensive set of \n * features to assist healthcare professionals in managing patient health information effectively.\n * \n * The main functionalities of this class include:\n * - Viewing patient health records\n * - Managing hospital listings\n * - Adding prescriptions\n * - Sending reminders to patients\n * - Declaring personal health representatives\n * - Viewing comprehensive patient reports\n * - Managing lab procedures and LOINC codes\n * - Handling drug interactions and adverse event reports\n * - Monitoring telemedicine sessions\n * - Creating and disabling emergency responders and public health agents\n * \n * The class behavior is defined by a set of enums that represent different operations that can be \n * performed within the healthcare system. These enums provide a structured way to access and \n * manage patient health information, ensuring data integrity and security.\n * \n * Enums:\n * - ENTER_EDIT_DEMOGRAPHICS: Enter/Edit patient/personnel demographics\n * - DECLARE_HCP: View HCP / Change designation\n * - ALLOW_DISALLOW_ACCESS: Allow/Disallow access to patient diagnosis\n * - VIEW_ACCESS_LOG: View patient's record access log\n * - VIEW_RECORDS: View patient's medical records\n * - AUTHENTICATE_USER: Authenticate user\n * - ENTER_EDIT_PHR: Enter/Edit Personal Health Information\n * - DOCUMENT_OFFICE_VISIT: Document an office visit\n * - CREATE_DISABLE_PATIENT_HCP: Create or disable a patient or hcp\n * - MANAGE_DIAGNOSIS_CODE: Manage ICD9CM diagnosis codes\n * - REQUEST_BIOSURVEILLANCE: Request biosurveillance\n * - MANAGE_PROCEDURE_CODE: Manage CPT Procedure Codes\n * - MANAGE_DRUG_CODE: Manage ND Drug Codes\n * - IDENTIFY_RISK_FACTORS: Identify risk factors for chronic diseases\n * - CAUSE_OF_DEATH: Examine cause-of-death trends\n * - DECLARE_REPRESENTATIVE: Declare Personal Health Representative\n * - PATIENT_REMINDERS: Proactively determine necessary patient care\n * - MAINTAIN_HOSPITALS: Maintain hospital listing\n * - VIEW_PRESCRIPTION_REPORT: View prescription report\n * - VIEW_HOSPITAL_STATS: View hospital statistics\n * - VIEW_COMPREHENSIVE_RECORD: View comprehensive patient report\n * - VIEW_EMERGENCY_REPORT: View emergency patient report\n * - COMPREHENSIVE_REPORT_REQUEST: Comprehensive patient report\n * - VIEW_LAB_PROCEDURE: View lab procedure\n * - ENTER_EDIT_LAB_PROCEDURE: Enter/Edit lab procedure\n * - MANAGE_LOINC: Enter/Edit LOINC Code\n * - ADD_PATIENT_SURVEY: Added Patient Survey\n * - VIEW_HCP_SURVEY_RESULTS: View HCP survey results\n * - VIEW_PATIENT_LIST: View Patient List\n * - FIND_HCPS_WITH_EXP: Find LHCPs with experience with a diagnosis\n * - VIEW_HEALTH_RECORDS: View Patient Health Records\n * - VIEW_OFFICE_VISIT: View Office Visit\n * - ADD_PRESCRIPTION: Add Prescription\n * - UPDATE_OFFICE_VISIT: Update an Office Visit\n * - SEND_MESSAGE: Send a Message\n * - VIEW_RENEWAL_NEEDS_PATIENTS: View renewal needs patients\n * - SEND_REFERRAL: Refer patient to hcp\n * - CREATE_DISABLE_ER: Create/disable emergency responder\n * - TELEMEDICINE_MONITORING: Telemedicine monitoring\n * - CREATE_DISABLE_PHA: Create/disable public health agent\n * - DRUG_INTERACTION: Drug Interaction\n * - ADVERSE_EVENT: Adverse Event Report\n * - LOGIN_FAILURE: Login Failure\n * - UPDATE_APPT_TYPE: Update an Appointment Type\n * - ADD_APPT_TYPE: Add an Appointment Type\n * - ADD_APPT: Appointment Added\n * - SEND_REMINDERS: Reminders Sent\n */\n**/\n/**\n * This class represents the patient viewable transaction types in a healthcare system.\n * It provides an array of patient viewable transaction type codes that can be accessed and used within the system.\n * The class includes enums for various patient viewable transaction types along with their corresponding codes and descriptions.\n * \n * Main functionalities of this class include:\n * - Providing an array of patient viewable transaction type codes for access control and visibility purposes\n * - Defining enums for different patient viewable transaction types with unique codes and descriptions\n * \n * Overall behavior of this class:\n * - Allows for easy access and management of patient viewable transaction types within the healthcare system\n * - Enables developers to easily identify and use specific transaction types for patient records and information\n * \n * Enums:\n * - ENTER_EDIT_DEMOGRAPHICS: Enter/Edit patient/personnel demographics (Code: 1)\n * - DECLARE_HCP: View HCP / Change designation (Code: 2)\n * - ALLOW_DISALLOW_ACCESS: Allow/Disallow access to patient diagnosis (Code: 3)\n * - VIEW_ACCESS_LOG: View patient's record access log (Code: 4)\n * - VIEW_RECORDS: View patient's medical records (Code: 5)\n * - AUTHENTICATE_USER: Authenticate user (Code: 6)\n * - ENTER_EDIT_PHR: Enter/Edit Personal Health Information (Code: 7)\n * - DOCUMENT_OFFICE_VISIT: Document an office visit (Code: 8)\n * - CREATE_DISABLE_PATIENT_HCP: Create or disable a patient or hcp (Code: 9)\n * - MANAGE_DIAGNOSIS_CODE: Manage ICD9CM diagnosis codes (Code: 10)\n * - ... (and so on for all other enums)\n * \n * Developers can use this class to easily reference and work with patient viewable transaction types in the healthcare system.\n */\n**/"
    }
]