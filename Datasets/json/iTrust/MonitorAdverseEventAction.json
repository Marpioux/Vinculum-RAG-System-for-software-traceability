[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    if (isPrescription) {\r\n        transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Adverse Prescription Reports Requested.\");\r\n        return adverseEventDAO.getPerscriptions(start, end);\r\n    } else {\r\n        //is Immunization\r\n        transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Adverse Immunization Report Requested.\");\r\n        return adverseEventDAO.getImmunizations(start, end);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public List<AdverseEventBean> getReports(boolean, String, String)",
                "comments": "Optional[/**\r\n * Returns a list of reports between specified dates\r\n * @param isPrescription Boolean to return prescriptions or immunizations\r\n * @param start The starting date\r\n * @param end The ending date\r\n * @return the list of events\r\n * @throws iTrustException\r\n * @throws FormValidationException\r\n * @throws SQLException\r\n * @throws ParseException\r\n */\r\n]",
                "innerComments": "Optional[[//is Immunization\r\n]]",
                "generated_comment": "/**\n * Retrieves a list of adverse event reports based on the specified criteria.\n * If the boolean parameter is true, prescription adverse event reports are returned.\n * If the boolean parameter is false, immunization adverse event reports are returned.\n * \n * @param isPrescription a boolean indicating whether to retrieve prescription adverse event reports\n * @param start a String representing the start date for the report search\n * @param end a String representing the end date for the report search\n * @return a List of AdverseEventBean objects containing the requested adverse event reports\n */"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        return patientDAO.getName(MID);\r\n    } catch (DBException e) {\r\n        return \"\";\r\n    } catch (iTrustException e) {\r\n        return \"Patient no longer exists\";\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getName(long)",
                "comments": "Optional[/**\r\n * Returns the patient's name\r\n * @param MID the MID of the patient to return the name for.\r\n * @return\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the name of a patient with the given MID (Medical Record Number).\n * \n * @param MID the Medical Record Number of the patient\n * @return the name of the patient with the given MID, or an empty string if an error occurs\n *         while retrieving the name from the database. If the patient no longer exists,\n *         the method will return \"Patient no longer exists\".\n */"
            },
            {
                "body": "Optional[{\r\n    String rValue;\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean receiver = patientDAO.getPatient(patientMID);\r\n    toList.add(receiver.getEmail());\r\n    Email mail = new Email();\r\n    mail.setBody(message);\r\n    mail.setFrom(loggedInMID + \"\");\r\n    mail.setToList(toList);\r\n    emailer.sendEmail(mail);\r\n    transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Requested more information\");\r\n    rValue = \"\" + mail.getFrom() + \" \" + mail.getBody();\r\n    return rValue;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String sendEmail(long, String)",
                "comments": "Optional[/**\r\n * Sends an e-mail to a patient requesting more information\r\n * @param patientMID The patient to receive the message\r\n * @param message The message\r\n * @return string for testing purposes\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Sends an email to a specified patient with a given message.\n * \n * @param patientMID the unique identifier of the patient to send the email to\n * @param message the message to be included in the email\n * @return a string containing the sender's ID and the email body\n */\npublic String sendEmail(long patientMID, String message) {\n    String rValue;\n    List<String> toList = new ArrayList<String>();\n    PatientBean receiver = patientDAO.getPatient(patientMID);\n    toList.add(receiver.getEmail());\n    Email mail = new Email();\n    mail.setBody(message);\n    mail.setFrom(loggedInMID + \"\");\n    mail.setToList(toList);\n    emailer.sendEmail(mail);\n    transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Requested more information\");\n    rValue = \"\" + mail.getFrom() + \" \" + mail.getBody();\n    return rValue;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    long HCPMID;\r\n    try {\r\n        AdverseEventBean aeBean = adverseEventDAO.getReport(id);\r\n        adverseEventDAO.removeReport(id);\r\n        HCPMID = adverseEventDAO.getHCPMID(id);\r\n        MessageBean mBeanTwo = new MessageBean();\r\n        MessageBean mBeanOne = new MessageBean();\r\n        String body = \"An adverse event for \" + aeBean.getDrug() + \" perscribed to \" + patientDAO.getName(Long.parseLong(aeBean.getMID())) + \" with description: (\" + aeBean.getDescription() + \") was removed.\";\r\n        mBeanOne.setTo(Long.parseLong(aeBean.getMID()));\r\n        mBeanTwo.setTo(HCPMID);\r\n        mBeanOne.setSubject(\"Subject\");\r\n        mBeanTwo.setSubject(\"Subject\");\r\n        mBeanOne.setBody(body);\r\n        mBeanTwo.setBody(body);\r\n        mBeanOne.setFrom(loggedInMID);\r\n        mBeanTwo.setFrom(loggedInMID);\r\n        messenger.sendMessage(mBeanOne);\r\n        messenger.sendMessage(mBeanTwo);\r\n        transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Adverse Event Report Removed\");\r\n    } catch (SQLException e) {\r\n        throw new DBException(e);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void remove(int)",
                "comments": "Optional[/**\r\n * Method used to remove an adverse event report\r\n *\r\n * @param id the id of the report to be removed\r\n * @throws DBException\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Removes an adverse event report from the database and sends notification messages to the patient and healthcare provider involved.\n * \n * @param id the unique identifier of the adverse event report to be removed\n * \n * @throws DBException if there is an error accessing the database\n */\npublic void remove(int id) {\n    long HCPMID;\n    try {\n        AdverseEventBean aeBean = adverseEventDAO.getReport(id);\n        adverseEventDAO.removeReport(id);\n        HCPMID = adverseEventDAO.getHCPMID(id);\n        MessageBean mBeanTwo = new MessageBean();\n        MessageBean mBeanOne = new MessageBean();\n        String body = \"An adverse event for \" + aeBean.getDrug() + \" prescribed to \" + patientDAO.getName(Long.parseLong(aeBean.getMID())) + \" with description: (\" + aeBean.getDescription() + \") was removed.\";\n        mBeanOne.setTo(Long.parseLong(aeBean.getMID()));\n        mBeanTwo.setTo(HCPMID);\n        mBeanOne.setSubject(\"Subject\");\n        mBeanTwo.setSubject(\"Subject\");\n        mBeanOne.setBody(body);\n        mBeanTwo.setBody(body);\n        mBeanOne.setFrom(loggedInMID);\n        mBeanTwo.setFrom(loggedInMID);\n        messenger.sendMessage(mBeanOne);\n        messenger.sendMessage(mBeanTwo);\n        transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Adverse Event Report Removed\");\n    } catch (SQLException e) {\n        throw new DBException(e);\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.transactionDAO = factory.getTransactionDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.messenger = new SendMessageAction(factory, loggedInMID);\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public MonitorAdverseEventAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Constructor\r\n * @param factory\r\n * @param loggedInMID\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new MonitorAdverseEventAction object with the given DAOFactory and loggedInMID.\n * Initializes the loggedInMID field with the provided value, and initializes the transactionDAO, patientDAO,\n * emailer, adverseEventDAO, and messenger fields using the corresponding methods from the DAOFactory.\n * \n * @param factory the DAOFactory used to retrieve DAO objects\n * @param loggedInMID the MID of the logged-in user\n */"
            }
        ],
        "signature": "MonitorAdverseEventAction",
        "variables": [
            "private long loggedInMID",
            "private EmailUtil emailer",
            "private PatientDAO patientDAO",
            "private AdverseEventDAO adverseEventDAO",
            "private TransactionDAO transactionDAO",
            "private SendMessageAction messenger"
        ],
        "generated_class_comment": "/**\n * This class represents a service for retrieving adverse event reports based on specified criteria.\n * It provides methods to retrieve prescription or immunization adverse event reports between specified dates.\n * Additionally, it offers functionality to retrieve the name of a patient based on their MID.\n * \n * The main functionalities of this class include:\n * - Retrieving prescription or immunization adverse event reports based on specified dates\n * - Retrieving the name of a patient using their MID\n * \n * The behavior of this class is as follows:\n * - When retrieving adverse event reports, the method getReports(boolean isPrescription, String start, String end) is used.\n *   If the boolean parameter is true, prescription adverse event reports are returned. If false, immunization adverse event reports are returned.\n * - When retrieving a patient's name, the method getName(long MID) is used. If the patient does not exist or an error occurs, an appropriate message is returned.\n * \n * This class is essential for managing and retrieving adverse event reports within the system, providing valuable information for healthcare professionals and administrators.\n */\n**/\n/**\n * This class contains methods for interacting with patients, such as retrieving patient names and sending emails requesting more information.\n * \n * The method retrievePatientName(MID) retrieves the name of a patient with the given Medical Record Number (MID). If the patient does not exist, an empty string is returned.\n * \n * The method sendEmail(patientMID, message) sends an email to a specified patient with a given message. It logs the transaction as an adverse event and returns a string containing the sender's ID and the email body.\n * \n * Note: Both methods may throw a DBException if there is an error while interacting with the database.\n */\npublic class PatientInteraction {\n    // class implementation here\n}\n*/\n/**\n * Removes an adverse event report from the database and sends notification messages to the patient and healthcare provider involved.\n * \n * This method removes the adverse event report identified by the given id. It retrieves the necessary information from the database, including the adverse event details and the healthcare provider's MID. \n * It then constructs notification messages to inform both the patient and the healthcare provider about the removal of the adverse event report. \n * A transaction log is also created to track this action in the system.\n * \n * @param id the unique identifier of the adverse event report to be removed\n * @throws DBException if there is an issue with the database operation\n * @throws iTrustException if there is an issue with the iTrust system\n */\npublic void remove(int id) {\n    long HCPMID;\n    try {\n        AdverseEventBean aeBean = adverseEventDAO.getReport(id);\n        adverseEventDAO.removeReport(id);\n        HCPMID = adverseEventDAO.getHCPMID(id);\n        \n        MessageBean mBeanTwo = new MessageBean();\n        MessageBean mBeanOne = new MessageBean();\n        \n        String body = \"An adverse event for \" + aeBean.getDrug() + \" prescribed to \" + patientDAO.getName(Long.parseLong(aeBean.getMID())) + \" with description: (\" + aeBean.getDescription() + \") was removed.\";\n        \n        mBeanOne.setTo(Long.parseLong(aeBean.getMID()));\n        mBeanTwo.setTo(HCPMID);\n        \n        mBeanOne.setSubject(\"Subject\");\n        mBeanTwo.setSubject(\"Subject\");\n        \n        mBeanOne.setBody(body);\n        mBeanTwo.setBody(body);\n        \n        mBeanOne.setFrom(loggedInMID);\n        mBeanTwo.setFrom(loggedInMID);\n        \n        messenger.sendMessage(mBeanOne);\n        messenger.sendMessage(mBeanTwo);\n        \n        transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID, 0L, \"Adverse Event Report Removed\");\n    } catch (SQLException e) {\n        throw new DBException(e);\n    }\n}\n*/\n/**\n * MonitorAdverseEventAction class represents an action to monitor and manage adverse event reports in the system.\n * It provides methods to remove adverse event reports, send notifications to relevant parties, and log transactions.\n * \n * This class requires a DAOFactory and a loggedInMID to be instantiated. It initializes various DAO objects and messaging utilities\n * to perform its functionalities.\n * \n * The main functionality of this class is to remove an adverse event report based on the provided ID. It retrieves the necessary\n * information from the database, sends notification emails to the patient and healthcare provider involved, and logs the transaction.\n * \n * This class handles exceptions by throwing a DBException if there is an error accessing the database.\n */\n**/\n/**\n * The MonitorAdverseEventAction class is responsible for monitoring adverse events\n * and taking necessary actions based on the logged-in user's MID. It utilizes\n * various DAO objects from the provided DAOFactory to retrieve and manipulate data.\n * \n * This class requires a DAOFactory, which is used to retrieve DAO objects, and the\n * MID of the logged-in user for authentication and authorization purposes.\n * \n * The main functionalities of this class include monitoring adverse events, sending\n * notifications to relevant parties, and performing necessary actions to address\n * the adverse events. It interacts with the PatientDAO to retrieve patient information,\n * the AdverseEventDAO to manage adverse events, the TransactionDAO to log transactions,\n * and the SendMessageAction to send notifications.\n * \n * Overall, the MonitorAdverseEventAction class plays a crucial role in ensuring timely\n * detection and response to adverse events, thereby promoting patient safety and\n * quality of care.\n */"
    }
]