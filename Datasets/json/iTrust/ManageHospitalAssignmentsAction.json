[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    try {\r\n        long mid = Long.valueOf(midString);\r\n        List<HospitalBean> allHospitals = hospitalsDAO.getAllHospitals();\r\n        List<HospitalBean> ourHospitals = personnelDAO.getHospitals(mid);\r\n        while (!ourHospitals.isEmpty()) {\r\n            allHospitals.remove(ourHospitals.remove(0));\r\n        }\r\n        return allHospitals;\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCP's MID not a number\");\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<HospitalBean> getAvailableHospitals(String)",
                "comments": "Optional[/**\r\n * Returns a list of hospitals to which the given mid is not currently assigned\r\n *\r\n * @param midString\r\n * @return list of HospitalBeans\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of available hospitals for a given Healthcare Personnel (HCP) based on their MID.\n * \n * @param midString the MID of the HCP for whom to retrieve available hospitals\n * @return a List of HospitalBean objects representing the available hospitals for the specified HCP\n * @throws iTrustException if the MID provided is not a valid number\n */\npublic List<HospitalBean> getAvailableHospitals(String midString) {\n    try {\n        long mid = Long.valueOf(midString);\n        List<HospitalBean> allHospitals = hospitalsDAO.getAllHospitals();\n        List<HospitalBean> ourHospitals = personnelDAO.getHospitals(mid);\n        while (!ourHospitals.isEmpty()) {\n            allHospitals.remove(ourHospitals.remove(0));\n        }\n        return allHospitals;\n    } catch (NumberFormatException e) {\n        throw new iTrustException(\"HCP's MID not a number\");\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        long mid = Long.valueOf(midString);\r\n        return personnelDAO.getHospitals(mid);\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCP's MID not a number\");\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<HospitalBean> getAssignedHospitals(String)",
                "comments": "Optional[/**\r\n * Returns a list of hospitals to which the given mid is currently assigned\r\n *\r\n * @param midString\r\n * @return list of HosptialBeans\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of hospitals assigned to a healthcare personnel with the given MID.\n * \n * @param midString the MID of the healthcare personnel as a String\n * @return a List of HospitalBean objects representing the hospitals assigned to the healthcare personnel\n * @throws iTrustException if the MID provided is not a valid number\n */\npublic List<HospitalBean> getAssignedHospitals(String midString) {\n    try {\n        long mid = Long.valueOf(midString);\n        return personnelDAO.getHospitals(mid);\n    } catch (NumberFormatException e) {\n        throw new iTrustException(\"HCP's MID not a number\");\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        boolean confirm = hospitalsDAO.assignHospital(hcpID, hospitalID);\r\n        if (confirm) {\r\n            /*\r\n\t\t\t\t\t\t\t * only patient is mentioned for transaction type 0, but spec looks like personnel\r\n\t\t\t\t\t\t\t * should be included too...\r\n\t\t\t\t\t\t\t */\r\n            transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID, \"HCP Assigned to Hospital\");\r\n            return \"HCP successfully assigned.\";\r\n        } else\r\n            return \"Assignment did not occur\";\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCP's MID not a number\");\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public String assignHCPToHospital(String, String)",
                "comments": "Optional[/**\r\n * Assigns the mid to the hospital\r\n *\r\n * @param midString The MID of the person assigned to the hospital as a String.\r\n * @param hospitalID The ID of the hospital.\r\n * @return message indicating the status of the assignment\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": "Optional[[/*\r\n\t\t\t\t\t\t\t * only patient is mentioned for transaction type 0, but spec looks like personnel\r\n\t\t\t\t\t\t\t * should be included too...\r\n\t\t\t\t\t\t\t */\r\n]]",
                "generated_comment": "/**\n * Assigns a healthcare personnel (HCP) to a hospital.\n * \n * @param midString the MID of the HCP to be assigned\n * @param hospitalID the ID of the hospital to which the HCP will be assigned\n * @return a message indicating whether the assignment was successful or not\n * @throws iTrustException if the MID provided is not a valid number\n */\npublic String assignHCPToHospital(String midString, String hospitalID) {\n    try {\n        long hcpID = Long.valueOf(midString);\n        boolean confirm = hospitalsDAO.assignHospital(hcpID, hospitalID);\n        if (confirm) {\n            transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID, \"HCP Assigned to Hospital\");\n            return \"HCP successfully assigned.\";\n        } else\n            return \"Assignment did not occur\";\n    } catch (NumberFormatException e) {\n        throw new iTrustException(\"HCP's MID not a number\");\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        boolean confirm = hospitalsDAO.removeHospitalAssignment(hcpID, hospitalID);\r\n        if (confirm) {\r\n            transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID, \"HCP unassigned from hospital\");\r\n            return \"HCP successfully unassigned\";\r\n        } else\r\n            return \"HCP not unassigned\";\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCP's MID not a number\");\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String removeHCPAssignmentToHospital(String, String)",
                "comments": "Optional[/**\r\n * Removes HCPs assignment to the designated hospital\r\n *\r\n * @param midString\r\n *            the HCP's mid\r\n * @param hospitalID\r\n *            the hospital id to be removed\r\n * @return Status message\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Removes the assignment of a healthcare provider (HCP) to a hospital.\n * \n * @param midString the MID of the HCP to be unassigned (must be a valid long)\n * @param hospitalID the ID of the hospital from which the HCP is to be unassigned\n * @return a message indicating whether the HCP was successfully unassigned or not\n * @throws iTrustException if the MID of the HCP is not a valid number\n */\npublic String removeHCPAssignmentToHospital(String midString, String hospitalID) {\n    try {\n        long hcpID = Long.valueOf(midString);\n        boolean confirm = hospitalsDAO.removeHospitalAssignment(hcpID, hospitalID);\n        if (confirm) {\n            transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID, \"HCP unassigned from hospital\");\n            return \"HCP successfully unassigned\";\n        } else {\n            return \"HCP not unassigned\";\n        }\n    } catch (NumberFormatException e) {\n        throw new iTrustException(\"HCP's MID not a number\");\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        long hcpID = Long.valueOf(midString);\r\n        int numAssignments = hospitalsDAO.removeAllHospitalAssignmentsFrom(hcpID);\r\n        if (0 < numAssignments) {\r\n            transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID, \"HCP unassigned from all hospital\");\r\n        }\r\n        return numAssignments;\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCP's MID not a number\");\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public int removeAllAssignmentsFromHCP(String)",
                "comments": "Optional[/**\r\n * Removes all hospital assignments for the given hcp mid\r\n *\r\n * @param midString\r\n *            HCP's mid\r\n * @return status message\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Removes all hospital assignments for a healthcare provider with the given MID.\n * \n * @param midString the String representation of the healthcare provider's MID\n * @return the number of assignments removed\n * @throws iTrustException if the MID is not a valid number\n */\npublic int removeAllAssignmentsFromHCP(String midString) {\n    try {\n        long hcpID = Long.valueOf(midString);\n        int numAssignments = hospitalsDAO.removeAllHospitalAssignmentsFrom(hcpID);\n        if (0 < numAssignments) {\n            transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID, \"HCP unassigned from all hospital\");\n        }\n        return numAssignments;\n    } catch (NumberFormatException e) {\n        throw new iTrustException(\"HCP's MID not a number\");\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        long pid = Long.valueOf(hcpID);\r\n        if (personnelDAO.checkPersonnelExists(pid))\r\n            return pid;\r\n        else\r\n            throw new iTrustException(\"HCP does not exist\");\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"HCP ID is not a number: \" + e.getMessage());\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public long checkHCPID(String)",
                "comments": "Optional[/**\r\n * Checks if the hcpID param is a HCP\r\n *\r\n * @param hcpID\r\n *            the String to be checked\r\n * @return the mid as a long if the hcpID is a HCP's mid\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given Healthcare Personnel (HCP) ID exists in the database.\n * \n * @param hcpID the HCP ID to be checked\n * @return the valid HCP ID if it exists in the database\n * @throws iTrustException if the HCP ID is not a valid number or if the HCP does not exist\n */\npublic long checkHCPID(String hcpID) {\n    try {\n        long pid = Long.valueOf(hcpID);\n        if (personnelDAO.checkPersonnelExists(pid))\n            return pid;\n        else\n            throw new iTrustException(\"HCP does not exist\");\n    } catch (NumberFormatException e) {\n        throw new iTrustException(\"HCP ID is not a number: \" + e.getMessage());\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalsDAO = factory.getHospitalsDAO();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ManageHospitalAssignmentsAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Set up defaults\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the user managing hospitals.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ManageHospitalAssignmentsAction object with the specified DAOFactory and loggedInMID.\n * \n * @param factory the DAOFactory used to retrieve TransactionDAO, PersonnelDAO, and HospitalsDAO\n * @param loggedInMID the unique identifier of the currently logged in personnel\n * \n * This constructor initializes the loggedInMID field with the provided value and retrieves the TransactionDAO, PersonnelDAO, and HospitalsDAO from the given DAOFactory.\n */\npublic ManageHospitalAssignmentsAction(DAOFactory factory, long loggedInMID) {\n    this.loggedInMID = loggedInMID;\n    this.transDAO = factory.getTransactionDAO();\n    this.personnelDAO = factory.getPersonnelDAO();\n    this.hospitalsDAO = factory.getHospitalsDAO();\n}\n**/"
            }
        ],
        "signature": "ManageHospitalAssignmentsAction",
        "variables": [
            "private TransactionDAO transDAO",
            "private PersonnelDAO personnelDAO",
            "private HospitalsDAO hospitalsDAO",
            "private long loggedInMID"
        ],
        "generated_class_comment": "\", \"comments\": \"Optional[/**\\r\\n * Returns a list of hospitals to which the given mid is currently assigned\\r\\n *\\r\\n * @param midString\\r\\n * @return list of HospitalBeans\\r\\n * @throws iTrustException\\r\\n */\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Retrieves a list of hospitals currently assigned to a given Healthcare Personnel (HCP) based on their MID.\\n * \\n * @param midString the MID of the HCP for whom to retrieve assigned hospitals\\n * @return a List of HospitalBean objects representing the assigned hospitals for the specified HCP\\n * @throws iTrustException if the MID provided is not a valid number\\n */\\npublic List<HospitalBean> getAssignedHospitals(String midString) {\\n try {\\n long mid = Long.valueOf(midString);\\n return personnelDAO.getHospitals(mid);\\n } catch (NumberFormatException e) {\\n throw new iTrustException(\\\"HCP's MID not a number\\\");\\n }\\n}\\n*/\" } ], \"classComment\": \"/**\\n * This class provides methods for retrieving hospitals assigned and available for a given Healthcare Personnel (HCP).\\n * It interacts with the hospitalsDAO and personnelDAO to retrieve hospital information.\\n */\\n\" }]\n/**\n * This class provides functionality for managing assignments of healthcare personnel to hospitals in the iTrust system.\n * It includes methods for retrieving a list of hospitals assigned to a healthcare personnel with a given MID,\n * as well as for assigning a healthcare personnel to a specific hospital.\n * \n * The getAssignedHospitals method retrieves a list of hospitals assigned to a healthcare personnel with the provided MID.\n * It takes a MID as a String parameter and returns a List of HospitalBean objects representing the assigned hospitals.\n * If the MID provided is not a valid number, an iTrustException is thrown.\n * \n * The assignHCPToHospital method assigns a healthcare personnel with a given MID to a specific hospital.\n * It takes the MID of the healthcare personnel and the ID of the hospital as String parameters.\n * It logs a transaction of type ENTER_EDIT_DEMOGRAPHICS for the assignment and returns a message indicating the status of the assignment.\n * If the MID provided is not a valid number, an iTrustException is thrown.\n * \n * @author [Author Name]\n * @version 1.0\n */\n/**\n * This class provides methods for assigning and removing healthcare personnel (HCP) to and from hospitals.\n * \n * The assignHCPToHospital method assigns a healthcare personnel (HCP) to a specified hospital based on the provided MID and hospital ID.\n * It logs a transaction of type ENTER_EDIT_DEMOGRAPHICS and returns a message indicating the success or failure of the assignment.\n * \n * The removeHCPAssignmentToHospital method removes the assignment of a healthcare personnel (HCP) from a designated hospital.\n * It logs a transaction of type ENTER_EDIT_DEMOGRAPHICS and returns a message indicating the success or failure of the unassignment.\n * \n * Both methods handle exceptions for invalid MID inputs and throw an iTrustException with an appropriate message.\n */\n/**\n * Removes all hospital assignments for a healthcare provider with the given MID.\n * \n * @param midString the String representation of the healthcare provider's MID\n * @return status message indicating the number of assignments removed\n * @throws iTrustException if the MID of the healthcare provider is not a valid number\n */\npublic int removeAllAssignmentsFromHCP(String midString) {\n    try {\n        long hcpID = Long.valueOf(midString);\n        int numAssignments = hospitalsDAO.removeAllHospitalAssignmentsFrom(hcpID);\n        if (numAssignments > 0) {\n            transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID, \"HCP unassigned from all hospitals\");\n        }\n        return numAssignments;\n    } catch (NumberFormatException e) {\n        throw new iTrustException(\"HCP's MID not a number\");\n    }\n}\n*/\npublic class HCPService {\n\n    private long loggedInMID;\n    private TransactionDAO transDAO;\n    private HospitalsDAO hospitalsDAO;\n    private PersonnelDAO personnelDAO;\n\n    /**\n     * This class provides services related to Healthcare Personnel (HCP) management.\n     * It allows for assigning and unassigning HCPs from hospitals, as well as checking\n     * the existence of HCPs in the database.\n     */\n    public HCPService(long loggedInMID, TransactionDAO transDAO, HospitalsDAO hospitalsDAO, PersonnelDAO personnelDAO) {\n        this.loggedInMID = loggedInMID;\n        this.transDAO = transDAO;\n        this.hospitalsDAO = hospitalsDAO;\n        this.personnelDAO = personnelDAO;\n    }\n\n    /**\n     * Removes all assignments of a Healthcare Personnel (HCP) from hospitals.\n     * \n     * @param midString the MID of the HCP to remove assignments from\n     * @return the number of assignments removed\n     * @throws iTrustException if the MID is not a valid number\n     */\n    public int removeAllAssignmentsFromHCP(String midString) {\n        try {\n            long hcpID = Long.valueOf(midString);\n            int numAssignments = hospitalsDAO.removeAllHospitalAssignmentsFrom(hcpID);\n            if (numAssignments > 0) {\n                transDAO.logTransaction(TransactionType.ENTER_EDIT_DEMOGRAPHICS, loggedInMID, hcpID, \"HCP unassigned from all hospitals\");\n            }\n            return numAssignments;\n        } catch (NumberFormatException e) {\n            throw new iTrustException(\"HCP's MID is not a number\");\n        }\n    }\n\n    /**\n     * Checks if the given Healthcare Personnel (HCP) ID exists in the database.\n     * \n     * @param hcpID the HCP ID to be checked\n     * @return the valid HCP ID if it exists in the database\n     * @throws iTrustException if the HCP ID is not a valid number or if the HCP does not exist\n     */\n    public long checkHCPID(String hcpID) {\n        try {\n            long pid = Long.valueOf(hcpID);\n            if (personnelDAO.checkPersonnelExists(pid)) {\n                return pid;\n            } else {\n                throw new iTrustException(\"HCP does not exist\");\n            }\n        } catch (NumberFormatException e) {\n            throw new iTrustException(\"HCP ID is not a number: \" + e.getMessage());\n        }\n    }\n}\n/**\n * The ManageHospitalAssignmentsAction class represents an action that allows a user to manage hospital assignments.\n * It provides functionality to retrieve and update hospital assignments for personnel.\n * \n * This class requires a DAOFactory to create the necessary DAO objects for interacting with the database.\n * The loggedInMID field stores the unique identifier of the currently logged in personnel.\n * \n * The main functionalities of this class include:\n * - Retrieving TransactionDAO, PersonnelDAO, and HospitalsDAO from the DAOFactory\n * - Managing hospital assignments for personnel\n * \n * The constructor initializes the loggedInMID field with the provided value and retrieves the necessary DAO objects.\n * \n * Usage:\n * ManageHospitalAssignmentsAction action = new ManageHospitalAssignmentsAction(factory, loggedInMID);\n * \n * Example:\n * DAOFactory factory = new DAOFactory();\n * long loggedInMID = 12345;\n * ManageHospitalAssignmentsAction action = new ManageHospitalAssignmentsAction(factory, loggedInMID);\n */\npublic class ManageHospitalAssignmentsAction {\n    private TransactionDAO transDAO;\n    private PersonnelDAO personnelDAO;\n    private HospitalsDAO hospitalsDAO;\n    private long loggedInMID;\n    \n    /**\n     * Constructs a new ManageHospitalAssignmentsAction object with the specified DAOFactory and loggedInMID.\n     * \n     * @param factory the DAOFactory used to retrieve TransactionDAO, PersonnelDAO, and HospitalsDAO\n     * @param loggedInMID the unique identifier of the currently logged in personnel\n     * \n     * This constructor initializes the loggedInMID field with the provided value and retrieves the TransactionDAO, PersonnelDAO, and HospitalsDAO from the given DAOFactory.\n     */\n    public ManageHospitalAssignmentsAction(DAOFactory factory, long loggedInMID) {\n        this.loggedInMID = loggedInMID;\n        this.transDAO = factory.getTransactionDAO();\n        this.personnelDAO = factory.getPersonnelDAO();\n        this.hospitalsDAO = factory.getHospitalsDAO();\n    }\n}\n**/"
    }
]