[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO OVSurvey (VisitID, SurveyDate) VALUES (?,?)\");\r\n        ps.setLong(1, surveyBean.getVisitID());\r\n        ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        if (surveyBean.getWaitingRoomMinutes() > 0) {\r\n            ps = conn.prepareStatement(\"update OVSurvey set WaitingRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getWaitingRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if (surveyBean.getExamRoomMinutes() > 0) {\r\n            ps = conn.prepareStatement(\"update OVSurvey set ExamRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getExamRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if (surveyBean.getVisitSatisfaction() > 0) {\r\n            ps = conn.prepareStatement(\"update OVSurvey set VisitSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getVisitSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if (surveyBean.getTreatmentSatisfaction() > 0) {\r\n            ps = conn.prepareStatement(\"update OVSurvey set TreatmentSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getTreatmentSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void addCompletedSurvey(SurveyBean, Date)",
                "comments": "Optional[/**\r\n * Insert survey data into database.\r\n * @param surveyBean The Bean representing the user's responses which will be inserted.\r\n * @param date The date the survey was completed.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a completed survey to the database.\n * \n * @param surveyBean the SurveyBean object containing the survey data\n * @param date the Date object representing the survey date\n */\npublic void addCompletedSurvey(SurveyBean surveyBean, Date date) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"INSERT INTO OVSurvey (VisitID, SurveyDate) VALUES (?,?)\");\n        ps.setLong(1, surveyBean.getVisitID());\n        ps.setTimestamp(2, new java.sql.Timestamp(date.getTime()));\n        ps.executeUpdate();\n        if (surveyBean.getWaitingRoomMinutes() > 0) {\n            ps = conn.prepareStatement(\"update OVSurvey set WaitingRoomMinutes = ? where VisitID = ?\");\n            ps.setFloat(1, surveyBean.getWaitingRoomMinutes());\n            ps.setLong(2, surveyBean.getVisitID());\n            ps.executeUpdate();\n        }\n        if (surveyBean.getExamRoomMinutes() > 0) {\n            ps = conn.prepareStatement(\"update OVSurvey set ExamRoomMinutes = ? where VisitID = ?\");\n            ps.setFloat(1, surveyBean.getExamRoomMinutes());\n            ps.setLong(2, surveyBean.getVisitID());\n            ps.executeUpdate();\n        }\n        if (surveyBean.getVisitSatisfaction() > 0) {\n            ps = conn.prepareStatement(\"update OVSurvey set VisitSatisfaction = ? where VisitID = ?\");\n            ps.setFloat(1, surveyBean.getVisitSatisfaction());\n            ps.setLong(2, surveyBean.getVisitID());\n            ps.executeUpdate();\n        }\n        if (surveyBean.getTreatmentSatisfaction() > 0) {\n            ps = conn.prepareStatement(\"update OVSurvey set TreatmentSatisfaction = ? where VisitID = ?\");\n            ps.setFloat(1, surveyBean.getTreatmentSatisfaction());\n            ps.setLong(2, surveyBean.getVisitID());\n            ps.executeUpdate();\n        }\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM OVSurvey WHERE VisitID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return surveyLoader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public SurveyBean getSurveyData(long)",
                "comments": "Optional[/**\r\n * Gets survey data from the database by the office visit id. Creates an instance of an\r\n * SurveyBean with data and returns it.\r\n *\r\n * @param id The unique ID of the survey in question.\r\n * @return A bean containing the SurveyBean.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves survey data for a specific visit ID.\n * \n * @param id the visit ID for which survey data is to be retrieved\n * @return a SurveyBean object containing the survey data for the specified visit ID\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT count(*) FROM OVSurvey WHERE VisitID = ?\");\r\n        ps.setLong(1, visitID);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return (rs.getInt(1) == 0) ? false : true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean isSurveyCompleted(long)",
                "comments": "Optional[/**\r\n * Has this survey been completed?\r\n *\r\n * @param visitID The unique ID of the office visit we are wondering about.\r\n * @return boolean indicating whether this survey is completed.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a survey has been completed for a specific visit ID.\n * \n * @param visitID the ID of the visit for which to check survey completion\n * @return true if the survey has been completed, false otherwise\n * @throws DBException if there is an error accessing the database\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.factory = factory;\r\n    this.surveyLoader = new SurveyLoader();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public SurveyDAO(DAOFactory)",
                "comments": "Optional[/**\r\n * The typical constructor.\r\n * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new SurveyDAO object with the specified DAOFactory.\n * \n * @param factory the DAOFactory to be used by the SurveyDAO\n * \n * This constructor initializes the SurveyDAO with the given DAOFactory and creates a new SurveyLoader object.\n */"
            }
        ],
        "signature": "SurveyDAO",
        "variables": [
            "private DAOFactory factory",
            "private SurveyLoader surveyLoader"
        ],
        "generated_class_comment": "/**\n * This class represents a data access object for handling survey data in the database.\n * It provides methods to insert survey data, update survey responses, and manage database connections.\n * The main functionality of this class is to add completed surveys to the database with the specified survey data and completion date.\n * \n * The addCompletedSurvey method inserts survey data into the OVSurvey table in the database. It takes a SurveyBean object representing the user's responses and a Date object representing the completion date of the survey. \n * The method first establishes a database connection, prepares SQL statements for inserting and updating survey data, sets parameters based on the surveyBean object, and executes the statements to insert or update the survey data in the database.\n * \n * If the surveyBean contains waiting room minutes, exam room minutes, visit satisfaction, or treatment satisfaction values greater than 0, the method updates the corresponding columns in the OVSurvey table for the specified VisitID.\n * \n * If any SQL exception occurs during the database operations, the method catches the exception, prints the stack trace, and throws a DBException with the original exception as the cause.\n * \n * Finally, the method closes the database connection and prepared statement to release resources.\n */\npublic void addCompletedSurvey(SurveyBean surveyBean, Date date) {\n    // Method implementation\n}\n*/\nSure! Here is a comprehensive JavaDoc comment for the given Java class:\n\n/**\n * This class is responsible for adding a completed survey to the database. It takes a SurveyBean object containing the survey data and a Date object representing the survey date as parameters.\n * \n * The addCompletedSurvey method first establishes a connection to the database and prepares an SQL statement to insert the survey data into the OVSurvey table. It then sets the VisitID and SurveyDate values using the data from the SurveyBean object and the provided Date object, respectively.\n * \n * Additionally, the method checks if certain survey attributes (WaitingRoomMinutes, ExamRoomMinutes, VisitSatisfaction, TreatmentSatisfaction) are greater than 0 in the SurveyBean object. If so, it updates the corresponding values in the OVSurvey table for the given VisitID.\n * \n * If any SQLException occurs during the database operations, the method prints the stack trace and throws a DBException.\n * \n * Finally, the method closes the database connection and prepared statement in the 'finally' block to ensure proper resource management.\n */\n \nI hope this helps! Let me know if you need any further assistance.\n/**\n * This class provides methods to interact with survey data in the database. It includes functions to retrieve survey data for a specific visit ID and check if a survey has been completed for a visit. \n * \n * The getSurveyData method retrieves survey data from the database based on the provided visit ID and returns a SurveyBean object containing the data. \n * \n * The isSurveyCompleted method checks if a survey has been completed for a specific visit by querying the database and returning a boolean value indicating the completion status. \n * \n * This class handles database connections, executes SQL queries, and throws DBException in case of any errors during database operations. \n */\n**/\n/**\n * The SurveyDAO class is responsible for managing surveys within the database.\n * It provides methods to check if a survey has been completed for a specific visit ID.\n * \n * This class utilizes a DAOFactory for obtaining SQL connections and a SurveyLoader for loading survey data.\n * \n * The main functionalities of this class include:\n * - Checking if a survey has been completed for a given visit ID\n * \n * This class is designed to handle database operations related to surveys and ensure data integrity.\n * \n * @author [Your Name]\n * @version 1.0\n * @see DAOFactory\n * @see SurveyLoader\n */"
    }
]