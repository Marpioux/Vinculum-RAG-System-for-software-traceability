[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return patientDAO.getPatient(patientID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PatientBean getPatient(long)",
                "comments": "Optional[/**\r\n * Gets a PatientBean from an MID\r\n *\r\n * @param patientID MID of the patient\r\n * @return PatientBean for the MID given\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a patient from the database based on the given patient ID.\n * \n * @param patientID the unique identifier of the patient to retrieve\n * @return the PatientBean object representing the patient with the specified ID\n */"
            },
            {
                "body": "Optional[{\r\n    return patientDAO.getRepresented(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PatientBean> getRepresentees()",
                "comments": "Optional[/**\r\n * Gets the logged in person's representees\r\n *\r\n * @return list of PatientBeans holding the representees\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of PatientBeans representing the patients that the currently logged in user is representing.\n * \n * @return A List of PatientBeans representing the patients that the currently logged in user is representing.\n */"
            },
            {
                "body": "Optional[{\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PersonnelBean getPrescribingDoctor(PrescriptionBean)",
                "comments": "Optional[/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription item in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the prescribing doctor associated with the given prescription.\n * \n * @param prescription the PrescriptionBean object representing the prescription\n * @return the PersonnelBean object representing the prescribing doctor\n */"
            },
            {
                "body": "Optional[{\r\n    PatientBean patient = patientDAO.getPatient(patientID);\r\n    if (loggedInMID == patientID) {\r\n        transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\r\n        return patientDAO.getExpiredPrescriptions(patientID);\r\n    }\r\n    List<String> toList = new ArrayList<String>();\r\n    toList.add(patient.getEmail());\r\n    List<PatientBean> representatives = patientDAO.getRepresenting(patientID);\r\n    for (PatientBean representative : representatives) {\r\n        if (loggedInMID == representative.getMID()) {\r\n            transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\r\n            return patientDAO.getExpiredPrescriptions(patientID);\r\n        }\r\n        toList.add(representative.getEmail());\r\n    }\r\n    List<PersonnelBean> dlhcps = patientDAO.getDeclaredHCPs(patientID);\r\n    for (PersonnelBean dlhcp : dlhcps) {\r\n        if (loggedInMID == dlhcp.getMID()) {\r\n            transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\r\n            return patientDAO.getExpiredPrescriptions(patientID);\r\n        }\r\n        List<PersonnelBean> uaps = personnelDAO.getUAPsForHCP(dlhcp.getMID());\r\n        for (PersonnelBean uap : uaps) {\r\n            if (loggedInMID == uap.getMID()) {\r\n                transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\r\n                return patientDAO.getPrescriptions(patientID);\r\n            }\r\n        }\r\n    }\r\n    Email email = new Email();\r\n    email.setToList(toList);\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    email.setSubject(\"Undesignated Personnel Have Accessed Your Prescription Records\");\r\n    email.setBody(\"An undesignated HCP or UAP has accessed your prescription records. For more information, please log in to iTrust.\");\r\n    emailer.sendEmail(email);\r\n    transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID);\r\n    return patientDAO.getPrescriptions(patientID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PrescriptionBean> getPrescriptionsForPatient(long)",
                "comments": "Optional[/**\r\n * Returns all the prescriptions for a given patient\r\n *\r\n * @param patientID patient in question\r\n * @return list of all the prescriptions for that patient\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of prescriptions for a given patient based on the patient's ID.\n * If the logged-in MID matches the patient's ID, expired prescriptions are returned.\n * If the logged-in MID matches a representative's MID, expired prescriptions are returned.\n * If the logged-in MID matches a declared HCP's MID, prescriptions are returned.\n * If the logged-in MID matches a UAP's MID associated with a declared HCP, prescriptions are returned.\n * An email notification is sent to the patient and their representatives if an undesignated personnel accesses the prescription records.\n * \n * @param patientID the ID of the patient for whom prescriptions are being retrieved\n * @return a list of PrescriptionBean objects representing the prescriptions for the patient\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ViewExpiredPrescriptionsAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Set up defaults\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the person viewing the expired prescriptions.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ViewExpiredPrescriptionsAction object with the given DAOFactory and loggedInMID.\n * \n * @param factory the DAOFactory to be used for accessing data\n * @param loggedInMID the ID of the logged in personnel\n * \n * This constructor initializes the emailer, patientDAO, personnelDAO, and transDAO fields using the provided factory.\n * It also sets the loggedInMID field to the specified value.\n */\npublic ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {\n    this.emailer = new EmailUtil(factory);\n    this.patientDAO = factory.getPatientDAO();\n    this.personnelDAO = factory.getPersonnelDAO();\n    this.transDAO = factory.getTransactionDAO();\n    this.loggedInMID = loggedInMID;\n}"
            }
        ],
        "signature": "ViewExpiredPrescriptionsAction",
        "variables": [
            "private PatientDAO patientDAO",
            "private PersonnelDAO personnelDAO",
            "private TransactionDAO transDAO",
            "private EmailUtil emailer",
            "private long loggedInMID"
        ],
        "generated_class_comment": "This Java class is a part of a medical records system and contains methods related to retrieving patient and personnel information. \n\nThe class includes methods such as getPatient, getRepresentees, and getPrescribingDoctor, which retrieve information about patients based on their unique identifiers, the representees of the currently logged in user, and the prescribing doctor associated with a prescription, respectively. \n\nEach method has a detailed JavaDoc comment that describes its purpose, parameters, return values, and potential exceptions that may be thrown. \n\nOverall, this class serves as a utility for retrieving important information about patients and personnel within the medical records system, providing essential functionality for managing and accessing data within the system.\n/**\n * This class represents a PersonnelBean object that is used to handle prescription-related functionalities for a prescribing doctor.\n * The main purpose of this class is to retrieve expired prescriptions for a patient and handle access control for viewing prescription reports.\n * \n * The getExpiredPrescriptions method retrieves expired prescriptions for a patient based on the patient's ID. It logs a transaction of type VIEW_PRESCRIPTION_REPORT for the logged-in personnel if they are the patient or one of the patient's representatives or declared HCPs. It also sends an email notification to the patient and their representatives if an undesignated HCP or UAP accesses the prescription records.\n * \n * The behavior of this class includes checking access control for viewing prescription reports, logging transactions, sending email notifications, and retrieving expired prescriptions for a patient.\n */\npublic class PersonnelBean {\n    // class implementation goes here\n}\n*/\n/**\n * The ViewExpiredPrescriptionsAction class is responsible for retrieving a list of prescriptions for a given patient based on the patient's ID. \n * It handles different scenarios based on the logged-in user's role and permissions.\n * \n * If the logged-in user is the patient or a representative, expired prescriptions are returned.\n * If the logged-in user is a declared healthcare provider (HCP) or a User Authorized Personnel (UAP) associated with a declared HCP, all prescriptions are returned.\n * \n * This class utilizes DAOFactory to access the necessary Data Access Objects (DAOs) for retrieving prescription information.\n * It also utilizes EmailUtil to send email notifications to the patient and their representatives if an unauthorized personnel accesses the prescription records.\n * \n * The main functionality of this class is to retrieve a list of PrescriptionBean objects representing the prescriptions for the specified patient.\n * \n * @param factory the DAOFactory used for accessing data\n * @param loggedInMID the ID of the user viewing the expired prescriptions\n * @throws iTrustException if there are any issues with retrieving the prescriptions\n */\npublic ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {\n    this.emailer = new EmailUtil(factory);\n    this.patientDAO = factory.getPatientDAO();\n    this.personnelDAO = factory.getPersonnelDAO();\n    this.transDAO = factory.getTransactionDAO();\n    this.loggedInMID = loggedInMID;\n}\n*/\n/**\n * This class represents an action to view expired prescriptions for logged in personnel.\n * \n * This constructor initializes the emailer, patientDAO, personnelDAO, and transDAO fields using the provided factory.\n * It also sets the loggedInMID field to the specified value.\n * \n * The main functionalities of this class include:\n * - Viewing expired prescriptions for logged in personnel\n * \n * Overall behavior:\n * - The class allows logged in personnel to view expired prescriptions by initializing necessary fields and setting the logged in personnel's ID.\n */\n \npublic class ViewExpiredPrescriptionsAction {\n    private PatientDAO patientDAO;\n    private PersonnelDAO personnelDAO;\n    private TransactionDAO transDAO;\n    private EmailUtil emailer;\n    private long loggedInMID;\n    \n    /**\n     * Constructor for ViewExpiredPrescriptionsAction.\n     * \n     * @param factory the DAOFactory used to initialize fields\n     * @param loggedInMID the ID of the logged in personnel\n     */\n    public ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {\n        this.emailer = new EmailUtil(factory);\n        this.patientDAO = factory.getPatientDAO();\n        this.personnelDAO = factory.getPersonnelDAO();\n        this.transDAO = factory.getTransactionDAO();\n        this.loggedInMID = loggedInMID;\n    }\n}\n**/"
    }
]