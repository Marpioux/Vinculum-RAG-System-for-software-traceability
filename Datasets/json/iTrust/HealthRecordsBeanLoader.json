[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    ArrayList<HealthRecord> list = new ArrayList<HealthRecord>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    }\r\n    return list;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public List<HealthRecord> loadList(ResultSet)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads a list of HealthRecord objects from a ResultSet.\n * \n * @param rs the ResultSet containing the data to be loaded into HealthRecord objects\n * @return a List of HealthRecord objects populated with data from the ResultSet\n */\npublic List<HealthRecord> loadList(ResultSet rs) {\n    ArrayList<HealthRecord> list = new ArrayList<HealthRecord>();\n    while (rs.next()) {\n        list.add(loadSingle(rs));\n    }\n    return list;\n}"
            },
            {
                "body": "Optional[{\r\n    int i = 1;\r\n    ps.setLong(i++, bean.getPatientID());\r\n    ps.setDouble(i++, bean.getHeight());\r\n    ps.setDouble(i++, bean.getWeight());\r\n    ps.setInt(i++, bean.isSmoker() ? 1 : 0);\r\n    ps.setInt(i++, bean.getBloodPressureN());\r\n    ps.setInt(i++, bean.getBloodPressureD());\r\n    ps.setInt(i++, bean.getCholesterolHDL());\r\n    ps.setInt(i++, bean.getCholesterolLDL());\r\n    ps.setInt(i++, bean.getCholesterolTri());\r\n    ps.setLong(i++, bean.getPersonnelID());\r\n    return ps;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public PreparedStatement loadParameters(PreparedStatement, HealthRecord)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads the parameters of a HealthRecord object into a PreparedStatement for database insertion.\n * \n * @param ps the PreparedStatement object to load the parameters into\n * @param bean the HealthRecord object containing the data to be inserted\n * @return the PreparedStatement object with the parameters loaded\n * \n * @throws SQLException if a database access error occurs\n */\npublic PreparedStatement loadParameters(PreparedStatement ps, HealthRecord bean) throws SQLException {\n    int i = 1;\n    ps.setLong(i++, bean.getPatientID());\n    ps.setDouble(i++, bean.getHeight());\n    ps.setDouble(i++, bean.getWeight());\n    ps.setInt(i++, bean.isSmoker() ? 1 : 0);\n    ps.setInt(i++, bean.getBloodPressureN());\n    ps.setInt(i++, bean.getBloodPressureD());\n    ps.setInt(i++, bean.getCholesterolHDL());\n    ps.setInt(i++, bean.getCholesterolLDL());\n    ps.setInt(i++, bean.getCholesterolTri());\n    ps.setLong(i++, bean.getPersonnelID());\n    return ps;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    HealthRecord hr = new HealthRecord();\r\n    hr.setBloodPressureN(rs.getInt(\"BloodPressureN\"));\r\n    hr.setBloodPressureD(rs.getInt(\"BloodPressureD\"));\r\n    hr.setCholesterolHDL(rs.getInt(\"CholesterolHDL\"));\r\n    hr.setCholesterolLDL(rs.getInt(\"CholesterolLDL\"));\r\n    hr.setCholesterolTri(rs.getInt(\"CholesterolTri\"));\r\n    hr.setDateRecorded(rs.getTimestamp(\"AsOfDate\"));\r\n    hr.setSmoker(rs.getInt(\"Smoker\") == 1);\r\n    hr.setHeight(rs.getDouble(\"Height\"));\r\n    hr.setWeight(rs.getDouble(\"Weight\"));\r\n    hr.setPersonnelID(rs.getLong(\"HCPID\"));\r\n    hr.setPatientID(rs.getLong(\"PatientID\"));\r\n    return hr;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public HealthRecord loadSingle(ResultSet)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads a single HealthRecord object from the given ResultSet.\n * \n * @param rs the ResultSet containing the data for the HealthRecord\n * @return a HealthRecord object populated with data from the ResultSet\n */\npublic HealthRecord loadSingle(ResultSet rs) {\n    HealthRecord hr = new HealthRecord();\n    hr.setBloodPressureN(rs.getInt(\"BloodPressureN\"));\n    hr.setBloodPressureD(rs.getInt(\"BloodPressureD\"));\n    hr.setCholesterolHDL(rs.getInt(\"CholesterolHDL\"));\n    hr.setCholesterolLDL(rs.getInt(\"CholesterolLDL\"));\n    hr.setCholesterolTri(rs.getInt(\"CholesterolTri\"));\n    hr.setDateRecorded(rs.getTimestamp(\"AsOfDate\"));\n    hr.setSmoker(rs.getInt(\"Smoker\") == 1);\n    hr.setHeight(rs.getDouble(\"Height\"));\n    hr.setWeight(rs.getDouble(\"Weight\"));\n    hr.setPersonnelID(rs.getLong(\"HCPID\"));\n    hr.setPatientID(rs.getLong(\"PatientID\"));\n    return hr;\n}\n*/"
            }
        ],
        "constructors": [],
        "signature": "HealthRecordsBeanLoader",
        "variables": [],
        "generated_class_comment": "/**\n * This class represents a utility for loading and manipulating HealthRecord objects in a database.\n * It provides methods for loading a list of HealthRecord objects from a ResultSet and for loading the parameters\n * of a HealthRecord object into a PreparedStatement for database insertion.\n * \n * The main functionalities of this class include:\n * - Loading a list of HealthRecord objects from a ResultSet\n * - Loading the parameters of a HealthRecord object into a PreparedStatement for database insertion\n * \n * The behavior of this class is to interact with a database by loading and manipulating HealthRecord objects.\n * It ensures that the data is properly loaded and inserted into the database in a structured manner.\n * \n * @author [Author Name]\n * @version 1.0\n */\npublic class HealthRecordUtility {\n    // Methods for loading and manipulating HealthRecord objects\n}\n**/\n/**\n * This class represents a HealthRecord object that stores various health-related data for a patient.\n * It provides methods for setting and getting data such as blood pressure, cholesterol levels, height, weight, and smoker status.\n * The class also includes methods for loading a single HealthRecord object from a ResultSet.\n * \n * @param rs the ResultSet containing the data for the HealthRecord\n * @return a HealthRecord object populated with data from the ResultSet\n */\npublic HealthRecord loadSingle(ResultSet rs) {\n    HealthRecord hr = new HealthRecord();\n    hr.setBloodPressureN(rs.getInt(\"BloodPressureN\"));\n    hr.setBloodPressureD(rs.getInt(\"BloodPressureD\"));\n    hr.setCholesterolHDL(rs.getInt(\"CholesterolHDL\"));\n    hr.setCholesterolLDL(rs.getInt(\"CholesterolLDL\"));\n    hr.setCholesterolTri(rs.getInt(\"CholesterolTri\"));\n    hr.setDateRecorded(rs.getTimestamp(\"AsOfDate\"));\n    hr.setSmoker(rs.getInt(\"Smoker\") == 1);\n    hr.setHeight(rs.getDouble(\"Height\"));\n    hr.setWeight(rs.getDouble(\"Weight\"));\n    hr.setPersonnelID(rs.getLong(\"HCPID\"));\n    hr.setPatientID(rs.getLong(\"PatientID\"));\n    return hr;\n}\n*/\n/**\n * The HealthRecordsBeanLoader class is responsible for loading health records data from a database and mapping it to HealthRecordsBean objects.\n * It contains methods to set the weight, personnel ID, and patient ID for a HealthRecordsBean object.\n * \n * This class serves as a data loader for health records and provides functionality to retrieve and process health records information.\n * \n * The main functionalities of this class include:\n * - Loading health records data from a database\n * - Mapping database columns to HealthRecordsBean attributes\n * - Setting weight, personnel ID, and patient ID for a HealthRecordsBean object\n * \n * The overall behavior of this class is to retrieve health records data from a database, create HealthRecordsBean objects, and populate them with the retrieved data.\n * \n * @author [Your Name]\n * @version 1.0\n */"
    }
]