[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    validator.validate(diagn);\r\n    try {\r\n        if (icdDAO.addICDCode(diagn)) {\r\n            transDAO.logTransaction(TransactionType.MANAGE_DIAGNOSIS_CODE, performerID, 0L, \"added ICD code \" + diagn.getICDCode());\r\n            return \"Success: \" + diagn.getICDCode() + \" - \" + diagn.getDescription() + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String addICDCode(DiagnosisBean)",
                "comments": "Optional[/**\r\n * Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param\r\n *\r\n * @param diagn\r\n *            The new diagnosis (ICD code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a new ICD code to the database.\n * \n * @param diagn the DiagnosisBean object containing the ICD code and description to be added\n * @return a message indicating the success or failure of adding the ICD code\n */\npublic String addICDCode(DiagnosisBean diagn) {\n    validator.validate(diagn);\n    try {\n        if (icdDAO.addICDCode(diagn)) {\n            transDAO.logTransaction(TransactionType.MANAGE_DIAGNOSIS_CODE, performerID, 0L, \"added ICD code \" + diagn.getICDCode());\n            return \"Success: \" + diagn.getICDCode() + \" - \" + diagn.getDescription() + \" added\";\n        } else\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\n    } catch (DBException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    } catch (iTrustException e) {\n        return e.getMessage();\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    validator.validate(diagn);\r\n    try {\r\n        int rows = icdDAO.updateCode(diagn);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            transDAO.logTransaction(TransactionType.MANAGE_DIAGNOSIS_CODE, performerID, 0L, \"updated ICD code \" + diagn.getICDCode());\r\n            return \"Success: \" + rows + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String updateInformation(DiagnosisBean)",
                "comments": "Optional[/**\r\n * Updates a diagnosis with new information from the DiagnosisBean passed as a param\r\n *\r\n * @param diagn\r\n *            new information to update (but same code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates the information of a DiagnosisBean in the database.\n * \n * @param diagn the DiagnosisBean object containing the information to be updated\n * @return a String indicating the outcome of the update operation\n *         - \"Error: Code not found.\" if the specified code is not found in the database\n *         - \"Success: {number} row(s) updated\" if the update operation is successful\n *         - the error message if a DBException occurs during the update operation\n */\npublic String updateInformation(DiagnosisBean diagn) {\n    validator.validate(diagn);\n    try {\n        int rows = icdDAO.updateCode(diagn);\n        if (0 == rows) {\n            return \"Error: Code not found.\";\n        } else {\n            transDAO.logTransaction(TransactionType.MANAGE_DIAGNOSIS_CODE, performerID, 0L, \"updated ICD code \" + diagn.getICDCode());\n            return \"Success: \" + rows + \" row(s) updated\";\n        }\n    } catch (DBException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.performerID = performerID;\r\n    transDAO = factory.getTransactionDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public UpdateICDCodeListAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Set up\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param performerID The MID of the person udpating the ICDs.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new UpdateICDCodeListAction with the specified performer ID and DAO factory.\n * \n * @param factory the DAOFactory used to retrieve TransactionDAO and ICDCodesDAO instances\n * @param performerID the ID of the performer initiating the action\n */\npublic UpdateICDCodeListAction(DAOFactory factory, long performerID) {\n    this.performerID = performerID;\n    transDAO = factory.getTransactionDAO();\n    icdDAO = factory.getICDCodesDAO();\n}\n*/"
            }
        ],
        "signature": "UpdateICDCodeListAction",
        "variables": [
            "private long performerID",
            "private ICDCodesDAO icdDAO",
            "private TransactionDAO transDAO",
            "private DiagnosisBeanValidator validator"
        ],
        "generated_class_comment": "/**\n * This class represents a service for managing ICD codes (diagnoses) in a medical system.\n * It provides methods for adding and updating ICD codes in the database.\n * \n * The main functionalities of this class include:\n * - Adding a new ICD code based on the DiagnosisBean object passed as a parameter\n * - Updating an existing ICD code with new information\n * \n * The behavior of this class is as follows:\n * - When adding a new ICD code, the method 'addICDCode' validates the DiagnosisBean object, adds the code to the database,\n *   logs the transaction, and returns a status message indicating success or failure.\n * - When updating an existing ICD code, the method 'updateICDCode' validates the DiagnosisBean object, updates the code in the database,\n *   and returns a message indicating the success or failure of the update.\n * \n * This class follows best practices for exception handling, logging, and database operations.\n * It ensures data integrity by validating input and handling exceptions appropriately.\n */\npublic class ICDCodeService {\n    // Class implementation goes here\n}\n*/\n*/\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Constructs a new UpdateICDCodeListAction with the specified DAOFactory and performer ID.\\n * \\n * @param factory the DAOFactory used to retrieve data access objects\\n * @param performerID the ID of the performer initiating the action\\n */\\npublic UpdateICDCodeListAction(DAOFactory factory, long performerID) {\\n this.performerID = performerID;\\n transDAO = factory.getTransactionDAO();\\n icdDAO = factory.getICDCodesDAO();\\n}\\n*/\" } ], \"methods\": [ { \"body\": \"{\\r\\n return \\\"updateICDCodeList.do\\\";\\r\\n}\", \"hasComment\": true, \"hasInnerComment\": false, \"signature\": \"public String getName()\", \"comments\": \"Optional[/**\\r\\n * Returns the name of the action\\r\\n *\\r\\n * @return the name of the action\\r\\n */\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Returns the name of the action.\\n * \\n * @return the name of the action\\n */\\npublic String getName() {\\n return \\\"updateICDCodeList.do\\\";\\n}\\n*/\" } ] }\n/**\n * The UpdateICDCodeListAction class represents an action that allows a user to update the ICD codes list.\n * This class is responsible for handling the updating of ICD codes in the system.\n * It uses a DAOFactory to create the necessary DAO instances for interacting with the database.\n * The performerID parameter specifies the ID of the user initiating the action.\n * \n * The main functionalities of this class include:\n * - Retrieving the necessary DAO instances for interacting with the database\n * - Updating the ICD codes list in the system\n * \n * The overall behavior of this class is to provide a mechanism for users to update the ICD codes list, \n * ensuring that the changes are properly validated and persisted in the database.\n */\n*/"
    }
]