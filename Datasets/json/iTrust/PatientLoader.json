[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    List<PatientBean> list = new ArrayList<PatientBean>();\r\n    while (rs.next()) {\r\n        list.add(loadSingle(rs));\r\n    }\r\n    return list;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public List<PatientBean> loadList(ResultSet)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads a list of PatientBeans from a ResultSet.\n * \n * @param rs the ResultSet containing the data to load\n * @return a List of PatientBeans loaded from the ResultSet\n */\npublic List<PatientBean> loadList(ResultSet rs) {\n    List<PatientBean> list = new ArrayList<PatientBean>();\n    while (rs.next()) {\n        list.add(loadSingle(rs));\n    }\n    return list;\n}"
            },
            {
                "body": "Optional[{\r\n    PatientBean p = new PatientBean();\r\n    p.setMID(rs.getInt(\"MID\"));\r\n    p.setFirstName(rs.getString(\"firstName\"));\r\n    p.setLastName(rs.getString(\"LastName\"));\r\n    Date dateOfBirth = rs.getDate(\"DateOfBirth\");\r\n    if (dateOfBirth != null)\r\n        p.setDateOfBirthStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(dateOfBirth));\r\n    Date dateOfDeath = rs.getDate(\"DateOfDeath\");\r\n    if (dateOfDeath != null)\r\n        p.setDateOfDeathStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(dateOfDeath));\r\n    p.setCauseOfDeath(rs.getString(\"CauseOfDeath\"));\r\n    p.setEmail(rs.getString(\"Email\"));\r\n    p.setStreetAddress1(rs.getString(\"address1\"));\r\n    p.setStreetAddress2(rs.getString(\"address2\"));\r\n    p.setCity(rs.getString(\"City\"));\r\n    p.setState(rs.getString(\"State\"));\r\n    p.setZip1((rs.getString(\"Zip1\")));\r\n    p.setZip2((rs.getString(\"Zip2\")));\r\n    p.setPhone1((rs.getString(\"phone1\")));\r\n    p.setPhone2((rs.getString(\"phone2\")));\r\n    p.setPhone3((rs.getString(\"phone3\")));\r\n    p.setEmergencyName(rs.getString(\"eName\"));\r\n    p.setEmergencyPhone1(rs.getString(\"ePhone1\"));\r\n    p.setEmergencyPhone2(rs.getString(\"ePhone2\"));\r\n    p.setEmergencyPhone3(rs.getString(\"ePhone3\"));\r\n    p.setIcName(rs.getString(\"icName\"));\r\n    p.setIcAddress1(rs.getString(\"icAddress1\"));\r\n    p.setIcAddress2(rs.getString(\"icAddress2\"));\r\n    p.setIcCity(rs.getString(\"icCity\"));\r\n    p.setIcState(rs.getString(\"icState\"));\r\n    p.setIcZip1(rs.getString(\"icZip1\"));\r\n    p.setIcZip2(rs.getString(\"icZip2\"));\r\n    p.setIcPhone1(rs.getString(\"icPhone1\"));\r\n    p.setIcPhone2(rs.getString(\"icPhone2\"));\r\n    p.setIcPhone3(rs.getString(\"icPhone3\"));\r\n    p.setIcID(rs.getString(\"icID\"));\r\n    p.setMotherMID(rs.getString(\"MotherMID\"));\r\n    p.setFatherMID(rs.getString(\"FatherMID\"));\r\n    p.setBloodTypeStr(rs.getString(\"BloodType\"));\r\n    p.setEthnicityStr(rs.getString(\"Ethnicity\"));\r\n    p.setGenderStr(rs.getString(\"Gender\"));\r\n    p.setTopicalNotes(rs.getString(\"TopicalNotes\"));\r\n    p.setCreditCardType(rs.getString(\"CreditCardType\"));\r\n    p.setCreditCardNumber(rs.getString(\"CreditCardNumber\"));\r\n    p.setMessageFilter(rs.getString(\"MessageFilter\"));\r\n    return p;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public PatientBean loadSingle(ResultSet)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads a single patient from the ResultSet and maps it to a PatientBean object.\n * \n * @param rs the ResultSet containing the patient data\n * @return a PatientBean object with the patient data loaded from the ResultSet\n */\npublic PatientBean loadSingle(ResultSet rs) {\n    PatientBean p = new PatientBean();\n    p.setMID(rs.getInt(\"MID\"));\n    p.setFirstName(rs.getString(\"firstName\"));\n    p.setLastName(rs.getString(\"LastName\"));\n    Date dateOfBirth = rs.getDate(\"DateOfBirth\");\n    if (dateOfBirth != null)\n        p.setDateOfBirthStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(dateOfBirth));\n    Date dateOfDeath = rs.getDate(\"DateOfDeath\");\n    if (dateOfDeath != null)\n        p.setDateOfDeathStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(dateOfDeath));\n    p.setCauseOfDeath(rs.getString(\"CauseOfDeath\"));\n    p.setEmail(rs.getString(\"Email\"));\n    p.setStreetAddress1(rs.getString(\"address1\"));\n    p.setStreetAddress2(rs.getString(\"address2\"));\n    p.setCity(rs.getString(\"City\"));\n    p.setState(rs.getString(\"State\"));\n    p.setZip1((rs.getString(\"Zip1\")));\n    p.setZip2((rs.getString(\"Zip2\")));\n    p.setPhone1((rs.getString(\"phone1\")));\n    p.setPhone2((rs.getString(\"phone2\")));\n    p.setPhone3((rs.getString(\"phone3\")));\n    p.setEmergencyName(rs.getString(\"eName\"));\n    p.setEmergencyPhone1(rs.getString(\"ePhone1\"));\n    p.setEmergencyPhone2(rs.getString(\"ePhone2\"));\n    p.setEmergencyPhone3(rs.getString(\"ePhone3\"));\n    p.setIcName(rs.getString(\"icName\"));\n    p.setIcAddress1(rs.getString(\"icAddress1\"));\n    p.setIcAddress2(rs.getString(\"icAddress2\"));\n    p.setIcCity(rs.getString(\"icCity\"));\n    p.setIcState(rs.getString(\"icState\"));\n    p.setIcZip1(rs.getString(\"icZip1\"));\n    p.setIcZip2(rs.getString(\"icZip2\"));\n    p.setIcPhone1(rs.getString(\"icPhone1\"));\n    p.setIcPhone2(rs.getString(\"icPhone2\"));\n    p.setIcPhone3(rs.getString(\"icPhone3\"));\n    p.setIcID(rs.getString(\"icID\"));\n    p.setMotherMID(rs.getString(\"MotherMID\"));\n    p.setFatherMID(rs.getString(\"FatherMID\"));\n    p.setBloodTypeStr(rs.getString(\"BloodType\"));\n    p.setEthnicityStr(rs.getString(\"Ethnicity\"));\n    p.setGenderStr(rs.getString(\"Gender\"));\n    p.setTopicalNotes(rs.getString(\"TopicalNotes\"));\n    p.setCreditCardType(rs.getString(\"CreditCardType\"));\n    p.setCreditCardNumber(rs.getString(\"CreditCardNumber\"));\n    p.setMessageFilter(rs.getString(\"MessageFilter\"));\n    return p;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    int i = 1;\r\n    ps.setString(i++, p.getFirstName());\r\n    ps.setString(i++, p.getLastName());\r\n    ps.setString(i++, p.getEmail());\r\n    // ps.setString(i++, p.getSecurityQuestion());\r\n    // ps.setString(i++, p.getSecurityAnswer());\r\n    ps.setString(i++, p.getStreetAddress1());\r\n    ps.setString(i++, p.getStreetAddress2());\r\n    ps.setString(i++, p.getCity());\r\n    ps.setString(i++, p.getState());\r\n    ps.setString(i++, p.getZip1());\r\n    ps.setString(i++, p.getZip2());\r\n    ps.setString(i++, p.getPhone1());\r\n    ps.setString(i++, p.getPhone2());\r\n    ps.setString(i++, p.getPhone3());\r\n    ps.setString(i++, p.getEmergencyName());\r\n    ps.setString(i++, p.getEmergencyPhone1());\r\n    ps.setString(i++, p.getEmergencyPhone2());\r\n    ps.setString(i++, p.getEmergencyPhone3());\r\n    ps.setString(i++, p.getIcName());\r\n    ps.setString(i++, p.getIcAddress1());\r\n    ps.setString(i++, p.getIcAddress2());\r\n    ps.setString(i++, p.getIcCity());\r\n    ps.setString(i++, p.getIcState());\r\n    ps.setString(i++, p.getIcZip1());\r\n    ps.setString(i++, p.getIcZip2());\r\n    ps.setString(i++, p.getIcPhone1());\r\n    ps.setString(i++, p.getIcPhone2());\r\n    ps.setString(i++, p.getIcPhone3());\r\n    ps.setString(i++, p.getIcID());\r\n    Date date = null;\r\n    try {\r\n        date = new java.sql.Date(new SimpleDateFormat(\"MM/dd/yyyy\").parse(p.getDateOfBirthStr()).getTime());\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n    }\r\n    ps.setDate(i++, date);\r\n    date = null;\r\n    try {\r\n        date = new java.sql.Date(new SimpleDateFormat(\"MM/dd/yyyy\").parse(p.getDateOfDeathStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeathStr()))\r\n            date = null;\r\n        else\r\n            e.printStackTrace();\r\n    }\r\n    ps.setDate(i++, date);\r\n    ps.setString(i++, p.getCauseOfDeath());\r\n    ps.setString(i++, p.getMotherMID());\r\n    ps.setString(i++, p.getFatherMID());\r\n    ps.setString(i++, p.getBloodType().getName());\r\n    ps.setString(i++, p.getEthnicity().getName());\r\n    ps.setString(i++, p.getGender().getName());\r\n    ps.setString(i++, p.getTopicalNotes());\r\n    ps.setString(i++, p.getCreditCardType());\r\n    ps.setString(i++, p.getCreditCardNumber());\r\n    ps.setString(i++, p.getMessageFilter());\r\n    return ps;\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public PreparedStatement loadParameters(PreparedStatement, PatientBean)",
                "comments": null,
                "innerComments": "Optional[[// ps.setString(i++, p.getSecurityQuestion());\r\n, // ps.setString(i++, p.getSecurityAnswer());\r\n]]",
                "generated_comment": "/**\n * Loads the parameters of a PatientBean object into a PreparedStatement for database insertion.\n * \n * @param ps the PreparedStatement object to load the parameters into\n * @param p the PatientBean object containing the parameters to be loaded\n * @return the PreparedStatement object with the parameters loaded\n * \n * This method sets the parameters of the given PreparedStatement object with the values from the provided PatientBean object.\n * The parameters include the patient's personal information, address, contact details, emergency contact information,\n * insurance company details, date of birth, date of death, cause of death, parents' MIDs, blood type, ethnicity, gender,\n * topical notes, credit card information, and message filter. \n * \n * @throws SQLException if a database access error occurs\n */\npublic PreparedStatement loadParameters(PreparedStatement ps, PatientBean p) {\n    // method body\n}\n*/"
            }
        ],
        "constructors": [],
        "signature": "PatientLoader",
        "variables": [],
        "generated_class_comment": "/**\n * This class represents a PatientBean object that stores information about a patient.\n * It provides methods to load a list of PatientBeans from a ResultSet and to set various attributes of a PatientBean object.\n * \n * The main functionalities of this class include:\n * - Loading a list of PatientBeans from a ResultSet\n * - Setting attributes such as MID, firstName, lastName, date of birth, date of death, cause of death, email, address, city, state, zip code, phone numbers, emergency contact information, and insurance company name\n * \n * The overall behavior of this class is to facilitate the management and retrieval of patient information in a healthcare system.\n */\npublic class PatientBean {\n    // class implementation goes here\n}\n*/\n/**\n * This class is responsible for loading a single patient from a ResultSet and mapping it to a PatientBean object.\n * It contains a method that takes a ResultSet as input, extracts patient data from it, and populates a PatientBean object with that data.\n * The class provides functionalities to set various attributes of the PatientBean object such as address, city, state, zip code, phone numbers, IDs, blood type, ethnicity, gender, notes, credit card information, and message filter.\n * The loadSingle method returns a PatientBean object with the patient data loaded from the ResultSet.\n * \n * @param rs the ResultSet containing the patient data\n * @return a PatientBean object with the patient data loaded from the ResultSet\n */\npublic PatientBean loadSingle(ResultSet rs) {\n    PatientBean p = new PatientBean();\n    p.setMID(rs.getInt(\"MID\"));\n    p.setFirstName(rs.getString(\"firstName\"));\n    p.setLastName(rs.getString(\"LastName\"));\n    Date dateOfBirth = rs.getDate(\"DateOfBirth\");\n    if (dateOfBirth != null)\n        p.setDateOfBirthStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(dateOfBirth));\n    Date dateOfDeath = rs.getDate(\"DateOfDeath\");\n    if (dateOfDeath != null)\n        p.setDateOfDeathStr(new SimpleDateFormat(\"MM/dd/yyyy\").format(dateOfDeath));\n    p.setCauseOfDeath(rs.getString(\"CauseOfDeath\"));\n    p.setEmail(rs.getString(\"Email\"));\n    p.setIcAddress1(rs.getString(\"icAddress1\"));\n    p.setIcAddress2(rs.getString(\"icAddress2\"));\n    p.setIcCity(rs.getString(\"icCity\"));\n    p.setIcState(rs.getString(\"icState\"));\n    p.setIcZip1(rs.getString(\"icZip1\"));\n    p.setIcZip2(rs.getString(\"icZip2\"));\n    p.setIcPhone1(rs.getString(\"icPhone1\"));\n    p.setIcPhone2(rs.getString(\"icPhone2\"));\n    p.setIcPhone3(rs.getString(\"icPhone3\"));\n    p.setIcID(rs.getString(\"icID\"));\n    p.setMotherMID(rs.getString(\"MotherMID\"));\n    p.setFatherMID(rs.getString(\"FatherMID\"));\n    p.setBloodTypeStr(rs.getString(\"BloodType\"));\n    p.setEthnicityStr(rs.getString(\"Ethnicity\"));\n    p.setGenderStr(rs.getString(\"Gender\"));\n    p.setTopicalNotes(rs.getString(\"TopicalNotes\"));\n    p.setCreditCardType(rs.getString(\"CreditCardType\"));\n    p.setCreditCardNumber(rs.getString(\"CreditCardNumber\"));\n    p.setMessageFilter(rs.getString(\"MessageFilter\"));\n    return p;\n}\n*/\n/**\n * This class represents a data access object (DAO) for retrieving and updating patient information from a database.\n * It provides methods to map database records to Patient objects and vice versa.\n * The main functionalities of this class include fetching patient details, updating patient information, and handling emergency contact information.\n * \n * The class contains methods to set and get various attributes of a Patient object such as first name, last name, email, address, phone numbers, emergency contact details, insurance information, blood type, ethnicity, gender, and credit card information.\n * \n * Additionally, the class includes methods to handle message filtering preferences and store any topical notes related to the patient.\n * \n * The behavior of this class involves mapping database columns to corresponding Patient object attributes, setting and getting data from the database using PreparedStatement objects, and returning a fully populated Patient object.\n * \n * Overall, this class serves as a bridge between the database and the application, allowing for seamless retrieval and updating of patient information.\n */\n*/\nSure, here is a JavaDoc comment for the class:\n\n/**\n * This class is responsible for loading parameters into a PreparedStatement object using a PatientBean object.\n * It sets various attributes of the PatientBean object into the PreparedStatement object for database operations.\n * The class handles setting personal information, emergency contact details, insurance information, date of birth, date of death,\n * cause of death, parental information, blood type, ethnicity, gender, topical notes, credit card details, and message filter.\n * \n * @param ps The PreparedStatement object to load parameters into\n * @param p The PatientBean object containing the data to be set into the PreparedStatement\n * @return The PreparedStatement object with parameters set from the PatientBean object\n */\n \nThis JavaDoc comment provides a brief description of the class, its purpose, main functionalities, and behavior.\n/**\n * The PatientLoader class is responsible for loading the parameters of a PatientBean object into a PreparedStatement for database insertion.\n * \n * This class provides a method, loadParameters, that takes a PreparedStatement object and a PatientBean object as parameters. It then sets the parameters of the PreparedStatement object with the values from the provided PatientBean object. \n * The parameters that are loaded include the patient's personal information, address, contact details, emergency contact information, insurance company details, date of birth, date of death, cause of death, parents' MIDs, blood type, ethnicity, gender, topical notes, credit card information, and message filter.\n * \n * The loadParameters method helps in efficiently inserting patient data into a database by automating the process of setting the PreparedStatement parameters. It ensures that the data is accurately and securely stored in the database.\n * \n * @throws SQLException if a database access error occurs\n */"
    }
]