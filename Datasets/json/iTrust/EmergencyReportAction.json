[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return (pb.getFirstName() + \" \" + pb.getLastName());\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getPatientName()",
                "comments": "Optional[/**\r\n * Returns the patient's name\r\n *\r\n * @return patient's full name\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    return Integer.toString(pb.getAge());\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getPatientAge()",
                "comments": "Optional[/**\r\n * Returns the patient's age\r\n *\r\n * @return patient's age\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    return pb.getGender().toString();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getPatientGender()",
                "comments": "Optional[/**\r\n * Returns the patient's gender\r\n *\r\n * @return patient's gender\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    return pb.getEmergencyName() + \" \" + pb.getEmergencyPhone();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getPatientEmergencyContact()",
                "comments": "Optional[/**\r\n * Returns the patient's emergency contact\r\n *\r\n * @return patient's emergency contact\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    return pb.getBloodType() + \"\";\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getBloodType()",
                "comments": "Optional[/**\r\n * Returns the patient's blood type\r\n *\r\n * @return the patient's blood type\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    return allergyDAO.getAllergies(this.pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<AllergyBean> getAllergies()",
                "comments": "Optional[/**\r\n * Returns a list of allergies for the given patient\r\n *\r\n * @return a list of AllergyBeans\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    List<PrescriptionBean> allPrescriptions = patientDAO.getCurrentPrescriptions(this.pid);\r\n    ArrayList<PrescriptionBean> warningList = new ArrayList<PrescriptionBean>();\r\n    for (int i = 0; i < allPrescriptions.size(); i++) {\r\n        if (PrescriptionAlerts.isAlert(allPrescriptions.get(i).getMedication().getNDCode()))\r\n            warningList.add(allPrescriptions.get(i));\r\n    }\r\n    return warningList;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PrescriptionBean> getCurrentPrescriptions()",
                "comments": "Optional[/**\r\n * Returns a list of prescriptions the patient is currently taking\r\n *\r\n * @return a list of PrescriptionBeans for which the patient is currently taking\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    try {\r\n        boolean dup = false;\r\n        List<DiagnosisBean> allDiagnoses = patientDAO.getDiagnoses(this.pid);\r\n        ArrayList<DiagnosisBean> warningList = new ArrayList<DiagnosisBean>();\r\n        for (DiagnosisBean bean : allDiagnoses) {\r\n            OfficeVisitBean ovb = ovDAO.getOfficeVisit(bean.getVisitID());\r\n            if (ovb == null) {\r\n                continue;\r\n            }\r\n            if (\"yes\".equals(bean.getClassification()) || (ovb.getVisitDate().getTime() > Calendar.getInstance().getTimeInMillis() - 30 * 24 * 60 * 60 * 1000)) {\r\n                for (DiagnosisBean wbean : warningList) {\r\n                    if (bean.getDescription().equals(wbean.getDescription())) {\r\n                        dup = true;\r\n                    }\r\n                }\r\n                if (!dup) {\r\n                    warningList.add(bean);\r\n                }\r\n            }\r\n        }\r\n        return warningList;\r\n    } catch (DBException dbe) {\r\n        throw new iTrustException(dbe.getMessage());\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<DiagnosisBean> getWarningDiagnoses()",
                "comments": "Optional[/**\r\n * Returns a list of diagnoses that are in the range indicated by the DiagnosisRange enum\r\n *\r\n * @return list of DiagnosisBeans\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    List<ProcedureBean> allImmunizations = patientDAO.getImmunizationProcedures(this.pid);\r\n    return allImmunizations;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<ProcedureBean> getImmunizations()",
                "comments": "Optional[/**\r\n * Returns a list of prescriptions the patient is currently taking\r\n *\r\n * @return a list of PrescriptionBeans for which the patient is currently taking\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Email email = new Email();\r\n    List<PatientBean> reps = patientDAO.getRepresenting(pb.getMID());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(pb.getEmail());\r\n    for (PatientBean r : reps) {\r\n        toAddrs.add(r.getEmail());\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    // patient and personal representative\r\n    email.setToList(toAddrs);\r\n    email.setSubject(String.format(\"Emergency Report Viewed Notification\"));\r\n    email.setBody(\"Dear \" + pb.getFullName() + \",\\n An emergency report has been generated. \" + \"Please login to iTrust to see who has viewed your records.\");\r\n    return email;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private Email makeEmail()",
                "comments": "Optional[/**\r\n * Creates a fake e-mail to notify the user that an emergency report has been created and viewed.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": "Optional[[// patient and personal representative\r\n]]"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    emailutil = new EmailUtil(factory);\r\n    pb = patientDAO.getPatient(this.pid);\r\n    transDAO.logTransaction(TransactionType.VIEW_EMERGENCY_REPORT, this.loggedInMID, Long.valueOf(pidString), \"viewed emergency report\");\r\n    emailutil.sendEmail(makeEmail());\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public EmergencyReportAction(DAOFactory, long, String)",
                "comments": "Optional[/**\r\n * The super class handles validating the pid Logs viewing of the report\r\n *\r\n * @param factory The DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID The MID of the user who is looking at the emergency report.\r\n * @param pidString The ID of the patient whose report is being generated.\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "signature": "EmergencyReportAction",
        "variables": [
            "private TransactionDAO transDAO",
            "private PatientDAO patientDAO",
            "private AllergyDAO allergyDAO",
            "private OfficeVisitDAO ovDAO",
            "private PatientBean pb",
            "private EmailUtil emailutil",
            "private long loggedInMID"
        ]
    }
]