[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"SELECT firstName, lastName FROM Personnel WHERE MID=?\");\r\n        pstmt.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = pstmt.executeQuery();\r\n        if (rs.next()) {\r\n            return rs.getString(\"firstName\") + \" \" + rs.getString(\"lastName\");\r\n        } else {\r\n            throw new iTrustException(\"User does not exist\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getName(long)",
                "comments": "Optional[/**\r\n * Returns the name for a given MID\r\n *\r\n * @param mid The MID of the personnel in question.\r\n * @return A String representing the name of the personnel.\r\n * @throws iTrustException\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the full name of a personnel based on their MID.\n * \n * @param mid the unique identifier of the personnel\n * @return the full name of the personnel in the format \"firstName lastName\"\n * @throws iTrustException if the personnel does not exist\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    long newID;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO Personnel(Role) VALUES(?)\");\r\n        ps.setString(1, role.name());\r\n        ps.executeUpdate();\r\n        newID = DBUtil.getLastInsert(conn);\r\n        return newID;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public long addEmptyPersonnel(Role)",
                "comments": "Optional[/**\r\n * Adds an empty personnel, and returns the MID.\r\n *\r\n * @return A long indicating the new MID.\r\n * @param role A {@link Role} enum indicating the personnel's specific role.\r\n * @throws DBException\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a new personnel with the specified role to the database.\n * \n * @param role the role of the personnel to be added\n * @return the ID of the newly added personnel\n * @throws DBException if an error occurs while accessing the database\n */\npublic long addEmptyPersonnel(Role role) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    long newID;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"INSERT INTO Personnel(Role) VALUES(?)\");\n        ps.setString(1, role.name());\n        ps.executeUpdate();\n        newID = DBUtil.getLastInsert(conn);\n        return newID;\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM Personnel WHERE MID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return personnelLoader.loadSingle(rs);\r\n        } else\r\n            return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PersonnelBean getPersonnel(long)",
                "comments": "Optional[/**\r\n * Retrieves a PersonnelBean with all of the specific information for a given employee.\r\n *\r\n * @param mid The MID of the personnel in question.\r\n * @return A PersonnelBean representing the employee.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a PersonnelBean object from the database based on the provided MID.\n * \n * @param mid the unique identifier of the personnel to retrieve\n * @return a PersonnelBean object representing the personnel with the given MID, or null if no such personnel exists\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE Personnel SET AMID=?,firstName=?,lastName=?,\" + \"phone1=?,phone2=?,phone3=?, address1=?,address2=?,city=?, state=?, zip=?, zip1=?, zip2=?, email=?, MessageFilter=?\" + \" WHERE MID=?\");\r\n        personnelLoader.loadParameters(ps, p);\r\n        ps.setLong(16, p.getMID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void editPersonnel(PersonnelBean)",
                "comments": "Optional[/**\r\n * Updates the demographics for a personnel.\r\n *\r\n * @param p The personnel bean with the updated information.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates the information of a personnel in the database.\n * \n * @param personnelBean the PersonnelBean object containing the updated information of the personnel\n * @throws DBException if there is an error accessing the database\n */\npublic void editPersonnel(PersonnelBean personnelBean) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"UPDATE Personnel SET AMID=?,firstName=?,lastName=?,\" + \"phone1=?,phone2=?,phone3=?, address1=?,address2=?,city=?, state=?, zip=?, zip1=?, zip2=?, email=?, MessageFilter=?\" + \" WHERE MID=?\");\n        personnelLoader.loadParameters(ps, personnelBean);\n        ps.setLong(16, personnelBean.getMID());\n        ps.executeUpdate();\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM Personnel WHERE MID=?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean checkPersonnelExists(long)",
                "comments": "Optional[/**\r\n * Indicates whether a certain personnel is in the database.\r\n *\r\n * @param pid The MID of the personnel in question.\r\n * @return A boolean indicating whether this personnel exists.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a personnel with the given ID exists in the Personnel table.\n * \n * @param pid the ID of the personnel to check for existence\n * @return true if a personnel with the given ID exists, false otherwise\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM HCPAssignedHos hah,Hospitals h \" + \"WHERE hah.HCPID=? AND hah.HosID=h.HospitalID ORDER BY HospitalName ASC\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return hospitalBeanLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<HospitalBean> getHospitals(long)",
                "comments": "Optional[/**\r\n * Returns all of the hospitals this LHCP is associated with.\r\n *\r\n * @param mid The MID of the personnel in question.\r\n * @return A java.util.List of HospitalBeans.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of hospitals assigned to a healthcare provider with the given ID.\n * \n * @param mid the ID of the healthcare provider\n * @return a list of HospitalBean objects representing the hospitals assigned to the healthcare provider\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel where role in ('hcp','uap','er') \");\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PersonnelBean> getAllPersonnel()",
                "comments": "Optional[/**\r\n * Returns all personnel in the database.\r\n *\r\n * @return A java.util.List of personnel.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of personnel with roles 'hcp', 'uap', or 'er' from the database.\n * \n * @return A list of {@link PersonnelBean} objects representing the personnel with the specified roles.\n * @throws DBException if there is an error accessing the database.\n */\npublic List<PersonnelBean> getAllPersonnel() {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"SELECT * FROM personnel where role in ('hcp','uap','er') \");\n        ResultSet rs = ps.executeQuery();\n        return personnelLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM Personnel WHERE MID IN (SELECT UAP FROM HCPRelations WHERE HCP=?)\");\r\n        ps.setLong(1, hcpid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PersonnelBean> getUAPsForHCP(long)",
                "comments": "Optional[/**\r\n * Returns a list of UAPs who work for this LHCP.\r\n *\r\n * @param hcpid The MID of the personnel in question.\r\n * @return A java.util.List of UAPs.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of PersonnelBeans representing User Authorized Personnel (UAPs) associated with a given Healthcare Professional (HCP) ID.\n * \n * @param hcpid the ID of the Healthcare Professional for whom to retrieve UAPs\n * @return a List of PersonnelBean objects representing the UAPs associated with the specified HCP\n * @throws DBException if there is an error accessing the database\n */\npublic List<PersonnelBean> getUAPsForHCP(long hcpid) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"SELECT * FROM Personnel WHERE MID IN (SELECT UAP FROM HCPRelations WHERE HCP=?)\");\n        ps.setLong(1, hcpid);\n        ResultSet rs = ps.executeQuery();\n        return personnelLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM Personnel WHERE MID IN (SELECT HCPID FROM OfficeVisits WHERE ID=?)\");\r\n        ps.setLong(1, prescription.getVisitID());\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs).get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PersonnelBean getPrescribingDoctor(PrescriptionBean)",
                "comments": "Optional[/**\r\n * Given a prescription that has been given, this method returns all the information for the\r\n * doctor who authorized that prescription.\r\n *\r\n * @param prescription The PrescriptionBean describing the prescription in question.\r\n * @return The PersonnelBean describing the doctor who authorized it.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the prescribing doctor for a given prescription.\n * \n * @param prescription the PrescriptionBean object for which to retrieve the prescribing doctor\n * @return the PersonnelBean object representing the prescribing doctor\n * @throws DBException if there is an error accessing the database\n */\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"SELECT * FROM Personnel WHERE MID IN (SELECT HCPID FROM OfficeVisits WHERE ID=?)\");\n        ps.setLong(1, prescription.getVisitID());\n        ResultSet rs = ps.executeQuery();\n        return personnelLoader.loadList(rs).get(0);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if (first.equals(\"%\") && last.equals(\"%\"))\r\n        return new Vector<PersonnelBean>();\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, first);\r\n        ps.setString(2, last);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PersonnelBean> searchForPersonnelWithName(String, String)",
                "comments": "Optional[/**\r\n * Matches all personnel who have names LIKE (as in SQL) the first and last names passed in.\r\n *\r\n * @param first The first name to be searched for.\r\n * @param last The last name to be searched for.\r\n * @return A java.util.List of personnel who match these names.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Searches for personnel with the given first and last name.\n * \n * @param first The first name to search for\n * @param last The last name to search for\n * @return A list of {@link PersonnelBean} objects matching the search criteria\n *         or an empty list if no matches are found\n * @throws DBException if there is an issue with the database connection or query execution\n */\npublic List<PersonnelBean> searchForPersonnelWithName(String first, String last) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    if (first.equals(\"%\") && last.equals(\"%\"))\n        return new Vector<PersonnelBean>();\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE firstName LIKE ? AND lastName LIKE ?\");\n        ps.setString(1, first);\n        ps.setString(2, last);\n        ResultSet rs = ps.executeQuery();\n        return personnelLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.factory = factory;\r\n    personnelLoader = new PersonnelLoader();\r\n    hospitalBeanLoader = new HospitalBeanLoader();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PersonnelDAO(DAOFactory)",
                "comments": "Optional[/**\r\n * The typical constructor.\r\n * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new PersonnelDAO object with the specified DAOFactory.\n * \n * @param factory the DAOFactory to be used by the PersonnelDAO\n * \n * This constructor initializes the PersonnelDAO with the given DAOFactory and \n * instantiates the PersonnelLoader and HospitalBeanLoader objects.\n */"
            }
        ],
        "signature": "PersonnelDAO",
        "variables": [
            "private DAOFactory factory",
            "private PersonnelLoader personnelLoader",
            "private HospitalBeanLoader hospitalBeanLoader"
        ],
        "generated_class_comment": "Sure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class provides functionalities for managing personnel information in the database.\n * It includes methods for retrieving the name of a personnel based on their MID and adding a new personnel entry.\n * \n * The getName method retrieves the full name of a personnel based on their MID.\n * It takes a long parameter representing the MID of the personnel and returns the full name in the format \"firstName lastName\".\n * If the personnel does not exist in the database, it throws an iTrustException.\n * If there is an error accessing the database, it throws a DBException.\n * \n * The addEmptyPersonnel method adds a new personnel entry to the database with the specified role.\n * It takes a Role parameter representing the role of the new personnel and returns the unique identifier (ID) of the new entry.\n * If there is an error inserting the new entry into the database, it throws a DBException.\n * \n * Note: This class requires a valid database connection factory for database operations.\n */\n \nI hope this helps! Let me know if you need any more assistance.\n/**\n * This class provides methods for adding and retrieving personnel information from the database.\n * It includes functionality for adding a new personnel with a specified role and retrieving detailed information\n * about a personnel based on their MID.\n * \n * The addEmptyPersonnel method adds a new personnel with the specified role to the database and returns the ID of the newly added personnel.\n * \n * The getPersonnel method retrieves a PersonnelBean object with all specific information for a given employee based on their MID.\n * \n * Overall, this class serves as a utility for managing personnel data in the database, allowing for the addition and retrieval of personnel information.\n * \n * @author [Author Name]\n * @version 1.0\n */\n*/\n/**\n * This class represents a database utility for managing personnel information. It provides methods to retrieve, update, and edit personnel data in the database.\n * The main functionalities of this class include retrieving a PersonnelBean object from the database based on the provided MID, updating the demographics for a personnel, and editing the information of a personnel in the database.\n * \n * The retrievePersonnel method retrieves a PersonnelBean object from the database based on the provided MID. If no personnel with the given MID exists, it returns null.\n * \n * The updateDemographics method updates the demographics for a personnel in the database. It takes a PersonnelBean object with the updated information as a parameter.\n * \n * The editPersonnel method updates the information of a personnel in the database. It takes a PersonnelBean object containing the updated information as a parameter.\n * \n * This class handles database connections, prepares SQL statements for updating personnel information, and manages exceptions that may occur during database operations.\n * \n * @author [Your Name]\n * @version 1.0\n */\npublic class PersonnelDatabaseUtility {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a Data Access Object (DAO) for interacting with the Personnel table in the database.\n * It provides methods to perform CRUD operations on personnel data, such as adding, updating, deleting, and retrieving personnel information.\n * The class also includes methods to check if a personnel with a specific ID exists in the database and to retrieve a list of hospitals assigned to a healthcare professional.\n * \n * The main functionalities of this class include:\n * - Adding a new personnel entry to the Personnel table\n * - Updating an existing personnel entry in the Personnel table\n * - Deleting a personnel entry from the Personnel table\n * - Retrieving a personnel entry from the Personnel table based on the MID\n * - Checking if a personnel with a specific ID exists in the Personnel table\n * - Retrieving a list of hospitals assigned to a healthcare professional\n * \n * The class follows a DAO design pattern to separate the data access logic from the business logic, providing a clean and organized way to interact with the database.\n * \n * Note: This class handles database connections, executes SQL queries, and processes the results. It also handles exceptions and ensures proper closing of resources.\n */\n*/\n/**\n * This class represents a data access object for retrieving information about personnel from the database.\n * It provides methods for retrieving all personnel in the database and for retrieving hospitals assigned to a healthcare provider.\n * \n * The main functionalities of this class include:\n * - Retrieving all personnel in the database with roles 'hcp', 'uap', or 'er'\n * - Retrieving a list of hospitals assigned to a healthcare provider with the given ID\n * \n * The overall behavior of this class is to interact with the database to retrieve and load personnel and hospital information.\n * \n * @author [Your Name]\n * @version 1.0\n */\n \npublic class PersonnelDAO {\n    \n    /**\n     * Retrieves a list of personnel with roles 'hcp', 'uap', or 'er' from the database.\n     * \n     * @return A list of {@link PersonnelBean} objects representing the personnel with the specified roles.\n     * @throws DBException if there is an error accessing the database.\n     */\n    public List<PersonnelBean> getAllPersonnel() {\n        // Method implementation\n    }\n    \n    /**\n     * Retrieves a list of hospitals assigned to a healthcare provider with the given ID.\n     * \n     * @param mid the ID of the healthcare provider\n     * @return a list of HospitalBean objects representing the hospitals assigned to the healthcare provider\n     * @throws DBException if there is an error accessing the database\n     */\n    public List<HospitalBean> getHospitalsForHealthcareProvider(int mid) {\n        // Method implementation\n    }\n}\n**/\ntry {\\r\\n conn = factory.getConnection();\\r\\n ps = conn.prepareStatement(\\\"SELECT * FROM Personnel WHERE MID = ?\\\");\\r\\n ps.setLong(1, mid);\\r\\n ResultSet rs = ps.executeQuery();\\r\\n if (rs.next()) {\\r\\n return personnelLoader.loadSingle(rs);\\r\\n } else {\\r\\n return null;\\r\\n }\\r\\n } catch (SQLException e) {\\r\\n e.printStackTrace();\\r\\n throw new DBException(e);\\r\\n } finally {\\r\\n DBUtil.closeConnection(conn, ps);\\r\\n }\\r\\n}]\", \"hasComment\": true, \"hasInnerComment\": false, \"signature\": \"public PersonnelBean getPersonnel(long)\", \"comments\": \"Optional[/**\\r\\n * Returns the PersonnelBean for the given MID.\\r\\n *\\r\\n * @param mid The MID of the personnel to retrieve.\\r\\n * @return The PersonnelBean for the given MID, or null if not found.\\r\\n * @throws DBException\\r\\n */\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Retrieves a PersonnelBean object representing a personnel record with the specified MID.\\n * \\n * @param mid the MID of the personnel record to retrieve\\n * @return a PersonnelBean object representing the personnel record with the specified MID, or null if not found\\n * @throws DBException if there is an error accessing the database\\n */\\npublic PersonnelBean getPersonnel(long mid) {\\n Connection conn = null;\\n PreparedStatement ps = null;\\n try {\\n conn = factory.getConnection();\\n ps = conn.prepareStatement(\\\"SELECT * FROM Personnel WHERE MID = ?\\\");\\n ps.setLong(1, mid);\\n ResultSet rs = ps.executeQuery();\\n if (rs.next()) {\\n return personnelLoader.loadSingle(rs);\\n } else {\\n return null;\\n }\\n } catch (SQLException e) {\\n e.printStackTrace();\\n throw new DBException(e);\\n } finally {\\n DBUtil.closeConnection(conn, ps);\\n }\\n}\\n*/\" }]\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a data access object for retrieving information about prescribing doctors for prescriptions.\n * It provides methods to interact with the database to fetch the details of the doctor who authorized a given prescription.\n * The main functionality of this class is to retrieve the PersonnelBean object representing the prescribing doctor based on the PrescriptionBean provided.\n * \n * The getPrescribingDoctor method takes a PrescriptionBean object as input and returns the PersonnelBean object representing the prescribing doctor.\n * It queries the database to find the doctor who authorized the prescription and returns the relevant information.\n * \n * This class handles database connections, prepares SQL queries, and processes the result set to extract the necessary information.\n * It also handles exceptions that may occur during database operations and throws a DBException in case of errors.\n * \n * Note: Make sure to handle database connection and resource cleanup properly when using this class.\n */\n/**\n * The PersonnelSearch class provides methods for searching and retrieving personnel information from a database.\n * It allows users to search for personnel based on their first and last names.\n * \n * @author [Author Name]\n * @version 1.0\n */\npublic class PersonnelSearch {\n\n    /**\n     * Searches for personnel with the given first and last name.\n     * \n     * @param first The first name to search for\n     * @param last The last name to search for\n     * @return A list of {@link PersonnelBean} objects matching the search criteria\n     *         or an empty list if no matches are found\n     * @throws DBException if there is an issue with the database connection or query execution\n     */\n    public List<PersonnelBean> searchForPersonnelWithName(String first, String last) {\n        Connection conn = null;\n        PreparedStatement ps = null;\n        \n        if (first.equals(\"%\") && last.equals(\"%\"))\n            return new Vector<PersonnelBean>();\n        \n        try {\n            conn = factory.getConnection();\n            ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE firstName LIKE ? AND lastName LIKE ?\");\n            ps.setString(1, first);\n            ps.setString(2, last);\n            ResultSet rs = ps.executeQuery();\n            return personnelLoader.loadList(rs);\n        } catch (SQLException e) {\n            e.printStackTrace();\n            throw new DBException(e);\n        } finally {\n            DBUtil.closeConnection(conn, ps);\n        }\n    }\n}\n*/\n/**\n * The PersonnelDAO class represents a Data Access Object (DAO) for managing personnel data in a hospital system.\n * This class provides methods for interacting with the database to perform CRUD operations on personnel records.\n * It utilizes a DAOFactory for obtaining SQL connections and other resources required for database operations.\n * \n * The main functionalities of this class include:\n * - Retrieving personnel information from the database\n * - Adding new personnel records to the database\n * - Updating existing personnel records in the database\n * - Deleting personnel records from the database\n * \n * This class also instantiates the PersonnelLoader and HospitalBeanLoader objects for loading personnel data and hospital bean information.\n * \n * Note: It is important to properly handle database connections by calling the closeConnection method after using the DAO methods to prevent resource leaks.\n */\n **/"
    }
]