[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    //Validation - Only need to validate the three integer parameters\r\n    RemoteMonitoringDataBean m = new RemoteMonitoringDataBean();\r\n    m.setGlucoseLevel(glucoseLevel);\r\n    m.setDiastolicBloodPressure(60);\r\n    m.setSystolicBloodPressure(60);\r\n    validator.validate(m);\r\n    m.setDiastolicBloodPressure(-1);\r\n    m.setSystolicBloodPressure(-1);\r\n    //Log transaction\r\n    transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);\r\n    String role;\r\n    if (loggedInMID == patientMID) {\r\n        role = \"self-reported\";\r\n    } else if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals(\"uap\")) {\r\n        role = \"case-manager\";\r\n    } else {\r\n        role = \"patient representative\";\r\n    }\r\n    //Store in DB\r\n    rmDAO.storePatientData(patientMID, glucoseLevel, role, loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public void addRemoteMonitoringData(int)",
                "comments": "Optional[/**\r\n * Adds a patients remote monitoring data to the database.\r\n *\r\n * @param glucoseLevel\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": "Optional[[//Validation - Only need to validate the three integer parameters\r\n, //Log transaction\r\n, //Store in DB\r\n]]",
                "generated_comment": "/**\n * Adds remote monitoring data for a patient.\n * \n * This method validates the three integer parameters (glucoseLevel, diastolicBloodPressure, systolicBloodPressure) \n * and stores the data in the database. It also logs the transaction and determines the role of the user based on their \n * relationship to the patient.\n * \n * @param glucoseLevel The glucose level of the patient.\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    //Validation - Only need to validate the three integer parameters\r\n    RemoteMonitoringDataBean m = new RemoteMonitoringDataBean();\r\n    m.setSystolicBloodPressure(systolicBloodPressure);\r\n    m.setDiastolicBloodPressure(diastolicBloodPressure);\r\n    validator.validate(m);\r\n    //Log transaction\r\n    transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);\r\n    String role;\r\n    if (loggedInMID == patientMID) {\r\n        role = \"self-reported\";\r\n    } else if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals(\"uap\")) {\r\n        role = \"case-manager\";\r\n    } else {\r\n        role = \"patient representative\";\r\n    }\r\n    //Store in DB\r\n    rmDAO.storePatientData(patientMID, systolicBloodPressure, diastolicBloodPressure, role, loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public void addRemoteMonitoringData(int, int)",
                "comments": "Optional[/**\r\n * Adds a patients remote monitoring data to the database.\r\n *\r\n * @param systolicBloodPressure\r\n * @param diastolicBloodPressure\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": "Optional[[//Validation - Only need to validate the three integer parameters\r\n, //Log transaction\r\n, //Store in DB\r\n]]",
                "generated_comment": "/**\n * Adds remote monitoring data for a patient.\n * \n * This method adds the systolic and diastolic blood pressure readings for a patient's remote monitoring data.\n * It validates the input parameters, logs the transaction, determines the role of the user adding the data,\n * and stores the data in the database.\n * \n * @param systolicBloodPressure The systolic blood pressure reading to be added.\n * @param diastolicBloodPressure The diastolic blood pressure reading to be added.\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    //Validation - Only need to validate the three integer parameters\r\n    RemoteMonitoringDataBean m = new RemoteMonitoringDataBean();\r\n    m.setSystolicBloodPressure(systolicBloodPressure);\r\n    m.setDiastolicBloodPressure(diastolicBloodPressure);\r\n    m.setGlucoseLevel(glucoseLevel);\r\n    validator.validate(m);\r\n    //Log transaction\r\n    transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID);\r\n    String role;\r\n    if (loggedInMID == patientMID) {\r\n        role = \"self-reported\";\r\n    } else if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals(\"uap\")) {\r\n        role = \"case-manager\";\r\n    } else {\r\n        role = \"patient representative\";\r\n    }\r\n    //Store in DB\r\n    rmDAO.storePatientData(patientMID, systolicBloodPressure, diastolicBloodPressure, glucoseLevel, role, loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public void addRemoteMonitoringData(int, int, int)",
                "comments": "Optional[/**\r\n * Adds a patients remote monitoring data to the database.\r\n *\r\n * @param systolicBloodPressure\r\n * @param diastolicBloodPressure\r\n * @param glucoseLevel\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": "Optional[[//Validation - Only need to validate the three integer parameters\r\n, //Log transaction\r\n, //Store in DB\r\n]]",
                "generated_comment": "/**\n * Adds remote monitoring data for a patient.\n * \n * This method takes in three integer parameters representing the systolic blood pressure, diastolic blood pressure, and glucose level readings from a remote monitoring device. \n * It creates a RemoteMonitoringDataBean object with the provided data and validates it using a validator. \n * It then logs the transaction of adding remote monitoring data and determines the role of the user based on the logged in user's ID and the patient's ID. \n * The data is stored in the database with the patient's ID, readings, user role, and the logged in user's ID.\n * \n * @param systolicBloodPressure The systolic blood pressure reading to be added.\n * @param diastolicBloodPressure The diastolic blood pressure reading to be added.\n * @param glucoseLevel The glucose level reading to be added.\n */\npublic void addRemoteMonitoringData(int systolicBloodPressure, int diastolicBloodPressure, int glucoseLevel) {\n    // method body\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    return authDAO.getUserName(pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getPatientName(long)",
                "comments": "Optional[/**\r\n * returns the patient name\r\n *\r\n * @return patient name\r\n * @throws DBException\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the name of a patient based on their unique identifier.\n * \n * @param pid the unique identifier of the patient\n * @return the name of the patient associated with the given identifier\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientMID = patientMID;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public AddRemoteMonitoringDataAction(DAOFactory, long, long)",
                "comments": "Optional[/**\r\n * Constructor\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the person recording the patient's data.\r\n * @param patientMID The MID of the patient\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new AddRemoteMonitoringDataAction object with the given DAOFactory, logged in MID, and patient MID.\n * \n * @param factory the DAOFactory used to retrieve the RemoteMonitoringDAO, TransactionDAO, and AuthDAO\n * @param loggedInMID the MID of the logged in user\n * @param patientMID the MID of the patient for whom the remote monitoring data is being added\n */\npublic AddRemoteMonitoringDataAction(DAOFactory factory, long loggedInMID, long patientMID) {\n    this.loggedInMID = loggedInMID;\n    this.rmDAO = factory.getRemoteMonitoringDAO();\n    this.transDAO = factory.getTransactionDAO();\n    this.authDAO = factory.getAuthDAO();\n    this.patientMID = patientMID;\n}\n*/"
            }
        ],
        "signature": "AddRemoteMonitoringDataAction",
        "variables": [
            "private RemoteMonitoringDataBeanValidator validator",
            "private RemoteMonitoringDAO rmDAO",
            "private TransactionDAO transDAO",
            "private AuthDAO authDAO",
            "private long loggedInMID",
            "private long patientMID"
        ],
        "generated_class_comment": "/**\n * The AddRemoteMonitoringDataAction class represents an action that allows users to add remote monitoring data for a patient.\n * This class contains methods for adding remote monitoring data with different combinations of parameters, such as glucose level, systolic blood pressure, and diastolic blood pressure.\n * It also includes a method for retrieving the name of a patient based on their unique identifier.\n * \n * The class constructor initializes the necessary DAO objects and user IDs required for adding remote monitoring data.\n * \n * The main functionalities of this class include:\n * - Adding remote monitoring data for a patient with different parameter combinations\n * - Validating the input parameters and storing the data in the database\n * - Logging the transaction of adding remote monitoring data\n * - Determining the role of the user based on their relationship to the patient\n * - Retrieving the name of a patient based on their unique identifier\n * \n * Overall, the AddRemoteMonitoringDataAction class facilitates the process of adding and managing remote monitoring data for patients in a healthcare system.\n */\n*/"
    }
]