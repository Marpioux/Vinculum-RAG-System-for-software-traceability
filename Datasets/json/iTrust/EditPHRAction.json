[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    emailutil.sendEmail(makeEmail());\r\n    if (description != null && !description.equals(\"\")) {\r\n        try {\r\n            AllergyBean bean = new AllergyBean();\r\n            bean.setDescription(description);\r\n            AllergyBeanValidator abv = new AllergyBeanValidator();\r\n            abv.validate(bean);\r\n            allergyDAO.addAllergy(pid, description);\r\n            transDAO.logTransaction(TransactionType.ENTER_EDIT_PHR, loggedInMID, pid, \"EditPHR - added allergy \" + description);\r\n            return \"Allergy Added\";\r\n        } catch (FormValidationException e2) {\r\n            return \"<span class=error>Error: Invalid Fields--\" + e2.getErrorList() + \"</span><p />\";\r\n        }\r\n    } else\r\n        return \"\";\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String updateAllergies(long, String)",
                "comments": "Optional[/**\r\n * Adds an allergy to the patient's records\r\n *\r\n * @param pid\r\n * @param description\r\n * @return \"Allergy Added\", exception message, a list of invalid fields, or \"\" (only if description is\r\n *         null)\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates the allergies for a specific patient.\n * \n * @param pid the patient ID for whom the allergies are being updated\n * @param description the description of the allergy being added\n * @return a message indicating the success or failure of adding the allergy\n */\npublic String updateAllergies(long pid, String description) {\n    emailutil.sendEmail(makeEmail());\n    if (description != null && !description.equals(\"\")) {\n        try {\n            AllergyBean bean = new AllergyBean();\n            bean.setDescription(description);\n            AllergyBeanValidator abv = new AllergyBeanValidator();\n            abv.validate(bean);\n            allergyDAO.addAllergy(pid, description);\n            transDAO.logTransaction(TransactionType.ENTER_EDIT_PHR, loggedInMID, pid, \"EditPHR - added allergy \" + description);\n            return \"Allergy Added\";\n        } catch (FormValidationException e2) {\n            return \"<span class=error>Error: Invalid Fields--\" + e2.getErrorList() + \"</span><p />\";\n        }\n    } else\n        return \"\";\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    transDAO.logTransaction(TransactionType.VIEW_RECORDS, loggedInMID, pid, \"EditPHR - view patient record \");\r\n    return patientDAO.getPatient(pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PatientBean getPatient()",
                "comments": "Optional[/**\r\n * Returns a PatientBean for the patient\r\n *\r\n * @return PatientBean\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the patient information for the specified patient ID.\n * This method logs the transaction of viewing patient records with the specified transaction type.\n * \n * @param pid The patient ID for which the information is to be retrieved\n * @return The PatientBean object containing the patient information\n */"
            },
            {
                "body": "Optional[{\r\n    return allergyDAO.getAllergies(pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<AllergyBean> getAllergies()",
                "comments": "Optional[/**\r\n * Returns a list of AllergyBeans for the patient\r\n *\r\n * @return list of AllergyBeans\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of allergies for a given patient ID.\n * \n * @param pid the patient ID for which to retrieve allergies\n * @return a list of AllergyBean objects representing the allergies for the specified patient\n */"
            },
            {
                "body": "Optional[{\r\n    List<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();\r\n    List<FamilyMemberBean> parents = null;\r\n    parents = familyDAO.getParents(pid);\r\n    fam.addAll(parents);\r\n    fam.addAll(familyDAO.getSiblings(pid));\r\n    fam.addAll(familyDAO.getChildren(pid));\r\n    if (parents != null) {\r\n        List<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();\r\n        for (FamilyMemberBean parent : parents) {\r\n            grandparents.addAll(familyDAO.getParents(parent.getMid()));\r\n        }\r\n        fam.addAll(grandparents);\r\n        for (FamilyMemberBean gp : grandparents) {\r\n            gp.setRelation(\"Grandparent\");\r\n        }\r\n    }\r\n    transDAO.logTransaction(TransactionType.VIEW_RECORDS, loggedInMID, pid, \"EditPHR - view patient family information \");\r\n    return fam;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<FamilyMemberBean> getFamily()",
                "comments": "Optional[/**\r\n * Returns a list of FamilyMemberBeans for the patient\r\n *\r\n * @return list of FamilyMemberBeans\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the family members associated with a given patient ID.\n * This method fetches the parents, siblings, and children of the patient, as well as their grandparents if available.\n * The retrieved family members are added to a list and returned.\n * \n * @param pid The patient ID for which to retrieve family members\n * @return A list of FamilyMemberBean objects representing the family members of the patient\n */\npublic List<FamilyMemberBean> getFamily() {\n    List<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();\n    List<FamilyMemberBean> parents = null;\n    parents = familyDAO.getParents(pid);\n    fam.addAll(parents);\n    fam.addAll(familyDAO.getSiblings(pid));\n    fam.addAll(familyDAO.getChildren(pid));\n    if (parents != null) {\n        List<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();\n        for (FamilyMemberBean parent : parents) {\n            grandparents.addAll(familyDAO.getParents(parent.getMid()));\n        }\n        fam.addAll(grandparents);\n        for (FamilyMemberBean gp : grandparents) {\n            gp.setRelation(\"Grandparent\");\n        }\n    }\n    transDAO.logTransaction(TransactionType.VIEW_RECORDS, loggedInMID, pid, \"EditPHR - view patient family information \");\n    return fam;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    List<HealthRecord> allHealthRecords = hrDAO.getAllHealthRecords(pid);\r\n    transDAO.logTransaction(TransactionType.VIEW_HEALTH_RECORDS, loggedInMID, pid, \"EditPHR - Viewed patient records\");\r\n    return allHealthRecords;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<HealthRecord> getAllHealthRecords()",
                "comments": "Optional[/**\r\n * Returns a list of HealthRecords for the patient\r\n *\r\n * @return\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves all health records for a specific patient.\n * \n * This method queries the database to retrieve all health records associated with a given patient ID.\n * It also logs the transaction of viewing the patient's health records.\n * \n * @param pid The patient ID for which to retrieve health records\n * @return A list of HealthRecord objects containing all health records for the specified patient\n */"
            },
            {
                "body": "Optional[{\r\n    transDAO.logTransaction(TransactionType.VIEW_OFFICE_VISIT, loggedInMID, pid, \"EditPHR - view patient office visits \");\r\n    return ovDAO.getAllOfficeVisits(pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<OfficeVisitBean> getAllOfficeVisits()",
                "comments": "Optional[/**\r\n * Returns a list of OfficeVisitBeans\r\n *\r\n * @return\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of all office visits for a specified patient.\n * \n * @return A list of OfficeVisitBean objects representing all office visits for the specified patient.\n * @param pid The patient ID for which to retrieve office visits.\n * @throws DBException If there is an issue accessing the database.\n */"
            },
            {
                "body": "Optional[{\r\n    return ovDAO.getOfficeVisit(visitID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public OfficeVisitBean getCompleteOfficeVisit(long)",
                "comments": "Optional[/**\r\n * Returns a complete OfficeVisitBean given a visitID\r\n *\r\n * @return\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a complete office visit by its unique identifier.\n * \n * @param visitID the unique identifier of the office visit to retrieve\n * @return the OfficeVisitBean object representing the complete office visit\n */"
            },
            {
                "body": "Optional[{\r\n    this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\r\n    transDAO.logTransaction(TransactionType.IDENTIFY_RISK_FACTORS, loggedInMID, pid, \"Check for risk factors\");\r\n    return diseaseMediator.getDiseaseAtRisk();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<RiskChecker> getDiseasesAtRisk()",
                "comments": "Optional[/**\r\n * Returns a list of diseases for which the patient is at risk\r\n *\r\n * @return list of RiskCheckers\r\n * @throws iTrustException\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of RiskChecker objects representing diseases that the patient with the given patient ID (pid) is at risk for.\n * \n * @return A list of RiskChecker objects representing diseases at risk for the patient\n */"
            },
            {
                "body": "Optional[{\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if (records.size() == 0)\r\n        return false;\r\n    for (HealthRecord record : records) {\r\n        if (record.getBloodPressureSystolic() > 240 || record.getBloodPressureDiastolic() > 120)\r\n            return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean doesFamilyMemberHaveHighBP(FamilyMemberBean)",
                "comments": "Optional[/**\r\n * Checks to see if a particular family member has high blood pressure\r\n *\r\n * @param member the family member to check\r\n * @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a family member has a high blood pressure based on their health records.\n * \n * @param member the FamilyMemberBean object representing the family member\n * @return true if the family member has a high blood pressure, false otherwise\n */\npublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) {\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\n    \n    // If there are no health records for the family member, return false\n    if (records.size() == 0)\n        return false;\n    \n    // Check each health record for high blood pressure values\n    for (HealthRecord record : records) {\n        if (record.getBloodPressureSystolic() > 240 || record.getBloodPressureDiastolic() > 120)\n            return true;\n    }\n    \n    // If no high blood pressure values are found, return false\n    return false;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if (records.size() == 0)\r\n        return false;\r\n    for (HealthRecord record : records) {\r\n        if (record.getCholesterolHDL() < 35 || record.getCholesterolLDL() > 250)\r\n            return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean)",
                "comments": "Optional[/**\r\n * Checks to see if a particular family member has high cholesterol\r\n *\r\n * @param member the family member to check\r\n * @return true if the family member has high cholesterol.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a family member has high cholesterol based on their health records.\n * \n * @param member the FamilyMemberBean object representing the family member\n * @return true if the family member has high cholesterol, false otherwise\n */\npublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) {\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\n    if (records.size() == 0)\n        return false;\n    for (HealthRecord record : records) {\n        if (record.getCholesterolHDL() < 35 || record.getCholesterolLDL() > 250)\n            return true;\n    }\n    return false;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if (diagnoses.size() == 0)\r\n        return false;\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"250\"))\r\n            return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a family member has been diagnosed with diabetes based on their medical history.\n * \n * @param member the FamilyMemberBean object representing the family member to check\n * @return true if the family member has been diagnosed with diabetes (ICD code starting with \"250\"), false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if (diagnoses.size() == 0)\r\n        return false;\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"199\"))\r\n            return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public boolean doesFamilyMemberHaveCancer(FamilyMemberBean)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a family member has been diagnosed with cancer based on their medical history.\n * \n * @param member the FamilyMemberBean object representing the family member to check for cancer diagnosis\n * @return true if the family member has been diagnosed with cancer (ICD code starting with \"199\"), false otherwise\n */\npublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) {\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\n    if (diagnoses.size() == 0)\n        return false;\n    for (DiagnosisBean diag : diagnoses) {\n        if (diag.getICDCode().startsWith(\"199\"))\n            return true;\n    }\n    return false;\n}\n```"
            },
            {
                "body": "Optional[{\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if (diagnoses.size() == 0)\r\n        return false;\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"402\"))\r\n            return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean)",
                "comments": "Optional[/**\r\n * Checks to see if a particular family member has heart disease\r\n *\r\n * @param member the family member to check\r\n * @return true if the family member has heart disease.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a family member has a history of heart disease based on their diagnoses.\n * \n * @param member the FamilyMemberBean representing the family member to check\n * @return true if the family member has been diagnosed with a heart disease (ICD code starting with \"402\"), false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if (records.size() == 0)\r\n        return false;\r\n    for (HealthRecord record : records) {\r\n        if (record.isSmoker())\r\n            return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean isFamilyMemberSmoker(FamilyMemberBean)",
                "comments": "Optional[/**\r\n * Checks to see if a particular family member smokes\r\n *\r\n * @param member the family member to check\r\n * @return true if the family member smokes.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a given family member is a smoker based on their health records.\n * \n * @param member the FamilyMemberBean object representing the family member to check\n * @return true if the family member is a smoker based on their health records, false otherwise\n */\npublic boolean isFamilyMemberSmoker(FamilyMemberBean member) {\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\n    if (records.size() == 0)\n        return false;\n    for (HealthRecord record : records) {\n        if (record.isSmoker())\n            return true;\n    }\n    return false;\n}"
            },
            {
                "body": "Optional[{\r\n    PatientBean patient = patientDAO.getPatient(member.getMid());\r\n    if (patient.getCauseOfDeath() == null)\r\n        return \"\";\r\n    DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\r\n    if (diag == null)\r\n        return \"\";\r\n    return diag.getDescription();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getFamilyMemberCOD(FamilyMemberBean)",
                "comments": "Optional[/**\r\n * Checks to see if the family member is dead and returns their cause of death if so\r\n *\r\n * @param member the family member to check\r\n * @return the cause of death if there is one; otherwise null\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the cause of death of a family member based on their member ID.\n * \n * @param member the FamilyMemberBean object representing the family member\n * @return a String representing the description of the cause of death, or an empty string if no cause of death is found\n */\npublic String getFamilyMemberCOD(FamilyMemberBean member) {\n    // Retrieve the patient information based on the member ID\n    PatientBean patient = patientDAO.getPatient(member.getMid());\n    \n    // Check if the cause of death is null, return an empty string if so\n    if (patient.getCauseOfDeath() == null)\n        return \"\";\n    \n    // Retrieve the diagnosis information based on the cause of death code\n    DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\n    \n    // Return the description of the cause of death, or an empty string if no diagnosis is found\n    if (diag == null)\n        return \"\";\n    return diag.getDescription();\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Email email = new Email();\r\n    List<PatientBean> reps = patientDAO.getRepresenting(patient.getMID());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(patient.getEmail());\r\n    for (PatientBean r : reps) {\r\n        toAddrs.add(r.getEmail());\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    // patient and personal representative\r\n    email.setToList(toAddrs);\r\n    email.setSubject(String.format(\"Your medical records have been altered\"));\r\n    email.setBody(\"Health care professional \" + HCPUAP.getFullName() + \" has altered your medical records. \" + \"She is not on your list of designated health care professionals.\");\r\n    return email;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private Email makeEmail()",
                "comments": "Optional[/**\r\n * Creates a fake e-mail to notify the user that their records have been altered.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": "Optional[[// patient and personal representative\r\n]]",
                "generated_comment": "/**\n * Creates an email notification for the patient and their personal representatives when their medical records have been altered by a healthcare professional who is not on their list of designated healthcare professionals.\n * \n * @return the Email object containing the notification email\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.HCPUAP = personnelDAO.getPersonnel(loggedInMID);\r\n    this.patient = patientDAO.getPatient(pid);\r\n    emailutil = new EmailUtil(factory);\r\n    this.factory = factory;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public EditPHRAction(DAOFactory, long, String)",
                "comments": "Optional[/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory The DAOFactory to be used in creating DAOs for this action.\r\n * @param loggedInMID The MID of the currently logged in user who is authorizing this action.\r\n * @param pidString The MID of the patient whose personal health records are being added.\r\n * @throws iTrustException\r\n * @throws DBException\r\n * @throws NoHealthRecordsException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new EditPHRAction object with the specified DAOFactory, patient ID, and logged in MID.\n * Initializes various DAO objects using the provided factory, retrieves the patient, personnel, and sets up EmailUtil.\n *\n * @param factory the DAOFactory used to retrieve DAO objects\n * @param pid the patient ID for which the action is being performed\n * @param loggedInMID the MID of the logged in personnel\n */\npublic EditPHRAction(DAOFactory factory, long pid, String loggedInMID) {\n    super(factory, pid);\n    this.patientDAO = factory.getPatientDAO();\n    this.allergyDAO = factory.getAllergyDAO();\n    this.familyDAO = factory.getFamilyDAO();\n    this.hrDAO = factory.getHealthRecordsDAO();\n    this.ovDAO = factory.getOfficeVisitDAO();\n    this.transDAO = factory.getTransactionDAO();\n    this.icdDAO = factory.getICDCodesDAO();\n    this.loggedInMID = loggedInMID;\n    this.personnelDAO = factory.getPersonnelDAO();\n    this.HCPUAP = personnelDAO.getPersonnel(loggedInMID);\n    this.patient = patientDAO.getPatient(pid);\n    emailutil = new EmailUtil(factory);\n    this.factory = factory;\n}\n*/"
            }
        ],
        "signature": "EditPHRAction",
        "variables": [
            "private DAOFactory factory",
            "private PatientDAO patientDAO",
            "private AllergyDAO allergyDAO",
            "private FamilyDAO familyDAO",
            "private HealthRecordsDAO hrDAO",
            "private OfficeVisitDAO ovDAO",
            "private TransactionDAO transDAO",
            "private ICDCodesDAO icdDAO",
            "private long loggedInMID",
            "private ChronicDiseaseMediator diseaseMediator",
            "private PersonnelDAO personnelDAO",
            "private PersonnelBean HCPUAP",
            "private PatientBean patient",
            "private EmailUtil emailutil"
        ],
        "generated_class_comment": "</span><p />\\\";\\n }\\n } else {\\n return \\\"\\\";\\n }\\n}\\n\" } ], \"class_name\": \"AllergyUpdater\", \"imports\": [ \"import edu.ncsu.csc.itrust.beans.AllergyBean;\", \"import edu.ncsu.csc.itrust.beans.forms.AllergyBeanValidator;\", \"import edu.ncsu.csc.itrust.dao.DAOFactory;\", \"import edu.ncsu.csc.itrust.dao.mysql.AllergyDAO;\", \"import edu.ncsu.csc.itrust.dao.mysql.TransactionDAO;\", \"import edu.ncsu.csc.itrust.enums.TransactionType;\", \"import edu.ncsu.csc.itrust.exception.DBException;\", \"import edu.ncsu.csc.itrust.exception.FormValidationException;\", \"import edu.ncsu.csc.itrust.exception.iTrustException;\", \"import edu.ncsu.csc.itrust.utils.EmailUtil;\" ] } ]\nSure, here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a data access object for retrieving patient information from the database.\n * It provides methods to retrieve patient records, allergies, and family member information.\n * \n * The class contains methods to get patient information, including allergies and family members, \n * based on the patient ID. It also logs transactions when viewing patient records.\n * \n * The main functionalities of this class include:\n * - Retrieving patient information such as demographics, medical history, and contact information\n * - Getting a list of allergies for a specific patient\n * - Fetching family member details including parents, siblings, and children of the patient\n * \n * Overall, this class serves as a bridge between the application and the database, \n * allowing for the retrieval of patient-related data for various purposes.\n */\npublic class FamilyMemberService {\n\n    /**\n     * Retrieves the family members associated with a given patient ID.\n     * This method fetches the parents, siblings, and children of the patient, as well as their grandparents if available.\n     * The retrieved family members are added to a list and returned.\n     * \n     * @param pid The patient ID for which to retrieve family members\n     * @return A list of FamilyMemberBean objects representing the family members of the patient\n     */\n    public List<FamilyMemberBean> getFamily() {\n        List<FamilyMemberBean> fam = new ArrayList<FamilyMemberBean>();\n        List<FamilyMemberBean> parents = null;\n        parents = familyDAO.getParents(pid);\n        fam.addAll(parents);\n        fam.addAll(familyDAO.getSiblings(pid));\n        fam.addAll(familyDAO.getChildren(pid));\n        if (parents != null) {\n            List<FamilyMemberBean> grandparents = new ArrayList<FamilyMemberBean>();\n            for (FamilyMemberBean parent : parents) {\n                grandparents.addAll(familyDAO.getParents(parent.getMid()));\n            }\n            fam.addAll(grandparents);\n            for (FamilyMemberBean gp : grandparents) {\n                gp.setRelation(\"Grandparent\");\n            }\n        }\n        transDAO.logTransaction(TransactionType.VIEW_RECORDS, loggedInMID, pid, \"EditPHR - view patient family information \");\n        return fam;\n    }\n\n    /**\n     * Retrieves all health records associated with a given patient ID.\n     * This method fetches all health records for the specified patient and returns them in a list.\n     * \n     * @param pid The patient ID for which to retrieve health records\n     * @return A list of HealthRecord objects representing all health records of the patient\n     */\n    public List<HealthRecord> getAllHealthRecords(int pid) {\n        return hrDAO.getAllHealthRecords(pid);\n    }\n}\n*/\" }]\n*/\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Retrieves a complete OfficeVisitBean for a specific office visit.\\n * \\n * This method queries the database to retrieve all details of a specific office visit based on the visit ID.\\n * \\n * @param visitID The unique identifier for the office visit\\n * @return An OfficeVisitBean object containing all details of the specified office visit\\n */\" }]\n/**\n * The iTrustException class is responsible for handling exceptions within the iTrust system.\n * It contains methods for retrieving office visits, identifying risk factors for diseases, and checking for high blood pressure in family members.\n * \n * The getOfficeVisitByID method retrieves a complete office visit by its unique identifier.\n * \n * The getDiseasesAtRisk method returns a list of diseases for which the patient is at risk.\n * \n * The doesFamilyMemberHaveHighBP method checks to see if a particular family member has high blood pressure.\n * \n * This class provides essential functionalities for managing health records, identifying risk factors, and monitoring family members' health status within the iTrust system.\n */\n/**\n * Checks if a family member has high cholesterol based on their health records.\n * \n * This method takes a FamilyMemberBean object representing the family member as input and checks their health records for high cholesterol levels. If there are no health records for the family member, the method returns false. Otherwise, it iterates through each health record and checks if the cholesterol HDL level is below 35 or the cholesterol LDL level is above 250. If any of the records indicate high cholesterol levels, the method returns true. If no high cholesterol values are found, the method returns false.\n * \n * @param member the FamilyMemberBean object representing the family member\n * @return true if the family member has high cholesterol, false otherwise\n * @throws iTrustException if there is an issue with retrieving health records\n */\npublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) {\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\n    \n    // If there are no health records for the family member, return false\n    if (records.size() == 0)\n        return false;\n    \n    // Check each health record for high cholesterol values\n    for (HealthRecord record : records) {\n        if (record.getCholesterolHDL() < 35 || record.getCholesterolLDL() > 250)\n            return true;\n    }\n    \n    // If no high cholesterol values are found, return false\n    return false;\n}\n*/\n/**\n * This class contains methods to check if a family member has been diagnosed with certain medical conditions based on their medical history.\n * It provides functionalities to check for diabetes and cancer diagnoses in the family member's medical records.\n * \n * The class includes the following methods:\n * 1. public boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) - Checks if a family member has been diagnosed with diabetes based on their medical history.\n *    Returns true if the family member has been diagnosed with diabetes (ICD code starting with \"250\"), false otherwise.\n * \n * 2. public boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) - Checks if a family member has been diagnosed with cancer based on their medical history.\n *    Returns true if the family member has been diagnosed with cancer (ICD code starting with \"199\"), false otherwise.\n * \n * The class utilizes the PatientDAO to retrieve the medical diagnoses of the family member and performs the necessary checks.\n */\npublic class FamilyMedicalHistoryChecker {\n    // Class implementation goes here\n}\n*/\n/**\n * The FamilyHealthAnalyzer class is responsible for analyzing the health records and diagnoses of family members to determine specific health conditions and behaviors.\n * It provides methods to check if a family member has a history of heart disease or if they are a smoker based on their health records and diagnoses.\n * \n * The class includes the following functionalities:\n * - Checking if a family member has been diagnosed with heart disease based on their diagnoses\n * - Checking if a family member is a smoker based on their health records\n * \n * The class interacts with the PatientDAO and HealthRecordDAO to retrieve the necessary information for analysis.\n * \n * Overall, the FamilyHealthAnalyzer class helps in assessing the health status and behaviors of family members for better healthcare management and decision-making.\n */\n```\n/**\n * This class provides methods to retrieve and analyze health records and cause of death information for family members.\n * It includes functionality to check if a family member is a smoker based on their health records and to retrieve the cause of death\n * for a family member if they are deceased.\n * \n * The class contains the following methods:\n * - isFamilyMemberSmoker(FamilyMemberBean member): Checks if a given family member is a smoker based on their health records.\n *   Returns true if the family member is a smoker, false otherwise.\n * \n * - getFamilyMemberCOD(FamilyMemberBean member): Retrieves the cause of death of a family member based on their member ID.\n *   Returns a String representing the description of the cause of death, or an empty string if no cause of death is found.\n * \n * The behavior of the class is as follows:\n * - The isFamilyMemberSmoker method retrieves all health records for a family member and checks if any of them indicate smoking.\n * - The getFamilyMemberCOD method retrieves the cause of death information for a family member if they are deceased.\n *   It returns the description of the cause of death or an empty string if no cause of death is found.\n * \n * Note: Both methods handle exceptions and return appropriate values in case of errors or missing information.\n */\npublic class FamilyHealthAnalyzer {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a service for managing patient information and notifications in the iTrust system.\n * It provides methods for retrieving patient data, managing allergies, family history, health records, office visits, and transactions.\n * Additionally, it includes functionality for sending email notifications to patients and their personal representatives.\n * \n * The class initializes various Data Access Objects (DAOs) for interacting with the database and handling patient information.\n * It also includes methods for creating email notifications to inform users about changes to their medical records.\n * \n * Overall, this class serves as a central component for managing patient-related operations and communication within the iTrust system.\n */\n*/\n/**\n * The EditPHRAction class represents an action that allows a user to edit personal health records for a specific patient.\n * This class initializes various DAO objects using the provided factory, retrieves the patient, personnel, and sets up EmailUtil.\n * It also validates the patient ID and the currently logged in user's MID before performing any actions.\n * \n * @param factory the DAOFactory used to retrieve DAO objects\n * @param pid the patient ID for which the action is being performed\n * @param loggedInMID the MID of the logged in personnel\n * @throws iTrustException if there is an issue with the iTrust system\n * @throws DBException if there is an issue with the database\n * @throws NoHealthRecordsException if no health records are found for the patient\n */\n/**\n * This class represents an action that allows a user to edit a Personal Health Record (PHR).\n * It provides functionalities to update various aspects of a patient's health record, including allergies, family history, health records, office visits, transactions, and ICDCodes.\n * The class utilizes a DAOFactory to access the necessary data access objects for interacting with the database.\n * The class also manages the logged-in user's session and permissions through the loggedInMID variable.\n * Additionally, the class includes a ChronicDiseaseMediator for handling chronic disease-related functionalities.\n * The class interacts with the database through various DAO objects such as PatientDAO, AllergyDAO, FamilyDAO, HealthRecordsDAO, OfficeVisitDAO, TransactionDAO, ICDCodesDAO, and PersonnelDAO.\n * The class also includes a PersonnelBean for handling user permissions and a PatientBean for managing patient information.\n * Lastly, the class utilizes an EmailUtil for sending email notifications related to PHR updates.\n */"
    }
]