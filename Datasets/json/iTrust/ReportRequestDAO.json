[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (id == 0L)\r\n            throw new SQLException(\"ID cannot be null\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ReportRequests WHERE ID = ?\");\r\n        ps.setLong(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        rs.next();\r\n        return loader.loadSingle(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ReportRequestBean getReportRequest(long)",
                "comments": "Optional[/**\r\n * Returns a full bean describing a given report request.\r\n *\r\n * @param id The unique ID of the bean in the database.\r\n * @return The bean describing this report request.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a ReportRequestBean object from the database based on the provided ID.\n * \n * @param id the ID of the ReportRequestBean to retrieve\n * @return the ReportRequestBean object with the matching ID\n * @throws SQLException if the provided ID is 0 or if there is an error accessing the database\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (mid == 0L)\r\n            throw new SQLException(\"RequesterMID cannot be null\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ReportRequests WHERE RequesterMID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<ReportRequestBean> getAllReportRequestsForRequester(long)",
                "comments": "Optional[/**\r\n * Returns all report requests associated with a given requester.\r\n *\r\n * @param mid The MID of the personnel in question.\r\n * @return A java.util.List of report requests.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of ReportRequestBean objects for a given requester's MID.\n * \n * @param mid the requester's MID for which to retrieve report requests\n * @return a list of ReportRequestBean objects associated with the requester's MID\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the requester's MID is null or if there is an error executing the SQL query\n */\npublic List<ReportRequestBean> getAllReportRequestsForRequester(long mid) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (mid == 0L)\n            throw new SQLException(\"RequesterMID cannot be null\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"SELECT * FROM ReportRequests WHERE RequesterMID = ?\");\n        ps.setLong(1, mid);\n        ResultSet rs = ps.executeQuery();\n        return loader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ReportRequests WHERE PatientMID = ?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return loader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<ReportRequestBean> getAllReportRequestsForPatient(long)",
                "comments": "Optional[/**\r\n * Returns all of the report requests associated with a specific patient.\r\n *\r\n * @param pid The MID of the patient in question.\r\n * @return A java.util.List of report requests.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of ReportRequestBean objects for a given patient ID.\n * \n * @param pid the patient ID for which to retrieve report requests\n * @return a list of ReportRequestBean objects associated with the specified patient ID\n * @throws DBException if there is an error accessing the database\n */\npublic List<ReportRequestBean> getAllReportRequestsForPatient(long pid) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (pid == 0L)\n            throw new SQLException(\"PatientMID cannot be null\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"SELECT * FROM ReportRequests WHERE PatientMID = ?\");\n        ps.setLong(1, pid);\n        ResultSet rs = ps.executeQuery();\n        return loader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (requesterMID == 0L)\r\n            throw new SQLException(\"RequesterMID cannot be null\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ReportRequests (ID, RequesterMID, PatientMID, RequestedDate, Status) VALUES (null,?,?,?,'Requested')\");\r\n        ps.setLong(1, requesterMID);\r\n        ps.setLong(2, patientMID);\r\n        ps.setTimestamp(3, new java.sql.Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public long addReportRequest(long, long, Date)",
                "comments": "Optional[/**\r\n * Adds a request for a report.\r\n *\r\n * @param requesterMID The MID of the requester.\r\n * @param patientMID The MID of the patient in question.\r\n * @param date The date the request was made.\r\n * @return A long of the unique ID of the report request.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a new report request to the database.\n * \n * @param requesterMID the ID of the user making the request\n * @param patientMID the ID of the patient for whom the report is requested\n * @param date the date when the request was made\n * @return the ID of the newly inserted report request\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the requesterMID is 0 or if there is an error executing the SQL query\n */\npublic long addReportRequest(long requesterMID, long patientMID, Date date) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (requesterMID == 0L)\n            throw new SQLException(\"RequesterMID cannot be null\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"INSERT INTO ReportRequests (ID, RequesterMID, PatientMID, RequestedDate, Status) VALUES (null,?,?,?,'Requested')\");\n        ps.setLong(1, requesterMID);\n        ps.setLong(2, patientMID);\n        ps.setTimestamp(3, new java.sql.Timestamp(date.getTime()));\n        ps.executeUpdate();\n        return DBUtil.getLastInsert(conn);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (ID == 0L)\r\n            throw new SQLException(\"ID cannot be null\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE ReportRequests set ViewedDate = ?, Status = 'Viewed' where ID = ?\");\r\n        ps.setTimestamp(1, new java.sql.Timestamp(date.getTime()));\r\n        ps.setLong(2, ID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void setViewed(long, Date)",
                "comments": "Optional[/**\r\n * Sets the status of a report request to 'Viewed'\r\n *\r\n * @param ID The unique ID of the request in question.\r\n * @param date The date the request was viewed.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Sets the viewed date of a report request with the given ID in the database.\n * \n * @param ID the ID of the report request to update\n * @param date the date to set as the viewed date\n * @throws SQLException if the ID is 0 or an error occurs while updating the database\n * @throws DBException if an error occurs while closing the database connection\n */\npublic void setViewed(long ID, Date date) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (ID == 0L)\n            throw new SQLException(\"ID cannot be null\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"UPDATE ReportRequests set ViewedDate = ?, Status = 'Viewed' where ID = ?\");\n        ps.setTimestamp(1, new java.sql.Timestamp(date.getTime()));\n        ps.setLong(2, ID);\n        ps.executeUpdate();\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.factory = factory;\r\n    loader = new ReportRequestBeanLoader();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ReportRequestDAO(DAOFactory)",
                "comments": "Optional[/**\r\n * The typical constructor.\r\n * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ReportRequestDAO with the specified DAOFactory.\n * \n * @param factory the DAOFactory to be used by this ReportRequestDAO\n * \n * This constructor initializes the ReportRequestDAO with the provided DAOFactory\n * and creates a new ReportRequestBeanLoader for loading ReportRequestBeans.\n */\npublic ReportRequestDAO(DAOFactory factory) {\n    this.factory = factory;\n    loader = new ReportRequestBeanLoader();\n}"
            }
        ],
        "signature": "ReportRequestDAO",
        "variables": [
            "private DAOFactory factory",
            "private ReportRequestBeanLoader loader"
        ],
        "generated_class_comment": "Sure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a data access object for retrieving ReportRequestBean objects from the database.\n * It provides methods to retrieve a single ReportRequestBean based on its unique ID, as well as a list of \n * ReportRequestBean objects based on the requester's MID.\n * \n * The class uses a connection factory to establish a connection to the database and a loader to load \n * the ResultSet data into ReportRequestBean objects.\n * \n * The main functionalities of this class include:\n * - Retrieving a single ReportRequestBean object by its ID\n * - Retrieving a list of ReportRequestBean objects by the requester's MID\n * \n * The overall behavior of this class is to interact with the database to fetch ReportRequestBean objects \n * based on specific criteria and handle any database exceptions that may occur during the process.\n * \n * @author [Your Name]\n * @version 1.0\n * @since [Date]\n */\n/**\n * This class provides methods to retrieve a list of ReportRequestBean objects associated with a requester or patient's MID.\n * It allows users to retrieve all report requests for a given requester or patient by querying the database.\n * \n * The main functionalities of this class include:\n * - getAllReportRequestsForRequester(long mid): Retrieves all report requests associated with a given requester's MID.\n * - getAllReportRequestsForPatient(long pid): Retrieves all report requests associated with a given patient's MID.\n * \n * The behavior of this class is as follows:\n * - The getAllReportRequestsForRequester method takes a requester's MID as input and returns a list of report requests associated with that requester.\n * - The getAllReportRequestsForPatient method takes a patient's MID as input and returns a list of report requests associated with that patient.\n * - Both methods handle database connections, execute SQL queries to retrieve report requests, and return a list of ReportRequestBean objects.\n * - If there is an error accessing the database or executing the SQL query, a DBException is thrown.\n * \n * @author [Author Name]\n * @version 1.0\n */\n/**\n * This class provides methods for managing report requests for patients in the database.\n * It allows users to retrieve all report requests associated with a specific patient, as well as add new report requests.\n * \n * The getAllReportRequestsForPatient method retrieves a list of ReportRequestBean objects for a given patient ID.\n * \n * The addReportRequest method adds a new report request to the database with the specified requester ID, patient ID, and requested date.\n * \n * @param pid the patient ID for which to retrieve report requests or add a new report request\n * @param requesterMID the ID of the user requesting the report\n * @param patientMID the ID of the patient for whom the report is requested\n * @param date the date the report was requested\n * @return the ID of the newly added report request\n * @throws DBException if there is an error accessing the database\n */\n*/\n/**\n * This class represents a ReportRequestDAO, which is responsible for handling database operations related to report requests.\n * It provides methods to add a new report request to the database and update the status of an existing report request.\n * \n * The main functionalities of this class include:\n * - Adding a new report request to the database with the requester's ID, patient's ID, and request date.\n * - Updating the status of an existing report request to 'Viewed' and setting the viewed date.\n * \n * The overall behavior of this class is to interact with the database to manage report requests, ensuring data integrity and consistency.\n * \n * @author [Your Name]\n * @version 1.0\n * @since [Date]\n */\n*/\n/**\n * The ReportRequestDAO class is responsible for interacting with the database to perform CRUD operations on report requests.\n * It provides methods to create, read, update, and delete report requests in the database.\n * \n * This class uses a DAOFactory to obtain SQL connections and a ReportRequestBeanLoader to load report request data.\n * \n * The setViewed method sets the status of a report request to 'Viewed' and updates the viewed date in the database.\n * \n * The create method creates a new report request in the database with the specified details.\n * \n * The findById method retrieves a report request from the database based on its unique ID.\n * \n * The update method updates an existing report request in the database with new details.\n * \n * The delete method removes a report request from the database based on its ID.\n * \n * This class handles SQLExceptions that may occur during database operations and throws a DBException in case of errors.\n */\npublic class ReportRequestDAO {\n    private DAOFactory factory;\n    private ReportRequestBeanLoader loader;\n    \n    /**\n     * Constructs a new ReportRequestDAO with the specified DAOFactory.\n     * \n     * @param factory The DAOFactory associated with this DAO, used for obtaining SQL connections.\n     */\n    public ReportRequestDAO(DAOFactory factory) {\n        this.factory = factory;\n        loader = new ReportRequestBeanLoader();\n    }\n    \n    /**\n     * Sets the viewed date of a report request with the given ID in the database.\n     * \n     * @param ID the ID of the report request to update\n     * @param date the date to set as the viewed date\n     * @throws SQLException if the ID is 0 or an error occurs while updating the database\n     * @throws DBException if an error occurs while closing the database connection\n     */\n    public void setViewed(long ID, Date date) {\n        Connection conn = null;\n        PreparedStatement ps = null;\n        try {\n            if (ID == 0L)\n                throw new SQLException(\"ID cannot be null\");\n            conn = factory.getConnection();\n            ps = conn.prepareStatement(\"UPDATE ReportRequests set ViewedDate = ?, Status = 'Viewed' where ID = ?\");\n            ps.setTimestamp(1, new java.sql.Timestamp(date.getTime()));\n            ps.setLong(2, ID);\n            ps.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            throw new DBException(e);\n        } finally {\n            DBUtil.closeConnection(conn, ps);\n        }\n    }\n    \n    // Other methods for CRUD operations on report requests\n    \n}\n*/\n/**\n * The ReportRequestDAO class represents a Data Access Object (DAO) for managing ReportRequestBeans.\n * It provides methods for interacting with the database to retrieve, create, update, and delete ReportRequestBeans.\n * This class is initialized with a DAOFactory that is used for database operations.\n * A ReportRequestBeanLoader is used for loading ReportRequestBeans.\n * \n * @param factory the DAOFactory to be used by this ReportRequestDAO\n * \n * This constructor initializes the ReportRequestDAO with the provided DAOFactory\n * and creates a new ReportRequestBeanLoader for loading ReportRequestBeans.\n */\npublic ReportRequestDAO(DAOFactory factory) {\n    this.factory = factory;\n    loader = new ReportRequestBeanLoader();\n}\n*/"
    }
]