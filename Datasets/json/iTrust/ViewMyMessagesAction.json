[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return messageDAO.getMessagesFor(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<MessageBean> getAllMyMessages()",
                "comments": "Optional[/**\r\n * Gets all the messages for the logged in user\r\n *\r\n * @return a list of all the user's messages\r\n * @throws SQLException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves all messages for the currently logged in user.\n * \n * @return A list of MessageBean objects containing all messages for the logged in user.\n */"
            },
            {
                "body": "Optional[{\r\n    return messageDAO.getMessagesTimeAscending(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<MessageBean> getAllMyMessagesTimeAscending()",
                "comments": "Optional[/**\r\n * Gets all the messages for the logged in user and sorts by ascending time\r\n *\r\n * @return a list of all the user's messages\r\n * @throws SQLException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves all messages belonging to the currently logged in user in ascending order of time.\n * \n * @return a list of MessageBean objects representing the messages in ascending order of time\n */"
            },
            {
                "body": "Optional[{\r\n    return messageDAO.getMessagesNameAscending(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<MessageBean> getAllMyMessagesNameAscending()",
                "comments": "Optional[/**\r\n * Gets all the messages for the logged in user and sorts names in ascending order\r\n *\r\n * @return a list of all the user's messages\r\n * @throws SQLException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves all messages belonging to the logged in user in ascending order by name.\n * \n * @return a list of MessageBean objects representing the messages of the logged in user in ascending order by name\n */"
            },
            {
                "body": "Optional[{\r\n    return messageDAO.getMessagesNameDescending(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<MessageBean> getAllMyMessagesNameDescending()",
                "comments": "Optional[/**\r\n * Gets all the messages for the logged in user and sorts name in descending order\r\n *\r\n * @return a list of all the user's messages\r\n * @throws SQLException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves all messages belonging to the logged-in user in descending order by name.\n * \n * @return A list of MessageBean objects representing the messages belonging to the logged-in user, sorted in descending order by name.\n */"
            },
            {
                "body": "Optional[{\r\n    return messageDAO.getMessagesFrom(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<MessageBean> getAllMySentMessages()",
                "comments": "Optional[/**\r\n * Gets all the sent messages for the logged in user\r\n *\r\n * @return a list of all the user's sent messages\r\n * @throws SQLException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves all messages sent by the currently logged in user.\n * \n * @return a list of MessageBean objects representing the sent messages\n */"
            },
            {
                "body": "Optional[{\r\n    return messageDAO.getMessagesFromTimeAscending(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<MessageBean> getAllMySentMessagesTimeAscending()",
                "comments": "Optional[/**\r\n * Gets all the messages for the logged in user and sorts by ascending time\r\n *\r\n * @return a list of all the user's messages\r\n * @throws SQLException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves all messages sent by the currently logged in user in ascending order of time.\n * \n * @return A list of MessageBean objects representing the sent messages in ascending order of time\n */"
            },
            {
                "body": "Optional[{\r\n    return messageDAO.getMessagesFromNameAscending(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<MessageBean> getAllMySentMessagesNameAscending()",
                "comments": "Optional[/**\r\n * Gets all the messages for the logged in user and sorts names in ascending order\r\n *\r\n * @return a list of all the user's messages\r\n * @throws SQLException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves all sent messages by the currently logged in user in ascending order by name.\n * \n * @return a List of MessageBean objects representing all sent messages by the currently logged in user in ascending order by name\n */"
            },
            {
                "body": "Optional[{\r\n    return messageDAO.getMessagesFromNameDescending(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<MessageBean> getAllMySentMessagesNameDescending()",
                "comments": "Optional[/**\r\n * Gets all the messages for the logged in user and sorts name in descending order\r\n *\r\n * @return a list of all the user's messages\r\n * @throws SQLException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves all sent messages by the currently logged in user in descending order by name.\n * \n * @return A list of MessageBean objects representing the sent messages in descending order by name\n */"
            },
            {
                "body": "Optional[{\r\n    String[] f = filter.split(\",\", -1);\r\n    DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n    Date s = null;\r\n    Date en = null;\r\n    try {\r\n        if (!f[4].equals(\"\"))\r\n            s = format.parse(f[4]);\r\n        if (!f[5].equals(\"\"))\r\n            en = format.parse(f[5]);\r\n        if (s != null && en != null && en.before(s)) {\r\n            return \"Error: The end date cannot be before the start date.\";\r\n        }\r\n    } catch (Exception e) {\r\n        return \"Error: A date was not formatted correctly, please enter dates as MM/DD/YYYY\";\r\n    }\r\n    for (int i = 0; i < f.length; i++) {\r\n        f[i] = f[i].replace(\"\\\"\", \"\");\r\n        f[i] = f[i].replace(\"<\", \"\");\r\n        f[i] = f[i].replace(\">\", \"\");\r\n    }\r\n    String nf = f[0] + \",\" + f[1] + \",\" + f[2] + \",\" + f[3] + \",\" + f[4] + \",\" + f[5];\r\n    return nf;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public String validateAndCreateFilter(String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Validates and creates a filter based on the input string.\n * The input string should be in the format \"value1,value2,value3,value4,value5,value6\".\n * Values 4 and 5 are expected to be dates in the format MM/DD/YYYY.\n * \n * @param filter the input string containing values to be filtered\n * @return a new filter string with any invalid characters removed and dates validated\n *         If the end date is before the start date, an error message is returned.\n *         If a date is not formatted correctly, an error message is returned.\n */\npublic String validateAndCreateFilter(String filter) {\n    // method body\n}"
            },
            {
                "body": "Optional[{\r\n    List<MessageBean> filtered = new ArrayList<MessageBean>();\r\n    String[] f = filter.split(\",\", -1);\r\n    for (MessageBean m : messages) {\r\n        /**\r\n         * Check the sender filter field.\r\n         * Exclude if this MessageBean does not match the\r\n         * requested sender, if one is specified.\r\n         */\r\n        if (!f[0].equals(\"\")) {\r\n            if (!this.getName(m.getFrom()).equalsIgnoreCase(f[0]))\r\n                continue;\r\n        }\r\n        /**\r\n         * Check the subject filter field.\r\n         * Exclude if this MessageBean does not match the\r\n         * requested subject, if one is specified.\r\n         */\r\n        if (!f[1].equals(\"\")) {\r\n            if (!m.getSubject().equalsIgnoreCase(f[1]))\r\n                continue;\r\n        }\r\n        /**\r\n         * Check the body of the message for certain words.\r\n         * Exclude if this MessageBean if it does not contain\r\n         * those words in the message body.\r\n         */\r\n        if (!f[2].equals(\"\")) {\r\n            if (!m.getSubject().toLowerCase().contains(f[2].toLowerCase()) && !m.getBody().toLowerCase().contains(f[2].toLowerCase()))\r\n                continue;\r\n        }\r\n        /**\r\n         * Check the body of the message for certain words.\r\n         * Exclude if this MessageBean if it does contain\r\n         * those words in the message body.\r\n         */\r\n        if (!f[3].equals(\"\")) {\r\n            if (m.getSubject().toLowerCase().contains(f[3].toLowerCase()) || m.getBody().toLowerCase().contains(f[3].toLowerCase()))\r\n                continue;\r\n        }\r\n        /**\r\n         * Check the start date filter field.\r\n         * Exclude if this MessageBean was not sent after\r\n         * this date.\r\n         */\r\n        if (!f[4].equals(\"\")) {\r\n            DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            Date s = format.parse(f[4]);\r\n            if (s.after(m.getSentDate()))\r\n                continue;\r\n        }\r\n        /**\r\n         * Check the end date filter field.\r\n         * Exclude if this MessageBean was not sent before\r\n         * this date.\r\n         */\r\n        if (!f[5].equals(\"\")) {\r\n            DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            Date s = format.parse(f[5]);\r\n            Calendar c = Calendar.getInstance();\r\n            c.setTime(s);\r\n            c.add(Calendar.DAY_OF_MONTH, 1);\r\n            s = c.getTime();\r\n            if (s.before(m.getSentDate()))\r\n                continue;\r\n        }\r\n        /**\r\n         * If the message has not been eliminated by any\r\n         * of the filter fields, add it to the new list\r\n         * of messages.\r\n         */\r\n        filtered.add(m);\r\n    }\r\n    return filtered;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public List<MessageBean> filterMessages(List<MessageBean>, String)",
                "comments": "Optional[/**\r\n * Gets a list of messages for a user based on their filter criteria.\r\n *\r\n * @param messages List of all of a user's MessageBeans\r\n * @param filter String containing a user's filter criteria.\r\n * @return a List of MessageBeans that meet the criteria of the filter.\r\n * @throws iTrustException\r\n * @throws ParseException\r\n */\r\n]",
                "innerComments": "Optional[[/**\r\n * Check the sender filter field.\r\n * Exclude if this MessageBean does not match the\r\n * requested sender, if one is specified.\r\n */\r\n, /**\r\n * Check the subject filter field.\r\n * Exclude if this MessageBean does not match the\r\n * requested subject, if one is specified.\r\n */\r\n, /**\r\n * Check the body of the message for certain words.\r\n * Exclude if this MessageBean if it does not contain\r\n * those words in the message body.\r\n */\r\n, /**\r\n * Check the body of the message for certain words.\r\n * Exclude if this MessageBean if it does contain\r\n * those words in the message body.\r\n */\r\n, /**\r\n * Check the start date filter field.\r\n * Exclude if this MessageBean was not sent after\r\n * this date.\r\n */\r\n, /**\r\n * Check the end date filter field.\r\n * Exclude if this MessageBean was not sent before\r\n * this date.\r\n */\r\n, /**\r\n * If the message has not been eliminated by any\r\n * of the filter fields, add it to the new list\r\n * of messages.\r\n */\r\n]]",
                "generated_comment": "/**\n * Filters a list of MessageBeans based on specified filter criteria.\n * \n * @param messages the list of MessageBeans to filter\n * @param filter a comma-separated string representing the filter criteria in the following order:\n *               sender, subject, body contains, body does not contain, start date, end date\n * @return a new list of MessageBeans that match the filter criteria\n */\npublic List<MessageBean> filterMessages(List<MessageBean> messages, String filter) {\n    List<MessageBean> filtered = new ArrayList<MessageBean>();\n    String[] f = filter.split(\",\", -1);\n    for (MessageBean m : messages) {\n        // Check the sender filter field.\n        // Exclude if this MessageBean does not match the requested sender, if one is specified.\n        \n        // Check the subject filter field.\n        // Exclude if this MessageBean does not match the requested subject, if one is specified.\n        \n        // Check the body of the message for certain words.\n        // Exclude if this MessageBean if it does not contain those words in the message body.\n        \n        // Check the body of the message for certain words.\n        // Exclude if this MessageBean if it does contain those words in the message body.\n        \n        // Check the start date filter field.\n        // Exclude if this MessageBean was not sent after this date.\n        \n        // Check the end date filter field.\n        // Exclude if this MessageBean was not sent before this date.\n        \n        // If the message has not been eliminated by any of the filter fields, add it to the new list of messages.\n        filtered.add(m);\n    }\n    return filtered;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (mid < 7000000000L)\r\n        return patientDAO.getName(mid);\r\n    else\r\n        return personnelDAO.getName(mid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getName(long)",
                "comments": "Optional[/**\r\n * Gets a patient's name from their MID\r\n *\r\n * @param mid the MID of the patient\r\n * @return the patient's name\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the name of a person based on their unique identifier.\n * If the identifier is less than 7000000000, it is assumed to belong to a patient\n * and the name is retrieved from the patient data access object (DAO).\n * If the identifier is equal to or greater than 7000000000, it is assumed to belong to personnel\n * and the name is retrieved from the personnel data access object (DAO).\n * \n * @param mid the unique identifier of the person\n * @return the name of the person associated with the given identifier\n */"
            },
            {
                "body": "Optional[{\r\n    return personnelDAO.getName(mid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getPersonnelName(long)",
                "comments": "Optional[/**\r\n * Gets a personnel's name from their MID\r\n *\r\n * @param mid the MID of the personnel\r\n * @return the personnel's name\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the name of a personnel based on the provided personnel ID.\n * \n * @param mid the unique identifier of the personnel whose name is to be retrieved\n * @return the name of the personnel corresponding to the given ID\n */"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        messageDAO.updateRead(mBean);\r\n    } catch (DBException e) {\r\n        // TODO Auto-generated catch block\r\n        e.printStackTrace();\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public void setRead(MessageBean)",
                "comments": "Optional[/**\r\n * Set the state of the MessageBean to read, after\r\n * it is read by a user.\r\n * @param mBean MessageBean to be read\r\n */\r\n]",
                "innerComments": "Optional[[// TODO Auto-generated catch block\r\n]]",
                "generated_comment": "/**\n * Sets the read status of a message in the database.\n * \n * @param mBean the MessageBean object representing the message to update\n * @throws DBException if there is an error updating the read status in the database\n */\npublic void setRead(MessageBean mBean) {\n    try {\n        messageDAO.updateRead(mBean);\n    } catch (DBException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.messageDAO = factory.getMessageDAO();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ViewMyMessagesAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Set up defaults\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the user who is viewing their messages.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ViewMyMessagesAction object with the given DAOFactory and logged in member ID.\n * This constructor initializes the ViewMyMessagesAction object with the provided DAOFactory to access\n * the Patient, Personnel, and Message DAOs. It also sets the logged in member ID to the specified value.\n *\n * @param factory the DAOFactory used to retrieve the Patient, Personnel, and Message DAOs\n * @param loggedInMID the ID of the logged in member\n */"
            }
        ],
        "signature": "ViewMyMessagesAction",
        "variables": [
            "private long loggedInMID",
            "private PatientDAO patientDAO",
            "private PersonnelDAO personnelDAO",
            "private MessageDAO messageDAO"
        ],
        "generated_class_comment": "Sure, here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a MessageService that provides various methods for retrieving messages for the logged in user.\n * It interacts with a MessageDAO to retrieve messages from a database.\n * \n * The main functionalities of this class include:\n * - Retrieving all messages for the logged in user\n * - Sorting messages by ascending time\n * - Sorting messages by ascending name\n * \n * The overall behavior of this class is to provide convenient methods for accessing and sorting messages for the logged in user.\n * \n * @author [Your Name]\n * @version 1.0\n */\nI'm sorry, but I cannot generate a comprehensive JavaDoc comment for the entire class as it requires a detailed understanding of the class's functionalities and behavior. It is best for the developer who has written the class to provide this information.\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a MessageDAO that handles the retrieval and sorting of messages for a logged in user.\n * It provides methods to get all sent messages by the currently logged in user in both ascending and descending order by name.\n * Additionally, it includes a method to filter messages based on specific criteria such as date range.\n * \n * The main functionalities of this class include:\n * - Retrieving all sent messages by the currently logged in user\n * - Sorting messages by name in ascending and descending order\n * - Filtering messages based on specified criteria such as date range\n * \n * The overall behavior of this class is to interact with a data access object (DAO) to retrieve and manipulate message data for the logged in user.\n * It ensures that messages are sorted and filtered accurately based on the user's preferences.\n * \n * @author [Your Name]\n * @version 1.0\n */\n/**\n * This class represents a filter utility that validates and creates a filter based on an input string.\n * The input string should be in the format \"value1,value2,value3,value4,value5,value6\".\n * Values 4 and 5 are expected to be dates in the format MM/DD/YYYY.\n * \n * The main functionality of this class is to filter a list of MessageBean objects based on the criteria provided in the input string.\n * It checks the sender, subject, and message body fields of each MessageBean object and excludes any that do not match the specified criteria.\n * \n * The class provides a method validateAndCreateFilter(String filter) that takes the input filter string and returns a new filter string with any invalid characters removed and dates validated.\n * If the end date is before the start date, an error message is returned.\n * If a date is not formatted correctly, an error message is returned.\n * \n * Additionally, the class contains inner functionality to iterate through a list of MessageBean objects and apply the filter criteria to each object.\n * It checks the sender, subject, and message body fields of each MessageBean object against the corresponding values in the input filter string.\n * \n * @param filter the input string containing values to be filtered\n * @return a new filter string with any invalid characters removed and dates validated\n * If the end date is before the start date, an error message is returned.\n * If a date is not formatted correctly, an error message is returned.\n */\npublic String validateAndCreateFilter(String filter) {\n    // method body\n}\n*/\nSure! Here is a comprehensive JavaDoc comment for the given class:\n\n/**\n * This class provides a method to filter a list of MessageBeans based on user-defined criteria.\n * It checks the message body for specific words, excludes messages that contain those words.\n * It also filters messages based on the start and end dates they were sent.\n * \n * The main functionality of this class is to iterate through a list of MessageBeans and apply filters\n * to exclude certain messages based on the user's criteria. If a message meets all the filter conditions,\n * it is added to a new list of filtered messages.\n * \n * The behavior of this class is to return a List of MessageBeans that meet the criteria specified in the filter.\n * It throws iTrustException and ParseException if there are any issues with the filtering process.\n * \n * @param messages List of all of a user's MessageBeans\n * @param filter String containing a user's filter criteria\n * @return a List of MessageBeans that meet the criteria of the filter\n * @throws iTrustException if there are any issues with the filtering process\n * @throws ParseException if there are any issues with parsing dates in the filter criteria\n */\n \nThis JavaDoc comment describes the purpose of the class, its main functionalities, and its overall behavior in a clear and concise manner.\n/**\n * This class provides a method to filter a list of MessageBeans based on specified filter criteria.\n * The filter criteria include sender, subject, body contains, body does not contain, start date, and end date.\n * Messages that match the filter criteria are added to a new list and returned.\n * \n * @param messages the list of MessageBeans to filter\n * @param filter a comma-separated string representing the filter criteria in the following order:\n *               sender, subject, body contains, body does not contain, start date, end date\n * @return a new list of MessageBeans that match the filter criteria\n */\npublic List<MessageBean> filterMessages(List<MessageBean> messages, String filter) {\n    List<MessageBean> filtered = new ArrayList<MessageBean>();\n    String[] f = filter.split(\",\", -1);\n    for (MessageBean m : messages) {\n        // Check the sender filter field.\n        // Exclude if this MessageBean does not match the requested sender, if one is specified.\n        \n        // Check the subject filter field.\n        // Exclude if this MessageBean does not match the requested subject, if one is specified.\n        \n        // Check the body of the message for certain words.\n        // Exclude if this MessageBean if it does not contain those words in the message body.\n        \n        // Check the body of the message for certain words.\n        // Exclude if this MessageBean if it does contain those words in the message body.\n    }\n}\n*/\n/**\n * This class contains methods for retrieving names of patients and personnel based on their unique identifiers.\n * It provides functionality to get the name of a patient or personnel by their MID.\n * \n * The method getName(long mid) retrieves the name of a person based on their unique identifier.\n * If the identifier is less than 7000000000, it is assumed to belong to a patient and the name is retrieved from the patient data access object (DAO).\n * If the identifier is equal to or greater than 7000000000, it is assumed to belong to personnel and the name is retrieved from the personnel data access object (DAO).\n * \n * The method getPersonnelName(long mid) specifically retrieves the name of a personnel based on the provided personnel ID.\n * \n * Both methods throw an iTrustException if there is an issue retrieving the name.\n * \n * @param mid the unique identifier of the person whose name is to be retrieved\n * @return the name of the person associated with the given identifier\n */\n*/\n* loggedInMID the MID of the user who is viewing their messages\\n */\\npublic ViewMyMessagesAction(DAOFactory factory, long loggedInMID) {\\n this.loggedInMID = loggedInMID;\\n this.patientDAO = factory.getPatientDAO();\\n this.personnelDAO = factory.getPersonnelDAO();\\n this.messageDAO = factory.getMessageDAO();\\n}\\n*/\" } ], \"interfaces\": [], \"enums\": [], \"annotations\": [] }\n/**\n * The ViewMyMessagesAction class is responsible for displaying messages for the logged in member.\n * It contains functionalities to retrieve messages for both patients and personnel based on the logged in member ID.\n * The class interacts with the PatientDAO, PersonnelDAO, and MessageDAO to fetch the necessary information.\n * \n * The main functionalities of this class include:\n * - Retrieving messages for the logged in member\n * - Displaying messages in a user-friendly format\n * - Allowing the member to view and interact with their messages\n * \n * The overall behavior of this class is to provide a seamless messaging experience for the logged in member.\n * It ensures that messages are retrieved accurately and displayed correctly for the member to easily access and manage.\n * \n * @author [Your Name]\n * @version 1.0\n */"
    }
]