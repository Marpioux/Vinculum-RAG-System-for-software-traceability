[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Date of Birth\", p.getDateOfBirthStr(), ValidationFormat.DATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Date of Death\", p.getDateOfDeathStr(), ValidationFormat.DATE, true));\r\n    try {\r\n        if (p.getDateOfDeath() == null && \"\".equals(p.getDateOfDeathStr())) {\r\n            if (p.getDateOfBirth().after(new Date())) {\r\n                errorList.addIfNotNull(\"Birth date cannot be in the future!\");\r\n            }\r\n        }\r\n        if (p.getDateOfDeath().before(p.getDateOfBirth()))\r\n            errorList.addIfNotNull(\"Death date cannot be before birth date!\");\r\n        if (p.getDateOfDeath().after(new Date())) {\r\n            errorList.addIfNotNull(\"Death date cannot be in the future!\");\r\n        }\r\n        if (p.getDateOfBirth().after(new Date())) {\r\n            errorList.addIfNotNull(\"Birth date cannot be in the future!\");\r\n        }\r\n    } catch (NullPointerException e) {\r\n        // ignore this\r\n    }\r\n    boolean deathCauseNull = (null == p.getDateOfDeathStr() || p.getDateOfDeathStr().equals(\"\"));\r\n    errorList.addIfNotNull(checkFormat(\"Cause of Death\", p.getCauseOfDeath(), ValidationFormat.ICD9CM, deathCauseNull));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(), ValidationFormat.ADDRESS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(), ValidationFormat.ADDRESS, true));\r\n    errorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    errorList.addIfNotNull(checkFormat(\"Emergency Contact Name\", p.getEmergencyName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Emergency Contact Phone\", p.getEmergencyPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company Name\", p.getIcName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company Address 1\", p.getIcAddress1(), ValidationFormat.ADDRESS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company Address 2\", p.getIcAddress2(), ValidationFormat.ADDRESS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company City\", p.getIcCity(), ValidationFormat.CITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company State\", p.getIcState(), ValidationFormat.STATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company Zip\", p.getIcZip(), ValidationFormat.ZIPCODE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company Phone\", p.getIcPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company ID\", p.getIcID(), ValidationFormat.INSURANCE_ID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Mother MID\", p.getMotherMID(), ValidationFormat.MID, true));\r\n    errorList.addIfNotNull(checkFormat(\"Father MID\", p.getFatherMID(), ValidationFormat.MID, true));\r\n    errorList.addIfNotNull(checkFormat(\"Topical Notes\", p.getTopicalNotes(), ValidationFormat.NOTES, true));\r\n    /* This block was added for Theme 5 by Tyler Arehart */\r\n    if (!(p.getCreditCardNumber().equals(\"\") && p.getCreditCardType().equals(\"\"))) {\r\n        String s = null;\r\n        CreditCardValidator c;\r\n        int type = -1;\r\n        if (p.getCreditCardType().equals(\"VISA\"))\r\n            type = CreditCardValidator.VISA;\r\n        if (p.getCreditCardType().equals(\"MASTERCARD\"))\r\n            type = CreditCardValidator.MASTERCARD;\r\n        if (p.getCreditCardType().equals(\"DISCOVER\"))\r\n            type = CreditCardValidator.DISCOVER;\r\n        if (p.getCreditCardType().equals(\"AMEX\"))\r\n            type = CreditCardValidator.AMEX;\r\n        if (type != -1) {\r\n            c = new CreditCardValidator(type);\r\n            if (!c.isValid(p.getCreditCardNumber())) {\r\n                s = \"Credit Card Number\";\r\n            }\r\n        } else {\r\n            s = \"Credit Card Type\";\r\n        }\r\n        errorList.addIfNotNull(s);\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public void validate(PatientBean)",
                "comments": "Optional[/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p A bean of the type to be validated.\r\n */\r\n]",
                "innerComments": "Optional[[/* This block was added for Theme 5 by Tyler Arehart */\r\n, // ignore this\r\n]]"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PatientValidator()",
                "comments": "Optional[/**\r\n * The default constructor.\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "signature": "PatientValidator",
        "variables": []
    }
]