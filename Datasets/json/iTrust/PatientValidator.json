[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Date of Birth\", p.getDateOfBirthStr(), ValidationFormat.DATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Date of Death\", p.getDateOfDeathStr(), ValidationFormat.DATE, true));\r\n    try {\r\n        if (p.getDateOfDeath() == null && \"\".equals(p.getDateOfDeathStr())) {\r\n            if (p.getDateOfBirth().after(new Date())) {\r\n                errorList.addIfNotNull(\"Birth date cannot be in the future!\");\r\n            }\r\n        }\r\n        if (p.getDateOfDeath().before(p.getDateOfBirth()))\r\n            errorList.addIfNotNull(\"Death date cannot be before birth date!\");\r\n        if (p.getDateOfDeath().after(new Date())) {\r\n            errorList.addIfNotNull(\"Death date cannot be in the future!\");\r\n        }\r\n        if (p.getDateOfBirth().after(new Date())) {\r\n            errorList.addIfNotNull(\"Birth date cannot be in the future!\");\r\n        }\r\n    } catch (NullPointerException e) {\r\n        // ignore this\r\n    }\r\n    boolean deathCauseNull = (null == p.getDateOfDeathStr() || p.getDateOfDeathStr().equals(\"\"));\r\n    errorList.addIfNotNull(checkFormat(\"Cause of Death\", p.getCauseOfDeath(), ValidationFormat.ICD9CM, deathCauseNull));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(), ValidationFormat.ADDRESS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(), ValidationFormat.ADDRESS, true));\r\n    errorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    errorList.addIfNotNull(checkFormat(\"Emergency Contact Name\", p.getEmergencyName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Emergency Contact Phone\", p.getEmergencyPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company Name\", p.getIcName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company Address 1\", p.getIcAddress1(), ValidationFormat.ADDRESS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company Address 2\", p.getIcAddress2(), ValidationFormat.ADDRESS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company City\", p.getIcCity(), ValidationFormat.CITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company State\", p.getIcState(), ValidationFormat.STATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company Zip\", p.getIcZip(), ValidationFormat.ZIPCODE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company Phone\", p.getIcPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    errorList.addIfNotNull(checkFormat(\"Insurance Company ID\", p.getIcID(), ValidationFormat.INSURANCE_ID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Mother MID\", p.getMotherMID(), ValidationFormat.MID, true));\r\n    errorList.addIfNotNull(checkFormat(\"Father MID\", p.getFatherMID(), ValidationFormat.MID, true));\r\n    errorList.addIfNotNull(checkFormat(\"Topical Notes\", p.getTopicalNotes(), ValidationFormat.NOTES, true));\r\n    /* This block was added for Theme 5 by Tyler Arehart */\r\n    if (!(p.getCreditCardNumber().equals(\"\") && p.getCreditCardType().equals(\"\"))) {\r\n        String s = null;\r\n        CreditCardValidator c;\r\n        int type = -1;\r\n        if (p.getCreditCardType().equals(\"VISA\"))\r\n            type = CreditCardValidator.VISA;\r\n        if (p.getCreditCardType().equals(\"MASTERCARD\"))\r\n            type = CreditCardValidator.MASTERCARD;\r\n        if (p.getCreditCardType().equals(\"DISCOVER\"))\r\n            type = CreditCardValidator.DISCOVER;\r\n        if (p.getCreditCardType().equals(\"AMEX\"))\r\n            type = CreditCardValidator.AMEX;\r\n        if (type != -1) {\r\n            c = new CreditCardValidator(type);\r\n            if (!c.isValid(p.getCreditCardNumber())) {\r\n                s = \"Credit Card Number\";\r\n            }\r\n        } else {\r\n            s = \"Credit Card Type\";\r\n        }\r\n        errorList.addIfNotNull(s);\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public void validate(PatientBean)",
                "comments": "Optional[/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p A bean of the type to be validated.\r\n */\r\n]",
                "innerComments": "Optional[[/* This block was added for Theme 5 by Tyler Arehart */\r\n, // ignore this\r\n]]",
                "generated_comment": "/**\n * Validates the information provided in a PatientBean object.\n * Checks the format of various fields such as first name, last name, date of birth, date of death, email, address, phone number, insurance information, and more.\n * Additionally, validates the relationship between birth date and death date, ensures that dates are not in the future, and validates credit card information if provided.\n * \n * @param p the PatientBean object to validate\n * @throws FormValidationException if any errors are found during validation\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PatientValidator()",
                "comments": "Optional[/**\r\n * The default constructor.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This constructor creates a new instance of the PatientValidator class.\n * It does not take any parameters.\n * \n * @param None\n * @return A new PatientValidator object\n */"
            }
        ],
        "signature": "PatientValidator",
        "variables": [],
        "generated_class_comment": "/**\n * This class represents a validator for a Person object. It provides methods to validate the fields of a Person object\n * such as first name, last name, date of birth, date of death, cause of death, email, address, city, state, and zip code.\n * The validation process includes checking the format of each field according to specific validation formats, as well as\n * performing additional checks such as ensuring that birth date is not in the future, death date is not before birth date,\n * and death date is not in the future.\n * \n * The main functionalities of this class include:\n * - Validating the fields of a Person object based on specific validation formats\n * - Performing additional checks on date of birth, date of death, and cause of death\n * - Generating an ErrorList object containing any validation errors found during the validation process\n * \n * Overall behavior:\n * - The validatePerson method takes a Person object as input and validates its fields according to specific rules\n * - Any validation errors found are added to an ErrorList object, which can be accessed after the validation process\n * - The ErrorList object can be used to display error messages to the user or handle validation errors in a specific way\n */\n**/\n/**\n * This class is responsible for validating patient information for a medical system. It contains methods to check the format of various fields such as name, address, phone number, ZIP code, insurance information, and credit card details. \n * \n * The main functionalities of this class include:\n * - Validating patient information fields such as name, address, phone number, ZIP code, insurance details, and credit card information.\n * - Checking the format of each field based on predefined validation formats.\n * - Generating a list of errors for any invalid fields found during validation.\n * \n * The overall behavior of this class is to ensure that patient information entered into the system meets the required format and standards. It uses predefined validation formats for each field and generates a list of errors for any fields that do not meet the specified criteria. Additionally, it includes specific validations for credit card information based on the credit card type provided.\n * \n * Note: This class was extended with additional functionality for Theme 5 by Tyler Arehart.\n */\n **/\n/**\n * The PatientValidator class is responsible for validating the information provided in a PatientBean object.\n * It checks the format of various fields such as first name, last name, date of birth, date of death, email, address, phone number, insurance information, and more.\n * Additionally, it validates the relationship between birth date and death date, ensures that dates are not in the future, and validates credit card information if provided.\n *\n * This class contains a method named validate() that performs the validation process. If any errors are found during validation, a FormValidationException is thrown.\n * \n * The PatientValidator class also includes a default constructor that creates a new instance of the class.\n */\npublic class PatientValidator {\n    \n    /**\n     * Default constructor for the PatientValidator class.\n     */\n    public PatientValidator() {\n    }\n    \n    /**\n     * Performs the act of validating the bean in question, which varies depending on the\n     * type of validator. If the validation does not succeed, a FormValidationException is thrown.\n     *\n     * @param p A bean of the type to be validated.\n     */\n    public void validate(PatientBean p) {\n        // Validation logic goes here\n    }\n}\n*/\n/**\n * The PatientValidator class is responsible for validating patient information.\n * It ensures that the patient data is accurate and follows specific criteria.\n * This class provides methods to validate patient names, ages, genders, and other relevant information.\n * It also includes error handling mechanisms to notify users of any invalid data.\n * \n * @param None\n * @return A new PatientValidator object\n */"
    }
]