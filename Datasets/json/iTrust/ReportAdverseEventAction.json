[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    List<String> MIDlist = new ArrayList<String>();\r\n    String patientID = \"\";\r\n    for (AdverseEventBean beaner : aeList) {\r\n        patientID = beaner.getMID();\r\n        String newDesc = \" Drug: \" + beaner.getDrug() + \" (\" + beaner.getCode() + \") Description: \" + beaner.getDescription();\r\n        beaner.setDescription(newDesc);\r\n    }\r\n    for (AdverseEventBean beano : aeList) {\r\n        if (!MIDlist.contains(beano.getPrescriber())) {\r\n            MIDlist.add(beano.getPrescriber());\r\n        }\r\n    }\r\n    Email email = new Email();\r\n    for (String num : MIDlist) {\r\n        String message = \" Patient: \" + patientDAO.getName(Long.parseLong(patientID)) + \" (MID \" + patientID + \") Has Reported the following adverse event(s)\";\r\n        for (AdverseEventBean beano : aeList) {\r\n            if (beano.getPrescriber().equals(num)) {\r\n                message = message + beano.getDescription();\r\n            }\r\n        }\r\n        String fromEmail;\r\n        email.setFrom(\"noreply@itrust.com\");\r\n        PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n        PersonnelBean receiver = personnelDAO.getPersonnel(Long.parseLong(num));\r\n        List<String> toList = new ArrayList<String>();\r\n        toList.add(receiver.getEmail());\r\n        fromEmail = sender.getEmail();\r\n        email.setToList(toList);\r\n        email.setFrom(fromEmail);\r\n        email.setSubject(String.format(\"Adverse Event Report(Prescription)\"));\r\n        email.setBody(message);\r\n        emailer.sendEmail(email);\r\n        transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\r\n    }\r\n    return email;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public Email sendMails(List<AdverseEventBean>)",
                "comments": "Optional[/**\r\n * Method that sends exactly one e-mail to each MID in the list of Adverse Events\r\n * @param aeList The list of adverse Event Beans that need to be acted upon\r\n * @return EList The list of e-mails sent for testing purposes\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Sends emails containing adverse event reports to prescribers based on the provided list of AdverseEventBeans.\n * \n * @param aeList a List of AdverseEventBeans containing information about adverse events reported by patients\n * @return an Email object representing the email sent to prescribers containing the adverse event reports\n */\npublic Email sendMails(List<AdverseEventBean> aeList) {\n    List<String> MIDlist = new ArrayList<String>();\n    String patientID = \"\";\n    \n    // Iterate through the list of AdverseEventBeans to update the description and gather prescriber IDs\n    for (AdverseEventBean beaner : aeList) {\n        patientID = beaner.getMID();\n        String newDesc = \" Drug: \" + beaner.getDrug() + \" (\" + beaner.getCode() + \") Description: \" + beaner.getDescription();\n        beaner.setDescription(newDesc);\n    }\n    \n    // Gather unique prescriber IDs\n    for (AdverseEventBean beano : aeList) {\n        if (!MIDlist.contains(beano.getPrescriber())) {\n            MIDlist.add(beano.getPrescriber());\n        }\n    }\n    \n    Email email = new Email();\n    \n    // Send email to each prescriber containing the adverse event reports\n    for (String num : MIDlist) {\n        String message = \" Patient: \" + patientDAO.getName(Long.parseLong(patientID)) + \" (MID \" + patientID + \") Has Reported the following adverse event(s)\";\n        for (AdverseEventBean beano : aeList) {\n            if (beano.getPrescriber().equals(num)) {\n                message = message + beano.getDescription();\n            }\n        }\n        \n        String fromEmail;\n        email.setFrom(\"noreply@itrust.com\");\n        PatientBean sender = patientDAO.getPatient(loggedInMID);\n        PersonnelBean receiver = personnelDAO.getPersonnel(Long.parseLong(num));\n        List<String> toList = new ArrayList<String>();\n        toList.add(receiver.getEmail());\n        fromEmail = sender.getEmail();\n        email.setToList(toList);\n        email.setFrom(fromEmail);\n        email.setSubject(String.format(\"Adverse Event Report(Prescription)\"));\n        email.setBody(message);\n        emailer.sendEmail(email);\n        transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\n    }\n    \n    return email;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Email email = new Email();\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n    PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n    toList.add(receiver.getEmail());\r\n    fromEmail = sender.getEmail();\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\r\n    email.setBody(String.format(\" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID())) + \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event\" + \" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()));\r\n    emailer.sendEmail(email);\r\n    transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\r\n    return email;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public Email sendMail(AdverseEventBean)",
                "comments": "Optional[/**\r\n * A method used to send a single e-mail. Used in immunizations.\r\n * @param aeBean\r\n * @return Email returns the Email for testing purposes.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Sends an email notification for an adverse event report related to immunization.\n * \n * @param aeBean the AdverseEventBean containing information about the adverse event report\n * @return the Email object representing the email notification sent\n */\npublic Email sendMail(AdverseEventBean aeBean) {\n    Email email = new Email();\n    String fromEmail;\n    email.setFrom(\"noreply@itrust.com\");\n    List<String> toList = new ArrayList<String>();\n    PatientBean sender = patientDAO.getPatient(loggedInMID);\n    PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\n    toList.add(receiver.getEmail());\n    fromEmail = sender.getEmail();\n    email.setToList(toList);\n    email.setFrom(fromEmail);\n    email.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\n    email.setBody(String.format(\" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID())) + \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event\" + \" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()));\n    emailer.sendEmail(email);\n    transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\n    return email;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        validator.validate(aeBean);\r\n    } catch (FormValidationException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n    try {\r\n        adverseEventDAO.addReport(aeBean, hcpID);\r\n    } catch (DBException e) {\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    /**\r\n     *  Old code used to send a single e-mail. Keep for reference\r\n     * \t\tEmail email = new Email();\r\n     * \t\tString senderName;\r\n     * \t\tString fromEmail;\r\n     * \t\temail.setFrom(\"noreply@itrust.com\");\r\n     * \t\tList<String> toList = new ArrayList<String>();\r\n     *\r\n     * \t\tPatientBean sender = patientDAO.getPatient(loggedInMID);\r\n     * \t\tPersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n     *\r\n     * \t\ttoList.add(receiver.getEmail());\r\n     * \t\tsenderName = sender.getFullName();\r\n     * \t\tfromEmail = sender.getEmail();\r\n     *\r\n     * \t\temail.setToList(toList);\r\n     * \t\temail.setFrom(fromEmail);\r\n     * \t\temail.setSubject(String.format(\"Adverse Event Report\"));\r\n     * \t\temail.setBody(String.format(\r\n     * \t\t\t\t\" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID()))\r\n     * \t\t\t\t+ \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event(s)\" +\r\n     * \t\t\t\t\" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()\r\n     * \t\t\t\t));\r\n     * \t\temailer.sendEmail(email);\r\n     *\r\n     * \t\ttransactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\r\n     */\r\n    transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID);\r\n    return \"\";\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public String addReport(AdverseEventBean)",
                "comments": "Optional[/**\r\n * Method used to add a report to the data base\r\n * @param aeBean The adverse event to add\r\n * @return a string for testing purposes only\r\n * @throws iTrustException\r\n * @throws FormValidationException\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": "Optional[[/**\r\n *  Old code used to send a single e-mail. Keep for reference\r\n * \t\tEmail email = new Email();\r\n * \t\tString senderName;\r\n * \t\tString fromEmail;\r\n * \t\temail.setFrom(\"noreply@itrust.com\");\r\n * \t\tList<String> toList = new ArrayList<String>();\r\n *\r\n * \t\tPatientBean sender = patientDAO.getPatient(loggedInMID);\r\n * \t\tPersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n *\r\n * \t\ttoList.add(receiver.getEmail());\r\n * \t\tsenderName = sender.getFullName();\r\n * \t\tfromEmail = sender.getEmail();\r\n *\r\n * \t\temail.setToList(toList);\r\n * \t\temail.setFrom(fromEmail);\r\n * \t\temail.setSubject(String.format(\"Adverse Event Report\"));\r\n * \t\temail.setBody(String.format(\r\n * \t\t\t\t\" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID()))\r\n * \t\t\t\t+ \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event(s)\" +\r\n * \t\t\t\t\" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()\r\n * \t\t\t\t));\r\n * \t\temailer.sendEmail(email);\r\n *\r\n * \t\ttransactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\r\n */\r\n]]",
                "generated_comment": "/**\n * Adds a new adverse event report to the system.\n * \n * @param aeBean the AdverseEventBean containing the details of the adverse event report\n * @return an empty string if the report is successfully added, or an error message if validation or database operation fails\n */\npublic String addReport(AdverseEventBean aeBean) {\n    try {\n        validator.validate(aeBean);\n    } catch (FormValidationException e) {\n        e.printStackTrace();\n        return e.getMessage();\n    }\n    try {\n        adverseEventDAO.addReport(aeBean, hcpID);\n    } catch (DBException e) {\n        throw new iTrustException(e.getMessage());\n    }\n    \n    // Logging the transaction\n    transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID);\n    \n    return \"\";\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.transactionDAO = factory.getTransactionDAO();\r\n    this.hcpID = Long.parseLong(hcpID);\r\n    this.validator = new AdverseEventValidator();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public ReportAdverseEventAction(String, DAOFactory, long)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ReportAdverseEventAction object with the specified parameters.\n * \n * @param loggedInMID the MID of the logged in user\n * @param factory the DAOFactory used to retrieve data access objects\n * @param hcpID the ID of the healthcare personnel reporting the adverse event\n * \n * This constructor initializes the ReportAdverseEventAction object with the provided parameters. It sets the logged in MID, retrieves the patient and personnel data access objects from the DAOFactory, initializes an EmailUtil object, retrieves the adverse event and transaction data access objects, parses the hcpID to a long value, and creates a new AdverseEventValidator object.\n */"
            },
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.transactionDAO = factory.getTransactionDAO();\r\n    this.validator = new AdverseEventValidator();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ReportAdverseEventAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Constructor used to send e-mails only\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ReportAdverseEventAction object with the given DAOFactory and logged in MID.\n * This constructor initializes the loggedInMID field with the provided value, and initializes\n * the patientDAO, personnelDAO, emailer, adverseEventDAO, transactionDAO, and validator fields\n * using the DAOFactory parameter.\n * \n * @param factory the DAOFactory to be used for accessing data access objects\n * @param loggedInMID the MID of the logged in user\n */"
            }
        ],
        "signature": "ReportAdverseEventAction",
        "variables": [
            "private long loggedInMID",
            "private EmailUtil emailer",
            "private PatientDAO patientDAO",
            "private PersonnelDAO personnelDAO",
            "private AdverseEventDAO adverseEventDAO",
            "private TransactionDAO transactionDAO",
            "private long hcpID",
            "private AdverseEventValidator validator"
        ],
        "generated_class_comment": "public class EmailSender {\n\n    /**\n     * Sends emails containing adverse event reports\n     * This class contains a method that sends exactly one e-mail to each MID in the list of Adverse Events.\n     * It loops through the list of AdverseEventBeans and constructs a message for each prescriber containing the adverse event details.\n     * It then sends an email to each prescriber with the adverse event report.\n     * \n     * @param aeList The list of AdverseEventBeans that need to be acted upon\n     * @return The list of e-mails sent for testing purposes\n     */\n    public Email sendMails(List<AdverseEventBean> aeList) {\n        List<String> MIDlist = new ArrayList<String>();\n        String patientID = \"\";\n        \n        // Loop through the list of AdverseEventBeans to construct the message for each prescriber\n        for (AdverseEventBean beaner : aeList) {\n            patientID = beaner.getMID();\n            String newDesc = \" Drug: \" + beaner.getDrug() + \" (\" + beaner.getCode() + \") Description: \" + beaner.getDescription();\n            beaner.setDescription(newDesc);\n        }\n        \n        // Add unique prescribers to the MIDlist\n        for (AdverseEventBean beano : aeList) {\n            if (!MIDlist.contains(beano.getPrescriber())) {\n                MIDlist.add(beano.getPrescriber());\n            }\n        }\n        \n        Email email = new Email();\n        \n        // Send email to each prescriber with the adverse event report\n        for (String num : MIDlist) {\n            String message = \" Patient: \" + patientDAO.getName(Long.parseLong(patientID)) + \" (MID \" + patientID + \") Has Reported the following adverse event(s)\";\n            for (AdverseEventBean beano : aeList) {\n                if (beano.getPrescriber().equals(num)) {\n                    message = message + beano.getDescription();\n                }\n            }\n            \n            String fromEmail;\n            email.setFrom(\"noreply@itrust.com\");\n            PatientBean sender = patientDAO.getPatient(loggedInMID);\n            PersonnelBean receiver = personnelDAO.getPersonnel(Long.parseLong(num));\n            List<String> toList = new ArrayList<String>();\n            toList.add(receiver.getEmail());\n            fromEmail = sender.getEmail();\n            email.setToList(toList);\n            email.setFrom(fromEmail);\n            email.setSubject(String.format(\"Adverse Event Report(Prescription)\"));\n            email.setBody(message);\n            emailer.sendEmail(email);\n            transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\n        }\n        \n        return email;\n    }\n}\n/**\n * This class is responsible for sending emails to prescribers based on the provided list of AdverseEventBeans.\n * It takes a List of AdverseEventBeans containing information about adverse events reported by patients and generates an Email object representing the email sent to prescribers containing the adverse event reports.\n * \n * The class iterates through the list of AdverseEventBeans to update the description and gather prescriber IDs. It then gathers unique prescriber IDs and sends an email to each prescriber containing the adverse event reports.\n * \n * The email message includes the patient's name and MID who reported the adverse events, along with the details of each adverse event reported by the patient.\n * \n * This class utilizes other DAO classes such as patientDAO and personnelDAO to retrieve patient and personnel information for sending emails. It also logs the transaction of sending emails using transactionDAO.\n * \n * Overall, this class facilitates the communication of adverse event reports from patients to prescribers through email notifications.\n */\npublic Email sendMails(List<AdverseEventBean> aeList) {\n    // Method implementation\n}\n*/\n/**\n * This class represents a utility for sending email notifications related to adverse event reports in the context of immunizations. \n * It contains a method named sendMail that constructs and sends an email notification to a healthcare provider regarding an adverse event reported by a patient during an immunization procedure. \n * The sendMail method takes an AdverseEventBean object as a parameter, which contains information about the adverse event report, and returns an Email object representing the email notification sent. \n * The method initializes an Email object, sets the sender's email address to \"noreply@itrust.com\", retrieves the sender's and receiver's information from the database using patientDAO and personnelDAO, respectively, and constructs the email content with details about the reported adverse event. \n * Finally, the email is sent using an Emailer object, and the transaction is logged as a SEND_MESSAGE type in the database. \n * This class provides a convenient way to notify healthcare providers about adverse events reported by patients during immunization procedures.\n */\npublic Email sendMail(AdverseEventBean aeBean) {\n    Email email = new Email();\n    String fromEmail;\n    email.setFrom(\"noreply@itrust.com\");\n    List<String> toList = new ArrayList<String>();\n    PatientBean sender = patientDAO.getPatient(loggedInMID);\n    PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\n    toList.add(receiver.getEmail());\n    fromEmail = sender.getEmail();\n    email.setToList(toList);\n    email.setFrom(fromEmail);\n    email.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\n    email.setBody(String.format(\" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID())) + \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event\" + \" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()));\n    emailer.sendEmail(email);\n    transactionDAO.logTransaction(TransactionType.SEND_MESSAGE, loggedInMID);\n    return email;\n}\n```\n/**\n * The EventReport class is responsible for handling adverse event reports related to immunizations.\n * It provides methods for validating and adding adverse event reports, as well as sending notification emails to healthcare providers.\n * \n * The main functionalities of this class include:\n * - Validating the adverse event report data using a validator\n * - Adding the adverse event report to the database using the AdverseEventDAO\n * - Sending notification emails to healthcare providers using the Emailer class\n * - Logging the transaction of sending a message using the TransactionDAO\n * \n * The overall behavior of this class is to facilitate the reporting of adverse events related to immunizations by patients.\n * It ensures that the data is validated before being added to the database, and notifies the appropriate healthcare provider via email.\n * \n * Note: The old code for sending a single email is kept for reference, but the current implementation does not use it.\n */\n*/\n/**\n * This class represents a Data Access Object (DAO) for handling adverse event reports in the system.\n * It provides methods to add a new adverse event report to the database.\n * \n * The addReport method is used to add a report to the database, taking an AdverseEventBean as input.\n * It returns an empty string for testing purposes only.\n * \n * The class also contains an inner comment with old code for sending a single email, which is kept for reference.\n * \n * @param aeBean The adverse event to add\n * @return a string for testing purposes only\n * @throws iTrustException if an exception occurs in the iTrust system\n * @throws FormValidationException if there is an issue with form validation\n * @throws DBException if there is an issue with the database\n */\npublic String addReport(AdverseEventBean aeBean) {\n    transactionDAO.logTransaction(TransactionType.ADVERSE_EVENT, loggedInMID);\n    return \"\";\n}\n*/\nThis class represents an action to report an adverse event in a medical system. It contains methods to add a report of an adverse event, validate the input data, and log the transaction. The class constructor initializes the necessary data access objects and sets the logged-in user's ID and the healthcare personnel ID reporting the adverse event. \n\nThe `addReport` method takes an `AdverseEventBean` object as input, validates it using an `AdverseEventValidator`, adds the report to the database using an `AdverseEventDAO`, and logs the transaction using a `TransactionDAO`. If any validation or database exception occurs, appropriate error handling is performed.\n\nOverall, this class facilitates the reporting of adverse events in the medical system and ensures data integrity and logging of transactions related to adverse event reporting.\n/**\n * The ReportAdverseEventAction class represents an action that allows users to report adverse events.\n * This class handles the logic for reporting adverse events, including sending emails and validating the input.\n * \n * This class requires a DAOFactory and the logged in MID to be instantiated. It initializes various data access objects\n * and validators using the DAOFactory parameter.\n * \n * Main functionalities include:\n * - Sending emails to notify relevant personnel about the reported adverse event\n * - Validating the adverse event information provided by the user\n * \n * Overall behavior:\n * - Upon instantiation, the class initializes the necessary data access objects and validators\n * - Users can report adverse events by calling the appropriate methods in this class\n * - The class handles the validation of adverse event information and sends notifications via email\n * \n * @param factory the DAOFactory to be used for accessing data access objects\n * @param loggedInMID the MID of the logged in user\n */\n*/"
    }
]