[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return patientDAO.getDiagnoses(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<DiagnosisBean> getDiagnoses()",
                "comments": "Optional[/**\r\n * Returns a list of DiagnosisBeans for the patient\r\n *\r\n * @return the list of DiagnosisBeans\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of diagnoses for the currently logged in patient.\n * \n * @return A list of DiagnosisBean objects representing the diagnoses for the logged in patient.\n */"
            },
            {
                "body": "Optional[{\r\n    int medMatch = 0;\r\n    HashMap<Long, HCPDiagnosisBean> hcpHash = new HashMap<Long, HCPDiagnosisBean>();\r\n    HashMap<Long, Long> patientHash = new HashMap<Long, Long>();\r\n    transactionDAO.logTransaction(TransactionType.FIND_HCPS_WITH_EXP, loggedInMID);\r\n    HCPDiagnosisBean diag = null;\r\n    List<OfficeVisitBean> beans = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\r\n    for (OfficeVisitBean bean : beans) {\r\n        // check for HCP-Patient locality based on first 3 digits in ZIP\r\n        if (!patientDAO.getPatient(loggedInMID).getZip1().substring(0, 2).equals(personnelDAO.getPersonnel(bean.getHcpID()).getZip1().substring(0, 2)))\r\n            continue;\r\n        // Check to see if we already have a bean for the HCP associated with this visit\r\n        if (hcpHash.containsKey(bean.getHcpID())) {\r\n            diag = (HCPDiagnosisBean) hcpHash.get(bean.getHcpID());\r\n            for (PrescriptionBean p : bean.getPrescriptions()) {\r\n                List<MedicationBean> mlist = diag.getMedList();\r\n                for (MedicationBean b : mlist) {\r\n                    if (p.getMedication().getDescription().equals(b.getDescription()))\r\n                        medMatch++;\r\n                }\r\n                if (medMatch == 0) {\r\n                    mlist.add(p.getMedication());\r\n                    diag.setMedList(mlist);\r\n                } else {\r\n                    medMatch = 0;\r\n                }\r\n            }\r\n            // Get Lab Procedures\r\n            List<LabProcedureBean> labprocs = diag.getLabList();\r\n            List<LabProcedureBean> lpbeans = labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID());\r\n            for (LabProcedureBean p : lpbeans) {\r\n                labprocs.add(p);\r\n            }\r\n            diag.setLabList(labprocs);\r\n            if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\r\n                SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\r\n                diag.setVisitSat(survey.getVisitSatisfaction());\r\n                diag.setTreatmentSat(survey.getTreatmentSatisfaction());\r\n            }\r\n            // Check if this patient has been seen multiple times for this diagnosis\r\n            if (!patientHash.containsKey(bean.getPatientID())) {\r\n                patientHash.put(bean.getPatientID(), bean.getHcpID());\r\n                diag.incNumPatients();\r\n            }\r\n        } else {\r\n            diag = new HCPDiagnosisBean();\r\n            List<MedicationBean> mlist = new ArrayList<MedicationBean>();\r\n            diag.setHCP(bean.getHcpID());\r\n            try {\r\n                diag.setHCPName(personnelDAO.getName(bean.getHcpID()));\r\n            } catch (iTrustException e) {\r\n                diag.setHCPName(\"null\");\r\n            }\r\n            diag.incNumPatients();\r\n            for (PrescriptionBean p : bean.getPrescriptions()) {\r\n                mlist.add(p.getMedication());\r\n            }\r\n            diag.setMedList(mlist);\r\n            diag.setLabList(labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID()));\r\n            if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\r\n                SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\r\n                diag.setVisitSat(survey.getVisitSatisfaction());\r\n                diag.setTreatmentSat(survey.getTreatmentSatisfaction());\r\n            }\r\n            patientHash.put(bean.getPatientID(), bean.getHcpID());\r\n            hcpHash.put(bean.getHcpID(), diag);\r\n        }\r\n    }\r\n    List<HCPDiagnosisBean> list = new ArrayList<HCPDiagnosisBean>(hcpHash.values());\r\n    Collections.sort(list, new HCPDiagnosisBeanComparator());\r\n    return list;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public List<HCPDiagnosisBean> getHCPByDiagnosis(String)",
                "comments": "Optional[/**\r\n * Returns a list of all the HCPs who have a particular diagnosis\r\n *\r\n * @param icdcode the diagnosis of interest\r\n * @return the list of HCPs\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": "Optional[[// check for HCP-Patient locality based on first 3 digits in ZIP\r\n, // Check to see if we already have a bean for the HCP associated with this visit\r\n, // Get Lab Procedures\r\n, // Check if this patient has been seen multiple times for this diagnosis\r\n]]",
                "generated_comment": "/**\n * Retrieves a list of HCPDiagnosisBean objects based on a given diagnosis code.\n * \n * @param icdcode the diagnosis code to search for\n * @return a list of HCPDiagnosisBean objects containing information about HCPs associated with the given diagnosis,\n * including medication lists, lab procedures, patient satisfaction data, and number of patients seen for the diagnosis\n * \n * This method retrieves all office visits associated with the given diagnosis code and iterates through them to gather\n * information about the HCPs, medications, lab procedures, and patient satisfaction data. It checks for locality between\n * the patient and HCP based on ZIP code, and ensures that each HCP is only included once in the final list. The method\n * returns a sorted list of HCPDiagnosisBean objects based on the HCP IDs.\n */"
            },
            {
                "body": "Optional[{\r\n    List<PrescriptionBean> list = new ArrayList<PrescriptionBean>();\r\n    List<OfficeVisitBean> ovs = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\r\n    for (int i = 0; i < ovs.size(); i++) {\r\n        if (ovs.get(i).getHcpID() == hcpid) {\r\n            list.addAll(ovs.get(i).getPrescriptions());\r\n        }\r\n    }\r\n    return list;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PrescriptionBean> getPrescriptionsByHCPAndICD(long, String)",
                "comments": "Optional[/**\r\n * Looks up all the prescriptions given by a certain HCP with the same ICD code.\r\n * @param hcpid The MID of the HCP\r\n * @param icdcode The ICD code of the prescription we are looking up.\r\n * @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of prescriptions associated with a specific healthcare provider (HCP) and International Classification of Diseases (ICD) code.\n * \n * @param hcpid The ID of the healthcare provider for whom the prescriptions are being retrieved.\n * @param icdcode The ICD code used to filter the office visits and prescriptions.\n * @return A list of PrescriptionBean objects that are associated with the specified HCP and ICD code.\n */"
            },
            {
                "body": "Optional[{\r\n    int ret = 0;\r\n    if (a.getNumPatients() > b.getNumPatients())\r\n        ret = -1;\r\n    else if (a.getNumPatients() < b.getNumPatients())\r\n        ret = 1;\r\n    return ret;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public int compare(HCPDiagnosisBean, HCPDiagnosisBean)",
                "comments": "Optional[/**\r\n * Compares one HCP with another\r\n *\r\n * @param a the first HCP\r\n * @param b the second HCP\r\n * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Compares two HCPDiagnosisBean objects based on the number of patients they have.\n * \n * @param a the first HCPDiagnosisBean object to compare\n * @param b the second HCPDiagnosisBean object to compare\n * @return -1 if the number of patients in object a is greater than in object b,\n *          1 if the number of patients in object a is less than in object b,\n *          0 if the number of patients in both objects is equal\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.officeVisitDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.transactionDAO = factory.getTransactionDAO();\r\n    this.labprocDAO = factory.getLabProcedureDAO();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public MyDiagnosisAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Set up for defaults\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the user who is looking at their diagnoses.\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new MyDiagnosisAction object with the given DAOFactory and loggedInMID.\n * This constructor initializes the loggedInMID field with the provided value and\n * initializes various DAO objects using the factory parameter.\n * \n * @param factory the DAOFactory used to retrieve DAO objects\n * @param loggedInMID the MID of the logged in user\n */"
            }
        ],
        "signature": "MyDiagnosisAction",
        "variables": [
            "private OfficeVisitDAO officeVisitDAO",
            "private PatientDAO patientDAO",
            "private PersonnelDAO personnelDAO",
            "private SurveyDAO surveyDAO",
            "private TransactionDAO transactionDAO",
            "private LabProcedureDAO labprocDAO",
            "private long loggedInMID",
            "private  static  final long serialVersionUID"
        ],
        "generated_class_comment": "/**\n * This class represents a service for managing patient diagnoses and related information.\n * It provides methods for retrieving a list of diagnoses for a patient, as well as finding healthcare providers\n * with expertise in a specific diagnosis.\n * \n * The main functionalities of this class include:\n * - Retrieving a list of DiagnosisBeans for a patient\n * - Finding healthcare providers with expertise in a specific diagnosis\n * \n * The class interacts with various data access objects such as patientDAO, transactionDAO, officeVisitDAO, and personnelDAO\n * to retrieve and manipulate patient and healthcare provider information.\n * \n * The behavior of this class includes:\n * - Retrieving a list of diagnoses for the currently logged in patient\n * - Finding healthcare providers with expertise in a specific diagnosis based on patient and provider locality\n * - Managing medication and lab procedure information associated with diagnoses\n * \n * Overall, this class serves as a central component for managing patient diagnoses and facilitating communication\n * between patients and healthcare providers.\n */\npublic class DiagnosisService {\n    // class implementation goes here\n}\n*/\n/**\n * Returns a list of all the HCPs who have a particular diagnosis\n *\n * @param icdcode the diagnosis of interest\n * @return the list of HCPs\n * @throws Can you generate a comprehensive JavaDoc comment that describes the purpose of the class, its main functionalities, and its overall behavior?\n */\npublic List<HCPDiagnosisBean> getHCPByDiagnosis(String icdcode) {\n    Map<Long, HCPDiagnosisBean> hcpHash = new HashMap<>();\n    Map<Long, Long> patientHash = new HashMap<>();\n\n    List<OfficeVisitBean> ovbeans = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\n\n    for (OfficeVisitBean bean : ovbeans) {\n        HCPDiagnosisBean diag;\n        if (hcpHash.containsKey(bean.getHcpID())) {\n            diag = hcpHash.get(bean.getHcpID());\n            List<LabProcedureBean> lpbeans = labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID());\n            List<LabProcedureBean> labprocs = new ArrayList<>();\n            for (LabProcedureBean p : lpbeans) {\n                labprocs.add(p);\n            }\n            diag.setLabList(labprocs);\n            if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\n                SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\n                diag.setVisitSat(survey.getVisitSatisfaction());\n                diag.setTreatmentSat(survey.getTreatmentSatisfaction());\n            }\n            if (!patientHash.containsKey(bean.getPatientID())) {\n                patientHash.put(bean.getPatientID(), bean.getHcpID());\n                diag.incNumPatients();\n            }\n        } else {\n            diag = new HCPDiagnosisBean();\n            List<MedicationBean> mlist = new ArrayList<>();\n            diag.setHCP(bean.getHcpID());\n            try {\n                diag.setHCPName(personnelDAO.getName(bean.getHcpID()));\n            } catch (iTrustException e) {\n                diag.setHCPName(\"null\");\n            }\n            diag.incNumPatients();\n            for (PrescriptionBean p : bean.getPrescriptions()) {\n                mlist.add(p.getMedication());\n            }\n            diag.setMedList(mlist);\n            diag.setLabList(labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID()));\n            if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\n                SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\n                diag.setVisitSat(survey.getVisitSatisfaction());\n                diag.setTreatmentSat(survey.getTreatmentSatisfaction());\n            }\n            patientHash.put(bean.getPatientID(), bean.getHcpID());\n            hcpHash.put(bean.getHcpID(), diag);\n        }\n    }\n\n    List<HCPDiagnosisBean> list = new ArrayList<>(hcpHash.values());\n    Collections.sort(list, new HCPDiagnosisBeanComparator());\n    return list;\n}\n*/\n*/\\r\\n]\", \"innerComments\": \"Optional[[// check for HCP-Patient locality based on first 3 digits in ZIP\\r\\n, // Check to see if we already have a bean for the HCP associated with this visit\\r\\n, // Get Lab Procedures\\r\\n, // Check if this patient has been seen multiple times for this diagnosis\\r\\n]]\", \"generated_comment\": \"/**\\n * Retrieves a list of HCPDiagnosisBean objects based on a given diagnosis code.\\n * \\n * @param icdcode the diagnosis code to search for\\n * @return a list of HCPDiagnosisBean objects containing information about HCPs associated with the given diagnosis,\\n * including medication lists, lab procedures, patient satisfaction data, and number of patients seen for the diagnosis\\n * \\n * This method retrieves all office visits associated with the given diagnosis code and iterates through them to gather\\n * information about the HCPs, medications, lab procedures, and patient satisfaction data. It checks for locality between\\n * the patient and HCP based on ZIP code, and ensures that each HCP is only included once in the final list. The method\\n * returns a sorted list of HCPDiagnosisBean objects based on the HCP IDs.\\n */\" }, { \"body\": \"Optional[{\\r\\n List<PrescriptionBean> list = new ArrayList<PrescriptionBean>();\\r\\n List<OfficeVisitBean> ovs = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\\r\\n for (int i = 0; i < ovs.size(); i++) {\\r\\n if (ovs.get(i).getHcpID() == hcpid) {\\r\\n list.addAll(ovs.get(i).getPrescriptions());\\r\\n }\\r\\n }\\r\\n return list;\\r\\n}]\", \"hasComment\": true, \"hasInnerComment\": false, \"signature\": \"public List<PrescriptionBean> getPrescriptionsByHCPAndICD(long, String)\", \"comments\": \"Optional[/**\\r\\n * Looks up all the prescriptions given by a certain HCP with the same ICD code.\\r\\n * @param hcpid The MID of the HCP\\r\\n * @param icdcode The ICD code of the prescription we are looking up.\\r\\n * @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.\\r\\n * @throws DBException\\r\\n Can you generate a comprehensive JavaDoc comment that describes the purpose of the class, its main functionalities, and its overall behavior?\n/**\n * This class represents an action that handles diagnosis-related functionalities for a specific user.\n * It is responsible for retrieving and managing patient data, office visits, personnel information, surveys, transactions, and lab procedures.\n * \n * The class constructor initializes the necessary data access objects (DAOs) using a provided DAOFactory.\n * \n * This class provides methods for retrieving prescriptions associated with a healthcare provider (HCP) and International Classification of Diseases (ICD) code,\n * as well as comparing HCPDiagnosisBean objects based on the number of patients they have.\n * \n * Overall, this class serves as a central component for diagnosing and managing patient data within the system.\n */\n */\n/**\n * The MyDiagnosisAction class represents an action that allows a user to view their diagnoses.\n * This class provides methods to retrieve a list of DiagnosisBeans for the patient, as well as find healthcare providers\n * based on a given diagnosis code.\n * \n * The class requires a DAOFactory to create DAO objects for interacting with the database, and a loggedInMID representing\n * the MID of the user who is viewing their diagnoses.\n * \n * The main functionalities of this class include:\n * - Retrieving a list of DiagnosisBeans for the patient using the getDiagnoses() method.\n * - Finding healthcare providers associated with a specific diagnosis code using the findHCPSWithExp() method.\n * \n * Overall, the MyDiagnosisAction class facilitates the interaction between the user interface and the database to provide\n * information about the user's diagnoses and healthcare providers.\n */\n**/\n/**\n * The HCPDiagnosisProcessor class is responsible for processing diagnosis information for healthcare providers (HCPs) in the iTrust system.\n * It handles the aggregation of prescription and lab procedure data, as well as patient satisfaction survey results, for each HCP.\n * \n * Main functionalities include:\n * - Matching prescriptions with existing medication lists for each HCP\n * - Retrieving and adding lab procedures associated with each visit to the HCP's diagnosis\n * - Updating visit and treatment satisfaction scores based on completed surveys\n * - Tracking the number of patients seen by each HCP for a specific diagnosis\n * \n * Overall behavior:\n * - The class iterates through diagnosis data for each visit, checking for existing HCP beans and updating them with new information.\n * - If a bean for the HCP does not already exist, a new one is created and populated with relevant data.\n * - The class also ensures that patient data is properly associated with each HCP, and that medication and lab procedure lists are kept up to date.\n * - In case of exceptions, default values are used to maintain data integrity.\n */\n \npublic class HCPDiagnosisProcessor {\n    // Class implementation goes here\n}\n**/\n/**\n * This class provides methods to retrieve information related to healthcare providers (HCPs) based on diagnosis and prescriptions.\n * It includes functionalities to get a list of HCPs with a particular diagnosis and to retrieve prescriptions given by a specific HCP with a certain ICD code.\n * The main purpose of this class is to facilitate the retrieval of relevant data for healthcare analysis and decision-making.\n * \n * Method getHCPByDiagnosis(String icdcode):\n * Returns a list of all the HCPs who have a particular diagnosis specified by the ICD code.\n * It checks for HCP-Patient locality based on the first 3 digits in ZIP code, retrieves survey data for visit and treatment satisfaction,\n * and organizes the data into a list of HCPDiagnosisBean objects sorted by a custom comparator.\n * \n * Method getPrescriptionsByHCPAndICD(long hcpid, String icdcode):\n * Looks up all the prescriptions given by a certain HCP with the same ICD code.\n * It retrieves all office visits for a specific diagnosis, filters prescriptions by the HCP ID, and returns a list of PrescriptionBean objects.\n * \n * @throws DBException if there is an issue with the database operations\n */\n **/\n/**\n * This class represents a Comparator used to compare HCPDiagnosisBean objects based on the number of patients they have had.\n * It provides a method to compare two HCPDiagnosisBean objects and determine which one has had more patients.\n * \n * The compare method returns -1 if the first HCPDiagnosisBean has had more patients, 1 if the second HCPDiagnosisBean has had more patients,\n * and 0 if both HCPDiagnosisBean objects have had an equal number of patients.\n * \n * This class also includes a constructor that initializes the necessary DAO objects and sets up defaults for the MyDiagnosisAction class.\n * \n * Variables:\n * - private OfficeVisitDAO officeVisitDAO: DAO object for handling office visit data\n * - private PatientDAO patientDAO: DAO object for handling patient data\n * - private PersonnelDAO personnelDAO: DAO object for handling personnel data\n * - private SurveyDAO surveyDAO: DAO object for handling survey data\n * - private TransactionDAO transactionDAO: DAO object for handling transaction data\n * - private LabProcedureDAO labprocDAO: DAO object for handling lab procedure data\n * - private long loggedInMID: The MID of the user who is looking at their diagnoses\n * - private static final long serialVersionUID: Serial version UID for serialization\n * \n * Constructors:\n * - public MyDiagnosisAction(DAOFactory factory, long loggedInMID): Initializes DAO objects and sets up defaults for the MyDiagnosisAction class\n * \n * Methods:\n * - public int compare(HCPDiagnosisBean a, HCPDiagnosisBean b): Compares two HCPDiagnosisBean objects based on the number of patients they have had\n * \n * This class is used to facilitate sorting and comparison of HCPDiagnosisBean objects based on the number of patients they have had.\n */\n*/"
    },
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return patientDAO.getDiagnoses(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<DiagnosisBean> getDiagnoses()",
                "comments": "Optional[/**\r\n * Returns a list of DiagnosisBeans for the patient\r\n *\r\n * @return the list of DiagnosisBeans\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    int medMatch = 0;\r\n    HashMap<Long, HCPDiagnosisBean> hcpHash = new HashMap<Long, HCPDiagnosisBean>();\r\n    HashMap<Long, Long> patientHash = new HashMap<Long, Long>();\r\n    transactionDAO.logTransaction(TransactionType.FIND_HCPS_WITH_EXP, loggedInMID);\r\n    HCPDiagnosisBean diag = null;\r\n    List<OfficeVisitBean> beans = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\r\n    for (OfficeVisitBean bean : beans) {\r\n        // check for HCP-Patient locality based on first 3 digits in ZIP\r\n        if (!patientDAO.getPatient(loggedInMID).getZip1().substring(0, 2).equals(personnelDAO.getPersonnel(bean.getHcpID()).getZip1().substring(0, 2)))\r\n            continue;\r\n        // Check to see if we already have a bean for the HCP associated with this visit\r\n        if (hcpHash.containsKey(bean.getHcpID())) {\r\n            diag = (HCPDiagnosisBean) hcpHash.get(bean.getHcpID());\r\n            for (PrescriptionBean p : bean.getPrescriptions()) {\r\n                List<MedicationBean> mlist = diag.getMedList();\r\n                for (MedicationBean b : mlist) {\r\n                    if (p.getMedication().getDescription().equals(b.getDescription()))\r\n                        medMatch++;\r\n                }\r\n                if (medMatch == 0) {\r\n                    mlist.add(p.getMedication());\r\n                    diag.setMedList(mlist);\r\n                } else {\r\n                    medMatch = 0;\r\n                }\r\n            }\r\n            // Get Lab Procedures\r\n            List<LabProcedureBean> labprocs = diag.getLabList();\r\n            List<LabProcedureBean> lpbeans = labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID());\r\n            for (LabProcedureBean p : lpbeans) {\r\n                labprocs.add(p);\r\n            }\r\n            diag.setLabList(labprocs);\r\n            if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\r\n                SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\r\n                diag.setVisitSat(survey.getVisitSatisfaction());\r\n                diag.setTreatmentSat(survey.getTreatmentSatisfaction());\r\n            }\r\n            // Check if this patient has been seen multiple times for this diagnosis\r\n            if (!patientHash.containsKey(bean.getPatientID())) {\r\n                patientHash.put(bean.getPatientID(), bean.getHcpID());\r\n                diag.incNumPatients();\r\n            }\r\n        } else {\r\n            diag = new HCPDiagnosisBean();\r\n            List<MedicationBean> mlist = new ArrayList<MedicationBean>();\r\n            diag.setHCP(bean.getHcpID());\r\n            try {\r\n                diag.setHCPName(personnelDAO.getName(bean.getHcpID()));\r\n            } catch (iTrustException e) {\r\n                diag.setHCPName(\"null\");\r\n            }\r\n            diag.incNumPatients();\r\n            for (PrescriptionBean p : bean.getPrescriptions()) {\r\n                mlist.add(p.getMedication());\r\n            }\r\n            diag.setMedList(mlist);\r\n            diag.setLabList(labprocDAO.getAllLabProceduresForDocOV(bean.getVisitID()));\r\n            if (surveyDAO.isSurveyCompleted(bean.getVisitID())) {\r\n                SurveyBean survey = surveyDAO.getSurveyData(bean.getVisitID());\r\n                diag.setVisitSat(survey.getVisitSatisfaction());\r\n                diag.setTreatmentSat(survey.getTreatmentSatisfaction());\r\n            }\r\n            patientHash.put(bean.getPatientID(), bean.getHcpID());\r\n            hcpHash.put(bean.getHcpID(), diag);\r\n        }\r\n    }\r\n    List<HCPDiagnosisBean> list = new ArrayList<HCPDiagnosisBean>(hcpHash.values());\r\n    Collections.sort(list, new HCPDiagnosisBeanComparator());\r\n    return list;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public List<HCPDiagnosisBean> getHCPByDiagnosis(String)",
                "comments": "Optional[/**\r\n * Returns a list of all the HCPs who have a particular diagnosis\r\n *\r\n * @param icdcode the diagnosis of interest\r\n * @return the list of HCPs\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": "Optional[[// check for HCP-Patient locality based on first 3 digits in ZIP\r\n, // Check to see if we already have a bean for the HCP associated with this visit\r\n, // Get Lab Procedures\r\n, // Check if this patient has been seen multiple times for this diagnosis\r\n]]"
            },
            {
                "body": "Optional[{\r\n    List<PrescriptionBean> list = new ArrayList<PrescriptionBean>();\r\n    List<OfficeVisitBean> ovs = officeVisitDAO.getAllOfficeVisitsForDiagnosis(icdcode);\r\n    for (int i = 0; i < ovs.size(); i++) {\r\n        if (ovs.get(i).getHcpID() == hcpid) {\r\n            list.addAll(ovs.get(i).getPrescriptions());\r\n        }\r\n    }\r\n    return list;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PrescriptionBean> getPrescriptionsByHCPAndICD(long, String)",
                "comments": "Optional[/**\r\n * Looks up all the prescriptions given by a certain HCP with the same ICD code.\r\n * @param hcpid The MID of the HCP\r\n * @param icdcode The ICD code of the prescription we are looking up.\r\n * @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    int ret = 0;\r\n    if (a.getNumPatients() > b.getNumPatients())\r\n        ret = -1;\r\n    else if (a.getNumPatients() < b.getNumPatients())\r\n        ret = 1;\r\n    return ret;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public int compare(HCPDiagnosisBean, HCPDiagnosisBean)",
                "comments": "Optional[/**\r\n * Compares one HCP with another\r\n *\r\n * @param a the first HCP\r\n * @param b the second HCP\r\n * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.officeVisitDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.transactionDAO = factory.getTransactionDAO();\r\n    this.labprocDAO = factory.getLabProcedureDAO();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public MyDiagnosisAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Set up for defaults\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the user who is looking at their diagnoses.\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "signature": "HCPDiagnosisBeanComparator",
        "variables": [
            "private OfficeVisitDAO officeVisitDAO",
            "private PatientDAO patientDAO",
            "private PersonnelDAO personnelDAO",
            "private SurveyDAO surveyDAO",
            "private TransactionDAO transactionDAO",
            "private LabProcedureDAO labprocDAO",
            "private long loggedInMID",
            "private  static  final long serialVersionUID"
        ]
    }
]