[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ICDCodes ORDER BY CODE\");\r\n        ResultSet rs = ps.executeQuery();\r\n        return diagnosisLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<DiagnosisBean> getAllICDCodes()",
                "comments": "Optional[/**\r\n * Returns all ICD9CM codes sorted by code\r\n *\r\n * @return java.util.List of DiagnosisBeans\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of all ICDCodes from the database.\n * \n * @return List<DiagnosisBean> A list of DiagnosisBean objects representing ICDCodes\n * @throws DBException If there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ICDCodes WHERE Code = ?\");\r\n        ps.setString(1, code);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return diagnosisLoader.loadSingle(rs);\r\n        return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public DiagnosisBean getICDCode(String)",
                "comments": "Optional[/**\r\n * Returns a particular description for a given code\r\n *\r\n * @param code The String representation of the code.\r\n * @return A DiagnosisBean of the code.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves an ICD code from the database based on the provided code.\n * \n * @param code the ICD code to search for in the database\n * @return a DiagnosisBean object representing the ICD code if found, null otherwise\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ICDCodes (Code, Description, Chronic) \" + \"VALUES (?,?,?)\");\r\n        ps.setString(1, diag.getICDCode());\r\n        ps.setString(2, diag.getDescription());\r\n        ps.setString(3, diag.getClassification());\r\n        return (1 == ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == e.getErrorCode())\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean addICDCode(DiagnosisBean)",
                "comments": "Optional[/**\r\n * Adds an ICD9CM code. Returns whether or not the change was made.\r\n *\r\n * @param diag The DiagnosisBean representing the changes.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a new ICD code to the database.\n * \n * @param diag The DiagnosisBean object containing the ICD code, description, and classification.\n * @return true if the ICD code was successfully added, false otherwise.\n * @throws iTrustException if the code already exists in the database.\n * @throws DBException if there is a database error.\n */\npublic boolean addICDCode(DiagnosisBean diag) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"INSERT INTO ICDCodes (Code, Description, Chronic) \" + \"VALUES (?,?,?)\");\n        ps.setString(1, diag.getICDCode());\n        ps.setString(2, diag.getDescription());\n        ps.setString(3, diag.getClassification());\n        return (1 == ps.executeUpdate());\n    } catch (SQLException e) {\n        e.printStackTrace();\n        if (1062 == e.getErrorCode())\n            throw new iTrustException(\"Error: Code already exists.\");\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    int rows;\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE ICDCodes SET Description = ?, Chronic = ? WHERE Code = ?\");\r\n        ps.setString(1, diag.getDescription());\r\n        ps.setString(2, diag.getClassification());\r\n        ps.setString(3, diag.getICDCode());\r\n        rows = ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return rows;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public int updateCode(DiagnosisBean)",
                "comments": "Optional[/**\r\n * Changes a the description of a particular code.\r\n *\r\n * @param diag A DiagnosisBean representing the changes.\r\n * @return A boolean indicating the number of updated rows.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates the description and chronic status of a specific ICD code in the database.\n * \n * @param diag The DiagnosisBean object containing the updated information for the ICD code\n * @return The number of rows affected by the update operation\n * @throws DBException if there is an error accessing the database\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.factory = factory;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ICDCodesDAO(DAOFactory)",
                "comments": "Optional[/**\r\n * The typical constructor.\r\n * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ICDCodesDAO with the specified DAOFactory.\n * \n * @param factory the DAOFactory used to create data access objects\n * \n * Initializes the ICDCodesDAO with the given DAOFactory, allowing it to create data access objects\n * for interacting with the database.\n */"
            }
        ],
        "signature": "ICDCodesDAO",
        "variables": [
            "private DAOFactory factory",
            "private DiagnosisBeanLoader diagnosisLoader"
        ],
        "generated_class_comment": "/**\n * The ICDCodesDAO class provides methods to interact with the database and retrieve information about ICD codes.\n * It contains methods to retrieve all ICD codes sorted by code, as well as to retrieve a specific ICD code based on its code.\n * The class uses a database connection factory to establish a connection and a diagnosis loader to load the data from the result set.\n * \n * The main functionalities of this class include:\n * - Retrieving a list of all ICD codes sorted by code from the database\n * - Retrieving a specific ICD code based on the provided code\n * \n * The class handles SQLExceptions by printing the stack trace and throwing a DBException if there is an error accessing the database.\n * It also ensures that the database connection is properly closed after executing the queries.\n * \n * This class is essential for accessing and retrieving information about ICD codes from the database in a structured and organized manner.\n */\n**/\n/**\n * This class represents a database for storing ICD codes. It provides methods for adding, updating, and retrieving ICD codes.\n * \n * The main functionalities of this class include:\n * - Adding a new ICD code to the database\n * - Updating an existing ICD code in the database\n * - Retrieving an ICD code from the database based on its code\n * \n * The behavior of this class is as follows:\n * - When adding a new ICD code, the method addICDCode(DiagnosisBean diag) is called. It inserts the ICD code, description, and classification into the database.\n * - If the code already exists in the database, an iTrustException is thrown.\n * - When updating an existing ICD code, the method updateICDCode(DiagnosisBean diag) is called. It updates the description and classification of the ICD code in the database.\n * - If the code does not exist in the database, an iTrustException is thrown.\n * - When retrieving an ICD code, the method getICDCode(String code) is called. It returns a DiagnosisBean object representing the ICD code if found, or null if not found.\n * - If there is an error accessing the database, a DBException is thrown.\n * \n * @param diag The DiagnosisBean object containing the ICD code, description, and classification.\n * @return true if the ICD code was successfully added or updated, false otherwise.\n * @throws iTrustException if the code already exists in the database or if the code does not exist when updating.\n * @throws DBException if there is a database error.\n */\npublic boolean addICDCode(DiagnosisBean diag) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"INSERT INTO ICDCodes (Code, Description, Chronic) \" + \"VALUES (?,?,?)\");\n        ps.setString(1, diag.getICDCode());\n        ps.setString(2, diag.getDescription());\n        ps.setString(3, diag.getClassification());\n        return (1 == ps.executeUpdate());\n    } catch (SQLException e) {\n        e.printStackTrace();\n        if (1062 == e.getErrorCode())\n            throw new iTrustException(\"Error: Code already exists.\");\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/\n/**\n * The ICDCodesDAO class is responsible for interacting with the database to perform CRUD operations on ICD codes.\n * It provides methods for adding, updating, deleting, and retrieving ICD codes from the database.\n * This class utilizes a DAOFactory to obtain SQL connections and manage database operations.\n * \n * The main functionalities of this class include:\n * - Adding a new ICD code to the database\n * - Updating the description and chronic status of an existing ICD code\n * - Deleting an ICD code from the database\n * - Retrieving information about ICD codes from the database\n * \n * The ICDCodesDAO class ensures proper handling of database connections and exceptions that may occur during database operations.\n * It encapsulates the logic for interacting with the database and provides a clean interface for other parts of the application to access ICD code data.\n * \n * @see DAOFactory\n */\n*/\n/**\n * The ICDCodesDAO class is responsible for interacting with the database to perform CRUD operations on ICD codes.\n * It is initialized with a DAOFactory, which is used to create data access objects for database interaction.\n * This class provides methods for retrieving, adding, updating, and deleting ICD codes from the database.\n * It uses a DiagnosisBeanLoader to load and parse data from the database into DiagnosisBean objects.\n * \n * @param factory the DAOFactory used to create data access objects\n * @param diagnosisLoader the DiagnosisBeanLoader used to load and parse data from the database\n * \n * This class encapsulates the logic for managing ICD codes in the database and provides a clean interface for\n * other classes to interact with the database. It follows the DAO design pattern to separate data access logic\n * from business logic, promoting code reusability and maintainability.\n */"
    }
]