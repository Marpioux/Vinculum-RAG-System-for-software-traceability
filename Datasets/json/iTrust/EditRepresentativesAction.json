[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return patientDAO.getRepresented(pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PatientBean> getRepresented(long)",
                "comments": "Optional[/**\r\n * Return a list of patients that pid represents\r\n *\r\n * @param pid The id of the personnel we are looking up representees for.\r\n * @return a list of PatientBeans\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of PatientBeans representing patients associated with the given ID.\n * \n * @param pid the ID of the patient to retrieve represented patients for\n * @return a list of PatientBeans representing patients associated with the given ID\n */"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        long representee = Long.valueOf(pidString);\r\n        if (authDAO.getUserRole(representee) != Role.PATIENT)\r\n            throw new iTrustException(\"This user is not a patient!\");\r\n        else if (super.pid == representee)\r\n            throw new iTrustException(\"This user cannot represent themselves.\");\r\n        boolean confirm = patientDAO.addRepresentative(pid, representee);\r\n        if (confirm) {\r\n            transDAO.logTransaction(TransactionType.DECLARE_REPRESENTATIVE, loggedInMID, pid, \"patient \" + pid + \" now represents patient \" + representee);\r\n            return \"Patient represented\";\r\n        } else\r\n            return \"No change made\";\r\n    } catch (NumberFormatException e) {\r\n        return \"MID not a number\";\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String addRepresentative(String)",
                "comments": "Optional[/**\r\n * Makes the patient (pid) represent the input mid parameter\r\n *\r\n * @param pidString\r\n *            the mid of the person who will be represented (the representee)\r\n * @return a message\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a representative for a patient in the system.\n * \n * @param pidString the String representation of the Patient ID of the representative to be added\n * @return a String indicating the outcome of the operation: \"Patient represented\" if successful, \"No change made\" if the representative could not be added, or \"MID not a number\" if the Patient ID is not a valid number\n * @throws iTrustException if the user is not a patient, if the user is trying to represent themselves, or if there is an issue with adding the representative\n */\npublic String addRepresentative(String pidString) {\n    try {\n        long representee = Long.valueOf(pidString);\n        if (authDAO.getUserRole(representee) != Role.PATIENT)\n            throw new iTrustException(\"This user is not a patient!\");\n        else if (super.pid == representee)\n            throw new iTrustException(\"This user cannot represent themselves.\");\n        boolean confirm = patientDAO.addRepresentative(pid, representee);\n        if (confirm) {\n            transDAO.logTransaction(TransactionType.DECLARE_REPRESENTATIVE, loggedInMID, pid, \"patient \" + pid + \" now represents patient \" + representee);\n            return \"Patient represented\";\n        } else\n            return \"No change made\";\n    } catch (NumberFormatException e) {\n        return \"MID not a number\";\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        long representee = Long.valueOf(input);\r\n        boolean confirm = patientDAO.removeRepresentative(pid, representee);\r\n        if (confirm) {\r\n            transDAO.logTransaction(TransactionType.DECLARE_REPRESENTATIVE, loggedInMID, pid, \"patient \" + pid + \" no longer represents patient \" + representee);\r\n            return \"Patient represented\";\r\n        } else\r\n            return \"No change made\";\r\n    } catch (NumberFormatException e) {\r\n        return \"MID not a number\";\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String removeRepresentative(String)",
                "comments": "Optional[/**\r\n * Makes the patient (pid) no longer represent the input mid param\r\n *\r\n * @param input\r\n *            the mid of the person be represented (representee)\r\n * @return a message\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Removes a representative from a patient's list of representatives.\n * \n * @param input the Medical Record Number (MID) of the representative to be removed\n * @return a message indicating whether the representative was successfully removed or if no changes were made\n * \n * This method attempts to remove the specified representative from the patient's list of representatives.\n * It first converts the input MID to a long value and then calls the patientDAO to remove the representative.\n * If the removal is successful, a transaction log is created and a success message is returned.\n * If the input is not a valid number, an error message is returned.\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(factory, pidString);\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public EditRepresentativesAction(DAOFactory, long, String)",
                "comments": "Optional[/**\r\n * Super class validates the patient mid\r\n *\r\n * @param factory The DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID The MID of the patient editing his/her representatives.\r\n * @param pidString The MID of the representative in question.\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new EditRepresentativesAction object with the specified DAOFactory, patient ID, and logged-in member ID.\n * \n * @param factory the DAOFactory used to retrieve data access objects\n * @param pidString the patient ID as a String\n * @param loggedInMID the logged-in member ID\n * \n * This constructor initializes the EditRepresentativesAction object with the given parameters. It sets the logged-in member ID, \n * retrieves the TransactionDAO, PatientDAO, and AuthDAO from the DAOFactory, and assigns them to the corresponding instance variables.\n */"
            }
        ],
        "signature": "EditRepresentativesAction",
        "variables": [
            "private PatientDAO patientDAO",
            "private TransactionDAO transDAO",
            "private AuthDAO authDAO",
            "private long loggedInMID"
        ],
        "generated_class_comment": "/**\n * The PatientRepresentativeController class is responsible for managing the representation relationships between patients in the system. It provides methods for retrieving a list of patients that a given patient represents, as well as adding a representative for a patient.\n * \n * The main functionalities of this class include:\n * - Retrieving a list of patients that a given patient represents\n * - Adding a representative for a patient by specifying the MID of the representee\n * \n * The class ensures that the representee is a patient and not the same as the patient adding the representative. It logs transactions for declaring representatives and returns appropriate messages based on the outcome of the operation.\n * \n * Overall, the PatientRepresentativeController class facilitates the management of representation relationships between patients in the system, ensuring data integrity and security.\n */\n*/\\npublic String removeRepresentative(String input) {\\n try {\\n long representee = Long.valueOf(input);\\n boolean confirm = patientDAO.removeRepresentative(pid, representee);\\n if (confirm) {\\n transDAO.logTransaction(TransactionType.DECLARE_REPRESENTATIVE, loggedInMID, pid, \\\"patient \\\" + pid + \\\" no longer represents patient \\\" + representee);\\n return \\\"Patient represented\\\";\\n } else\\n return \\\"No change made\\\";\\n } catch (NumberFormatException e) {\\n return \\\"MID not a number\\\";\\n }\\n}\\n*/\"\n/**\n * The EditRepresentativesAction class is responsible for removing a representative from a patient's list of representatives.\n * It takes in the Medical Record Number (MID) of the representative to be removed and attempts to remove them from the patient's list.\n * If the removal is successful, a transaction log is created and a success message is returned. If no changes were made, an appropriate message is returned.\n * \n * This class has a constructor that initializes the EditRepresentativesAction object with the specified DAOFactory, patient ID, and logged-in member ID.\n * It also contains a method, removeRepresentative, that handles the removal of the representative by converting the input MID to a long value and calling the patientDAO.\n * \n * The EditRepresentativesAction class works in conjunction with the TransactionDAO, PatientDAO, and AuthDAO to ensure proper removal of the representative.\n */\npublic class EditRepresentativesAction {\n    // Class variables and methods here\n}\n*/\n/**\n * The DAOFactory class is responsible for creating instances of different Data Access Object (DAO) classes,\n * such as PatientDAO, TransactionDAO, and AuthDAO, and assigning them to the corresponding instance variables.\n * This class provides a centralized location for accessing and managing DAO instances, allowing for easy\n * integration and interaction with the database.\n *\n * The main functionalities of the DAOFactory class include:\n * - Creating instances of PatientDAO, TransactionDAO, and AuthDAO classes\n * - Assigning these instances to the corresponding instance variables\n * - Providing methods to access and interact with the DAO instances\n *\n * The overall behavior of the DAOFactory class is to serve as a factory for creating and managing DAO instances,\n * enabling seamless communication with the database and facilitating data retrieval and manipulation operations.\n * By encapsulating the creation and management of DAO instances within a single class, the DAOFactory promotes\n * modularity, reusability, and maintainability in the application's data access layer.\n */"
    }
]