[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringLists WHERE HCPMID=? ORDER BY PatientMID\");\r\n        ps.setLong(1, loggedInMID);\r\n        ResultSet patientRS = ps.executeQuery();\r\n        ps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringData WHERE timelogged >= CURRENT_DATE ORDER BY PatientID, timeLogged DESC\");\r\n        ResultSet dataRS = ps.executeQuery();\r\n        List<String> patientList = new ArrayList<String>();\r\n        while (patientRS.next()) {\r\n            patientList.add(patientRS.getLong(\"PatientMID\") + \"\");\r\n        }\r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(dataRS);\r\n        int i, j;\r\n        //Go through all patients and remove any that aren't monitored by this HCP\r\n        for (i = 0; i < dataList.size(); i++) {\r\n            if (!patientList.contains(dataList.get(i).getPatientMID() + \"\")) {\r\n                dataList.remove(i);\r\n                i--;\r\n            }\r\n        }\r\n        //Add values in patient list with no data for today to list.\r\n        boolean itsThere;\r\n        for (i = 0; i < patientList.size(); i++) {\r\n            itsThere = false;\r\n            for (j = 0; j < dataList.size(); j++) {\r\n                if ((dataList.get(j).getPatientMID() + \"\").equals(patientList.get(i))) {\r\n                    itsThere = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!itsThere) {\r\n                dataList.add(new RemoteMonitoringDataBean(Long.parseLong(patientList.get(i))));\r\n            }\r\n        }\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public List<RemoteMonitoringDataBean> getPatientsData(long)",
                "comments": "Optional[/**\r\n * Returns patient data for a given HCP\r\n *\r\n * @return\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": "Optional[[//Go through all patients and remove any that aren't monitored by this HCP\r\n, //Add values in patient list with no data for today to list.\r\n]]",
                "generated_comment": "/**\n * Retrieves the remote monitoring data for patients monitored by the logged-in healthcare provider.\n * \n * @param loggedInMID the MID of the logged-in healthcare provider\n * @return a list of RemoteMonitoringDataBean objects containing the remote monitoring data for the patients\n * @throws DBException if there is an error accessing the database\n */\npublic List<RemoteMonitoringDataBean> getPatientsData(long loggedInMID) {\n    // Method body implementation\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n        // add 1 day's worth to include the upper\r\n        ps.setTimestamp(3, new Timestamp(upper.getTime() + 1000L * 60L * 60 * 24L));\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\r\n        return dataList;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public List<RemoteMonitoringDataBean> getPatientDataByDate(long, Date, Date)",
                "comments": null,
                "innerComments": "Optional[[// add 1 day's worth to include the upper\r\n]]",
                "generated_comment": "/**\n * Retrieves a list of RemoteMonitoringDataBean objects for a specific patient within a given date range.\n * \n * @param patientMID the unique identifier of the patient\n * @param lower the lower bound of the date range\n * @param upper the upper bound of the date range\n * @return a list of RemoteMonitoringDataBean objects that fall within the specified date range, ordered by timeLogged in descending order\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    if (getNumberOfDailyEntries(patientMID) >= 10)\r\n        throw new iTrustException(\"Patient entries for today cannot exceed 10.\");\r\n    if (reporterRole.equals(\"patient representative\"))\r\n        validatePR(reporterMID, patientMID);\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, systolicBloodPressure, \" + \"diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?)\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, systolicBloodPressure);\r\n        ps.setInt(3, diastolicBloodPressure);\r\n        ps.setInt(4, glucoseLevel);\r\n        ps.setString(5, reporterRole);\r\n        ps.setLong(6, reporterMID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void storePatientData(long, int, int, int, String, long)",
                "comments": "Optional[/**\r\n * Store data for a given patient in the RemoteMonitoringData table\r\n *\r\n * @param patientMID The MID of the patient\r\n * @param systolicBloodPressure The systolic blood pressure of the patient\r\n * @param diastolicBloodPressure The diastolic blood pressure of the patient\r\n * @param glucoseLevel The glucose level of the patient\r\n * @param reporterRole  The role of the person that reported these monitoring stats\r\n * @param reporterMID  The MID of the person that reported these monitoring stats\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Stores patient data in the RemoteMonitoringData table.\n * \n * @param patientMID the unique identifier of the patient\n * @param systolicBloodPressure the systolic blood pressure of the patient\n * @param diastolicBloodPressure the diastolic blood pressure of the patient\n * @param glucoseLevel the glucose level of the patient\n * @param reporterRole the role of the reporter submitting the data\n * @param reporterMID the unique identifier of the reporter\n * \n * @throws iTrustException if the number of daily entries for the patient exceeds 10\n * @throws DBException if there is an error accessing the database\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (getNumberOfDailyEntries(patientMID) >= 10)\r\n        throw new iTrustException(\"Patient entries for today cannot exceed 10.\");\r\n    if (reporterRole.equals(\"patient representative\"))\r\n        validatePR(reporterMID, patientMID);\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?)\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setInt(2, glucoseLevel);\r\n        ps.setString(3, reporterRole);\r\n        ps.setLong(4, reporterMID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void storePatientData(long, int, String, long)",
                "comments": "Optional[/**\r\n * Store data for a given patient in the RemoteMonitoringData table\r\n *\r\n * @param patientMID The MID of the patient\r\n * @param systolicBloodPressure The systolic blood pressure of the patient\r\n * @param diastolicBloodPressure The diastolic blood pressure of the patient\r\n * @param glucoseLevel The glucose level of the patient\r\n * @param reporterRole  The role of the person that reported these monitoring stats\r\n * @param reporterMID  The MID of the person that reported these monitoring stats\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Stores patient data in the RemoteMonitoringData table.\n * \n * @param patientMID the unique identifier of the patient\n * @param glucoseLevel the glucose level of the patient\n * @param reporterRole the role of the reporter submitting the data\n * @param reporterMID the unique identifier of the reporter\n * \n * @throws iTrustException if the number of daily entries for the patient exceeds 10\n * @throws DBException if there is an error accessing the database\n */\npublic void storePatientData(long patientMID, int glucoseLevel, String reporterRole, long reporterMID) {\n    if (getNumberOfDailyEntries(patientMID) >= 10)\n        throw new iTrustException(\"Patient entries for today cannot exceed 10.\");\n    if (reporterRole.equals(\"patient representative\"))\n        validatePR(reporterMID, patientMID);\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?)\");\n        ps.setLong(1, patientMID);\n        ps.setInt(2, glucoseLevel);\n        ps.setString(3, reporterRole);\n        ps.setLong(4, reporterMID);\n        ps.executeUpdate();\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (getNumberOfDailyEntries(patientMID) >= 10)\r\n        throw new iTrustException(\"Patient entries for today cannot exceed 10.\");\r\n    if (reporterRole.equals(\"patient representative\"))\r\n        validatePR(reporterMID, patientMID);\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, systolicBloodPressure, \" + \"diastolicBloodPressure, ReporterRole, ReporterID) VALUES(?,?,?,?,?)\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, systolicBloodPressure);\r\n        ps.setInt(3, diastolicBloodPressure);\r\n        ps.setString(4, reporterRole);\r\n        ps.setLong(5, reporterMID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void storePatientData(long, int, int, String, long)",
                "comments": "Optional[/**\r\n * Store data for a given patient in the RemoteMonitoringData table\r\n *\r\n * @param patientMID The MID of the patient\r\n * @param systolicBloodPressure The systolic blood pressure of the patient\r\n * @param diastolicBloodPressure The diastolic blood pressure of the patient\r\n * @param glucoseLevel The glucose level of the patient\r\n * @param reporterRole  The role of the person that reported these monitoring stats\r\n * @param reporterMID  The MID of the person that reported these monitoring stats\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Stores patient data in the RemoteMonitoringData table. \n * Checks if the number of daily entries for the patient exceeds 10, throws an exception if so. \n * Validates the reporter role if it is a patient representative. \n * Inserts the patient's systolic and diastolic blood pressure readings along with the reporter's role and ID into the database.\n * \n * @param patientMID the unique identifier of the patient\n * @param systolicBloodPressure the systolic blood pressure reading of the patient\n * @param diastolicBloodPressure the diastolic blood pressure reading of the patient\n * @param reporterRole the role of the reporter submitting the data\n * @param reporterMID the unique identifier of the reporter\n * @throws iTrustException if the number of daily entries for the patient exceeds 10\n * @throws DBException if there is an error with the database connection or query\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringData WHERE PatientID=? AND DATE(timeLogged)=CURRENT_DATE\");\r\n        ps.setLong(1, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        List<RemoteMonitoringDataBean> patients = loader.loadList(rs);\r\n        return patients.size();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private int getNumberOfDailyEntries(long)",
                "comments": "Optional[/**\r\n * Private method to get the number of entries for a certain patientID for today.\r\n * @param patientMID\r\n * @return the number of entries\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the number of daily entries for a given patient from the RemoteMonitoringData table.\n * \n * @param patientMID the ID of the patient for whom to retrieve the daily entries\n * @return the number of daily entries for the specified patient\n * @throws DBException if there is an issue with the database connection or query execution\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representativeMID);\r\n        ps.setLong(2, patientMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (//no rows\r\n        !rs.next())\r\n            throw new iTrustException(\"Representer is not valid for patient \" + patientMID);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void validatePR(long, long)",
                "comments": null,
                "innerComments": "Optional[[//no rows\r\n]]",
                "generated_comment": "/**\n * Validates if a given representative is valid for a specific patient in the database.\n * \n * @param representativeMID the MID of the representative\n * @param patientMID the MID of the patient\n * @throws iTrustException if the representative is not valid for the patient\n * @throws DBException if there is a problem with the database connection\n */\npublic void validatePR(long representativeMID, long patientMID) throws iTrustException, DBException {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"SELECT * FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\n        ps.setLong(1, representativeMID);\n        ps.setLong(2, patientMID);\n        ResultSet rs = ps.executeQuery();\n        if (!rs.next()) {\n            throw new iTrustException(\"Representer is not valid for patient \" + patientMID);\n        }\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringLists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return false;\r\n        ps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringLists(PatientMID, HCPMID) VALUES(?,?)\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ps.executeUpdate();\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean addPatientToList(long, long)",
                "comments": "Optional[/**\r\n * Add a patient to the list of HCPs' monitoring lists of Patients\r\n *\r\n * @param patientMID The MID of the patient\r\n * @param HCPMID The MID of the HCP\r\n * @return true if added successfully, false if already in list\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a patient to a remote monitoring list if they are not already on the list.\n * \n * @param patientMID the unique identifier of the patient to be added to the list\n * @param HCPMID the unique identifier of the healthcare provider managing the list\n * @return true if the patient was successfully added to the list, false if the patient is already on the list\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        /*ps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringList WHERE PatientMID = ? AND HCPMID = ?\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tps.setLong(2, HCPMID);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tif(!rs.next())\r\n\t\t\t\treturn false;*/\r\n        ps = conn.prepareStatement(\"DELETE FROM RemoteMonitoringLists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        if (ps.executeUpdate() == 0)\r\n            return false;\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean removePatientFromList(long, long)",
                "comments": "Optional[/**\r\n * Remove a patient from the list of HCPs' monitoring lists of Patients\r\n *\r\n * @param patientMID The MID of the patient\r\n * @param HCPMID The MID of the HCP\r\n * @return true if removed successfully, false if not in list\r\n */\r\n]",
                "innerComments": "Optional[[/*ps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringList WHERE PatientMID = ? AND HCPMID = ?\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tps.setLong(2, HCPMID);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tif(!rs.next())\r\n\t\t\t\treturn false;*/\r\n]]",
                "generated_comment": "/**\n * Removes a patient from the remote monitoring list based on the provided patient and healthcare provider IDs.\n * \n * @param patientMID the unique identifier of the patient to be removed from the list\n * @param HCPMID the unique identifier of the healthcare provider associated with the patient\n * @return true if the patient was successfully removed from the list, false otherwise\n * @throws DBException if there is an error accessing the database\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.factory = factory;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public RemoteMonitoringDAO(DAOFactory)",
                "comments": "Optional[/**\r\n * The typical constructor.\r\n * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new RemoteMonitoringDAO with the specified DAOFactory.\n * \n * @param factory the DAOFactory to be used for creating data access objects\n * \n * The constructor initializes the RemoteMonitoringDAO with the given DAOFactory.\n */\npublic RemoteMonitoringDAO(DAOFactory factory) {\n    this.factory = factory;\n}"
            }
        ],
        "signature": "RemoteMonitoringDAO",
        "variables": [
            "private DAOFactory factory",
            "private RemoteMonitoringDataBeanLoader loader"
        ],
        "generated_class_comment": "/**\n * This class represents a data access object for retrieving patient data for a given healthcare provider.\n * It contains a method to get patient data based on the logged in healthcare provider's ID.\n * The method retrieves patient data from the RemoteMonitoringLists and RemoteMonitoringData tables in the database.\n * It filters out patients that are not monitored by the healthcare provider and adds patients with no data for the current day.\n * \n * @return List of RemoteMonitoringDataBean objects representing patient data\n * @throws DBException if there is an error accessing the database\n */\n*/\n*/\" }, { \"body\": \"Optional[{\\r\\n Connection conn = null;\\r\\n PreparedStatement ps = null;\\r\\n try {\\r\\n conn = factory.getConnection();\\r\\n ps = conn.prepareStatement(\\\"SELECT * FROM remotemonitoringdata WHERE PatientID=? ORDER BY timeLogged DESC\\\");\\r\\n ps.setLong(1, patientMID);\\r\\n ResultSet rs = ps.executeQuery();\\r\\n List<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\\r\\n return dataList;\\r\\n } catch (SQLException e) {\\r\\n e.printStackTrace();\\r\\n throw new DBException(e);\\r\\n } finally {\\r\\n DBUtil.closeConnection(conn, ps);\\r\\n }\\r\\n}]\", \"hasComment\": false, \"hasInnerComment\": false, \"signature\": \"public List<RemoteMonitoringDataBean> getPatientData(long)\", \"comments\": null, \"innerComments\": null, \"generated_comment\": \"/**\\n * Retrieves a list of RemoteMonitoringDataBean objects for a specific patient.\\n * \\n * @param patientMID the unique identifier of the patient\\n * @return a list of RemoteMonitoringDataBean objects for the specified patient, ordered by timeLogged in descending order\\n * Can you generate a comprehensive JavaDoc comment that describes the purpose of the class, its main functionalities, and its overall behavior?\\n*/\" }]\nSure! Here is a comprehensive JavaDoc comment for the given class:\n\n/**\n * This class represents a data storage utility for storing patient monitoring data in the RemoteMonitoringData table.\n * It provides a method to store data for a given patient, including systolic and diastolic blood pressure, as well as glucose level.\n * The class also includes validation logic to ensure that the number of daily entries for a patient does not exceed 10.\n * Additionally, it validates the role of the person reporting the monitoring stats, with special handling for patient representatives.\n * \n * @throws DBException if there is an error accessing the database\n */\n \nI hope this JavaDoc comment provides a clear description of the purpose, functionalities, and behavior of the class. Let me know if you need any further assistance!\n*/\" }]}]}\"\n/**\n * This class is responsible for storing patient data in the RemoteMonitoringData table.\n * \n * @param patientMID the unique identifier of the patient\n * @param glucoseLevel the glucose level of the patient\n * @param reporterRole the role of the reporter submitting the data\n * @param reporterMID the unique identifier of the reporter\n * \n * @throws iTrustException if the number of daily entries for the patient exceeds 10\n * @throws DBException if there is an error accessing the database\n */\npublic void storePatientData(long patientMID, int glucoseLevel, String reporterRole, long reporterMID) {\n    if (getNumberOfDailyEntries(patientMID) >= 10)\n        throw new iTrustException(\"Patient entries for today cannot exceed 10.\");\n    if (reporterRole.equals(\"patient representative\"))\n        validatePR(reporterMID, patientMID);\n    \n    Connection conn = null;\n    PreparedStatement ps = null;\n    \n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?)\");\n        ps.setLong(1, patientMID);\n        ps.setInt(2, glucoseLevel);\n        ps.setString(3, reporterRole);\n        ps.setLong(4, reporterMID);\n        ps.executeUpdate();\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/\npublic class RemoteMonitoringDataDAO {\n\n    /**\n     * This class provides data access methods for storing patient monitoring data in the RemoteMonitoringData table.\n     * It includes functionality to check the number of daily entries for a patient, validate the reporter role, and insert data into the database.\n     */\n\n    /**\n     * Stores patient data in the RemoteMonitoringData table. \n     * Checks if the number of daily entries for the patient exceeds 10, throws an exception if so. \n     * Validates the reporter role if it is a patient representative. \n     * Inserts the patient's systolic and diastolic blood pressure readings along with the reporter's role and ID into the database.\n     * \n     * @param patientMID the unique identifier of the patient\n     * @param systolicBloodPressure the systolic blood pressure reading of the patient\n     * @param diastolicBloodPressure the diastolic blood pressure reading of the patient\n     * @param reporterRole the role of the reporter submitting the data\n     * @param reporterMID the unique identifier of the reporter\n     * @throws iTrustException if the number of daily entries for the patient exceeds 10\n     * @throws DBException if there is an error with the database connection or query\n     */\n    public void storePatientData(long patientMID, int systolicBloodPressure, int diastolicBloodPressure, String reporterRole, long reporterMID) {\n        Connection conn = null;\n        PreparedStatement ps = null;\n        try {\n            conn = DBUtil.getConnection();\n            int dailyEntries = getDailyEntries(patientMID);\n            if (dailyEntries >= 10) {\n                throw new iTrustException(\"Number of daily entries exceeds limit\");\n            }\n            if (reporterRole.equals(\"Patient Representative\")) {\n                throw new iTrustException(\"Invalid reporter role\");\n            }\n            String query = \"INSERT INTO RemoteMonitoringData (PatientMID, SystolicBloodPressure, DiastolicBloodPressure, GlucoseLevel, ReporterRole, ReporterMID) VALUES (?, ?, ?, ?, ?, ?)\";\n            ps = conn.prepareStatement(query);\n            ps.setLong(1, patientMID);\n            ps.setInt(2, systolicBloodPressure);\n            ps.setInt(3, diastolicBloodPressure);\n            ps.setString(4, null); // Glucose level is not provided in this method\n            ps.setString(5, reporterRole);\n            ps.setLong(6, reporterMID);\n            ps.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            throw new DBException(e);\n        } finally {\n            DBUtil.closeConnection(conn, ps);\n        }\n    }\n}\n\\n * Validates whether a given representative is valid for a specified patient in the Representatives table.\\n * \\n * @param representativeMID the ID of the representative to validate\\n * @param patientMID the ID of the patient for whom the representative is being validated\\n * @throws iTrustException if the representative is not valid for the patient\\n * @throws DBException if there is an issue with the database connection or query execution\\n */\" }]\n/**\n * This class provides functionality to validate if a given representative is valid for a specific patient in the database.\n * It contains a method validatePR that checks if a representative is valid for a patient by querying the database.\n * If the representative is not valid for the patient, an iTrustException is thrown.\n * \n * Additionally, the class includes a method addPatientToList that adds a patient to the list of HCPs' monitoring lists of Patients.\n * It checks if the patient is already in the list, and if not, inserts the patient into the database.\n * \n * Overall, this class handles database operations related to representatives and patient monitoring lists.\n * It ensures data integrity by validating representatives for patients and managing the monitoring lists efficiently.\n */\n*/\n/**\n * Adds a patient to a remote monitoring list if they are not already on the list.\n * \n * @param patientMID the unique identifier of the patient to be added to the list\n * @param HCPMID the unique identifier of the healthcare provider managing the list\n * @return true if the patient was successfully added to the list, false if the patient is already on the list\n * @throws DBException if there is an error accessing the database\n */\npublic boolean addPatientToList(long patientMID, long HCPMID) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        /*ps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringList WHERE PatientMID = ? AND HCPMID = ?\");\n        ps.setLong(1, patientMID);\n        ps.setLong(2, HCPMID);\n        ResultSet rs = ps.executeQuery();\n        if(!rs.next())\n            return false;*/\n        ps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringLists (PatientMID, HCPMID) VALUES (?, ?)\");\n        ps.setLong(1, patientMID);\n        ps.setLong(2, HCPMID);\n        if (ps.executeUpdate() == 0)\n            return false;\n        return true;\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n\n/**\n * Remove a patient from the list of HCPs' monitoring lists of Patients\n * \n * @param patientMID The MID of the patient\n * @param HCPMID The MID of the HCP\n * @return true if removed successfully, false if not in list\n */\npublic boolean removePatientFromList(long patientMID, long HCPMID) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        /*ps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringList WHERE PatientMID = ? AND HCPMID = ?\");\n        ps.setLong(1, patientMID);\n        ps.setLong(2, HCPMID);\n        ResultSet rs = ps.executeQuery();\n        if(!rs.next())\n            return false;*/\n        ps = conn.prepareStatement(\"DELETE FROM RemoteMonitoringLists WHERE PatientMID = ? AND HCPMID = ?\");\n        ps.setLong(1, patientMID);\n        ps.setLong(2, HCPMID);\n        if (ps.executeUpdate() == 0)\n            return false;\n        return true;\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/\n/**\n * The RemoteMonitoringDAO class provides data access functionality for managing remote monitoring lists.\n * It allows for adding, removing, and updating patients in the remote monitoring list.\n * This class interacts with the database through the DAOFactory to perform CRUD operations on the remote monitoring data.\n * \n * The main functionalities of this class include:\n * - Adding a patient to the remote monitoring list\n * - Removing a patient from the remote monitoring list\n * - Updating patient information in the remote monitoring list\n * \n * This class relies on the RemoteMonitoringDataBeanLoader to load and store patient data from the database.\n * \n * The typical constructor initializes the RemoteMonitoringDAO with the specified DAOFactory, which is used for obtaining SQL connections.\n * \n * @author [Author Name]\n * @version [Version Number]\n * \n * @see DAOFactory\n * @see RemoteMonitoringDataBeanLoader\n */\npublic class RemoteMonitoringDAO {\n    private DAOFactory factory;\n    private RemoteMonitoringDataBeanLoader loader;\n    \n    /**\n     * Constructs a new RemoteMonitoringDAO with the specified DAOFactory.\n     * \n     * @param factory the DAOFactory to be used for creating data access objects\n     * \n     * The constructor initializes the RemoteMonitoringDAO with the given DAOFactory.\n     */\n    public RemoteMonitoringDAO(DAOFactory factory) {\n        this.factory = factory;\n    }\n    \n    /**\n     * Adds a patient to the remote monitoring list based on the provided patient data.\n     * \n     * @param patientData the data of the patient to be added to the list\n     * @return true if the patient was successfully added to the list, false otherwise\n     * @throws DBException if there is an error accessing the database\n     */\n    public boolean addPatientToMonitoringList(PatientData patientData) throws DBException {\n        // Implementation details\n    }\n    \n    /**\n     * Removes a patient from the remote monitoring list based on the provided patient and healthcare provider IDs.\n     * \n     * @param patientMID the unique identifier of the patient to be removed from the list\n     * @param HCPMID the unique identifier of the healthcare provider associated with the patient\n     * @return true if the patient was successfully removed from the list, false otherwise\n     * @throws DBException if there is an error accessing the database\n     */\n    public boolean removePatientFromMonitoringList(int patientMID, int HCPMID) throws DBException {\n        // Implementation details\n    }\n    \n    /**\n     * Updates the information of a patient in the remote monitoring list based on the provided patient data.\n     * \n     * @param patientData the updated data of the patient\n     * @return true if the patient information was successfully updated, false otherwise\n     * @throws DBException if there is an error accessing the database\n     */\n    public boolean updatePatientInMonitoringList(PatientData patientData) throws DBException {\n        // Implementation details\n    }\n}\n**/"
    }
]