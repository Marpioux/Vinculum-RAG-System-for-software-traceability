[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    ErrorList errorList = new ErrorList();\r\n    if (m.getLabProcedureCode() == null || m.getComponent() == null || m.getKindOfProperty() == null) {\r\n        throw new FormValidationException(\"You must have a Lab Procedure Code, Component and Kind Of Property\");\r\n    }\r\n    errorList.addIfNotNull(checkFormat(\"LaboratoryProcedureCode\", m.getLabProcedureCode(), ValidationFormat.LOINC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Component\", m.getComponent(), ValidationFormat.LOINC_ITEM, false));\r\n    errorList.addIfNotNull(checkFormat(\"KindOfProperty\", m.getKindOfProperty(), ValidationFormat.LOINC_ITEM, false));\r\n    errorList.addIfNotNull(checkFormat(\"TimeAspect\", m.getTimeAspect(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"System\", m.getSystem(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"ScaleType\", m.getScaleType(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"MethodType\", m.getMethodType(), ValidationFormat.LOINC_ITEM, true));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void validate(LOINCbean)",
                "comments": "Optional[/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p A bean of the type to be validated.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Validates a LOINCbean object by checking if it has required fields and if its fields have correct format.\n * \n * @param m the LOINCbean object to validate\n * @throws FormValidationException if the LOINCbean object is missing required fields or if any field has incorrect format\n */\npublic void validate(LOINCbean m) {\n    ErrorList errorList = new ErrorList();\n    \n    // Check if required fields are present\n    if (m.getLabProcedureCode() == null || m.getComponent() == null || m.getKindOfProperty() == null) {\n        throw new FormValidationException(\"You must have a Lab Procedure Code, Component and Kind Of Property\");\n    }\n    \n    // Check format of each field\n    errorList.addIfNotNull(checkFormat(\"LaboratoryProcedureCode\", m.getLabProcedureCode(), ValidationFormat.LOINC, false));\n    errorList.addIfNotNull(checkFormat(\"Component\", m.getComponent(), ValidationFormat.LOINC_ITEM, false));\n    errorList.addIfNotNull(checkFormat(\"KindOfProperty\", m.getKindOfProperty(), ValidationFormat.LOINC_ITEM, false));\n    errorList.addIfNotNull(checkFormat(\"TimeAspect\", m.getTimeAspect(), ValidationFormat.LOINC_ITEM, true));\n    errorList.addIfNotNull(checkFormat(\"System\", m.getSystem(), ValidationFormat.LOINC_ITEM, true));\n    errorList.addIfNotNull(checkFormat(\"ScaleType\", m.getScaleType(), ValidationFormat.LOINC_ITEM, true));\n    errorList.addIfNotNull(checkFormat(\"MethodType\", m.getMethodType(), ValidationFormat.LOINC_ITEM, true));\n    \n    // Throw exception if there are any errors\n    if (errorList.hasErrors())\n        throw new FormValidationException(errorList);\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public LOINCBeanValidator()",
                "comments": "Optional[/**\r\n * The default constructor.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This is the constructor for the LOINCBeanValidator class.\n * It initializes a new instance of the LOINCBeanValidator class.\n * This constructor does not take any parameters.\n * \n * @param None\n * @return A new instance of the LOINCBeanValidator class\n */"
            }
        ],
        "signature": "LOINCBeanValidator",
        "variables": [],
        "generated_class_comment": "/**\n * This class contains a method to validate a LOINCbean object by checking if it has required fields and if its fields have correct format.\n * The validate method performs the act of validating the bean by checking for the presence of Lab Procedure Code, Component, and Kind Of Property.\n * It also checks the format of various fields such as Time Aspect, System, Scale Type, and Method Type using predefined ValidationFormats.\n * If any validation fails, a FormValidationException is thrown with the error details.\n * \n * @author [Author Name]\n * @version 1.0\n */\npublic class LOINCValidator {\n    \n    /**\n     * Validates a LOINCbean object by checking if it has required fields and if its fields have correct format.\n     * \n     * @param m the LOINCbean object to validate\n     * @throws FormValidationException if the LOINCbean object is missing required fields or if any field has incorrect format\n     */\n    public void validate(LOINCbean m) {\n        ErrorList errorList = new ErrorList();\n        \n        if (m.getLabProcedureCode() == null || m.getComponent() == null || m.getKindOfProperty() == null) {\n            throw new FormValidationException(\"You must have a Lab Procedure Code, Component and Kind Of Property\");\n        }\n        \n        errorList.addIfNotNull(checkFormat(\"LaboratoryProcedureCode\", m.getLabProcedureCode(), ValidationFormat.LOINC, false));\n        errorList.addIfNotNull(checkFormat(\"Component\", m.getComponent(), ValidationFormat.LOINC_ITEM, false));\n        errorList.addIfNotNull(checkFormat(\"KindOfProperty\", m.getKindOfProperty(), ValidationFormat.LOINC_ITEM, false));\n        errorList.addIfNotNull(checkFormat(\"TimeAspect\", m.getTimeAspect(), ValidationFormat.LOINC_ITEM, true));\n        errorList.addIfNotNull(checkFormat(\"System\", m.getSystem(), ValidationFormat.LOINC_ITEM, true));\n        errorList.addIfNotNull(checkFormat(\"ScaleType\", m.getScaleType(), ValidationFormat.LOINC_ITEM, true));\n        errorList.addIfNotNull(checkFormat(\"MethodType\", m.getMethodType(), ValidationFormat.LOINC_ITEM, true));\n        \n        if (errorList.hasErrors()) {\n            throw new FormValidationException(errorList);\n        }\n    }\n}\n*/\n/**\n * The LOINCBeanValidator class is responsible for validating LOINC beans to ensure that they meet the required criteria.\n * It checks for the presence of mandatory fields such as Lab Procedure Code, Component, and Kind Of Property.\n * Additionally, it validates the format of each field using specific validation formats for LOINC items.\n * The class throws a FormValidationException if any required fields are missing or if there are any format errors.\n * \n * Main functionalities include:\n * - Checking for the presence of mandatory fields\n * - Validating the format of each field using predefined validation formats\n * - Throwing a FormValidationException if there are any errors in the LOINC bean\n * \n * Overall behavior:\n * - The class ensures that LOINC beans adhere to the required standards and formats.\n * - It provides a reliable validation mechanism to maintain data integrity and consistency.\n * - By using specific validation formats, it ensures that LOINC beans are accurately represented.\n * \n * @author [Your Name]\n * @version 1.0\n * @since [Date]\n */"
    }
]