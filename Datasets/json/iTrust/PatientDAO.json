[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT firstName, lastName FROM Patients WHERE MID=?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return rs.getString(\"firstName\") + \" \" + rs.getString(\"lastName\");\r\n        } else {\r\n            throw new iTrustException(\"User does not exist\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getName(long)",
                "comments": "Optional[/**\r\n * Returns the name for the given MID\r\n *\r\n * @param mid The MID of the patient in question.\r\n * @return A String representing the patient's first name and last name.\r\n * @throws iTrustException\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the full name of a patient based on their Medical Record Number (MID).\n * \n * @param mid the Medical Record Number (MID) of the patient\n * @return the full name of the patient in the format \"firstName lastName\"\n * @throws iTrustException if the user does not exist in the database\n * @throws DBException if there is a problem with the database connection or query execution\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT role FROM Users WHERE MID=? AND Role=?\");\r\n        ps.setLong(1, mid);\r\n        ps.setString(2, role);\r\n        ResultSet rs;\r\n        rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            return rs.getString(\"role\");\r\n        } else {\r\n            throw new iTrustException(\"User does not exist with the designated role\");\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getRole(long, String)",
                "comments": "Optional[/**\r\n * Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO\r\n *\r\n * @param mid The MID of the patient in question.\r\n * @param role A String representing the role of the patient.\r\n * @return A String representing the patient's role.\r\n * @throws iTrustException\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the role of a user from the database based on the given MID and role.\n * \n * @param mid the unique identifier of the user\n * @param role the role of the user to retrieve\n * @return the role of the user if found in the database\n * @throws iTrustException if the user does not exist with the designated role\n * @throws DBException if there is a problem with the database connection or query\n */\npublic String getRole(long mid, String role) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"SELECT role FROM Users WHERE MID=? AND Role=?\");\n        ps.setLong(1, mid);\n        ps.setString(2, role);\n        ResultSet rs;\n        rs = ps.executeQuery();\n        if (rs.next()) {\n            return rs.getString(\"role\");\n        } else {\n            throw new iTrustException(\"User does not exist with the designated role\");\n        }\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO Patients(MID) VALUES(NULL)\");\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public long addEmptyPatient()",
                "comments": "Optional[/**\r\n * Adds an empty patient to the table, returns the new MID\r\n *\r\n * @return The MID of the patient as a long.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds an empty patient to the database.\n * \n * This method inserts a new record into the Patients table with a null value for the MID (Medical ID) field.\n * \n * @return the ID of the newly inserted patient\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM Patients WHERE MID = ?\");\r\n        ps.setLong(1, mid);\r\n        ResultSet rs = ps.executeQuery();\r\n        // pdao.logTransaction(type, loggedInMID, secondaryMID, addedInfo)\r\n        if (rs.next()) {\r\n            return patientLoader.loadSingle(rs);\r\n        } else\r\n            return null;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public PatientBean getPatient(long)",
                "comments": "Optional[/**\r\n * Returns the patient's information for a given ID\r\n *\r\n * @param mid The MID of the patient to retrieve.\r\n * @return A PatientBean representing the patient.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": "Optional[[// pdao.logTransaction(type, loggedInMID, secondaryMID, addedInfo)\r\n]]",
                "generated_comment": "/**\n * Retrieves a patient from the database based on their unique identifier.\n * \n * @param mid the unique identifier of the patient to retrieve\n * @return a PatientBean object representing the patient if found, null otherwise\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE Patients SET firstName=?,lastName=?,email=?,\" + \"address1=?,address2=?,city=?,state=?,zip1=?, zip2=?,phone1=?,phone2=?,phone3=?,\" + \"eName=?,ePhone1=?,ePhone2=?,ePhone3=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,\" + \"ICState=?,iCZip1=?, iCZip2=?, iCPhone1=?,iCPhone2=?,iCPhone3=?,iCID=?,DateOfBirth=?,\" + \"DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,\" + \"BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, MessageFilter=? WHERE MID=?\");\r\n        patientLoader.loadParameters(ps, p);\r\n        ps.setLong(40, p.getMID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void editPatient(PatientBean)",
                "comments": "Optional[/**\r\n * Updates a patient's information for the given MID\r\n *\r\n * @param p The patient bean representing the new information for the patient.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates the information of a patient in the database.\n * \n * @param p the PatientBean object containing the updated patient information\n * @throws DBException if there is an error accessing the database\n */\npublic void editPatient(PatientBean p) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"UPDATE Patients SET firstName=?,lastName=?,email=?,\"\n                + \"address1=?,address2=?,city=?,state=?,zip1=?, zip2=?,phone1=?,phone2=?,phone3=?,\"\n                + \"eName=?,ePhone1=?,ePhone2=?,ePhone3=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,\"\n                + \"ICState=?,iCZip1=?, iCZip2=?, iCPhone1=?,iCPhone2=?,iCPhone3=?,iCID=?,DateOfBirth=?,\"\n                + \"DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,\"\n                + \"BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, MessageFilter=? WHERE MID=?\");\n        patientLoader.loadParameters(ps, p);\n        ps.setLong(40, p.getMID());\n        ps.executeUpdate();\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM Patients WHERE MID=?\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean checkPatientExists(long)",
                "comments": "Optional[/**\r\n * Returns whether or not the patient exists\r\n *\r\n * @param pid The MID of the patient in question.\r\n * @return A boolean indicating whether the patient exists.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a patient with the given ID exists in the database.\n * \n * @param pid the ID of the patient to check for existence\n * @return true if a patient with the given ID exists, false otherwise\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM DeclaredHCP, Personnel \" + \"WHERE PatientID=? AND Personnel.MID=DeclaredHCP.HCPID\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PersonnelBean> getDeclaredHCPs(long)",
                "comments": "Optional[/**\r\n * Returns a list of HCPs who are declared by the given patient\r\n *\r\n * @param pid The MID of the patient in question.\r\n * @return A java.util.List of Personnel Beans.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of PersonnelBeans representing the declared healthcare providers (HCPs) for a given patient ID.\n * \n * @param pid the patient ID for which to retrieve declared HCPs\n * @return a list of PersonnelBean objects representing the declared HCPs for the specified patient ID\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the provided patient ID is 0 or if there is an error executing the SQL query\n */\npublic List<PersonnelBean> getDeclaredHCPs(long pid) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (pid == 0L)\n            throw new SQLException(\"pid cannot be 0\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"SELECT * FROM DeclaredHCP, Personnel \" + \"WHERE PatientID=? AND Personnel.MID=DeclaredHCP.HCPID\");\n        ps.setLong(1, pid);\n        ResultSet rs = ps.executeQuery();\n        return personnelLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO DeclaredHCP(PatientID, HCPID) VALUES(?,?)\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        if (1062 == e.getErrorCode())\r\n            throw new iTrustException(\"HCP \" + hcpID + \" has already been declared for patient \" + pid);\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean declareHCP(long, long)",
                "comments": "Optional[/**\r\n * Declares an HCP for a particular patient\r\n *\r\n * @param pid The MID of the patient in question.\r\n * @param hcpID The HCP's MID.\r\n * @return A boolean as to whether the insertion was successful.\r\n * @throws DBException\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Declares a healthcare provider (HCP) for a patient in the database.\n * \n * @param pid The ID of the patient for whom the HCP is being declared.\n * @param hcpID The ID of the healthcare provider being declared for the patient.\n * @return true if the HCP was successfully declared for the patient, false otherwise.\n * @throws iTrustException If the HCP has already been declared for the patient.\n * @throws DBException If an SQL exception occurs while trying to declare the HCP.\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM DeclaredHCP WHERE PatientID=? AND HCPID=?\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpID);\r\n        return 1 == ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean undeclareHCP(long, long)",
                "comments": "Optional[/**\r\n * Undeclare an HCP for a given patient\r\n *\r\n * @param pid The MID of the patient in question.\r\n * @param hcpID The MID of the HCP in question.\r\n * @return A boolean indicating whether the action was successful.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Undeclares a healthcare provider (HCP) for a specific patient in the database.\n * \n * @param pid The ID of the patient\n * @param hcpID The ID of the healthcare provider to undeclare\n * @return true if the HCP was successfully undeclared for the patient, false otherwise\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM DeclaredHCP WHERE PatientID=? AND HCPID=?\");\r\n        ps.setLong(1, pid);\r\n        ps.setLong(2, hcpid);\r\n        return ps.executeQuery().next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean checkDeclaredHCP(long, long)",
                "comments": "Optional[/**\r\n * Check if a patient has declared the given HCP\r\n *\r\n * @param pid The MID of the patient in question as a long.\r\n * @param hcpid The MID of the HCP in question as a long.\r\n * @return\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a specific healthcare provider (HCP) has been declared by a patient.\n * \n * @param pid The ID of the patient\n * @param hcpid The ID of the healthcare provider\n * @return true if the specified HCP has been declared by the patient, false otherwise\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT Patients.* FROM Representatives, Patients \" + \"WHERE RepresenterMID=? AND RepresenteeMID=Patients.MID\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PatientBean> getRepresented(long)",
                "comments": "Optional[/**\r\n * Return a list of patients that the given patient represents\r\n *\r\n * @param pid The MID of the patient in question.\r\n * @return A java.util.List of PatientBeans\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of PatientBeans that are represented by a specific representative.\n * \n * @param pid the MID of the representative\n * @return a List of PatientBeans represented by the specified representative\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT Patients.* FROM Representatives, Patients \" + \"WHERE RepresenteeMID=? AND RepresenterMID=Patients.MID\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PatientBean> getRepresenting(long)",
                "comments": "Optional[/**\r\n * Return a list of patients that the given patient is represented by\r\n *\r\n * @param pid The MID of the patient in question.\r\n * @return A java.util.List of PatientBeans.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of PatientBeans representing the patients associated with a given representee MID.\n * \n * @param pid the representee MID for which to retrieve the representing patients\n * @return a list of PatientBeans representing the patients associated with the given representee MID\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        ResultSet rs = ps.executeQuery();\r\n        return rs.next();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean represents(long, long)",
                "comments": "Optional[/**\r\n * Check if the given representer represents the representee\r\n *\r\n * @param representer The MID of the representer in question.\r\n * @param representee The MID of the representee in question.\r\n * @return A boolean indicating whether represenation is in place.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a given pair of representers and representees exists in the Representatives table.\n * \n * @param representer The ID of the representer to check\n * @param representee The ID of the representee to check\n * @return true if the pair exists in the table, false otherwise\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO Representatives(RepresenterMID,RepresenteeMID) VALUES (?,?)\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        return 1 == ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        if (1062 == e.getErrorCode())\r\n            throw new iTrustException(\"Patient \" + representer + \" already represents patient \" + representee);\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean addRepresentative(long, long)",
                "comments": "Optional[/**\r\n * Assign a representer to the representee\r\n *\r\n * @param representer The MID of the representer as a long.\r\n * @param representee The MID of the representee as a long.\r\n * @return A boolean as to whether the insertion was correct.\r\n * @throws DBException\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a representative to the database with the specified representer and representee IDs.\n * \n * @param representer the ID of the patient who is representing another patient\n * @param representee the ID of the patient being represented\n * @return true if the representative was successfully added, false otherwise\n * @throws iTrustException if the representer already represents the representee\n * @throws DBException if there is a problem with the database connection or query execution\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n        ps.setLong(1, representer);\r\n        ps.setLong(2, representee);\r\n        return 1 == ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean removeRepresentative(long, long)",
                "comments": "Optional[/**\r\n * Unassign the representation\r\n *\r\n * @param representer The MID of the representer in question.\r\n * @param representee The MID of the representee in question.\r\n * @return A boolean indicating whether the unassignment was sucessful.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Removes a representative relationship between two individuals in the database.\n * \n * @param representer The unique identifier of the individual who is representing another individual\n * @param representee The unique identifier of the individual being represented\n * @return true if the representative relationship was successfully removed, false otherwise\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM OVDiagnosis ovd, OfficeVisits ov, ICDCodes icd \" + \"WHERE ovd.VisitID=ov.ID and icd.Code=ovd.ICDCode and ov.PatientID=? \" + \"ORDER BY ov.visitDate DESC\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return diagnosisLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<DiagnosisBean> getDiagnoses(long)",
                "comments": "Optional[/**\r\n * Return a list of all diagnoses for a given patient\r\n *\r\n * @param pid The MID of the patient in question.\r\n * @return A java.util.List of Diagnoses.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of DiagnosisBean objects for a given patient ID.\n * \n * @param pid the patient ID for which to retrieve diagnoses\n * @return a list of DiagnosisBean objects representing the diagnoses for the specified patient\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the patient ID is 0 or if there is an error executing the SQL query\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt \" + \"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? \" + \"ORDER BY ov.visitDate desc\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return procedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<ProcedureBean> getProcedures(long)",
                "comments": "Optional[/**\r\n * Return a list of all procedures for a given patient\r\n *\r\n * @param pid The MID of the patient in question.\r\n * @return A java.util.List of all the procedures.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of ProcedureBeans associated with a given patient ID.\n * \n * @param pid the patient ID for which to retrieve procedures\n * @return a list of ProcedureBeans associated with the specified patient ID\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the patient ID is 0 or if there is an error executing the SQL query\n */\npublic List<ProcedureBean> getProcedures(long pid) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (pid == 0L)\n            throw new SQLException(\"pid cannot be 0\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt \" + \"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? \" + \"ORDER BY ov.visitDate desc\");\n        ps.setLong(1, pid);\n        ResultSet rs = ps.executeQuery();\n        return procedureLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (pid == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt \" + \"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? and cpt.attribute='immunization'\" + \"ORDER BY ov.visitDate desc\");\r\n        ps.setLong(1, pid);\r\n        ResultSet rs = ps.executeQuery();\r\n        return procedureLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<ProcedureBean> getImmunizationProcedures(long)",
                "comments": "Optional[/**\r\n * Return a list of all immunization procedures for a given patient\r\n *\r\n * @param pid The MID of the patient in question.\r\n * @return A java.util.List of the procedures.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of immunization procedures for a given patient ID.\n * \n * @param pid the patient ID for which to retrieve immunization procedures\n * @return a list of ProcedureBean objects representing the immunization procedures\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the patient ID is 0 or if there is an error executing the SQL query\n */\npublic List<ProcedureBean> getImmunizationProcedures(long pid) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (pid == 0L)\n            throw new SQLException(\"pid cannot be 0\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt \" + \"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? and cpt.attribute='immunization'\" + \"ORDER BY ov.visitDate desc\");\n        ps.setLong(1, pid);\n        ResultSet rs = ps.executeQuery();\n        return procedureLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (patientID == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \" + \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \" + \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode \" + \"ORDER BY OfficeVisits.visitDate DESC, OVMedication.NDCode ASC;\");\r\n        ps.setLong(1, patientID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return prescriptionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PrescriptionBean> getPrescriptions(long)",
                "comments": "Optional[/**\r\n * Return a list of all prescriptions for a patient\r\n *\r\n * @param patientID The MID of the patient in question.\r\n * @return A java.util.List of prescriptions.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of PrescriptionBeans for a given patient ID.\n * \n * @param patientID the ID of the patient for whom to retrieve prescriptions\n * @return a List of PrescriptionBeans containing information about the prescriptions\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the patientID is 0\n */\npublic List<PrescriptionBean> getPrescriptions(long patientID) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (patientID == 0L)\n            throw new SQLException(\"pid cannot be 0\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \" + \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \" + \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode \" + \"ORDER BY OfficeVisits.visitDate DESC, OVMedication.NDCode ASC;\");\n        ps.setLong(1, patientID);\n        ResultSet rs = ps.executeQuery();\n        return prescriptionLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (patientID == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \" + \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \" + \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND \" + \"OVMedication.EndDate >= ?\" + \"ORDER BY OVMedication.ID DESC;\");\r\n        ps.setLong(1, patientID);\r\n        ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(91));\r\n        ResultSet rs = ps.executeQuery();\r\n        return prescriptionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PrescriptionBean> getCurrentPrescriptions(long)",
                "comments": "Optional[/**\r\n * Return a list of prescriptions which are currently prescribed for a patient\r\n *\r\n * @param patientID The MID of the patient in question.\r\n * @return A java.util.List of prescription beans.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of current prescriptions for a given patient ID.\n * \n * @param patientID the ID of the patient for whom to retrieve prescriptions\n * @return a list of PrescriptionBean objects representing the current prescriptions for the patient\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the patient ID is 0 or if there is an error executing the SQL query\n */\npublic List<PrescriptionBean> getCurrentPrescriptions(long patientID) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (patientID == 0L)\n            throw new SQLException(\"pid cannot be 0\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \" + \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \" + \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND \" + \"OVMedication.EndDate >= ?\" + \"ORDER BY OVMedication.ID DESC;\");\n        ps.setLong(1, patientID);\n        ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(91));\n        ResultSet rs = ps.executeQuery();\n        return prescriptionLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if (patientID == 0L)\r\n            throw new SQLException(\"pid cannot be 0\");\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \" + \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \" + \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND \" + \"OVMedication.EndDate < ?\" + \"ORDER BY OVMedication.ID DESC;\");\r\n        ps.setLong(1, patientID);\r\n        ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(0));\r\n        ResultSet rs = ps.executeQuery();\r\n        return prescriptionLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public List<PrescriptionBean> getExpiredPrescriptions(long)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of expired prescriptions for a given patient.\n * \n * @param patientID the ID of the patient for whom to retrieve expired prescriptions\n * @return a list of PrescriptionBean objects representing expired prescriptions for the specified patient\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the patientID is 0 or if there is an error executing the SQL query\n */\npublic List<PrescriptionBean> getExpiredPrescriptions(long patientID) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (patientID == 0L)\n            throw new SQLException(\"pid cannot be 0\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \" + \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \" + \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND \" + \"OVMedication.EndDate < ?\" + \"ORDER BY OVMedication.ID DESC;\");\n        ps.setLong(1, patientID);\n        ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(0));\n        ResultSet rs = ps.executeQuery();\n        return prescriptionLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients \");\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PatientBean> getAllPatients()",
                "comments": "Optional[/**\r\n * Lists every patient in the database.\r\n *\r\n * @return A java.util.List of PatientBeans representing the patients.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of all patients from the database.\n * \n * @return A List of PatientBean objects representing all patients in the database.\n * @throws DBException if there is an error accessing the database.\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM ( \" + \"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication \" + \"Where \" + \"declaredHCP.HCPID = ? AND \" + \"patients.MID = declaredhcp.PatientID AND \" + \"( \" + \"ovdiagnosis.VisitID = officevisits.ID AND officevisits.PatientID = declaredhcp.PatientID \" + \"AND \" + \"((ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) \" + \"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) \" + \"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?)) \" + \") \" + \"UNION ALL \" + \"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication \" + \"Where \" + \"declaredHCP.HCPID = ? AND \" + \"patients.MID = declaredhcp.PatientID AND \" + \"( \" + \"declaredhcp.PatientID = officevisits.PatientID AND officevisits.ID = ovmedication.VisitID \" + \"AND \" + \"ovmedication.EndDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) \" + \") \" + \") AS final \" + \"GROUP BY final.MID HAVING COUNT(*) = 2 \" + \"ORDER BY final.lastname ASC, final.firstname ASC\");\r\n        ps.setLong(1, hcpMID);\r\n        ps.setFloat(2, 250.0f);\r\n        ps.setFloat(3, 251.0f);\r\n        ps.setFloat(4, 493.0f);\r\n        ps.setFloat(5, 494.0f);\r\n        ps.setFloat(6, 390.0f);\r\n        ps.setFloat(7, 460.99f);\r\n        ps.setLong(8, hcpMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PatientBean> getRenewalNeedsPatients(long)",
                "comments": "Optional[/**\r\n * Return a list of patients with a special-diagnosis-history who\r\n * have the logged in HCP as a DHCP and whose medications are going to\r\n * expire within seven days.\r\n *\r\n * @param hcpMID The MID of the logged in HCP\r\n * @return A list of patients satisfying the conditions.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of patients who are in need of medication renewal based on the specified HCP ID.\n * Patients are considered in need of renewal if they have been diagnosed with specific ICD codes \n * or if they have medications that are expiring within the next 7 days.\n * \n * @param hcpMID the ID of the healthcare provider who is checking for renewal needs\n * @return a list of PatientBean objects representing patients in need of medication renewal\n * @throws DBException if there is an error accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    if (first.equals(\"%\") && last.equals(\"%\"))\r\n        return new Vector<PatientBean>();\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM patients WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n        ps.setString(1, first);\r\n        ps.setString(2, last);\r\n        ResultSet rs = ps.executeQuery();\r\n        return patientLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<PatientBean> searchForPatientsWithName(String, String)",
                "comments": "Optional[/**\r\n * Returns all patients with names \"LIKE\" (as in SQL) the passed in parameters.\r\n *\r\n * @param first The patient's first name.\r\n * @param last The patient's last name.\r\n * @return A java.util.List of PatientBeans.\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Searches for patients with a given first and last name.\n * \n * @param first The first name to search for. Use \"%\" to match any value.\n * @param last The last name to search for. Use \"%\" to match any value.\n * @return A list of PatientBean objects matching the search criteria.\n *         An empty list is returned if no matches are found.\n * @throws DBException if there is an error accessing the database.\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.factory = factory;\r\n    this.patientLoader = new PatientLoader();\r\n    this.personnelLoader = new PersonnelLoader();\r\n    this.diagnosisLoader = new DiagnosisBeanLoader(true);\r\n    this.prescriptionLoader = new PrescriptionBeanLoader();\r\n    this.procedureLoader = new ProcedureBeanLoader(true);\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PatientDAO(DAOFactory)",
                "comments": "Optional[/**\r\n * The typical constructor.\r\n * @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new PatientDAO with the specified DAOFactory.\n * Initializes the PatientDAO with loaders for patients, personnel, diagnoses, prescriptions, and procedures.\n * \n * @param factory the DAOFactory to be used for database operations\n */"
            }
        ],
        "signature": "PatientDAO",
        "variables": [
            "private DAOFactory factory",
            "private PatientLoader patientLoader",
            "private PersonnelLoader personnelLoader",
            "private DiagnosisBeanLoader diagnosisLoader",
            "private PrescriptionBeanLoader prescriptionLoader",
            "private ProcedureBeanLoader procedureLoader"
        ],
        "generated_class_comment": "/**\n * The PatientDAO class provides methods for interacting with the database to retrieve patient information.\n * It includes methods for retrieving a patient's name and role based on their Medical Record Number (MID).\n * \n * This class handles database connections, prepares and executes SQL queries to retrieve patient data,\n * and handles exceptions that may occur during database operations.\n * \n * The main functionalities of this class include:\n * - Retrieving the full name of a patient based on their MID\n * - Retrieving the role of a user based on their MID and designated role\n * \n * The behavior of this class is to establish a database connection, execute SQL queries to retrieve patient information,\n * and handle any exceptions that may occur during the process. If a user does not exist in the database or if there\n * is a problem with the database connection or query execution, appropriate exceptions are thrown.\n * \n * @author [Your Name]\n * @version 1.0\n */\n{\n    \"class_name\": \"PatientDAO\",\n    \"purpose\": \"This class is responsible for handling database operations related to patients, such as retrieving patient roles and inserting new patient records.\",\n    \"main_functionalities\": [\n        \"Retrieving the role of a patient based on their MID and role\",\n        \"Inserting a new patient record into the database\"\n    ],\n    \"overall_behavior\": \"PatientDAO interacts with the database to perform CRUD operations on patient data. It ensures data integrity and consistency by handling exceptions and closing database connections properly.\"\n}\n/**\n * The PatientDAO class is responsible for handling database operations related to patients.\n * It provides methods for adding empty patients to the database and retrieving patient information based on their ID.\n * \n * This class includes the following functionalities:\n * - Adding an empty patient to the database and returning the new MID\n * - Retrieving patient information for a given ID and returning a PatientBean object\n * \n * The main behavior of this class involves interacting with the database to perform CRUD operations on patient records.\n * \n * @throws DBException if there is an error accessing the database\n */\n**/\n/**\n * This class represents a database utility for managing patient information. It provides methods for updating patient information in the database.\n * \n * The main functionality of this class is to edit a patient's information by updating the corresponding record in the Patients table of the database. \n * It takes a PatientBean object containing the updated patient information and updates the database accordingly.\n * \n * The editPatient method takes a PatientBean object as a parameter and updates the patient's information in the database by executing an SQL UPDATE statement.\n * \n * @param p the PatientBean object containing the updated patient information\n * @throws DBException if there is an error accessing the database\n */\npublic void editPatient(PatientBean p) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"UPDATE Patients SET firstName=?,lastName=?,email=?,\"\n                + \"address1=?,address2=?,city=?,state=?,zip1=?, zip2=?,phone1=?,phone2=?,phone3=?,\"\n                + \"eName=?,ePhone1=?,ePhone2=?,ePhone3=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,\"\n                + \"ICState=?,iCZip1=?, iCZip2=?, iCPhone1=?,iCPhone2=?,iCPhone3=?,iCID=?,DateOfBirth=?,\"\n                + \"DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,\"\n                + \"BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, MessageFilter=? WHERE MID=?\");\n        patientLoader.loadParameters(ps, p);\n        ps.setLong(40, p.getMID());\n        ps.executeUpdate();\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/\n/**\n * This class represents a database access object for managing patient records in the system. It provides methods for inserting, updating, and retrieving patient information from the database. \n * \n * The main functionalities of this class include:\n * - Inserting a new patient record into the database\n * - Updating an existing patient record in the database\n * - Loading patient information from the database\n * - Checking if a patient with a given ID exists in the database\n * - Retrieving declared healthcare providers for a specific patient\n * \n * The class follows a standard JDBC pattern for database interactions, handling connections, prepared statements, and result sets. It also includes error handling for SQLExceptions and DBExceptions that may occur during database operations.\n * \n * Overall, this class serves as a bridge between the application and the database, allowing for seamless management of patient data within the system.\n * \n * @author [Your Name]\n * @version 1.0\n */\n*/\nSure, here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a data access object (DAO) for managing declared healthcare providers (HCPs) for patients in a medical system.\n * It provides methods for retrieving a list of declared HCPs for a given patient ID, as well as adding new declared HCPs to the system.\n * \n * The main functionalities of this class include:\n * - Retrieving a list of declared HCPs for a specified patient ID from the database\n * - Adding new declared HCPs to the system by inserting records into the DeclaredHCP table\n * \n * The overall behavior of this class is to interact with the database to manage the relationships between patients and their declared HCPs.\n * It ensures data integrity by validating patient and HCP IDs before performing database operations.\n * \n * @author [Your Name]\n * @version 1.0\n * @since [Date]\n */\n/**\n * The DeclaredHCPController class is responsible for managing the declaration and undeclaration of healthcare providers (HCPs) for patients in the database.\n * It provides methods to declare an HCP for a patient and to undeclare an HCP for a patient.\n * \n * The main functionalities of this class include:\n * - Declaring an HCP for a specific patient by inserting a record into the DeclaredHCP table.\n * - Undeclaring an HCP for a patient by deleting the corresponding record from the DeclaredHCP table.\n * \n * The class ensures that each patient can have only one HCP declared at a time, preventing duplicate declarations.\n * \n * Overall behavior:\n * - When declaring an HCP for a patient, the class checks if the HCP has already been declared for the patient and throws an iTrustException if so.\n * - When undeclaring an HCP for a patient, the class deletes the record from the DeclaredHCP table and returns a boolean indicating the success of the operation.\n * - Both methods handle any SQL exceptions that may occur during database operations by throwing a DBException.\n * \n * @author [Your Name]\n * @version 1.0\n */\n```\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a database utility for managing healthcare providers (HCPs) and patients.\n * It provides methods for declaring and undeclaring HCPs for patients, as well as checking if a patient\n * has declared a specific HCP. The class interacts with the database to perform these operations.\n * \n * The main functionalities of this class include:\n * - Declaring a healthcare provider for a patient\n * - Undeclaring a healthcare provider for a patient\n * - Checking if a patient has declared a specific healthcare provider\n * \n * The class ensures that database connections are properly opened and closed, and handles any exceptions\n * that may occur during database operations. It provides a convenient interface for managing relationships\n * between patients and healthcare providers in the database.\n * \n * @author [Your Name]\n * @version 1.0\n * @since [Date]\n */\n \nI hope this helps clarify the purpose and functionality of the class! Let me know if you need any further assistance.\n/**\n * The PatientRepresentativeDAO class provides methods for retrieving lists of patients based on representation relationships.\n * It interacts with the database to fetch data related to patient representation.\n * \n * This class includes methods to get a list of patients that a given patient represents and a list of patients that represent a given patient.\n * \n * The getRepresented method retrieves a list of patients that the given patient represents based on the provided patient ID.\n * \n * The getRepresenting method retrieves a list of patients that represent the given patient based on the provided patient ID.\n * \n * Both methods handle database connections, execute SQL queries, and load the results into a list of PatientBean objects.\n * \n * @author [Your Name]\n * @version 1.0\n */\n**/\n/**\n * This class represents a data access object for managing representations between patients and their representatives in the database.\n * It provides methods to check if a representation exists, retrieve representing patients, and create new representations.\n * \n * The main functionalities of this class include:\n * - Checking if a given pair of representers and representees exists in the Representatives table\n * - Retrieving a list of PatientBeans representing the patients associated with a given representee MID\n * - Creating a new representation between a representer and a representee in the database\n * \n * The overall behavior of this class is to interact with the database to manage representations between patients and their representatives.\n * \n * @throws DBException if there is an error accessing the database\n */\n**/\n/**\n * This class represents a database utility for managing representatives in the iTrust system.\n * It provides methods to add and remove representatives from the database.\n * \n * The main functionalities of this class include:\n * - Adding a representative to the database with the specified representer and representee IDs.\n * - Removing a representative from the database based on the representer and representee IDs.\n * \n * The behavior of this class is as follows:\n * - When adding a representative, it checks if the representer already represents the representee and throws an iTrustException if so.\n * - When removing a representative, it deletes the corresponding entry from the Representatives table in the database.\n * \n * @author [Your Name]\n * @version 1.0\n * \n * @see DBUtil\n * @see iTrustException\n * @see DBException\n */\n*/\n*/\" }, { \"body\": \"Optional[{\\r\\n Connection conn = null;\\r\\n PreparedStatement ps = null;\\r\\n try {\\r\\n conn = factory.getConnection();\\r\\n ps = conn.prepareStatement(\\\"SELECT * FROM OVDiagnosis ovd, OfficeVisits ov, ICDCodes icd \\\" + \\\"WHERE ovd.VisitID=ov.ID and icd.Code=ovd.ICDCode and ov.ID=?\\\");\\r\\n ps.setLong(1, visitID);\\r\\n ResultSet rs = ps.executeQuery();\\r\\n return diagnosisLoader.loadList(rs);\\r\\n } catch (SQLException e) {\\r\\n e.printStackTrace();\\r\\n throw new DBException(e);\\r\\n } finally {\\r\\n DBUtil.closeConnection(conn, ps);\\r\\n }\\r\\n}]\", \"hasComment\": true, \"hasInnerComment\": false, \"signature\": \"public List<DiagnosisBean> getDiagnosesByOfficeVisit(long)\", \"comments\": \"Optional[/**\\r\\n * Return a list of all diagnoses for a given office visit\\r\\n *\\r\\n * @param visitID The unique identifier of the office visit\\n * @return A java.util.List of Diagnoses.\\r\\n * @throws DBException\\r\\n */\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Retrieves a list of DiagnosisBean objects for a given office visit ID.\\n * \\n * @param visitID the unique identifier of the office visit\\n * @return a list of DiagnosisBean objects representing the diagnoses for the specified office visit\\n * @throws DBException if there is an error accessing the database\\n */\" }]\n/**\n * This class represents a data access object for retrieving procedures associated with a patient.\n * It provides methods to retrieve a list of procedures for a given patient ID.\n * \n * The main functionalities of this class include:\n * - Retrieving a list of procedures for a specific patient ID\n * \n * The overall behavior of this class is to interact with the database to fetch procedure data based on the patient ID provided.\n * \n * @param pid the patient ID for which to retrieve procedures\n * @return a list of ProcedureBeans associated with the specified patient ID\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the patient ID is 0 or if there is an error executing the SQL query\n */\npublic List<ProcedureBean> getProcedures(long pid) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (pid == 0L)\n            throw new SQLException(\"pid cannot be 0\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt \" + \"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? \" + \"ORDER BY ov.visitDate desc\");\n        ps.setLong(1, pid);\n        ResultSet rs = ps.executeQuery();\n        return procedureLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/\n/**\n * This class represents a database utility for retrieving immunization procedures for a given patient.\n * It provides methods for accessing the database, executing SQL queries, and loading procedure data.\n * The main functionality of this class is to retrieve a list of immunization procedures based on a patient ID.\n * It handles database connections, prepares SQL statements, and processes result sets to return a list of ProcedureBean objects.\n * \n * @author [Your Name]\n * @version 1.0\n * @since [Date]\n */\npublic class ImmunizationProcedureDAO {\n    \n    /**\n     * Retrieves a list of immunization procedures for a given patient ID.\n     * \n     * @param pid the patient ID for which to retrieve immunization procedures\n     * @return a list of ProcedureBean objects representing the immunization procedures\n     * @throws DBException if there is an error accessing the database\n     * @throws SQLException if the patient ID is 0 or if there is an error executing the SQL query\n     */\n    public List<ProcedureBean> getImmunizationProcedures(long pid) {\n        Connection conn = null;\n        PreparedStatement ps = null;\n        try {\n            if (pid == 0L)\n                throw new SQLException(\"pid cannot be 0\");\n            conn = factory.getConnection();\n            ps = conn.prepareStatement(\"Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt \" + \n                \"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? and cpt.attribute='immunization'\" + \n                \"ORDER BY ov.visitDate desc\");\n            ps.setLong(1, pid);\n            ResultSet rs = ps.executeQuery();\n            return procedureLoader.loadList(rs);\n        } catch (SQLException e) {\n            e.printStackTrace();\n            throw new DBException(e);\n        } finally {\n            DBUtil.closeConnection(conn, ps);\n        }\n    }\n}\n*/\n/**\n * This class represents a database access object for retrieving prescription information for a patient.\n * It contains methods to retrieve a list of prescriptions for a given patient ID.\n * The class interacts with the database to fetch prescription data and return it as a List of PrescriptionBeans.\n * \n * The main functionalities of this class include:\n * - Retrieving a list of prescriptions for a specific patient based on their ID\n * - Handling database connections and queries to fetch prescription information\n * - Throwing DBException if there is an error accessing the database or SQLException if the patientID is 0\n * \n * Overall, this class provides a convenient way to access prescription data for patients and encapsulates the database operations\n * required to retrieve and process this information.\n *\n * @author [Your Name]\n * @version 1.0\n * @since [Date]\n */\npublic class PrescriptionDAO {\n    /**\n     * Retrieves a list of PrescriptionBeans for a given patient ID.\n     * \n     * @param patientID the ID of the patient for whom to retrieve prescriptions\n     * @return a List of PrescriptionBeans containing information about the prescriptions\n     * @throws DBException if there is an error accessing the database\n     * @throws SQLException if the patientID is 0\n     */\n    public List<PrescriptionBean> getPrescriptions(long patientID) {\n        Connection conn = null;\n        PreparedStatement ps = null;\n        try {\n            if (patientID == 0L) {\n                throw new SQLException(\"pid cannot be 0\");\n            }\n            conn = factory.getConnection();\n            ps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \" + \n                    \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \" + \n                    \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode \" + \n                    \"ORDER BY OfficeVisits.visitDate DESC, OVMedication.NDCode ASC;\");\n            ps.setLong(1, patientID);\n            ResultSet rs = ps.executeQuery();\n            return prescriptionLoader.loadList(rs);\n        } catch (SQLException e) {\n            e.printStackTrace();\n            throw new DBException(e);\n        } finally {\n            DBUtil.closeConnection(conn, ps);\n        }\n    }\n}\n*/\n/**\n * This class is responsible for retrieving a list of current prescriptions for a patient. It connects to the database and executes a query to fetch the necessary data. The main functionality of this class is to return a list of prescription beans that are currently prescribed for a specific patient.\n * \n * The method getCurrentPrescriptions(long patientID) takes the patient's medical record ID as input and queries the database to retrieve the relevant prescription information. It ensures that the patientID is not 0 and then constructs a SQL query to fetch the required data. It then processes the ResultSet to create a list of prescription beans and returns it.\n * \n * This class handles SQLExceptions by printing the stack trace and throwing a DBException. It also ensures that the database connection is closed properly in the finally block.\n * \n * @param patientID The medical record ID of the patient for whom current prescriptions are being retrieved.\n * @return A java.util.List of prescription beans representing the current prescriptions for the patient.\n * @throws DBException If there is an issue with the database connection or query execution.\n */\n*/\n/**\n * This class provides a method to retrieve the current prescriptions for a given patient ID.\n * \n * @param patientID the ID of the patient for whom to retrieve prescriptions\n * @return a list of PrescriptionBean objects representing the current prescriptions for the patient\n * @throws DBException if there is an error accessing the database\n * @throws SQLException if the patient ID is 0 or if there is an error executing the SQL query\n */\npublic List<PrescriptionBean> getCurrentPrescriptions(long patientID) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        if (patientID == 0L)\n            throw new SQLException(\"pid cannot be 0\");\n        conn = factory.getConnection();\n        ps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \" + \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \" + \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND \" + \"OVMedication.EndDate >= ?\" + \"ORDER BY OVMedication.ID DESC;\");\n        ps.setLong(1, patientID);\n        ps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(91));\n        ResultSet rs = ps.executeQuery();\n        return prescriptionLoader.loadList(rs);\n    } catch (SQLException e) {\n        e.printStackTrace();\n        throw new DBException(e);\n    } finally {\n        DBUtil.closeConnection(conn, ps);\n    }\n}\n*/\n\", \"comments\": null, \"innerComments\": null, \"generated_comment\": \"/**\\n * Retrieves a list of all patients from the database.\\n * \\n * @return a list of PatientBean objects representing all patients in the database\\n * @throws DBException if there is an error accessing the database\\n * @throws SQLException if there is an error executing the SQL query\\n */\\npublic List<PatientBean> getAllPatients() {\\n Connection conn = null;\\n PreparedStatement ps = null;\\n try {\\n conn = factory.getConnection();\\n ps = conn.prepareStatement(\\\"SELECT * FROM patients\\\");\\n ResultSet rs = ps.executeQuery();\\n return patientLoader.loadList(rs);\\n } catch (SQLException e) {\\n e.printStackTrace();\\n throw new DBException(e);\\n } finally {\\n DBUtil.closeConnection(conn, ps);\\n }\\n}\\n*/\" }]\n/**\n * This class provides a method to retrieve a list of all patients from the database based on specific criteria.\n * The getAllPatients method queries the database to find patients who meet certain conditions, including having specific diagnoses\n * and medications within a certain time frame. The list of patients is then returned as a List of PatientBean objects.\n * \n * @return A List of PatientBean objects representing all patients in the database that meet the specified criteria.\n * @throws DBException if there is an error accessing the database.\n */\n*/\n/**\n * This class provides methods to retrieve information about patients based on various criteria.\n * It includes methods to search for patients by name, retrieve a list of patients in need of medication renewal,\n * and other related functionalities.\n * \n * The main functionalities of this class include:\n * - Searching for patients by first and last name\n * - Retrieving a list of patients with a special diagnosis history who have medications expiring within seven days\n * \n * The behavior of this class involves connecting to a database, executing SQL queries to retrieve patient information,\n * and handling any exceptions that may occur during the process.\n * \n * This class is essential for healthcare providers to efficiently access patient information and manage medication renewal needs.\n * \n * @author [Your Name]\n * @version 1.0\n */\n**/\n/**\n * The PatientDAO class represents a Data Access Object for managing patient data in the database.\n * It provides methods for searching, retrieving, updating, and deleting patient records.\n * This class interacts with the database through a DAOFactory to perform CRUD operations on patient data.\n * \n * The main functionalities of this class include:\n * - Searching for patients with a given first and last name using the searchPatients method.\n * - Retrieving patient information such as diagnoses, prescriptions, and procedures using various loaders.\n * - Updating patient records with new information or changes.\n * - Deleting patient records from the database.\n * \n * The overall behavior of this class is to serve as a bridge between the application and the database,\n * allowing for seamless interaction with patient data. It handles database connections, queries, and data retrieval\n * to provide a smooth experience for managing patient information.\n * \n * Note: This class is designed to work with a specific DAOFactory implementation for database operations.\n */\n*/\n/**\n * The procedureLoader class is responsible for loading and executing stored procedures in a database.\n * It provides methods for connecting to the database, loading procedures, and executing them.\n * The main functionalities of this class include:\n * - Establishing a connection to the database\n * - Loading stored procedures from a specified directory\n * - Executing stored procedures with the given input parameters\n * \n * The overall behavior of this class is to facilitate the execution of stored procedures in a database by providing a simple and efficient way to connect to the database, load procedures, and execute them with the necessary input parameters. This class is designed to streamline the process of working with stored procedures in a database and make it easier for developers to interact with and manipulate data in the database using procedures.\n */"
    }
]