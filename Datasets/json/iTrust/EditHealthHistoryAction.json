[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return authDAO.getUserName(pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getPatientName()",
                "comments": "Optional[/**\r\n * returns the patient name\r\n *\r\n * @return patient name\r\n * @throws DBException\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the name of the patient associated with the given patient ID.\n * \n * @param pid the unique identifier of the patient\n * @return the name of the patient as a String\n */"
            },
            {
                "body": "Optional[{\r\n    validator.validate(hr);\r\n    HealthRecord record = transferForm(pid, hr);\r\n    hrDAO.add(record);\r\n    transDAO.logTransaction(TransactionType.ENTER_EDIT_PHR, loggedInMID, pid, \"EditHealthHistory - Add Record\");\r\n    return \"Information Recorded\";\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String addHealthRecord(long, HealthRecordForm)",
                "comments": "Optional[/**\r\n * Adds a health record for the given patient\r\n *\r\n * @param pid  The patient record who is being edited.\r\n * @param hr  The filled out health record form to be added.\r\n * @return message - \"Information Recorded\" or exception's message\r\n * @throws FormValidationException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a health record to the database for a specified patient.\n * \n * @param pid the patient ID for whom the health record is being added\n * @param hr the HealthRecordForm object containing the health record information\n * @return a message indicating that the information has been successfully recorded\n */\npublic String addHealthRecord(long pid, HealthRecordForm hr) {\n    validator.validate(hr);\n    HealthRecord record = transferForm(pid, hr);\n    hrDAO.add(record);\n    transDAO.logTransaction(TransactionType.ENTER_EDIT_PHR, loggedInMID, pid, \"EditHealthHistory - Add Record\");\n    return \"Information Recorded\";\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    HealthRecord record = new HealthRecord();\r\n    record.setPatientID(pid);\r\n    record.setPersonnelID(loggedInMID);\r\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\r\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\r\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\r\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\r\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\r\n    if (record.getTotalCholesterol() < 100 || record.getTotalCholesterol() > 600)\r\n        throw new FormValidationException(\"Total cholesterol must be in [100,600]\");\r\n    record.setHeight(Double.valueOf(form.getHeight()));\r\n    record.setWeight(Double.valueOf(form.getWeight()));\r\n    record.setSmoker(Boolean.valueOf(form.getIsSmoker()));\r\n    return record;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private HealthRecord transferForm(long, HealthRecordForm)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Transfers data from a HealthRecordForm object to a HealthRecord object.\n * \n * @param pid the patient ID associated with the health record\n * @param form the HealthRecordForm object containing the data to transfer\n * @return a HealthRecord object with the transferred data\n * @throws FormValidationException if the total cholesterol is not within the range [100, 600]\n */\n \nprivate HealthRecord transferForm(long pid, HealthRecordForm form) {\n    HealthRecord record = new HealthRecord();\n    record.setPatientID(pid);\n    record.setPersonnelID(loggedInMID);\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\n    \n    if (record.getTotalCholesterol() < 100 || record.getTotalCholesterol() > 600)\n        throw new FormValidationException(\"Total cholesterol must be in [100,600\");\n    \n    record.setHeight(Double.valueOf(form.getHeight()));\n    record.setWeight(Double.valueOf(form.getWeight()));\n    record.setSmoker(Boolean.valueOf(form.getIsSmoker()));\n    \n    return record;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    transDAO.logTransaction(TransactionType.VIEW_HEALTH_RECORDS, loggedInMID, pid, \"EditHealthHistory - View Records\");\r\n    return hrDAO.getAllHealthRecords(pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<HealthRecord> getAllHealthRecords(long)",
                "comments": "Optional[/**\r\n * Returns a list of all HealthRecords for the given patient\r\n *\r\n * @param pid  The ID of the patient to look up\r\n * @return list of HealthRecords\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves all health records for a given patient ID.\n * \n * @param pid the patient ID for which to retrieve health records\n * @return a list of HealthRecord objects containing all health records for the specified patient\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(factory, pidString);\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public EditHealthHistoryAction(DAOFactory, long, String)",
                "comments": "Optional[/**\r\n * The patient ID is validated by the superclass\r\n *\r\n * @param factory The DAOFactory which will be used to generate the DAOs used for this action.\r\n * @param loggedInMID The user authorizing this action.\r\n * @param pidString The patient (or other user) who is being edited.\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new EditHealthHistoryAction object with the specified DAOFactory, patient ID, and logged in MID.\n * This constructor initializes the EditHealthHistoryAction object with the given DAOFactory, patient ID, and logged in MID.\n * It also initializes the health records DAO, authorization DAO, and transaction DAO using the DAOFactory.\n * \n * @param factory the DAOFactory to be used for accessing data access objects\n * @param pidString the patient ID as a String\n * @param loggedInMID the logged in MID of the user performing the action\n */"
            }
        ],
        "signature": "EditHealthHistoryAction",
        "variables": [
            "private TransactionDAO transDAO",
            "private HealthRecordsDAO hrDAO",
            "private AuthDAO authDAO",
            "private long loggedInMID",
            "private HealthRecordFormValidator validator"
        ],
        "generated_class_comment": "Sure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * The AuthManager class is responsible for managing authentication and authorization within the system.\n * It provides methods for retrieving patient names and adding health records to the database.\n * \n * This class interacts with the AuthDAO, HealthRecordDAO, and TransactionDAO to perform its functionalities.\n * \n * The main functionalities of this class include:\n * - Retrieving the name of a patient associated with a given patient ID\n * - Adding a health record for a specified patient\n * \n * The overall behavior of this class is to ensure secure access to patient information and maintain accurate health records.\n * \n * @author [Your Name]\n * @version 1.0\n */\n/**\n * This class represents a utility for transferring data from a HealthRecordForm object to a HealthRecord object.\n * It provides a method to transfer data and perform validation on the transferred data.\n * \n * The main functionalities of this class include:\n * - Transferring data from a HealthRecordForm object to a HealthRecord object\n * - Setting various health record attributes such as blood pressure, cholesterol levels, height, weight, and smoking status\n * - Validating the total cholesterol level to ensure it falls within the range [100, 600]\n * \n * The overall behavior of this class is to facilitate the transfer of health record data and ensure the integrity of the transferred data.\n * If the total cholesterol level is not within the specified range, a FormValidationException is thrown.\n * \n * @param pid the patient ID associated with the health record\n * @param form the HealthRecordForm object containing the data to transfer\n * @return a HealthRecord object with the transferred data\n * @throws FormValidationException if the total cholesterol is not within the range [100, 600]\n */\n \nprivate HealthRecord transferForm(long pid, HealthRecordForm form) {\n    HealthRecord record = new HealthRecord();\n    record.setPatientID(pid);\n    record.setPersonnelID(loggedInMID);\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\n    \n    if (record.getTotalCholesterol() < 100 || record.getTotalCholesterol() > 600) {\n        throw new FormValidationException(\"Total cholesterol must be in [100,600]\");\n    }\n    \n    record.setHeight(Double.valueOf(form.getHeight()));\n    record.setWeight(Double.valueOf(form.getWeight()));\n    record.setSmoker(Boolean.valueOf(form.getIsSmoker()));\n    \n    return record;\n}\n*/\n* Constructs a new EditHealthHistoryAction object with the specified DAOFactory, logged-in user ID, and patient ID.\n * This class is responsible for handling actions related to editing health history records for a patient.\n * It initializes the HealthRecordsDAO, AuthDAO, and TransactionDAO using the provided DAOFactory.\n * The logged-in user ID is stored for authorization purposes.\n * The patient ID is validated by the superclass.\n *\n * @param factory The DAOFactory which will be used to generate the DAOs used for this action.\n * @param loggedInMID The user authorizing this action.\n * @param pidString The patient (or other user) who is being edited.\n * @throws iTrustException if there is an issue with initializing the DAOs or validating the patient ID.\n */\n/**\n * The EditHealthHistoryAction class represents an action that allows a user to edit the health history of a patient.\n * This class is responsible for initializing the EditHealthHistoryAction object with the specified DAOFactory, patient ID, and logged in MID.\n * It also initializes the health records DAO, authorization DAO, and transaction DAO using the DAOFactory.\n * \n * The main functionalities of this class include:\n * - Editing the health history of a patient\n * - Validating the health record form\n * - Accessing and updating health records data\n * - Checking authorization for the logged in user\n * \n * The overall behavior of this class is to provide a way for users to edit the health history of a patient securely and efficiently.\n * \n * @param factory the DAOFactory to be used for accessing data access objects\n * @param pidString the patient ID as a String\n * @param loggedInMID the logged in MID of the user performing the action\n */\n**/"
    }
]