[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"HCP ID\", form.getHcpID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Hospital ID\", form.getHospitalID(), ValidationFormat.HOSPITAL_ID, true));\r\n    errorList.addIfNotNull(checkFormat(\"Notes\", form.getNotes(), ValidationFormat.NOTES, true));\r\n    errorList.addIfNotNull(checkFormat(\"Patient ID\", form.getPatientID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Visit Date\", form.getVisitDate(), ValidationFormat.DATE, false));\r\n    if (validatePrescription) {\r\n        errorList.addIfNotNull(checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false));\r\n        errorList.addIfNotNull(checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false));\r\n        errorList.addIfNotNull(checkFormat(\"Instructions\", form.getInstructions(), ValidationFormat.NOTES, true));\r\n        errorList.addIfNotNull(checkInt(\"Dosage\", form.getDosage(), 0, 9999, false));\r\n        if ((checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false)) == \"\" && (checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false)) == \"\") {\r\n            Date sd = null;\r\n            Date ed = null;\r\n            try {\r\n                sd = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getStartDate());\r\n                ed = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getEndDate());\r\n                String dateError = null;\r\n                if (sd.after(ed)) {\r\n                    dateError = \"The start date of the prescription must be before the end date.\";\r\n                }\r\n                errorList.addIfNotNull(dateError);\r\n            } catch (ParseException e) {\r\n                errorList.addIfNotNull(ValidationFormat.DATE.getDescription());\r\n            }\r\n        }\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void validate(EditOfficeVisitForm)",
                "comments": "Optional[/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p A bean of the type to be validated.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Validates the fields of an EditOfficeVisitForm object based on specified validation formats.\n * \n * @param form the EditOfficeVisitForm object to validate\n * @param validatePrescription a boolean indicating whether to validate prescription fields\n * @throws FormValidationException if any validation errors are found\n */\npublic void validate(EditOfficeVisitForm form, boolean validatePrescription) {\n    ErrorList errorList = new ErrorList();\n    // Validate HCP ID, Hospital ID, Notes, Patient ID, and Visit Date fields\n    errorList.addIfNotNull(checkFormat(\"HCP ID\", form.getHcpID(), ValidationFormat.MID, false));\n    errorList.addIfNotNull(checkFormat(\"Hospital ID\", form.getHospitalID(), ValidationFormat.HOSPITAL_ID, true));\n    errorList.addIfNotNull(checkFormat(\"Notes\", form.getNotes(), ValidationFormat.NOTES, true));\n    errorList.addIfNotNull(checkFormat(\"Patient ID\", form.getPatientID(), ValidationFormat.MID, false));\n    errorList.addIfNotNull(checkFormat(\"Visit Date\", form.getVisitDate(), ValidationFormat.DATE, false));\n    \n    // Validate prescription fields if specified\n    if (validatePrescription) {\n        errorList.addIfNotNull(checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false));\n        errorList.addIfNotNull(checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false));\n        errorList.addIfNotNull(checkFormat(\"Instructions\", form.getInstructions(), ValidationFormat.NOTES, true));\n        errorList.addIfNotNull(checkInt(\"Dosage\", form.getDosage(), 0, 9999, false));\n        \n        // Check if start date is before end date\n        if ((checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false)) == \"\" && (checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false)) == \"\") {\n            Date sd = null;\n            Date ed = null;\n            try {\n                sd = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getStartDate());\n                ed = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getEndDate());\n                String dateError = null;\n                if (sd.after(ed)) {\n                    dateError = \"The start date of the prescription must be before the end date.\";\n                }\n                errorList.addIfNotNull(dateError);\n            } catch (ParseException e) {\n                errorList.addIfNotNull(ValidationFormat.DATE.getDescription());\n            }\n        }\n    }\n    \n    // Throw exception if any errors are found\n    if (errorList.hasErrors())\n        throw new FormValidationException(errorList);\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public EditOfficeVisitValidator()",
                "comments": "Optional[/**\r\n * The default constructor.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This class represents a validator for editing office visit information.\n * It does not take any parameters.\n * \n * Constructor for creating an instance of EditOfficeVisitValidator.\n */"
            },
            {
                "body": "{\r\n    this.validatePrescription = validatePrescription;\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public EditOfficeVisitValidator(boolean)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new EditOfficeVisitValidator with the specified boolean value to indicate whether prescription validation is enabled.\n * \n * @param validatePrescription a boolean value indicating whether prescription validation is enabled\n * \n * The constructor initializes the EditOfficeVisitValidator with the specified boolean value for prescription validation. \n * This value will be used to determine whether prescription validation should be performed during office visit editing.\n */"
            }
        ],
        "signature": "EditOfficeVisitValidator",
        "variables": [
            "private boolean validatePrescription"
        ],
        "generated_class_comment": "/**\n * This class represents a validator for the EditOfficeVisitForm. It contains a method to validate the form data\n * before processing it further. The main functionalities of this class include checking the format of various fields\n * in the form such as HCP ID, Hospital ID, Notes, Patient ID, Visit Date, Start Date, End Date, Instructions, and Dosage.\n * It also validates the prescription details if required.\n * \n * The validate method takes an EditOfficeVisitForm object as input and checks the format of each field using predefined\n * ValidationFormat enums. It then constructs an ErrorList object to store any validation errors encountered during the process.\n * If the form data is invalid, an exception of type FormValidationException is thrown with the list of errors.\n * \n * Additionally, this class ensures that the start date of the prescription is before the end date by comparing the dates\n * and generating an error message if necessary.\n * \n * Overall, this class provides a robust validation mechanism for the EditOfficeVisitForm to ensure data integrity and accuracy.\n */\npublic void validate(EditOfficeVisitForm form) {\n    // validation logic goes here\n}\n */\n/**\n * This class is responsible for validating the fields of an EditOfficeVisitForm object based on specified validation formats.\n * It contains a method called validate() that takes an EditOfficeVisitForm object and a boolean flag to indicate whether to validate prescription fields.\n * \n * The validate() method checks the HCP ID, Hospital ID, Notes, Patient ID, and Visit Date fields of the EditOfficeVisitForm object for proper formatting.\n * If any validation errors are found, a FormValidationException is thrown with details of the errors.\n * \n * If the validatePrescription flag is set to true, the prescription fields (Start Date, End Date, Instructions, and Dosage) are also validated.\n * The method ensures that the Start Date and End Date are in the correct date format, Instructions are in the correct format, and Dosage is within a specified range.\n * \n * Additionally, the method checks if the Start Date is before the End Date to ensure logical consistency in the prescription dates.\n * \n * Overall, this class provides a comprehensive validation mechanism for the EditOfficeVisitForm object, ensuring that all fields are properly formatted and consistent.\n */\npublic class EditOfficeVisitFormValidator {\n    // Validation logic implementation goes here\n}\n*/\n/**\n * This class represents a validator for editing office visit information.\n * It provides methods to validate and ensure the correctness of the data entered during the editing process.\n * The class includes functionalities to validate prescription information based on the specified boolean value.\n * \n * The EditOfficeVisitValidator class has two constructors: a default constructor and a parameterized constructor that takes a boolean value to indicate whether prescription validation is enabled.\n * \n * Constructor for creating an instance of EditOfficeVisitValidator.\n * \n * The class includes methods to validate the start and end dates of the prescription, ensuring that the start date is before the end date.\n * If any errors are found during the validation process, a FormValidationException is thrown with the error messages.\n * \n * The main purpose of this class is to provide validation for editing office visit information, with the option to validate prescription details based on the specified boolean value.\n */\n **/"
    }
]