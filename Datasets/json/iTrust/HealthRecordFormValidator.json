[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkInt(\"Systolic blood pressure\", bean.getBloodPressureN(), 0, 999, false));\r\n    errorList.addIfNotNull(checkInt(\"Diastolic blood pressure\", bean.getBloodPressureD(), 0, 999, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol HDL\", bean.getCholesterolHDL(), 0, 89, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol LDL\", bean.getCholesterolLDL(), 0, 600, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol Triglycerides\", bean.getCholesterolTri(), 100, 600, false));\r\n    errorList.addIfNotNull(checkFormat(\"Height\", bean.getHeight(), ValidationFormat.Height, false));\r\n    errorList.addIfNotNull(checkFormat(\"Weight\", bean.getWeight(), ValidationFormat.Weight, false));\r\n    errorList.addIfNotNull(checkBoolean(\"Smoker\", bean.getIsSmoker()));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void validate(HealthRecordForm)",
                "comments": "Optional[/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p A bean of the type to be validated.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Validates the health record form by checking the values of various health parameters.\n * \n * @param form the HealthRecordForm object containing the health parameters to be validated\n * @throws FormValidationException if any of the health parameters fail validation\n */\npublic void validate(HealthRecordForm form) {\n    ErrorList errorList = new ErrorList();\n    errorList.addIfNotNull(checkInt(\"Systolic blood pressure\", form.getBloodPressureN(), 0, 999, false));\n    errorList.addIfNotNull(checkInt(\"Diastolic blood pressure\", form.getBloodPressureD(), 0, 999, false));\n    errorList.addIfNotNull(checkInt(\"Cholesterol HDL\", form.getCholesterolHDL(), 0, 89, false));\n    errorList.addIfNotNull(checkInt(\"Cholesterol LDL\", form.getCholesterolLDL(), 0, 600, false));\n    errorList.addIfNotNull(checkInt(\"Cholesterol Triglycerides\", form.getCholesterolTri(), 100, 600, false));\n    errorList.addIfNotNull(checkFormat(\"Height\", form.getHeight(), ValidationFormat.Height, false));\n    errorList.addIfNotNull(checkFormat(\"Weight\", form.getWeight(), ValidationFormat.Weight, false));\n    errorList.addIfNotNull(checkBoolean(\"Smoker\", form.getIsSmoker()));\n    \n    if (errorList.hasErrors()) {\n        throw new FormValidationException(errorList);\n    }\n}\n*/"
            }
        ],
        "constructors": [],
        "signature": "HealthRecordFormValidator",
        "variables": [],
        "generated_class_comment": "/**\n * This class represents a validator for a HealthRecordForm object, which is used to validate various health parameters such as blood pressure, cholesterol levels, height, weight, and smoking status.\n * The main functionality of this class is to validate the HealthRecordForm object by checking the values of the health parameters against specified ranges and formats.\n * If any of the health parameters fail validation, a FormValidationException is thrown.\n * \n * The validate method in this class performs the actual validation process by checking each health parameter and adding any validation errors to an ErrorList.\n * If there are any validation errors present in the ErrorList after validation, a FormValidationException is thrown.\n * \n * Overall, this class provides a way to ensure that the health parameters in a HealthRecordForm object meet certain criteria and are valid for further processing.\n */\npublic class HealthRecordFormValidator {\n    // methods and attributes of the class\n}\n**/\n/**\n * The HealthRecordFormValidator class is responsible for validating the input data from a health record form.\n * It performs various checks on the cholesterol levels (HDL, LDL, and Triglycerides), height, weight, and smoker status.\n * \n * The main functionalities of this class include:\n * - Validating the Cholesterol HDL level within the range of 0 to 89.\n * - Validating the Cholesterol LDL level within the range of 0 to 600.\n * - Validating the Cholesterol Triglycerides level within the range of 100 to 600.\n * - Validating the format of the Height input using the ValidationFormat.Height format.\n * - Validating the format of the Weight input using the ValidationFormat.Weight format.\n * - Validating the smoker status to ensure it is a boolean value.\n * \n * If any validation errors are detected during the validation process, an error list is generated and a FormValidationException is thrown.\n * \n * Example usage:\n * HealthRecordFormValidator validator = new HealthRecordFormValidator();\n * validator.validate(form);\n * \n * @author [Your Name]\n * @version 1.0\n */"
    }
]