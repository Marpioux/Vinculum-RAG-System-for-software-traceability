[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return reportRequestDAO.getAllReportRequestsForRequester(loggedInMID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<ReportRequestBean> getAllReportRequestsForRequester()",
                "comments": "Optional[/**\r\n * Returns all the reports for the currently logged in HCP\r\n *\r\n * @return list of all reports for the logged in HCP\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of report request beans for the currently logged in requester.\n * \n * @return A list of ReportRequestBean objects representing all report requests made by the logged in requester.\n */"
            },
            {
                "body": "Optional[{\r\n    long id = reportRequestDAO.addReportRequest(loggedInMID, patientMID, Calendar.getInstance().getTime());\r\n    transDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID, patientMID, \"Added comprehensive report request\");\r\n    return id;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public long addReportRequest(long)",
                "comments": "Optional[/**\r\n * Adds a report request to the list\r\n *\r\n * @param patientMID ID of the patient that the report request is for\r\n * @return\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Adds a comprehensive report request for a patient.\n * \n * @param loggedInMID the MID of the logged-in user making the request\n * @param patientMID the MID of the patient for whom the report is being requested\n * @return the ID of the added report request\n */\npublic long addReportRequest(long loggedInMID, long patientMID) {\n    long id = reportRequestDAO.addReportRequest(loggedInMID, patientMID, Calendar.getInstance().getTime());\n    transDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID, patientMID, \"Added comprehensive report request\");\n    return id;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    return reportRequestDAO.getReportRequest(ID);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ReportRequestBean getReportRequest(int)",
                "comments": "Optional[/**\r\n * Returns the requested report\r\n *\r\n * @param ID id of the requested report\r\n * @return the requested report\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a ReportRequestBean object based on the provided ID.\n * \n * @param ID the unique identifier of the report request to retrieve\n * @return the ReportRequestBean object corresponding to the provided ID\n */"
            },
            {
                "body": "Optional[{\r\n    //\t\tReportRequestBean rr = reportRequestDAO.getReportRequest(ID);\r\n    reportRequestDAO.setViewed(ID, Calendar.getInstance().getTime());\r\n    transDAO.logTransaction(TransactionType.COMPREHENSIVE_REPORT_REQUEST, loggedInMID, 0L, \"Viewed comprehensive report\");\r\n    //new EmailUtil(factory).sendEmail(makeEmailView(rr.getApproverMID(), rr.getRequesterMID(), rr\r\n    //\t.getPatientMID()));\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public void setViewed(int)",
                "comments": "Optional[/**\r\n * Sets the viewed status of the report.  If the report is \"viewed\" the HCP must request a new one to see it again.\r\n *\r\n * @param ID id of the report\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": "Optional[[//new EmailUtil(factory).sendEmail(makeEmailView(rr.getApproverMID(), rr.getRequesterMID(), rr\r\n, //\t.getPatientMID()));\r\n, //\t\tReportRequestBean rr = reportRequestDAO.getReportRequest(ID);\r\n]]",
                "generated_comment": "/**\n * Sets the viewed status of a report request with the given ID to true and logs the transaction.\n * \n * @param ID the ID of the report request to set as viewed\n * \n * This method sets the viewed status of the report request with the specified ID to true by calling\n * the setViewed method in the reportRequestDAO and passing the current timestamp. It then logs the \n * transaction of viewing a comprehensive report using the transDAO. \n * \n * Note: The email notification functionality is currently commented out and not in use.\n */"
            },
            {
                "body": "Optional[{\r\n    StringBuilder s = new StringBuilder();\r\n    ReportRequestBean r = reportRequestDAO.getReportRequest(id);\r\n    if (r.getStatus().equals(ReportRequestBean.Requested)) {\r\n        PersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\r\n        s.append(String.format(\"Request was requested on %s by %s\", r.getRequestedDateString(), p.getFullName()));\r\n    }\r\n    //\t\tif (r.getStatus().equals(ReportRequestBean.Approved)) {\r\n    //\t\t\tPersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\r\n    //\t\t\tPersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());\r\n    //\t\t\ts.append(String.format(\"Request was requested on %s by %s \", r.getRequestedDateString(), p\r\n    //\t\t\t\t\t.getFullName()));\r\n    //\t\t\ts.append(String.format(\"and approved on %s by %s\", r.getApprovedDateString(), p2.getFullName()));\r\n    //\t\t}\r\n    //\t\tif (r.getStatus().equals(ReportRequestBean.Rejected)) {\r\n    //\t\t\tPersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\r\n    //\t\t\tPersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());\r\n    //\t\t\ts.append(String.format(\"Request was requested on %s by %s \", r.getRequestedDateString(), p\r\n    //\t\t\t\t\t.getFullName()));\r\n    //\t\t\ts.append(String.format(\"and rejected on %s by %s\", r.getApprovedDateString(), p2.getFullName()));\r\n    //\t\t}\r\n    if (r.getStatus().equals(ReportRequestBean.Viewed)) {\r\n        PersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\r\n        //\t\t\tPersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());\r\n        String fullName = \"Unknown\";\r\n        if (p != null) {\r\n            fullName = p.getFullName();\r\n            s.append(String.format(\"Request was requested on %s by %s, \", r.getRequestedDateString(), p.getFullName()));\r\n        }\r\n        //\t\t\ts.append(String.format(\"approved on %s by %s, \", r.getApprovedDateString(), fullName));\r\n        // removed \"<br />\" because it caused unit test to fail and seems to have no\r\n        s.append(\"\");\r\n        // purpose\r\n        s.append(String.format(\"and viewed on %s by %s\", r.getViewedDateString(), fullName));\r\n    }\r\n    return s.toString();\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public String getLongStatus(long)",
                "comments": "Optional[/**\r\n * Gets the status of the request\r\n *\r\n * @param id id of the request\r\n * @return the request's status\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": "Optional[[//\t\tif (r.getStatus().equals(ReportRequestBean.Approved)) {\r\n, //\t\t\tPersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\r\n, //\t\t\tPersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());\r\n, //\t\t\ts.append(String.format(\"Request was requested on %s by %s \", r.getRequestedDateString(), p\r\n, //\t\t\t\t\t.getFullName()));\r\n, //\t\t\ts.append(String.format(\"and approved on %s by %s\", r.getApprovedDateString(), p2.getFullName()));\r\n, //\t\t}\r\n, //\t\tif (r.getStatus().equals(ReportRequestBean.Rejected)) {\r\n, //\t\t\tPersonnelBean p = personnelDAO.getPersonnel(r.getRequesterMID());\r\n, //\t\t\tPersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());\r\n, //\t\t\ts.append(String.format(\"Request was requested on %s by %s \", r.getRequestedDateString(), p\r\n, //\t\t\t\t\t.getFullName()));\r\n, //\t\t\ts.append(String.format(\"and rejected on %s by %s\", r.getApprovedDateString(), p2.getFullName()));\r\n, //\t\t}\r\n, //\t\t\ts.append(String.format(\"approved on %s by %s, \", r.getApprovedDateString(), fullName));\r\n, //\t\t\tPersonnelBean p2 = personnelDAO.getPersonnel(r.getApproverMID());\r\n, // removed \"<br />\" because it caused unit test to fail and seems to have no\r\n, // purpose\r\n]]",
                "generated_comment": "/**\n * Retrieves the long status of a report request based on the provided ID.\n * \n * @param id the ID of the report request\n * @return a string representation of the long status of the report request\n * \n * This method retrieves the report request with the given ID from the reportRequestDAO.\n * If the status of the report request is \"Requested\", it appends the requested date and the full name of the requester to the StringBuilder.\n * If the status is \"Viewed\", it appends the requested date and the full name of the requester, followed by the viewed date and the full name of the requester to the StringBuilder.\n * The final string representation of the long status is returned.\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    this.loggedInMID = loggedInMID;\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    //this.factory = factory;\r\n}",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public ViewMyReportRequestsAction(DAOFactory, long)",
                "comments": "Optional[/**\r\n * Set up\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the person viewing their report requests.\r\n */\r\n]",
                "innerComments": "[//this.factory = factory;\r\n]",
                "generated_comment": "/**\n * Constructs a new ViewMyReportRequestsAction object with the specified DAOFactory and logged in member ID.\n * \n * @param factory the DAOFactory to be used for accessing data access objects\n * @param loggedInMID the ID of the logged in member\n */\npublic ViewMyReportRequestsAction(DAOFactory factory, long loggedInMID) {\n    this.loggedInMID = loggedInMID;\n    this.reportRequestDAO = factory.getReportRequestDAO();\n    this.personnelDAO = factory.getPersonnelDAO();\n    this.transDAO = factory.getTransactionDAO();\n    //this.factory = factory;\n}\n*/"
            }
        ],
        "signature": "ViewMyReportRequestsAction",
        "variables": [
            "private long loggedInMID",
            "private ReportRequestDAO reportRequestDAO",
            "private PersonnelDAO personnelDAO",
            "private TransactionDAO transDAO"
        ],
        "generated_class_comment": "Sure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a ReportRequestController that handles all operations related to report requests.\n * It provides methods to retrieve all report requests for a requester, add a new report request, and more.\n * \n * The main functionalities of this class include:\n * - Retrieving all report requests for a requester\n * - Adding a new report request for a patient\n * \n * The overall behavior of this class is to facilitate the management of report requests within the system.\n * It interacts with the ReportRequestDAO to perform database operations related to report requests.\n */\n*/\n/**\n * The ReportRequestController class is responsible for handling requests related to report requests in the iTrust system.\n * It contains methods to retrieve and set the viewed status of report requests.\n * \n * The main functionalities of this class include:\n * - Retrieving a report request based on the provided ID\n * - Setting the viewed status of a report request with the given ID\n * \n * The behavior of this class is as follows:\n * - When a report request is retrieved using the getReportRequest method, the requested report is returned.\n * - When the setViewed method is called with a report request ID, the viewed status of the report is set to true.\n *   This means that the report has been viewed by the healthcare provider, and they must request a new one to see it again.\n * - Additionally, the setViewed method logs a transaction of type COMPREHENSIVE_REPORT_REQUEST and sends an email notification.\n * \n * @param ID the unique identifier of the report request\n * @return the ReportRequestBean object corresponding to the provided ID\n * @throws iTrustException if an error occurs during the retrieval or setting of the viewed status\n */\n*/\n/**\n * This class represents a transaction of viewing a comprehensive report using the transDAO.\n * \n * The main functionalities of this class include retrieving a report request from the reportRequestDAO based on the provided ID,\n * checking the status of the report request, retrieving personnel information using the personnelDAO, and constructing a message\n * based on the status of the report request.\n * \n * The overall behavior of this class is to generate a message that describes the details of the report request, such as when it was \n * requested, by whom, and if it has been viewed. The email notification functionality is currently commented out and not in use.\n */\n**/\n/**\n * This class represents a utility for retrieving the long status of a report request based on the provided ID.\n * It contains a method that takes the ID of a request as input and returns a string representation of the request's status.\n * The status includes information such as the requester, approver, approval date, and viewing date.\n * \n * The class also handles cases where the request status is either Approved or Rejected, providing specific details for each case.\n * \n * The main functionality of this class is to generate a detailed status message for a report request, including relevant dates and personnel involved.\n * \n * Additionally, the class includes error handling for cases where the request ID is invalid or an exception occurs during the retrieval process.\n * \n * Overall, this class serves as a convenient tool for obtaining a comprehensive overview of the status of a report request.\n */\npublic String getLongStatus(long id) {\n    // Method implementation here\n}\n*/\n/**\n * The ViewMyReportRequestsAction class represents an action that retrieves and displays the status of report requests for a logged-in member.\n * It interacts with the ReportRequestDAO, PersonnelDAO, and TransactionDAO to retrieve necessary data.\n * The main functionality of this class is to construct a string representation of the long status of a report request based on its current status.\n * If the status is \"Requested\", it appends the requested date and the full name of the requester to the StringBuilder.\n * If the status is \"Viewed\", it appends the requested date and the full name of the requester, followed by the viewed date and the full name of the requester to the StringBuilder.\n * This class provides a constructor that takes a DAOFactory and a logged-in member ID as parameters to set up the necessary dependencies.\n */\n*/\n/**\n * The TransactionDAO class is responsible for handling database operations related to transactions.\n * It provides methods for creating, reading, updating, and deleting transaction records in the database.\n * This class follows the Data Access Object (DAO) design pattern to separate the database operations from the business logic.\n * \n * Main functionalities:\n * - Create a new transaction record in the database\n * - Retrieve transaction records from the database based on various criteria\n * - Update an existing transaction record in the database\n * - Delete a transaction record from the database\n * \n * Overall behavior:\n * - This class interacts with the database to perform CRUD operations on transaction records.\n * - It ensures data integrity and consistency by handling database transactions.\n * - The class encapsulates the database logic, making it easier to maintain and scale the application.\n * - It provides a clean and structured way to access and manipulate transaction data in the database.\n */"
    }
]