[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    try {\r\n        long reppeeMID = Long.valueOf(input);\r\n        if (patientDAO.represents(loggedInMID, reppeeMID)) {\r\n            loggedInMID = reppeeMID;\r\n            pid = reppeeMID;\r\n            isRepresenting = true;\r\n            return reppeeMID;\r\n        } else\r\n            throw new iTrustException(\"You do not represent patient \" + reppeeMID);\r\n    } catch (NumberFormatException e) {\r\n        throw new iTrustException(\"MID is not a number\");\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public long representPatient(String)",
                "comments": "Optional[/**\r\n * Takes the patient's representee as a param and returns it as a long if the patient represents the input\r\n * param\r\n *\r\n * @param input\r\n *            the patient's representee mid\r\n * @return representee's mid as a long\r\n * @throws iTrustException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    return ovDAO.getAllOfficeVisits(pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<OfficeVisitBean> getAllOfficeVisits()",
                "comments": "Optional[/**\r\n * Returns a list of all office visits for the pid\r\n *\r\n * @return list of OfficeVisitBeans for the pid\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    HashMap<String, String> myParams = ParameterUtil.convertMap(params);\r\n    List<Long> ovIDs = new ArrayList<Long>();\r\n    for (int i = 0; i < officeVisits.size(); i++) {\r\n        try {\r\n            if (params.get(\"ovOff\" + i) != null) {\r\n                int offset = Integer.valueOf(myParams.get(\"ovOff\" + i));\r\n                ovIDs.add(officeVisits.get(offset).getVisitID());\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            // just skip it\r\n        }\r\n    }\r\n    transDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID, pid, \"Getting reports for office visits \" + ovIDs.toString());\r\n    if (ovIDs.size() == 0)\r\n        return new ArrayList<PrescriptionReportBean>();\r\n    return ovDAO.getPrescriptionReports(ovIDs, pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public List<PrescriptionReportBean> getPrescriptionReports(Map, List<OfficeVisitBean>)",
                "comments": "Optional[// suppressing warnings because JSP doesn't have a generic for request.getParameterMap()\r\n]",
                "innerComments": "Optional[[// just skip it\r\n]]"
            },
            {
                "body": "Optional[{\r\n    return patientDAO.getPatient(pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PatientBean getPatient()",
                "comments": "Optional[/**\r\n * Returns a PatientBean for the pid\r\n *\r\n * @return PatientBean\r\n * @throws DBException\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    HashMap<String, String> myParams = ParameterUtil.convertMap(paramMap);\r\n    List<Integer> ovOffsets = checkOfficeVisits(myParams, officeVisits);\r\n    String queryString = buildQueryString(ovOffsets);\r\n    if (isRepresenting)\r\n        queryString += \"&rep=\" + pid;\r\n    return queryString;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getQueryString(Map, List<OfficeVisitBean>)",
                "comments": "Optional[// suppressing warnings because JSP doesn't have a generic for request.getParameterMap()\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    ArrayList<Integer> list = new ArrayList<Integer>();\r\n    for (int i = 0; i < officeVisits.size(); i++) {\r\n        if (\"on\".equals(myParams.get(\"ov\" + i)))\r\n            list.add(i);\r\n    }\r\n    return list;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private ArrayList<Integer> checkOfficeVisits(HashMap<String, String>, List<OfficeVisitBean>)",
                "comments": "Optional[/**\r\n * Checks office visits\r\n *\r\n * @param myParams list of parameters\r\n * @param officeVisits list of office visits\r\n * @return Returns a java.util.ArrayList of Integers for the given office visits.\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    int n = ovOffsets.size();\r\n    if (n == 0)\r\n        return \"\";\r\n    String str = \"&n=\" + n;\r\n    for (int i = 0; i < ovOffsets.size(); i++) {\r\n        str += \"&ovOff\" + i + \"=\" + ovOffsets.get(i);\r\n    }\r\n    return str;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private String buildQueryString(List<Integer>)",
                "comments": "Optional[/**\r\n * Builds a query string for office visits\r\n *\r\n * @param ovOffsets offsets for the office visits\r\n * @return A SQL query in a Java String.\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(factory, pidString);\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PrescriptionReportAction(DAOFactory, long, String)",
                "comments": "Optional[/**\r\n * Super class validates pidString\r\n *\r\n * @param factory The DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID The MID of the user who is making a prescription report.\r\n * @param pidString The MID of the patient in question.\r\n * @throws iTrustException\r\n * @throws DBException\r\n * @throws NoHealthRecordsException\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "signature": "PrescriptionReportAction",
        "variables": [
            "private boolean isRepresenting",
            "private OfficeVisitDAO ovDAO",
            "private TransactionDAO transDAO",
            "private PatientDAO patientDAO",
            "private long loggedInMID"
        ]
    }
]