[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    return pid;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public long getPatientID()",
                "comments": "Optional[/**\r\n * Returns the ID of the patient to be checked.\r\n *\r\n * @return patient ID whose risk we are checking\r\n * @author Andy Meneely\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the unique identifier of the patient.\n * \n * @return the patient's ID as a long value\n */"
            },
            {
                "body": "Optional[{\r\n    return authDAO.getUserName(pid);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public String getUserName()",
                "comments": "Optional[/**\r\n * Gives the full name of the patient\r\n *\r\n * @return Full name of the patient who we are checking\r\n * @throws DBException\r\n * @throws iTrustException\r\n * @author Andy Meneely\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the username associated with the specified user ID.\n * \n * @param pid the user ID for which to retrieve the username\n * @return the username associated with the specified user ID\n */"
            },
            {
                "body": "Optional[{\r\n    transDAO.logTransaction(TransactionType.IDENTIFY_RISK_FACTORS, loggedInMID, pid, \"\");\r\n    return diseaseMediator.getDiseaseAtRisk();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public List<RiskChecker> getDiseasesAtRisk()",
                "comments": "Optional[/**\r\n * Returns the risks for which this patient is at risk for. All logic has been passed to\r\n * {@link ChronicDiseaseMediator} and the subclasses of {@link RiskChecker}.\r\n *\r\n * @return List of risks\r\n * @throws iTrustException\r\n * @throws DBException\r\n * @author Andy Meneely\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of RiskChecker objects representing diseases that the patient with the specified patient ID (pid) is at risk for.\n * \n * This method logs a transaction of type IDENTIFY_RISK_FACTORS using the transDAO and the provided loggedInMID and pid.\n * It then retrieves the list of diseases at risk for the specified patient using the diseaseMediator.\n * \n * @return a list of RiskChecker objects representing diseases at risk for the patient\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ChronicDiseaseRiskAction(DAOFactory, long, String)",
                "comments": "Optional[/**\r\n * @param factory\r\n * @param loggedInMID\r\n * @param pidString\r\n *            The patient ID to be validated and used\r\n * @throws iTrustException\r\n * @throws DBException\r\n * @throws NoHealthRecordsException\r\n *             This is thrown if a patient is added without any health records to be checked. Try to avoid\r\n *             having this exception be thrown in a normal flow of events.\r\n * @author Andy Meneely\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ChronicDiseaseRiskAction object with the specified DAOFactory, patient ID, and logged in MID.\n * Initializes the authDAO and transDAO using the DAOFactory, sets the logged in MID, and creates a new ChronicDiseaseMediator object.\n * \n * @param factory the DAOFactory used to access data access objects\n * @param pidString the patient ID as a String\n * @param loggedInMID the logged in MID of the user\n */"
            }
        ],
        "signature": "ChronicDiseaseRiskAction",
        "variables": [
            "private AuthDAO authDAO",
            "private long loggedInMID",
            "private ChronicDiseaseMediator diseaseMediator",
            "private TransactionDAO transDAO"
        ],
        "generated_class_comment": "/**\n * This class represents a PatientRiskChecker that is responsible for checking the risk factors associated with a patient. It contains methods to retrieve the patient's ID, username, and a list of diseases that the patient is at risk for.\n * \n * The main functionalities of this class include:\n * - Retrieving the unique identifier of the patient\n * - Retrieving the username associated with the specified user ID\n * - Retrieving a list of RiskChecker objects representing diseases that the patient is at risk for\n * \n * The overall behavior of this class is to provide information about the patient's risk factors and diseases they may be at risk for. It delegates the logic for identifying risk factors to the ChronicDiseaseMediator and RiskChecker subclasses.\n * \n * @author Andy Meneely\n */\npublic class PatientRiskChecker {\n    \n    /**\n     * Returns the ID of the patient to be checked.\n     * \n     * @return patient ID whose risk we are checking\n     */\n    public long getPatientID() {\n        return pid;\n    }\n    \n    /**\n     * Gives the full name of the patient.\n     * \n     * @return Full name of the patient who we are checking\n     * @throws DBException\n     * @throws iTrustException\n     */\n    public String getUserName() {\n        return authDAO.getUserName(pid);\n    }\n    \n    /**\n     * Returns the risks for which this patient is at risk for. All logic has been passed to ChronicDiseaseMediator and the subclasses of RiskChecker.\n     * \n     * @return List of risks\n     * @throws iTrustException\n     * @throws DBException\n     */\n    public List<RiskChecker> getDiseasesAtRisk() {\n        transDAO.logTransaction(TransactionType.IDENTIFY_RISK_FACTORS, loggedInMID, pid, \"\");\n        return diseaseMediator.getDiseaseAtRisk();\n    }\n}\n**/\n/**\n * The ChronicDiseaseRiskAction class represents an action that retrieves a list of diseases at risk for a specified patient.\n * It utilizes the DAOFactory to access data access objects, such as AuthDAO and TransactionDAO, to validate and retrieve patient information.\n * The class requires the logged in MID of the user and the patient ID as a String to perform its operations.\n * It initializes the AuthDAO, TransactionDAO, and a ChronicDiseaseMediator object to facilitate the retrieval of diseases at risk for the patient.\n * \n * This class provides a method to retrieve a list of RiskChecker objects representing diseases at risk for the patient.\n * It handles exceptions such as iTrustException, DBException, and NoHealthRecordsException that may occur during the process.\n * \n * @author Andy Meneely\n */"
    }
]