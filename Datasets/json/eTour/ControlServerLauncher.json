[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    try {\r\n        // GestioneBeniCulturaliComune is the class that implements the interface IGestioneBeniCulturaliComune,\r\n        // this interface on both the client and the server\r\n        GestioneBeniCulturaliComune gBCC = new GestioneBeniCulturaliComune();\r\n        // Here you create the stub for the registry, making it clear to the RMI system you are exporting the object on a gBCC\r\n        // Anonymous port\r\n        IGestioneBeniCulturaliComune stubGBCC = (IGestioneBeniCulturaliComune) UnicastRemoteObject.exportObject(gBCC, 0);\r\n        // There shall call the register (default is on localhost) and \"bind\" (alloy)\r\n        Registry registry = LocateRegistry.getRegistry();\r\n        registry.bind(\"stubGBCC\", stubGBCC);\r\n    } catch (Exception e) {\r\n        System.out.println(\"Exception: \" + e.getLocalizedMessage());\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public static void main(String[])",
                "comments": "Optional[/**\r\n * Entry point of ControlServer\r\n *\r\n * @param args The command line parameters\r\n */\r\n]",
                "innerComments": "Optional[[// GestioneBeniCulturaliComune is the class that implements the interface IGestioneBeniCulturaliComune,\r\n, // Here you create the stub for the registry, making it clear to the RMI system you are exporting the object on a gBCC\r\n, // this interface on both the client and the server\r\n, // Anonymous port\r\n, // There shall call the register (default is on localhost) and \"bind\" (alloy)\r\n]]"
            }
        ],
        "constructors": [],
        "signature": "ControlServerLauncher",
        "variables": []
    }
]