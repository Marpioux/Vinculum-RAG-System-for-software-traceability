[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    // Check the validity identifier\r\n    if (pPuntoDiRistoroID < 0) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    try {\r\n        // Execute the method that clears the Refreshment from the Database\r\n        // And in case of operation successful return true\r\n        if (puntoRistoro.cancellaPuntoDiRistoro(pPuntoDiRistoroID)) {\r\n            return true;\r\n        }\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method cancellaPuntoDiRistoro: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method cancellaPuntoDiRistoro: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // If no operations were successful return false\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean cancellaPuntoDiRistoro(int)",
                "comments": "Optional[// Passing as parameter the ID of the same Refreshment\r\n]",
                "innerComments": "Optional[[// Check the validity identifier\r\n, // Execute the method that clears the Refreshment from the Database\r\n, // And in case of operation successful return true\r\n, // If no operations were successful return false\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Check the validity of the bean as a parameter and if triggers except remote\r\n    if ((pPuntoDiRistoro == null) || (!(pPuntoDiRistoro instanceof BeanPuntoDiRistoro))) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n    }\r\n    try {\r\n        // Calling the method of the class that operates on the database\r\n        // Insert the new Refreshment\r\n        if (puntoRistoro.inserisciPuntoDiRistoro(pPuntoDiRistoro)) {\r\n            // In the case where the operations were successful end\r\n            // Returns true\r\n            return true;\r\n        }\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method inserisciPuntoDiRistoro: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method inserisciPuntoDiRistoro: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // If the operation is not successful return false\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean inserisciPuntoDiRistoro(BeanPuntoDiRistoro)",
                "comments": "Optional[// Method that allows the operator to include in the Agency database the new Refreshment with the information contained in the bean\r\n]",
                "innerComments": "Optional[[// Check the validity of the bean as a parameter and if triggers except remote\r\n, // Calling the method of the class that operates on the database\r\n, // Insert the new Refreshment\r\n, // In the case where the operations were successful end\r\n, // Returns true\r\n, // If the operation is not successful return false\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // ArrayList to return to the end of the method\r\n    ArrayList<BeanPuntoDiRistoro> toReturn = null;\r\n    try {\r\n        // Get the list of Refreshments through the class\r\n        // Connect to database\r\n        // And save the list itself nell'ArrayList\r\n        toReturn = puntoRistoro.ottieniListaPR();\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method ottieniPuntiDiRistoro: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method ottieniPuntiDiRistoro: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // Check the ArrayList to return so as not to pass null values to the caller\r\n    if (toReturn == null) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n    }\r\n    // Return the ArrayList with all the refreshment\r\n    return toReturn;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public ArrayList<BeanPuntoDiRistoro> ottieniPuntiDiRistoro()",
                "comments": "Optional[// Method for obtaining an ArrayList with all the points Bean Refreshments\r\n]",
                "innerComments": "Optional[[// ArrayList to return to the end of the method\r\n, // Get the list of Refreshments through the class\r\n, // Connect to database\r\n, // And save the list itself nell'ArrayList\r\n, // Check the ArrayList to return so as not to pass null values to the caller\r\n, // Return the ArrayList with all the refreshment\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Array that allows me to store all the refreshment and which will remove depending on the parameter passed to the refreshment active or not\r\n    ArrayList<BeanPuntoDiRistoro> toReturn = null;\r\n    // Array that allows me to store all the refreshment active using the database connection\r\n    ArrayList<BeanPuntoDiRistoro> active = null;\r\n    // Instance to connect to the database\r\n    IDBConvenzione conv = new DBConvenzione();\r\n    try {\r\n        // Connect all proceeds from the refreshment Assets\r\n        active = conv.ottieniListaConvenzioneAttivaPR();\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method ottieniPuntiDiRistoro (boolean): \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method ottieniPuntiDiRistoro (boolean): \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // If you want to get the refreshment active, then return directly to those passed by the connection to the database\r\n    if (statoConvenzione) {\r\n        // Check the contents dell'ArrayList so as not to return null values to the caller\r\n        if (active == null) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n        }\r\n        return active;\r\n    } else {\r\n        try {\r\n            // Connect all proceeds from the refreshment then perform comparisons\r\n            toReturn = puntoRistoro.ottieniListaPR();\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error in method ottieniPuntiDiRistoro (boolean): \" + e.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception ee) {\r\n            System.out.println(\"Error in method ottieniPuntiDiRistoro (boolean): \" + ee.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n        // Size dell'ArrayList containing all of gourmet could change size if you remove some element\r\n        int dim = toReturn.size();\r\n        // Variable that allows me to understand whether to remove a Point Refreshments from array that then I must return\r\n        boolean present;\r\n        // First loop to loop through all the ArrayList elements of All Refreshments\r\n        for (int i = 0; i < dim; i++) {\r\n            present = false;\r\n            // Second loop to loop through all the ArrayList elements Cones just Refreshments active\r\n            for (int j = 0; j < active.size(); j++) {\r\n                // If the catering points in question has the ID equal to one of those assets, then set this to true\r\n                if (active.get(j).getId() == toReturn.get(i).getId()) {\r\n                    present = true;\r\n                }\r\n            }\r\n            // If the catering points in question has a Convention active removes it from those to be returned\r\n            if (present) {\r\n                toReturn.remove(i);\r\n            }\r\n        }\r\n    }\r\n    // Return the ArrayList obtained\r\n    return toReturn;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public ArrayList<BeanPuntoDiRistoro> ottieniPuntiDiRistoro(boolean)",
                "comments": "Optional[// Method that allows you to get all the refreshment that have a Convention on or off depending on the parameter passed\r\n]",
                "innerComments": "Optional[[// Array that allows me to store all the refreshment and which will remove depending on the parameter passed to the refreshment active or not\r\n, // Array that allows me to store all the refreshment active using the database connection\r\n, // Instance to connect to the database\r\n, // Connect all proceeds from the refreshment Assets\r\n, // If you want to get the refreshment active, then return directly to those passed by the connection to the database\r\n, // Check the contents dell'ArrayList so as not to return null values to the caller\r\n, // Connect all proceeds from the refreshment then perform comparisons\r\n, // Size dell'ArrayList containing all of gourmet could change size if you remove some element\r\n, // Variable that allows me to understand whether to remove a Point Refreshments from array that then I must return\r\n, // First loop to loop through all the ArrayList elements of All Refreshments\r\n, // Second loop to loop through all the ArrayList elements Cones just Refreshments active\r\n, // If the catering points in question has the ID equal to one of those assets, then set this to true\r\n, // If the catering points in question has a Convention active removes it from those to be returned\r\n, // Return the ArrayList obtained\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Check the validity of the bean as a parameter and if trigger an exception remote\r\n    if (pPuntoDiRistoroAggiornato == null || (!(pPuntoDiRistoroAggiornato instanceof BeanPuntoDiRistoro))) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n    }\r\n    try {\r\n        // Call the method to change the database connection The Refreshment\r\n        if (puntoRistoro.modificaPuntoDiRistoro(pPuntoDiRistoroAggiornato)) {\r\n            // Return a positive value if the operation was successful\r\n            return true;\r\n        }\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method modificaPuntoDiRistoro: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method modificaPuntoDiRistoro: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // Return false if the operation is successful you should\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean modificaPuntoDiRistoro(BeanPuntoDiRistoro)",
                "comments": "Optional[// Method that allows you to change the past as a refreshment Parameter\r\n]",
                "innerComments": "Optional[[// Check the validity of the bean as a parameter and if trigger an exception remote\r\n, // Call the method to change the database connection The Refreshment\r\n, // Return a positive value if the operation was successful\r\n, // Return false if the operation is successful you should\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Check the validity identifier\r\n    if (pPuntoDiRistoroID < 0) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    // Bean to return to the caller\r\n    BeanPuntoDiRistoro toReturn = null;\r\n    try {\r\n        // Revenue catering points in the issue by connecting to Database\r\n        toReturn = puntoRistoro.ottieniPuntoDiRistoro(pPuntoDiRistoroID);\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method ottieniPuntoDiRistoro: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // Check the bean to be returned in order not to return null values to the caller\r\n    if (toReturn == null) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n    }\r\n    // Return the bean of Refreshment\r\n    return toReturn;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanPuntoDiRistoro ottieniPuntoDiRistoro(int)",
                "comments": "Optional[// Method to obtain the Bean a particular point Refreshment whose Identifier is passed as parameter\r\n]",
                "innerComments": "Optional[[// Check the validity identifier\r\n, // Bean to return to the caller\r\n, // Revenue catering points in the issue by connecting to Database\r\n, // Check the bean to be returned in order not to return null values to the caller\r\n, // Return the bean of Refreshment\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Check the validity of parameters passed\r\n    if ((pPuntoDiRistoroID < 0) || (pConv == null) || (!(pConv instanceof BeanConvenzione))) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    // Check the data further\r\n    if (pConv.getIdPuntoDiRistoro() != pPuntoDiRistoroID) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    IDBConvenzione conv = null;\r\n    try {\r\n        // Instantiate the class to connect to the database\r\n        conv = new DBConvenzione();\r\n        // If the Convention is not yet active, previously provided to activate it locally and then pass the bean to the database changed\r\n        if (conv.ottieniConvezioneAttiva(pPuntoDiRistoroID) == null) {\r\n            pConv.setAttiva(true);\r\n            conv.modificaConvenzione(pConv);\r\n            return true;\r\n        }\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method attivaConvenzione: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // If the operation is successful you should return false\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean attivaConvenzione(int, BeanConvenzione)",
                "comments": "Optional[// Method that allows you to activate a particular convention to a Point Passed as parameter Refreshments\r\n]",
                "innerComments": "Optional[[// Check the validity of parameters passed\r\n, // Check the data further\r\n, // Instantiate the class to connect to the database\r\n, // If the Convention is not yet active, previously provided to activate it locally and then pass the bean to the database changed\r\n, // If the operation is successful you should return false\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Check the ID passed as a parameter\r\n    if (pPuntoDiRistoroID < 0) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    // Instantiate the map and the performance of ArrayList that I will use Method\r\n    HashMap<BeanVisitaPR, String> mappaRitorno = null;\r\n    ArrayList<BeanVisitaPR> bvisita = null;\r\n    try {\r\n        // Here I take the list of all visits to the PR passed as Parameter\r\n        bvisita = feed.ottieniListaVisitaPR(pPuntoDiRistoroID);\r\n        // Instantiate the map of the same size as the list of BeanVisitaPR\r\n        mappaRitorno = new HashMap<>(bvisita.size());\r\n        // Here we begin to iterate on each visit to add its Username\r\n        for (Iterator<BeanVisitaPR> iteratoreVisitaPR = bvisita.iterator(); iteratoreVisitaPR.hasNext(); ) {\r\n            // Recuperto the BeanVisitaPR\r\n            BeanVisitaPR bVisitaTemp = iteratoreVisitaPR.next();\r\n            // Retrieve the tourist who left the comment that I am examining\r\n            BeanTurista bTuristaTemp = dbTurista.ottieniTurista(bVisitaTemp.getIdTurista());\r\n            // Get the username of the Tourist\r\n            String usernameTuristaTemp = bTuristaTemp.getUsername();\r\n            // Put the pair in the map\r\n            mappaRitorno.put(bVisitaTemp, usernameTuristaTemp);\r\n        }\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method ottieniFeedbackPR: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method ottieniFeedbackPR: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // Check the return parameter so as not to pass null values to the database\r\n    if (mappaRitorno == null) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n    }\r\n    return mappaRitorno;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public HashMap<BeanVisitaPR, String> ottieniFeedbackPuntoDiRistoro(int)",
                "comments": "Optional[// Method that returns a HashMap containing, for Refreshment Passed as a parameter, the feedback associated with it\r\n]",
                "innerComments": "Optional[[// Check the ID passed as a parameter\r\n, // Instantiate the map and the performance of ArrayList that I will use Method\r\n, // Here I take the list of all visits to the PR passed as Parameter\r\n, // Instantiate the map of the same size as the list of BeanVisitaPR\r\n, // Here we begin to iterate on each visit to add its Username\r\n, // Recuperto the BeanVisitaPR\r\n, // Retrieve the tourist who left the comment that I am examining\r\n, // Get the username of the Tourist\r\n, // Put the pair in the map\r\n, // Check the return parameter so as not to pass null values to the database\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Check the validity of past data\r\n    if ((pPuntoDiRistoroId < 0) || (pTagId < 0)) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    // ArrayList which stores all the tags\r\n    ArrayList<BeanTag> tags;\r\n    // Boolean variable to check if the Refreshment holds the tag you want to delete\r\n    boolean present = false;\r\n    try {\r\n        // Use the method through the class of database connection\r\n        tags = tag.ottieniTagPuntoDiRistoro(pPuntoDiRistoroId);\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method cancellaTagPuntoDiRistoro: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method cancellaTagPuntoDiRistoro: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // Check if the tag is present cycle currently Between those of Refreshment\r\n    for (BeanTag t : tags) {\r\n        if (t.getId() == pTagId) {\r\n            present = true;\r\n        }\r\n    }\r\n    // If the tag is present among those of eateries, then provides for executing the erase operation\r\n    if (present) {\r\n        try {\r\n            return tag.cancellaTagPuntoDiRistoro(pPuntoDiRistoroId, pTagId);\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error in method cancellaTagPuntoDiRistoro: \" + e.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception ee) {\r\n            System.out.println(\"Error in method cancellaTagPuntoDiRistoro: \" + ee.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    // In case something did not come to fruition return false\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean cancellaTagPuntoDiRistoro(int, int)",
                "comments": "Optional[// Method to insert a tag from those of a refreshment\r\n]",
                "innerComments": "Optional[[// Check the validity of past data\r\n, // ArrayList which stores all the tags\r\n, // Boolean variable to check if the Refreshment holds the tag you want to delete\r\n, // Use the method through the class of database connection\r\n, // Check if the tag is present cycle currently Between those of Refreshment\r\n, // If the tag is present among those of eateries, then provides for executing the erase operation\r\n, // In case something did not come to fruition return false\r\n]]"
            },
            {
                "body": "Optional[{\r\n    if ((pPuntoDiRistoroId < 0) || (pTagId < 0)) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    ArrayList<BeanTag> tags;\r\n    boolean present = false;\r\n    try {\r\n        tags = tag.ottieniTagPuntoDiRistoro(pPuntoDiRistoroId);\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method inserisciTagPuntoDiRistoro: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method inserisciTagPuntoDiRistoro: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    for (BeanTag t : tags) {\r\n        if (t.getId() == pTagId) {\r\n            present = true;\r\n        }\r\n    }\r\n    // Check that the Refreshment has not already specified tag\r\n    if (!present) {\r\n        try {\r\n            // Calling the method of adding the class via Connect to database\r\n            return tag.aggiungeTagPuntoDiRistoro(pPuntoDiRistoroId, pTagId);\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error in method inserisciTagPuntoDiRistoro: \" + e.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception ee) {\r\n            System.out.println(\"Error in method inserisciTagPuntoDiRistoro: \" + ee.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    // Return false if some operation is not successful you should\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean inserisciTagPuntoDiRistoro(int, int)",
                "comments": "Optional[// Which should give negative results, and the call here is the method of Insert\r\n]",
                "innerComments": "Optional[[// Check that the Refreshment has not already specified tag\r\n, // Calling the method of adding the class via Connect to database\r\n, // Return false if some operation is not successful you should\r\n]]"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    // Call the constructor of the inherited class to instantiate Database connections\r\n    super();\r\n    dbTurista = new DBTurista();\r\n}",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public GestionePuntiDiRistoroAgenzia()",
                "comments": "Optional[// Constructor\r\n]",
                "innerComments": "[// Call the constructor of the inherited class to instantiate Database connections\r\n]"
            }
        ],
        "signature": "GestionePuntiDiRistoroAgenzia",
        "variables": [
            "private  static  final long serialVersionUID",
            "private DBTurista dbTurista"
        ]
    }
]