[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    /* Bean containing the data of the banner */\r\n    BeanBanner banner;\r\n    try {\r\n        /* Load the banner and check the data */\r\n        banner = dbBanner.ottieniBannerDaID(pIdBanner);\r\n        if (!ControlloDati.checkBeanBanner(banner)) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n        }\r\n        /* Remove the image associated with the banner */\r\n        File imageFile = new File(banner.getPercorsoFile());\r\n        imageFile.delete();\r\n        /* Clear the whole bean banner */\r\n        return dbBanner.cancellaBanner(pIdBanner);\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean cancellaBanner(int)",
                "comments": "Optional[/**\r\n * Delete a banner and the image associated with the system.\r\n *\r\n * @param pIdBanner id of the banner to remove\r\n * @throws RemoteException\r\n */\r\n]",
                "innerComments": "Optional[[/* Bean containing the data of the banner */\r\n, /* Load the banner and check the data */\r\n, /* Remove the image associated with the banner */\r\n, /* Clear the whole bean banner */\r\n]]",
                "generated_comment": "/**\n * Deletes a banner from the database and removes the associated image file.\n * \n * @param pIdBanner the ID of the banner to be deleted\n * @return true if the banner is successfully deleted, false otherwise\n * @throws RemoteException if there is an error with the data or database connection\n */\npublic boolean cancellaBanner(int pIdBanner) {\n    /* Bean containing the data of the banner */\n    BeanBanner banner;\n    try {\n        /* Load the banner and check the data */\n        banner = dbBanner.ottieniBannerDaID(pIdBanner);\n        if (!ControlloDati.checkBeanBanner(banner)) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\n        }\n        /* Remove the image associated with the banner */\n        File imageFile = new File(banner.getPercorsoFile());\n        imageFile.delete();\n        /* Clear the whole bean banner */\n        return dbBanner.cancellaBanner(pIdBanner);\n    } catch (SQLException e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        /* Performs a check on the image of the banner */\r\n        if (!ControlloDati.checkImmagine(pImmagine)) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n        }\r\n        /* Load the icon image */\r\n        BufferedImage buffImg = (BufferedImage) pImmagine.getImage();\r\n        /* Load the data of the banner */\r\n        BeanBanner banner = dbBanner.ottieniBannerDaID(pBannerID);\r\n        /* Check the banner on the data uploaded */\r\n        if (!ControlloDati.checkBeanBanner(banner)) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n        }\r\n        /* Rewrite the image file and returns the result of the operation */\r\n        File imgFile = new File(banner.getPercorsoFile());\r\n        return ImageIO.write(buffImg, \"jpg\", imgFile);\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\r\n    } catch (Exception e) {\r\n        if (e instanceof RemoteException) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n        } else {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_FILE);\r\n        }\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean modificaBanner(int, ImageIcon)",
                "comments": "Optional[/**\r\n * Method to change the image associated with the banner:\r\n * Delete the old image and stores the new\r\n * Enjoy the same path as the old image.\r\n *\r\n * @param pBannerID id of the banner\r\n * @param pImmagine ImageIcon object containing the new image of the banner\r\n * @return returns true if the operation is successful\r\n */\r\n]",
                "innerComments": "Optional[[/* Performs a check on the image of the banner */\r\n, /* Load the icon image */\r\n, /* Load the data of the banner */\r\n, /* Check the banner on the data uploaded */\r\n, /* Rewrite the image file and returns the result of the operation */\r\n]]",
                "generated_comment": "/**\n * Modifies the banner image with the specified ID by replacing it with the provided image.\n * \n * @param pBannerID the ID of the banner to be modified\n * @param pImmagine the new image to replace the existing banner image\n * @return true if the image file was successfully rewritten, false otherwise\n * @throws RemoteException if there is an error with the data check, database connection, or file handling\n */\npublic boolean modificaBanner(int pBannerID, ImageIcon pImmagine) {\n    try {\n        /* Performs a check on the image of the banner */\n        if (!ControlloDati.checkImmagine(pImmagine)) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\n        }\n        /* Load the icon image */\n        BufferedImage buffImg = (BufferedImage) pImmagine.getImage();\n        /* Load the data of the banner */\n        BeanBanner banner = dbBanner.ottieniBannerDaID(pBannerID);\n        /* Check the banner on the data uploaded */\n        if (!ControlloDati.checkBeanBanner(banner)) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\n        }\n        /* Rewrite the image file and returns the result of the operation */\n        File imgFile = new File(banner.getPercorsoFile());\n        return ImageIO.write(buffImg, \"jpg\", imgFile);\n    } catch (SQLException e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n    } catch (Exception e) {\n        if (e instanceof RemoteException) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\n        } else {\n            throw new RemoteException(MessaggiErrore.ERRORE_FILE);\n        }\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    /* Create a HashMap that will hold the banner and associated images */\r\n    HashMap<BeanBanner, ImageIcon> toReturn = new HashMap<>();\r\n    try {\r\n        /* Get the list of banners for a refreshment point */\r\n        ArrayList<BeanBanner> listaBanner = dbBanner.ottieniBanner(pIdPuntoDiRistoro);\r\n        /* For each banner valid list */\r\n        for (BeanBanner banner : listaBanner) {\r\n            /* If the banner is valid charge in the HashMap with the image file */\r\n            if (ControlloDati.checkBeanBanner(banner)) {\r\n                /* Create the image file */\r\n                File imgFile = new File(banner.getPercorsoFile());\r\n                /* Create an object ImageIcon from the image file */\r\n                ImageIcon icon = new ImageIcon(ImageIO.read(imgFile));\r\n                /* Add the banner and the image to the HashMap */\r\n                toReturn.put(banner, icon);\r\n            }\r\n        }\r\n        return toReturn;\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FILE);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public HashMap<BeanBanner, ImageIcon> ottieniBannersDaID(int)",
                "comments": "Optional[/**\r\n * Returns a list of banners for a refreshment.\r\n * Use the method {@link} DBBanner.ottieniBanner\r\n *\r\n * @param pIdPuntoDiRistoroID id of refreshment\r\n * @throws RemoteException\r\n */\r\n]",
                "innerComments": "Optional[[/* Create a HashMap that will hold the banner and associated images */\r\n, /* Get the list of banners for a refreshment point */\r\n, /* For each banner valid list */\r\n, /* If the banner is valid charge in the HashMap with the image file */\r\n, /* Create the image file */\r\n, /* Create an object ImageIcon from the image file */\r\n, /* Add the banner and the image to the HashMap */\r\n]]",
                "generated_comment": "/**\n * Retrieves banners and their associated images from the database based on the ID of a refreshment point.\n * \n * @param pIdPuntoDiRistoro the ID of the refreshment point to retrieve banners for\n * @return a HashMap containing BeanBanner objects as keys and their corresponding ImageIcon objects as values\n * @throws RemoteException if there is an error connecting to the database or reading the image file\n */\npublic HashMap<BeanBanner, ImageIcon> ottieniBannersDaID(int pIdPuntoDiRistoro) {\n    /* Create a HashMap that will hold the banner and associated images */\n    HashMap<BeanBanner, ImageIcon> toReturn = new HashMap<>();\n    try {\n        /* Get the list of banners for a refreshment point */\n        ArrayList<BeanBanner> listaBanner = dbBanner.ottieniBanner(pIdPuntoDiRistoro);\n        /* For each banner valid list */\n        for (BeanBanner banner : listaBanner) {\n            /* If the banner is valid charge in the HashMap with the image file */\n            if (ControlloDati.checkBeanBanner(banner)) {\n                /* Create the image file */\n                File imgFile = new File(banner.getPercorsoFile());\n                /* Create an object ImageIcon from the image file */\n                ImageIcon icon = new ImageIcon(ImageIO.read(imgFile));\n                /* Add the banner and the image to the HashMap */\n                toReturn.put(banner, icon);\n            }\n        }\n        return toReturn;\n    } catch (SQLException e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n    } catch (Exception e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_FILE);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        /* Performs a check on the image */\r\n        if (!ControlloDati.checkImmagine(pImmagineBanner)) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n        }\r\n        /* Create an object that handles the conventions */\r\n        IDBConvenzione dbConvenzione = new DBConvenzione();\r\n        /* Load the data of the convention of a refreshment point */\r\n        BeanConvenzione convenzione = dbConvenzione.ottieniConvezioneAttiva(pIdPuntoDiRistoro);\r\n        /* Get the number of banners displayed by the Convention Maximum */\r\n        int maxBanner = convenzione.getMaxBanner();\r\n        /* Load the list of banners for a refreshment and stores the number */\r\n        int numBanner = (dbBanner.ottieniBanner(pIdPuntoDiRistoro)).size();\r\n        /* Check that the maximum number of banners is not reached */\r\n        if (!(numBanner < maxBanner)) {\r\n            throw new Exception(MessaggiErrore.ERRORE_NUM_BANNER);\r\n        }\r\n        /* Create a blank banner */\r\n        BeanBanner banner = new BeanBanner();\r\n        /* Create a unique file name */\r\n        String path = CostantiGlobali.SERVER_IMAGE_PATH + pIdPuntoDiRistoro;\r\n        int i = 0;\r\n        File imgFile = new File(path + \"_\" + i + \".jpg\");\r\n        while (imgFile.exists()) {\r\n            i++;\r\n            imgFile = new File(path + \"_\" + i + \".jpg\");\r\n        }\r\n        /* Stores the image in the file system */\r\n        BufferedImage im = (BufferedImage) pImmagineBanner.getImage();\r\n        if (!ImageIO.write(im, \"jpg\", imgFile)) {\r\n            /* Write failed */\r\n            throw new IOException();\r\n        }\r\n        /* Loads the data in the banner */\r\n        banner.setIdPuntoDiRistoro(pIdPuntoDiRistoro);\r\n        banner.setPercorsoFile(imgFile.getPath());\r\n        /* Insert the banner in the database */\r\n        return dbBanner.inserisciBanner(banner);\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FILE);\r\n    } catch (Exception e) {\r\n        if (e.getMessage().equals(MessaggiErrore.ERRORE_NUM_BANNER)) {\r\n            /* Has been reached on most of banner inserted num */\r\n            throw new RemoteException(MessaggiErrore.ERRORE_NUM_BANNER);\r\n        } else {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean inserisciBanner(int, ImageIcon)",
                "comments": "Optional[/**\r\n * Create and insert a new banner, making sure the num. maximum\r\n * Banner displayed for a refreshment point is\r\n * Already been reached in this case throws an exception to the calling method.\r\n *\r\n * @param pIdPuntoDiRistoro id of refreshment\r\n * @param pImmagineBanner ImageIcon object containing the banner image\r\n * @return Returns true if the insertion has been successful.\r\n * @throws RemoteException\r\n */\r\n]",
                "innerComments": "Optional[[/* Performs a check on the image */\r\n, /* Create an object that handles the conventions */\r\n, /* Load the data of the convention of a refreshment point */\r\n, /* Get the number of banners displayed by the Convention Maximum */\r\n, /* Load the list of banners for a refreshment and stores the number */\r\n, /* Check that the maximum number of banners is not reached */\r\n, /* Create a blank banner */\r\n, /* Create a unique file name */\r\n, /* Stores the image in the file system */\r\n, /* Write failed */\r\n, /* Loads the data in the banner */\r\n, /* Insert the banner in the database */\r\n, /* Has been reached on most of banner inserted num */\r\n]]",
                "generated_comment": "/**\n * Inserts a new banner for a refreshment point in the database.\n * \n * @param pIdPuntoDiRistoro the ID of the refreshment point where the banner will be inserted\n * @param pImmagineBanner the ImageIcon object representing the image of the banner to be inserted\n * @return true if the banner is successfully inserted, false otherwise\n * @throws RemoteException if an error occurs during the insertion process\n * @throws IOException if an error occurs while writing the image to the file system\n * @throws SQLException if an error occurs during the database connection\n * @throws Exception if an unknown error occurs\n */\npublic boolean inserisciBanner(int pIdPuntoDiRistoro, ImageIcon pImmagineBanner) {\n    try {\n        // Performs a check on the image\n        if (!ControlloDati.checkImmagine(pImmagineBanner)) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\n        }\n        // Create an object that handles the conventions\n        IDBConvenzione dbConvenzione = new DBConvenzione();\n        // Load the data of the convention of a refreshment point\n        BeanConvenzione convenzione = dbConvenzione.ottieniConvezioneAttiva(pIdPuntoDiRistoro);\n        // Get the number of banners displayed by the Convention Maximum\n        int maxBanner = convenzione.getMaxBanner();\n        // Load the list of banners for a refreshment and stores the number\n        int numBanner = (dbBanner.ottieniBanner(pIdPuntoDiRistoro)).size();\n        // Check that the maximum number of banners is not reached\n        if (!(numBanner < maxBanner)) {\n            throw new Exception(MessaggiErrore.ERRORE_NUM_BANNER);\n        }\n        // Create a blank banner\n        BeanBanner banner = new BeanBanner();\n        // Create a unique file name\n        String path = CostantiGlobali.SERVER_IMAGE_PATH + pIdPuntoDiRistoro;\n        int i = 0;\n        File imgFile = new File(path + \"_\" + i + \".jpg\");\n        while (imgFile.exists()) {\n            i++;\n            imgFile = new File(path + \"_\" + i + \".jpg\");\n        }\n        // Stores the image in the file system\n        BufferedImage im = (BufferedImage) pImmagineBanner.getImage();\n        if (!ImageIO.write(im, \"jpg\", imgFile)) {\n            // Write failed\n            throw new IOException();\n        }\n        // Loads the data in the banner\n        banner.setIdPuntoDiRistoro(pIdPuntoDiRistoro);\n        banner.setPercorsoFile(imgFile.getPath());\n        // Insert the banner in the database\n        return dbBanner.inserisciBanner(banner);\n    } catch (SQLException e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\n    } catch (Exception e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_FILE);\n    } catch (Exception e) {\n        if (e.getMessage().equals(MessaggiErrore.ERRORE_NUM_BANNER)) {\n            // Has been reached on most of banner inserted num\n            throw new RemoteException(MessaggiErrore.ERRORE_NUM_BANNER);\n        } else {\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n        }\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super();\r\n    dbBanner = new DBBanner();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public GestioneAdvertisement()",
                "comments": "Optional[/**\r\n * Constructor, instantiates an object of type DBBanner that\r\n * Contains methods that perform operations on data\r\n * Entity banner.\r\n *\r\n * @throws RemoteException\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new GestioneAdvertisement object.\n * This constructor initializes the dbBanner field by creating a new DBBanner object.\n */"
            }
        ],
        "signature": "GestioneAdvertisement",
        "variables": [
            "private  static  final long serialVersionUID",
            "private IDBBanner dbBanner"
        ],
        "generated_class_comment": "/**\n * The GestioneAdvertisement class is responsible for managing advertisements and banners within the system.\n * It provides methods for deleting banners, modifying banner images, retrieving banners for a refreshment point,\n * and inserting new banners with image files. The class interacts with a database through the DBBanner object\n * to perform operations on banner data entities.\n * \n * Main functionalities include:\n * - Deleting a banner and its associated image file\n * - Modifying the image of a banner by replacing it with a new image\n * - Retrieving a list of banners and their associated images for a refreshment point\n * - Inserting a new banner for a refreshment point, ensuring the maximum number of banners is not exceeded\n * \n * The class also contains a constructor that initializes the DBBanner object for database operations.\n * \n * @author [Author Name]\n * @version [Version Number]\n * @see DBBanner\n */\n**/"
    }
]