[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    try {\r\n        boolean delete = true;\r\n        BeanPreferenzaDiRicerca prefRic = new BeanPreferenzaDiRicerca();\r\n        ArrayList<BeanPreferenzaDiRicerca> elencoPrefRic = new ArrayList<>();\r\n        elencoPrefRic = prefRicTurista.ottieniPreferenzeDiRicercaDelTurista(pIdTurista);\r\n        Iterator<BeanPreferenzaDiRicerca> elenco = elencoPrefRic.iterator();\r\n        while (elenco.hasNext() && delete == true) {\r\n            prefRic = elenco.next();\r\n            if (prefRic.getId() == pIdPreferenzaDiRicerca)\r\n                // Find the anniversary with the id\r\n                delete = false;\r\n            // We leave the interested\r\n            // Cycle\r\n        }\r\n        prefRicTurista.cancellaPreferenzaDiRicercaTurista(pIdTurista, pIdPreferenzaDiRicerca);\r\n        return prefRic;\r\n    } catch (SQLException e) {\r\n        // If the data layer is thrown an exception SQLException\r\n        // It throws RemoteException the remote exception\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanPreferenzaDiRicerca cancellaPreferenzeDiRicerca(int, int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#cancellaPreferenzeDiRicerca(int, int)\r\n */\r\n]",
                "innerComments": "Optional[[// We leave the interested\r\n, // Cycle\r\n, // Find the anniversary with the id\r\n, // If the data layer is thrown an exception SQLException\r\n, // It throws RemoteException the remote exception\r\n]]",
                "generated_comment": "/**\n * Deletes a specific preference of a tourist from the database.\n * \n * @param pIdTurista The ID of the tourist whose preferences are being deleted\n * @param pIdPreferenzaDiRicerca The ID of the preference to be deleted\n * @return The deleted preference if found, null otherwise\n * @throws RemoteException If an SQL exception occurs during the deletion process\n */\npublic BeanPreferenzaDiRicerca cancellaPreferenzeDiRicerca(int pIdTurista, int pIdPreferenzaDiRicerca) {\n    try {\n        boolean delete = true;\n        BeanPreferenzaDiRicerca prefRic = new BeanPreferenzaDiRicerca();\n        ArrayList<BeanPreferenzaDiRicerca> elencoPrefRic = new ArrayList<>();\n        elencoPrefRic = prefRicTurista.ottieniPreferenzeDiRicercaDelTurista(pIdTurista);\n        Iterator<BeanPreferenzaDiRicerca> elenco = elencoPrefRic.iterator();\n        while (elenco.hasNext() && delete == true) {\n            prefRic = elenco.next();\n            if (prefRic.getId() == pIdPreferenzaDiRicerca)\n                // Find the preference with the specified ID\n                delete = false;\n            // Exit the loop once the preference is found\n        }\n        prefRicTurista.cancellaPreferenzaDiRicercaTurista(pIdTurista, pIdPreferenzaDiRicerca);\n        return prefRic;\n    } catch (SQLException e) {\n        // If an SQL exception occurs, throw a RemoteException\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        BeanPreferenzeGeneriche temp = prefGenTurista.ottieniPreferenzaGenerica(pIdTurista);\r\n        boolean canceled = prefGenTurista.cancellaPreferenzaGenerica(temp.getId());\r\n        if (canceled)\r\n            return temp;\r\n        else\r\n            // The cancellation occurred\r\n            return null;\r\n    } catch (SQLException e) {\r\n        // If the data layer is thrown an exception SQLException\r\n        // It throws RemoteException the remote exception\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanPreferenzeGeneriche cancellaPreferenzeGeneriche(int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#cancellaPreferenzeGeneriche(int)\r\n */\r\n]",
                "innerComments": "Optional[[// The cancellation occurred\r\n, // If the data layer is thrown an exception SQLException\r\n, // It throws RemoteException the remote exception\r\n]]",
                "generated_comment": "/**\n * Deletes a generic preference for a tourist based on the provided tourist ID.\n * \n * @param pIdTurista The ID of the tourist for whom the preference needs to be deleted\n * @return The deleted generic preference if the deletion was successful, otherwise null\n * @throws RemoteException If an SQLException is thrown by the data layer while trying to delete the preference\n */\npublic BeanPreferenzeGeneriche cancellaPreferenzeGeneriche(int pIdTurista) {\n    try {\n        // Retrieve the generic preference for the tourist\n        BeanPreferenzeGeneriche temp = prefGenTurista.ottieniPreferenzaGenerica(pIdTurista);\n        \n        // Attempt to delete the generic preference\n        boolean canceled = prefGenTurista.cancellaPreferenzaGenerica(temp.getId());\n        \n        // Check if the deletion was successful\n        if (canceled)\n            return temp;\n        else\n            // The cancellation occurred\n            return null;\n    } catch (SQLException e) {\n        // If the data layer throws an exception SQLException, throw a RemoteException\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        boolean checkdate = ControlloDati.checkBeanPreferenzaDiRicerca(pPreferenzaDiRicerca);\r\n        if (checkdate) {\r\n            // If the data control is positive\r\n            return prefRicTurista.inserisciPreferenzaDiRicercaDelTurista(pIdTurista, pPreferenzaDiRicerca.getId());\r\n        } else {\r\n            // Data error\r\n            return false;\r\n        }\r\n    } catch (SQLException e) {\r\n        // If the data layer is thrown an exception SQLException\r\n        // It throws RemoteException the remote exception\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean inserisciPreferenzaDiRicerca(int, BeanPreferenzaDiRicerca)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#inserisciPreferenzaDiRicerca(int, unisa.gps.etour.bean.BeanPreferenzaDiRicerca)\r\n */\r\n]",
                "innerComments": "Optional[[// If the data control is positive\r\n, // Data error\r\n, // If the data layer is thrown an exception SQLException\r\n, // It throws RemoteException the remote exception\r\n]]",
                "generated_comment": "/**\n * Inserts a preference of search for a tourist in the system.\n * \n * @param pIdTurista the ID of the tourist for whom the preference of search is being inserted\n * @param pPreferenzaDiRicerca the BeanPreferenzaDiRicerca object containing the preference of search data\n * @return true if the preference of search is successfully inserted, false otherwise\n * @throws RemoteException if an SQL exception occurs during the process\n */\npublic boolean inserisciPreferenzaDiRicerca(int pIdTurista, BeanPreferenzaDiRicerca pPreferenzaDiRicerca) {\n    try {\n        boolean checkdate = ControlloDati.checkBeanPreferenzaDiRicerca(pPreferenzaDiRicerca);\n        if (checkdate) {\n            // If the data control is positive\n            return prefRicTurista.inserisciPreferenzaDiRicercaDelTurista(pIdTurista, pPreferenzaDiRicerca.getId());\n        } else {\n            // Data error\n            return false;\n        }\n    } catch (SQLException e) {\n        // If the data layer is thrown an exception SQLException\n        // It throws RemoteException the remote exception\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        boolean checkdate = ControlloDati.checkBeanPreferenzeGeneriche(pPreferenzeGeneriche);\r\n        if (checkdate) {\r\n            // If the data control is positive\r\n            return prefGenTurista.inserisciPreferenzaGenerica(pPreferenzeGeneriche);\r\n        } else {\r\n            // Data error\r\n            return false;\r\n        }\r\n    } catch (SQLException e) {\r\n        // If the data layer is thrown an exception SQLException\r\n        // It throws RemoteException the remote exception\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean inserisciPreferenzeGeneriche(BeanPreferenzeGeneriche)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#inserisciPreferenzeGeneriche(unisa.gps.etour.bean.BeanPreferenzeGeneriche)\r\n */\r\n]",
                "innerComments": "Optional[[// If the data control is positive\r\n, // Data error\r\n, // If the data layer is thrown an exception SQLException\r\n, // It throws RemoteException the remote exception\r\n]]",
                "generated_comment": "/**\n * Inserts generic preferences for a user.\n * \n * @param pPreferenzeGeneriche the BeanPreferenzeGeneriche object containing the preferences to be inserted\n * @return true if the preferences are successfully inserted, false if there is a data error\n * @throws RemoteException if a SQLException is thrown while accessing the data layer\n */\npublic boolean inserisciPreferenzeGeneriche(BeanPreferenzeGeneriche pPreferenzeGeneriche) {\n    try {\n        boolean checkdate = ControlloDati.checkBeanPreferenzeGeneriche(pPreferenzeGeneriche);\n        if (checkdate) {\n            // If the data control is positive\n            return prefGenTurista.inserisciPreferenzaGenerica(pPreferenzeGeneriche);\n        } else {\n            // Data error\n            return false;\n        }\n    } catch (SQLException e) {\n        // If the data layer is thrown an exception SQLException\n        // It throws RemoteException the remote exception\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        // Check if the username entered is already present in DB\r\n        BeanTurista temp = profiloTurista.ottieniTurista(pTurista.getUsername());\r\n        // If there is no choice all'username Tourist Offices\r\n        if (temp == null) {\r\n            boolean checkdate = ControlloDati.checkBeanTurista(pTurista);\r\n            if (checkdate) {\r\n                // If the data control is positive\r\n                return profiloTurista.inserisciTurista(pTurista);\r\n            } else {\r\n                // Data error\r\n                return false;\r\n            }\r\n        } else {\r\n            // Username already exists in DB\r\n            return false;\r\n        }\r\n    } catch (SQLException e) {\r\n        // If the data layer is thrown an exception SQLException\r\n        // It throws RemoteException the remote exception\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean inserisciTurista(BeanTurista)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#inserisciTurista(unisa.gps.etour.bean.BeanTurista)\r\n */\r\n]",
                "innerComments": "Optional[[// Check if the username entered is already present in DB\r\n, // If there is no choice all'username Tourist Offices\r\n, // If the data control is positive\r\n, // Data error\r\n, // Username already exists in DB\r\n, // If the data layer is thrown an exception SQLException\r\n, // It throws RemoteException the remote exception\r\n]]",
                "generated_comment": "/**\n * Inserts a tourist into the database if the username is not already present.\n * \n * @param pTurista the BeanTurista object representing the tourist to be inserted\n * @return true if the tourist is successfully inserted, false if the username already exists in the database or if there is a data error\n * @throws RemoteException if a SQLException is thrown by the data layer\n */\npublic boolean inserisciTurista(BeanTurista pTurista) {\n    try {\n        // Check if the username entered is already present in DB\n        BeanTurista temp = profiloTurista.ottieniTurista(pTurista.getUsername());\n        // If there is no choice all'username Tourist Offices\n        if (temp == null) {\n            boolean checkdate = ControlloDati.checkBeanTurista(pTurista);\n            if (checkdate) {\n                // If the data control is positive\n                return profiloTurista.inserisciTurista(pTurista);\n            } else {\n                // Data error\n                return false;\n            }\n        } else {\n            // Username already exists in DB\n            return false;\n        }\n    } catch (SQLException e) {\n        // If the data layer is thrown an exception SQLException\n        // It throws RemoteException the remote exception\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        boolean checkdate = ControlloDati.checkBeanPreferenzeGeneriche(pPreferenzeGenericheNuove);\r\n        if (checkdate) {\r\n            // If the data control is positive\r\n            return prefGenTurista.modificaPreferenzaGenerica(pPreferenzeGenericheNuove);\r\n        } else {\r\n            // Data error\r\n            return false;\r\n        }\r\n    } catch (SQLException e) {\r\n        // If the data layer is thrown an exception SQLException\r\n        // It throws RemoteException the remote exception\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean modificaPreferenzeGeneriche(BeanPreferenzeGeneriche)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#modificaPreferenzeGeneriche(unisa.gps.etour.bean.BeanPreferenzeGeneriche)\r\n */\r\n]",
                "innerComments": "Optional[[// If the data control is positive\r\n, // Data error\r\n, // If the data layer is thrown an exception SQLException\r\n, // It throws RemoteException the remote exception\r\n]]",
                "generated_comment": "/**\n * Modifies the generic preferences of a user.\n * \n * @param pPreferenzeGenericheNuove the new generic preferences to be modified\n * @return true if the generic preferences are successfully modified, false otherwise\n * @throws RemoteException if an SQL exception is thrown while accessing the database\n */\npublic boolean modificaPreferenzeGeneriche(BeanPreferenzeGeneriche pPreferenzeGenericheNuove) {\n    try {\n        boolean checkdate = ControlloDati.checkBeanPreferenzeGeneriche(pPreferenzeGenericheNuove);\n        if (checkdate) {\n            // If the data control is positive\n            return prefGenTurista.modificaPreferenzaGenerica(pPreferenzeGenericheNuove);\n        } else {\n            // Data error\n            return false;\n        }\n    } catch (SQLException e) {\n        // If the data layer is thrown an exception SQLException\n        // It throws RemoteException the remote exception\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Array containing the list of search preferences tourists ID = pIdTurista\r\n    BeanPreferenzaDiRicerca[] preferences = null;\r\n    try {\r\n        // ** Convert ArrayList (return type of method \"ottieniPreferenzeDiRicerca\") to simple array **\r\n        ArrayList<BeanPreferenzaDiRicerca> listaPreferenze = prefRicTurista.ottieniPreferenzeDiRicercaDelTurista(pIdTurista);\r\n        preferences = new BeanPreferenzaDiRicerca[listaPreferenze.size()];\r\n        preferences = listaPreferenze.toArray(preferences);\r\n        // ** ** End Conversion\r\n    } catch (SQLException e) {\r\n        // If the data layer is thrown an exception SQLException\r\n        // It throws RemoteException the remote exception\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    }\r\n    return preferences;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanPreferenzaDiRicerca[] ottieniPreferenzeDiRicerca(int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#ottieniPreferenzeDiRicerca(int)\r\n */\r\n]",
                "innerComments": "Optional[[// Array containing the list of search preferences tourists ID = pIdTurista\r\n, // ** ** End Conversion\r\n, // ** Convert ArrayList (return type of method \"ottieniPreferenzeDiRicerca\") to simple array **\r\n, // If the data layer is thrown an exception SQLException\r\n, // It throws RemoteException the remote exception\r\n]]",
                "generated_comment": "/**\n * Retrieves the search preferences of a tourist with the specified ID.\n * \n * @param pIdTurista the ID of the tourist whose search preferences are to be retrieved\n * @return an array of BeanPreferenzaDiRicerca objects representing the search preferences of the tourist\n * @throws RemoteException if an SQLException occurs while retrieving the search preferences\n */\npublic BeanPreferenzaDiRicerca[] ottieniPreferenzeDiRicerca(int pIdTurista) {\n    // Array containing the list of search preferences for tourist ID = pIdTurista\n    BeanPreferenzaDiRicerca[] preferences = null;\n    try {\n        // Convert ArrayList (return type of method \"ottieniPreferenzeDiRicerca\") to simple array\n        ArrayList<BeanPreferenzaDiRicerca> listaPreferenze = prefRicTurista.ottieniPreferenzeDiRicercaDelTurista(pIdTurista);\n        preferences = new BeanPreferenzaDiRicerca[listaPreferenze.size()];\n        preferences = listaPreferenze.toArray(preferences);\n    } catch (SQLException e) {\n        // If an SQLException occurs in the data layer, throw a RemoteException\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    }\n    return preferences;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        return prefGenTurista.ottieniPreferenzaGenerica(pIdTurista);\r\n    } catch (SQLException e) {\r\n        // If the data layer is thrown an exception SQLException\r\n        // It throws RemoteException the remote exception\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanPreferenzeGeneriche ottieniPreferenzeGeneriche(int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#ottieniPreferenzeGeneriche(int)\r\n */\r\n]",
                "innerComments": "Optional[[// If the data layer is thrown an exception SQLException\r\n, // It throws RemoteException the remote exception\r\n]]",
                "generated_comment": "/**\n * Retrieves the generic preferences for a given tourist ID.\n * \n * @param pIdTurista the ID of the tourist for which to retrieve preferences\n * @return the generic preferences for the specified tourist\n * @throws RemoteException if an SQL exception is caught while retrieving preferences from the data layer\n */\npublic BeanPreferenzeGeneriche ottieniPreferenzeGeneriche(int pIdTurista) {\n    try {\n        return prefGenTurista.ottieniPreferenzaGenerica(pIdTurista);\n    } catch (SQLException e) {\n        // If the data layer is thrown an exception SQLException\n        // It throws RemoteException the remote exception\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    try {\r\n        // Boolean variable that will hold true if the bean is correct, false otherwise\r\n        boolean checkdate = ControlloDati.checkBeanTurista(pprofiloTurista);\r\n        if (checkdate) {\r\n            // If the data control is positive\r\n            return profiloTurista.modificaTurista(pprofiloTurista);\r\n        } else {\r\n            // Data error\r\n            return false;\r\n        }\r\n    } catch (SQLException e) {\r\n        // If the data layer is thrown an exception SQLException\r\n        // It throws RemoteException the remote exception\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean modificaTurista(BeanTurista)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.GestioneTuristaComune#modificaTurista(unisa.gps.etour.bean.BeanTurista)\r\n */\r\n]",
                "innerComments": "Optional[[// Boolean variable that will hold true if the bean is correct, false otherwise\r\n, // If the data control is positive\r\n, // Data error\r\n, // If the data layer is thrown an exception SQLException\r\n, // It throws RemoteException the remote exception\r\n]]",
                "generated_comment": "/**\n * Modifies a tourist profile with the provided data.\n * \n * @param pprofiloTurista the BeanTurista object containing the new data for the tourist profile\n * @return true if the tourist profile is successfully modified, false otherwise\n * @throws RemoteException if an SQLException is thrown by the data layer\n */\npublic boolean modificaTurista(BeanTurista pprofiloTurista) {\n    try {\n        // Boolean variable that will hold true if the bean is correct, false otherwise\n        boolean checkdate = ControlloDati.checkBeanTurista(pprofiloTurista);\n        if (checkdate) {\n            // If the data control is positive\n            return profiloTurista.modificaTurista(pprofiloTurista);\n        } else {\n            // Data error\n            return false;\n        }\n    } catch (SQLException e) {\n        // If the data layer is thrown an exception SQLException\n        // It throws RemoteException the remote exception\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    BeanVisitaBC[] visited = null;\r\n    if (pIdTurista > 0) {\r\n        try {\r\n            ArrayList<BeanVisitaBC> listavisitati = visitatiBC.ottieniListaVisitaBCTurista(pIdTurista);\r\n            visited = new BeanVisitaBC[listavisitati.size()];\r\n            visited = listavisitati.toArray(visited);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return visited;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public BeanVisitaBC[] ottieniBeniCulturaliVisitati(int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#ottieniBeniCulturaliVisitati(int)\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves a list of cultural assets visited by a tourist identified by their ID.\n * \n * @param pIdTurista the ID of the tourist for whom to retrieve the list of visited cultural assets\n * @return an array of BeanVisitaBC objects representing the cultural assets visited by the tourist, or null if the tourist ID is invalid or no assets have been visited\n * @throws RemoteException if an error occurs while accessing the database or an unknown error occurs\n */\npublic BeanVisitaBC[] ottieniBeniCulturaliVisitati(int pIdTurista) {\n    BeanVisitaBC[] visited = null;\n    if (pIdTurista > 0) {\n        try {\n            ArrayList<BeanVisitaBC> listavisitati = visitatiBC.ottieniListaVisitaBCTurista(pIdTurista);\n            visited = new BeanVisitaBC[listavisitati.size()];\n            visited = listavisitati.toArray(visited);\n        } catch (SQLException e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n        } catch (Exception e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n        }\n    }\n    return visited;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Array containing the list of catering outlets visited by tourists with id \"pIdTurista\"\r\n    BeanVisitaPR[] visited = null;\r\n    if (pIdTurista > 0) {\r\n        try {\r\n            ArrayList<BeanVisitaPR> listavisitati = visitatiPR.ottieniListaVisitaPRTurista(pIdTurista);\r\n            visited = new BeanVisitaPR[listavisitati.size()];\r\n            visited = listavisitati.toArray(visited);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return visited;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanVisitaPR[] ottieniPuntiDiRistoroVisitati(int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#ottieniPuntiDiRistoroVisitati(int)\r\n */\r\n]",
                "innerComments": "Optional[[// Array containing the list of catering outlets visited by tourists with id \"pIdTurista\"\r\n]]",
                "generated_comment": "/**\n * Retrieves the list of catering outlets visited by a tourist with the specified ID.\n * \n * @param pIdTurista the ID of the tourist whose visited catering outlets are to be retrieved\n * @return an array of BeanVisitaPR objects representing the catering outlets visited by the tourist,\n *         or null if the tourist ID is invalid or no catering outlets have been visited\n * @throws RemoteException if an error occurs while retrieving the list of visited catering outlets\n *         from the database\n */\npublic BeanVisitaPR[] ottieniPuntiDiRistoroVisitati(int pIdTurista) {\n    // Array containing the list of catering outlets visited by tourists with id \"pIdTurista\"\n    BeanVisitaPR[] visited = null;\n    if (pIdTurista > 0) {\n        try {\n            ArrayList<BeanVisitaPR> listavisitati = visitatiPR.ottieniListaVisitaPRTurista(pIdTurista);\n            visited = new BeanVisitaPR[listavisitati.size()];\n            visited = listavisitati.toArray(visited);\n        } catch (SQLException e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n        } catch (Exception e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n        }\n    }\n    return visited;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (ControlloDati.checkBeanVisitaBC(pVisitaBC)) {\r\n        try {\r\n            return visitatiBC.inserisciVisitaBC(pVisitaBC);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean inserisciBeneCulturaleVisitato(BeanVisitaBC)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#inserisciBeneCulturaleVisitato(unisa.gps.etour.bean.BeanVisitaBC)\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Inserts a cultural asset visited into the database.\n * \n * @param pVisitaBC the cultural asset visit bean to be inserted\n * @return true if the cultural asset visit was successfully inserted, false otherwise\n * @throws RemoteException if an error occurs while accessing the database or for any other unknown error\n */\npublic boolean inserisciBeneCulturaleVisitato(BeanVisitaBC pVisitaBC) {\n    if (ControlloDati.checkBeanVisitaBC(pVisitaBC)) {\n        try {\n            return visitatiBC.inserisciVisitaBC(pVisitaBC);\n        } catch (SQLException e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n        } catch (Exception e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n        }\n    }\n    return false;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (ControlloDati.checkBeanVisitaPR(pVisitaPR)) {\r\n        try {\r\n            return visitatiPR.inserisciVisitaPR(pVisitaPR);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean inserisciPuntoDiRistoroVisitato(BeanVisitaPR)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#inserisciPuntoDiRistoroVisitato(unisa.gps.etour.bean.BeanVisitaPR)\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Inserts a visited point of interest into the database.\n * \n * @param pVisitaPR the BeanVisitaPR object containing the information of the visited point of interest\n * @return true if the visited point of interest is successfully inserted into the database, false otherwise\n * @throws RemoteException if an error occurs while accessing the database or if an unknown error occurs\n */\npublic boolean inserisciPuntoDiRistoroVisitato(BeanVisitaPR pVisitaPR) {\n    if (ControlloDati.checkBeanVisitaPR(pVisitaPR)) {\n        try {\n            return visitatiPR.inserisciVisitaPR(pVisitaPR);\n        } catch (SQLException e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n        } catch (Exception e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n        }\n    }\n    return false;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (pIdTurista > 0 && pIdBeneCulturale > 0) {\r\n        try {\r\n            return profiloTurista.inserisciBeneCulturalePreferito(pIdTurista, pIdBeneCulturale);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean inserisciBeneCulturalePreferito(int, int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#inserisciBeneCulturalePreferito(int, int)\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Inserts a preferred cultural asset for a tourist in their profile.\n * \n * @param pIdTurista the ID of the tourist\n * @param pIdBeneCulturale the ID of the cultural asset to be inserted\n * @return true if the cultural asset was successfully inserted, false otherwise\n * @throws RemoteException if an error occurs while accessing the database or for unknown errors\n */"
            },
            {
                "body": "Optional[{\r\n    if (pIdTurista > 0 && pIdPuntoDiRistoro > 0) {\r\n        try {\r\n            return profiloTurista.inserisciPuntoDiRistoroPreferito(pIdTurista, pIdPuntoDiRistoro);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean inserisciPuntoDiRistoroPreferito(int, int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#inserisciPuntoDiRistoroPreferito(int, int)\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Inserts a preferred dining point for a tourist in their profile.\n * \n * @param pIdTurista the ID of the tourist\n * @param pIdPuntoDiRistoro the ID of the dining point to be inserted\n * @return true if the dining point was successfully inserted as preferred, false otherwise\n * @throws RemoteException if there is an error with the database or an unknown error occurs\n */"
            },
            {
                "body": "Optional[{\r\n    if (pIdTurista > 0 && pIdBeneCulturale > 0) {\r\n        try {\r\n            return profiloTurista.cancellaBeneCulturalePreferito(pIdTurista, pIdBeneCulturale);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean cancellaBeneCulturalePreferito(int, int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#cancellaBeneCulturalePreferito(int, int)\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Cancels a preferred cultural asset for a tourist.\n * \n * This method cancels a preferred cultural asset for a tourist identified by their ID.\n * \n * @param pIdTurista the ID of the tourist\n * @param pIdBeneCulturale the ID of the cultural asset to be canceled\n * @return true if the preferred cultural asset is successfully canceled, false otherwise\n * @throws RemoteException if an error occurs during the cancellation process, such as a database error or an unknown error\n */"
            },
            {
                "body": "Optional[{\r\n    if (pIdTurista > 0 && pIdPuntoDiRistoro > 0) {\r\n        try {\r\n            return profiloTurista.cancellaPuntoDiRistoroPreferito(pIdTurista, pIdPuntoDiRistoro);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public boolean cancellaPuntoDiRistoroPreferito(int, int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n *\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#cancellaPuntoDiRistoroPreferito(int, int)\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Cancels a favorite restaurant point for a tourist.\n * \n * @param pIdTurista the ID of the tourist\n * @param pIdPuntoDiRistoro the ID of the restaurant point to be canceled\n * @return true if the restaurant point is successfully canceled, false otherwise\n * @throws RemoteException if an error occurs while accessing the database or for any other unknown error\n */"
            },
            {
                "body": "Optional[{\r\n    if (pIdTurista > 0) {\r\n        try {\r\n            // List of cultural favorites of tourists with id = \"pIdTurista\"\r\n            ArrayList<Integer> listaPreferiti = profiloTurista.ottieniBeniCulturaliPreferiti(pIdTurista);\r\n            // Convert ArrayList to simple array\r\n            BeanBeneCulturale[] favorites = new BeanBeneCulturale[listaPreferiti.size()];\r\n            favorites = new BeanBeneCulturale[listaPreferiti.size()];\r\n            listaPreferiti.toArray(favorites);\r\n            // Cycle counter\r\n            int k = 0;\r\n            for (Integer i : listaPreferiti) {\r\n                // Fill the array with the favorite bean of all cultural favorites from the tourist\r\n                favorites[k++] = beneCulturale.ottieniBeneCulturale(i);\r\n            }\r\n            return favorites;\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return null;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanBeneCulturale[] ottieniBeniCulturaliPreferiti(int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#ottieniBeniCulturaliPreferiti(int)\r\n */\r\n]",
                "innerComments": "Optional[[// List of cultural favorites of tourists with id = \"pIdTurista\"\r\n, // Convert ArrayList to simple array\r\n, // Cycle counter\r\n, // Fill the array with the favorite bean of all cultural favorites from the tourist\r\n]]",
                "generated_comment": "/**\n * Retrieves the favorite cultural assets of a tourist based on their ID.\n * \n * @param pIdTurista the ID of the tourist\n * @return an array of BeanBeneCulturale objects representing the favorite cultural assets of the tourist\n * @throws RemoteException if an error occurs during the database query or for any other unknown reason\n */\npublic BeanBeneCulturale[] ottieniBeniCulturaliPreferiti(int pIdTurista) {\n    if (pIdTurista > 0) {\n        try {\n            // List of cultural favorites of tourists with id = \"pIdTurista\"\n            ArrayList<Integer> listaPreferiti = profiloTurista.ottieniBeniCulturaliPreferiti(pIdTurista);\n            // Convert ArrayList to simple array\n            BeanBeneCulturale[] favorites = new BeanBeneCulturale[listaPreferiti.size()];\n            listaPreferiti.toArray(favorites);\n            // Cycle counter\n            int k = 0;\n            for (Integer i : listaPreferiti) {\n                // Fill the array with the favorite bean of all cultural favorites from the tourist\n                favorites[k++] = beneCulturale.ottieniBeneCulturale(i);\n            }\n            return favorites;\n        } catch (SQLException e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n        } catch (Exception e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n        }\n    }\n    return null;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (pIdTurista > 0) {\r\n        try {\r\n            // List of places for refreshment favorite tourist with id = \"pIdTurista\"\r\n            ArrayList<Integer> listaPreferiti = profiloTurista.ottieniPuntoDiRistoroPreferiti(pIdTurista);\r\n            // Convert ArrayList to simple array\r\n            BeanPuntoDiRistoro[] favorites = new BeanPuntoDiRistoro[listaPreferiti.size()];\r\n            listaPreferiti.toArray(favorites);\r\n            // Cycle counter\r\n            int k = 0;\r\n            for (Integer i : listaPreferiti) {\r\n                // Fill the array with the favorite bean of all cultural favorites from the tourist\r\n                favorites[k++] = puntoDiRistoro.ottieniPuntoDiRistoro(i);\r\n            }\r\n            return favorites;\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return null;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanPuntoDiRistoro[] ottieniPuntiDiRistoroPreferiti(int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n * @see unisa.gps.etour.control.GestioneUtentiRegistrati.IGestioneTuristaClient#ottieniPuntiDiRistoroPreferiti(int)\r\n */\r\n]",
                "innerComments": "Optional[[// List of places for refreshment favorite tourist with id = \"pIdTurista\"\r\n, // Convert ArrayList to simple array\r\n, // Cycle counter\r\n, // Fill the array with the favorite bean of all cultural favorites from the tourist\r\n]]",
                "generated_comment": "/**\n * Retrieves the favorite refreshment points for a given tourist ID.\n * \n * @param pIdTurista the ID of the tourist\n * @return an array of BeanPuntoDiRistoro objects representing the favorite refreshment points of the tourist\n * @throws RemoteException if an error occurs while accessing the database or for any other unknown error\n */\npublic BeanPuntoDiRistoro[] ottieniPuntiDiRistoroPreferiti(int pIdTurista) {\n    if (pIdTurista > 0) {\n        try {\n            // List of places for refreshment favorite tourist with id = \"pIdTurista\"\n            ArrayList<Integer> listaPreferiti = profiloTurista.ottieniPuntoDiRistoroPreferiti(pIdTurista);\n            // Convert ArrayList to simple array\n            BeanPuntoDiRistoro[] favorites = new BeanPuntoDiRistoro[listaPreferiti.size()];\n            listaPreferiti.toArray(favorites);\n            // Cycle counter\n            int k = 0;\n            for (Integer i : listaPreferiti) {\n                // Fill the array with the favorite bean of all cultural favorites from the tourist\n                favorites[k++] = puntoDiRistoro.ottieniPuntoDiRistoro(i);\n            }\n            return favorites;\n        } catch (SQLException e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n        } catch (Exception e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n        }\n    }\n    return null;\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super();\r\n    profiloTurista = new DBTurista();\r\n    prefGenTurista = new DBPreferenzeGeneriche();\r\n    prefRicTurista = new DBPreferenzeDiRicerca();\r\n    visitatiBC = new DBVisitaBC();\r\n    visitatiPR = new DBVisitaPR();\r\n    beneCulturale = new DBBeneCulturale();\r\n    puntoDiRistoro = new DBPuntoDiRistoro();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public GestioneTuristaClient()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new instance of GestioneTuristaClient.\n * Initializes the GestioneTuristaClient by creating new instances of DBTurista, DBPreferenzeGeneriche,\n * DBPreferenzeDiRicerca, DBVisitaBC, DBVisitaPR, DBBeneCulturale, and DBPuntoDiRistoro.\n */"
            }
        ],
        "signature": "GestioneTuristaClient",
        "variables": [
            "private  static  final long serialVersionUID",
            "private IDBTurista profiloTurista",
            "private IDBPreferenzeGeneriche prefGenTurista",
            "private IDBPreferenzeDiRicerca prefRicTurista",
            "private IDBVisitaBC visitatiBC",
            "private IDBVisitaPR visitatiPR",
            "private IDBBeneCulturale beneCulturale",
            "private IDBPuntoDiRistoro puntoDiRistoro"
        ],
        "generated_class_comment": "/**\n * The GestioneTuristaClient class is responsible for managing tourist-related operations such as preferences, visits, and profiles.\n * It provides methods for inserting, deleting, and modifying tourist preferences, as well as retrieving information about visited cultural assets and dining points.\n * This class interacts with various database access objects (DBTurista, DBPreferenzeGeneriche, DBPreferenzeDiRicerca, DBVisitaBC, DBVisitaPR, DBBeneCulturale, DBPuntoDiRistoro) to perform these operations.\n * \n * Main functionalities include:\n * - Managing tourist preferences for search and generic preferences\n * - Handling the insertion and deletion of visited cultural assets and dining points\n * - Modifying tourist profiles and retrieving information about visited locations\n * \n * The class contains constructors for initializing the database access objects and methods for performing the specified operations.\n * \n * @author [Author Name]\n * @version [Version Number]\n */\n**/"
    }
]