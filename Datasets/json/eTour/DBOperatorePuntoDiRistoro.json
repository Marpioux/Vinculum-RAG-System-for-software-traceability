[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query cancellation\r\n        String query = \"DELETE FROM operatorepuntodiristoro WHERE Id =\" + pIdOperatore;\r\n        // Execute the query Cancellation\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } catch (SQLException e) {\r\n        throw e;\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the Connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean cancellaOperatorePuntoDiRistoro(int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get connection\r\n, // Create the Statement\r\n, // Query cancellation\r\n, // Execute the query Cancellation\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the Connection\r\n]]",
                "generated_comment": "/**\n * Deletes an operator from the database based on their ID.\n * \n * @param pIdOperatore the ID of the operator to be deleted\n * @return true if the operator was successfully deleted, false otherwise\n * @throws SQLException if an error occurs while executing the deletion query\n */\npublic boolean cancellaOperatorePuntoDiRistoro(int pIdOperatore) throws SQLException {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    try {\n        // Get connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query cancellation\n        String query = \"DELETE FROM operatorepuntodiristoro WHERE Id =\" + pIdOperatore;\n        // Execute the query Cancellation\n        int i = stat.executeUpdate(query);\n        // This returns the backup\n        return (i == 1);\n    } catch (SQLException e) {\n        throw e;\n    } finally {\n        // Always runs and takes care of closing the Statement and the Connection\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    // Variable for the query results\r\n    ResultSet unico = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query for the insertion\r\n        String query = \"INSERT INTO operatorepuntodiristoro (Name, Surname, Username, Password, Email, IdPuntoDiRistoro) VALUES ('\" + pOperatore.getNome() + \"','\" + pOperatore.getCognome() + \"','\" + pOperatore.getUsername() + \"','\" + pOperatore.getPassword() + \"','\" + pOperatore.getEmail() + \"',\" + pOperatore.getIdPuntoDiRistoro() + \")\";\r\n        // Query for checking the ID of the PuntoDiRistoro as the association is 1 to 1 between OPPR and PR\r\n        String unicoQuery = \"SELECT IdPuntoDiRistoro FROM operatorepuntodiristoro WHERE IdPuntoDiRistoro =\" + pOperatore.getIdPuntoDiRistoro();\r\n        // Execute the query to control\r\n        unico = stat.executeQuery(unicoQuery);\r\n        int j = 0;\r\n        // Check if there are tuples\r\n        while (unico.next()) {\r\n            j++;\r\n        }\r\n        // If it is empty\r\n        if (j == 0) {\r\n            // Execute the insert query\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            System.out.println(\"If you include the PR\");\r\n            return (i == 1);\r\n        } else {\r\n            // If not already exist\r\n            System.out.println(\"Operator PR already exists for the PR\");\r\n            return false;\r\n        }\r\n    } catch (SQLException e) {\r\n        throw e;\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the Connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n        if (unico != null) {\r\n            unico.close();\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean inserisciOperatorePuntoDiRistoro(BeanOperatorePuntoDiRistoro)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Variable for the query results\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query for the insertion\r\n, // Query for checking the ID of the PuntoDiRistoro as the association is 1 to 1 between OPPR and PR\r\n, // Execute the query to control\r\n, // Check if there are tuples\r\n, // If it is empty\r\n, // Execute the insert query\r\n, // This returns the backup\r\n, // If not already exist\r\n, // Always runs and takes care of closing the Statement and the Connection\r\n]]",
                "generated_comment": "/**\n * Inserts a new operator for a restaurant point in the database.\n * \n * @param pOperatore the BeanOperatorePuntoDiRistoro object containing the operator's information\n * @return true if the operator was successfully inserted, false if the operator already exists for the restaurant point\n * @throws SQLException if an error occurs while executing the SQL queries\n */\npublic boolean inserisciOperatorePuntoDiRistoro(BeanOperatorePuntoDiRistoro pOperatore) throws SQLException {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    // Variable for the query results\n    ResultSet unico = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query for the insertion\n        String query = \"INSERT INTO operatorepuntodiristoro (Name, Surname, Username, Password, Email, IdPuntoDiRistoro) VALUES ('\" + pOperatore.getNome() + \"','\" + pOperatore.getCognome() + \"','\" + pOperatore.getUsername() + \"','\" + pOperatore.getPassword() + \"','\" + pOperatore.getEmail() + \"',\" + pOperatore.getIdPuntoDiRistoro() + \")\";\n        // Query for checking the ID of the PuntoDiRistoro as the association is 1 to 1 between OPPR and PR\n        String unicoQuery = \"SELECT IdPuntoDiRistoro FROM operatorepuntodiristoro WHERE IdPuntoDiRistoro =\" + pOperatore.getIdPuntoDiRistoro();\n        // Execute the query to control\n        unico = stat.executeQuery(unicoQuery);\n        int j = 0;\n        // Check if there are tuples\n        while (unico.next()) {\n            j++;\n        }\n        // If it is empty\n        if (j == 0) {\n            // Execute the insert query\n            int i = stat.executeUpdate(query);\n            // This returns the backup\n            System.out.println(\"If you include the PR\");\n            return (i == 1);\n        } else {\n            // If not already exist\n            System.out.println(\"Operator PR already exists for the PR\");\n            return false;\n        }\n    } catch (SQLException e) {\n        throw e;\n    } finally {\n        // Always runs and takes care of closing the Statement and the Connection\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n        if (unico != null) {\n            unico.close();\n        }\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query for amendment\r\n        String query = \"UPDATE operatorepuntodiristoro SET Name = '\" + pOperatore.getNome() + \"', Surname ='\" + pOperatore.getCognome() + \"', Password ='\" + pOperatore.getPassword() + \"', Email ='\" + pOperatore.getEmail() + \"' WHERE IdPuntoDiRistoro =\" + pOperatore.getIdPuntoDiRistoro();\r\n        // Execute the query for Change\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } catch (SQLException e) {\r\n        throw e;\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the Connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean modificaOperatorePuntoDiRistoro(BeanOperatorePuntoDiRistoro)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query for amendment\r\n, // Execute the query for Change\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the Connection\r\n]]",
                "generated_comment": "/**\n * Modifies an operator associated with a specific point of sale in the database.\n * \n * @param pOperatore the BeanOperatorePuntoDiRistoro object containing the updated operator information\n * @return true if the operator was successfully updated in the database, false otherwise\n * @throws SQLException if an error occurs while executing the SQL query\n */"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    // Variable for the query results\r\n    ResultSet result = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query for the extraction of the dot Refreshments required\r\n        String query = \"SELECT * FROM operatorepuntodiristoro WHERE id = \" + pIdOperatore;\r\n        // The query is executed\r\n        result = stat.executeQuery(query);\r\n        // Get the bean Operator refreshment passing the id\r\n        BeanOperatorePuntoDiRistoro beanTemp = null;\r\n        if (result.next()) {\r\n            // Built on BeanOPR\r\n            beanTemp = new BeanOperatorePuntoDiRistoro(result.getInt(\"Id\"), result.getString(\"Name\"), result.getString(\"Surname\"), result.getString(\"Username\"), result.getString(\"Password\"), result.getString(\"Email\"), result.getInt(\"IdPuntoDiRistoro\"));\r\n        }\r\n        return beanTemp;\r\n    } catch (SQLException e) {\r\n        throw e;\r\n    } finally {\r\n        // Always runs and takes care to close the Result, the Statement and Connection\r\n        if (result != null) {\r\n            result.close();\r\n        }\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public BeanOperatorePuntoDiRistoro ottieniOperatorePuntoDiRistoro(int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Variable for the query results\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query for the extraction of the dot Refreshments required\r\n, // The query is executed\r\n, // Get the bean Operator refreshment passing the id\r\n, // Built on BeanOPR\r\n, // Always runs and takes care to close the Result, the Statement and Connection\r\n]]",
                "generated_comment": "/**\n * Retrieves an Operator Refreshment bean based on the provided operator ID.\n * \n * @param pIdOperatore the ID of the operator for which to retrieve the bean\n * @return the Operator Refreshment bean containing the operator's information\n * @throws SQLException if an error occurs while accessing the database\n */\npublic BeanOperatorePuntoDiRistoro ottieniOperatorePuntoDiRistoro(int pIdOperatore) throws SQLException {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    // Variable for the query results\n    ResultSet result = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query for the extraction of the dot Refreshments required\n        String query = \"SELECT * FROM operatorepuntodiristoro WHERE id = \" + pIdOperatore;\n        // The query is executed\n        result = stat.executeQuery(query);\n        // Get the bean Operator refreshment passing the id\n        BeanOperatorePuntoDiRistoro beanTemp = null;\n        if (result.next()) {\n            // Built on BeanOPR\n            beanTemp = new BeanOperatorePuntoDiRistoro(result.getInt(\"Id\"), result.getString(\"Name\"), result.getString(\"Surname\"), result.getString(\"Username\"), result.getString(\"Password\"), result.getString(\"Email\"), result.getInt(\"IdPuntoDiRistoro\"));\n        }\n        return beanTemp;\n    } catch (SQLException e) {\n        throw e;\n    } finally {\n        // Always runs and takes care to close the Result, the Statement and Connection\n        if (result != null) {\n            result.close();\n        }\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public DBOperatorePuntoDiRistoro()",
                "comments": "Optional[// Empty constructor\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This constructor creates a new instance of DBOperatorePuntoDiRistoro class.\n * It does not take any parameters.\n * \n * @param None\n * @return A new instance of DBOperatorePuntoDiRistoro\n */"
            }
        ],
        "signature": "DBOperatorePuntoDiRistoro",
        "variables": [],
        "generated_class_comment": "/**\n * The DBOperatorePuntoDiRistoro class provides database operations for managing operators associated with restaurant points.\n * It includes methods for deleting, inserting, modifying, and retrieving operator information from the database.\n * \n * This class contains the following functionalities:\n * - Deleting an operator based on their ID\n * - Inserting a new operator for a restaurant point\n * - Modifying an existing operator associated with a specific point of sale\n * - Retrieving operator information based on the provided operator ID\n * \n * The class ensures proper database connection handling and exception management for all operations.\n * \n * @author [Author Name]\n * @version 1.0\n */"
    }
]