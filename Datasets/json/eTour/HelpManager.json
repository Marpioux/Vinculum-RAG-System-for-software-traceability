[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    previousMessage = destination.getText();\r\n    JComponent component = (JComponent) pMouseEnteredEvent.getComponent();\r\n    String help = dictionary.get(component.getName());\r\n    destination.setText(help);\r\n    destination.repaint();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void mouseEntered(MouseEvent)",
                "comments": "Optional[/**\r\n * This method handles the event when the mouse pointer enters the component.\r\n *\r\n * @param pMouseEnteredEvent MouseEvent - The event generated by the mouse.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates the text in the destination component with the help message corresponding to the component that triggered the mouseEntered event.\n * \n * @param event the MouseEvent that triggered the mouseEntered event\n * \n * This method retrieves the previous message from the destination component, gets the component that triggered the event, looks up the corresponding help message in the dictionary, sets the destination text to the help message, and repaints the destination component to display the updated message.\n */"
            },
            {
                "body": "Optional[{\r\n    destination.setText(previousMessage);\r\n    destination.repaint();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void mouseExited(MouseEvent)",
                "comments": "Optional[/**\r\n * This method handles the event when the mouse pointer exits a component.\r\n *\r\n * @param pMouseExitedEvent MouseEvent - The event generated by the mouse.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when the mouse exits the component. It sets the text of the destination component to the previous message and repaints the destination component.\n * \n * @param e the MouseEvent that triggered the mouse exit event\n * \n * @return void\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    dictionary = new HashMap<>();\r\n    destination = pComponent;\r\n    File afil = null;\r\n    try {\r\n        afil = new File(getClass().getResource(pPercorso).toURI());\r\n    } catch (URISyntaxException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n    Scanner scan = new Scanner(new BufferedReader(new FileReader(afil)));\r\n    StringTokenizer tokenizer;\r\n    while (scan.hasNext()) {\r\n        tokenizer = new StringTokenizer(scan.nextLine(), \"##\");\r\n        dictionary.put(tokenizer.nextToken(), tokenizer.nextToken());\r\n    }\r\n    scan.close();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public HelpManager(String, JTextComponent)",
                "comments": "Optional[/**\r\n * The constructor creates a new instance of the class for the\r\n * managing the online help files from content.\r\n * The guide itself and the component in which it appears.\r\n *\r\n * @param pPercorso String - the path of the help file.\r\n * @param pComponent JTextComponent - the component in which to display\r\n * driving.\r\n * @throws FileNotFoundException - if the help file is not found.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new HelpManager object with the specified dictionary and destination component.\n * The dictionary is populated by reading key-value pairs from a file located at the specified path.\n * \n * @param pPercorso the path to the file containing the key-value pairs\n * @param pComponent the destination component where the help information will be displayed\n */"
            }
        ],
        "signature": "HelpManager",
        "variables": [
            "private HashMap<String,String> dictionary",
            "private JTextComponent destination",
            "private String previousMessage"
        ],
        "generated_class_comment": "/**\n * The HelpManager class is responsible for managing online help files and displaying help messages in a designated component.\n * It provides functionality to handle mouse events for displaying help messages and initializing the dictionary of help messages.\n * \n * The class includes methods to update the text in the destination component with the corresponding help message when the mouse enters a component,\n * and to revert back to the previous message when the mouse exits the component.\n * \n * The HelpManager constructor initializes the dictionary with key-value pairs read from a file located at the specified path,\n * and sets the destination component where the help information will be displayed.\n * \n * Overall, the HelpManager class acts as a central hub for managing and displaying help messages in a user-friendly manner.\n */"
    }
]