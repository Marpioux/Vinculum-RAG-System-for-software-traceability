[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    previousMessage = destination.getText();\r\n    JComponent component = (JComponent) pMouseEnteredEvent.getComponent();\r\n    String help = dictionary.get(component.getName());\r\n    destination.setText(help);\r\n    destination.repaint();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void mouseEntered(MouseEvent)",
                "comments": "Optional[/**\r\n * This method handles the event when the mouse pointer enters the component.\r\n *\r\n * @param pMouseEnteredEvent MouseEvent - The event generated by the mouse.\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    destination.setText(previousMessage);\r\n    destination.repaint();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void mouseExited(MouseEvent)",
                "comments": "Optional[/**\r\n * This method handles the event when the mouse pointer exits a component.\r\n *\r\n * @param pMouseExitedEvent MouseEvent - The event generated by the mouse.\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    dictionary = new HashMap<>();\r\n    destination = pComponent;\r\n    File afil = null;\r\n    try {\r\n        afil = new File(getClass().getResource(pPercorso).toURI());\r\n    } catch (URISyntaxException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n    Scanner scan = new Scanner(new BufferedReader(new FileReader(afil)));\r\n    StringTokenizer tokenizer;\r\n    while (scan.hasNext()) {\r\n        tokenizer = new StringTokenizer(scan.nextLine(), \"##\");\r\n        dictionary.put(tokenizer.nextToken(), tokenizer.nextToken());\r\n    }\r\n    scan.close();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public HelpManager(String, JTextComponent)",
                "comments": "Optional[/**\r\n * The constructor creates a new instance of the class for the\r\n * managing the online help files from content.\r\n * The guide itself and the component in which it appears.\r\n *\r\n * @param pPercorso String - the path of the help file.\r\n * @param pComponent JTextComponent - the component in which to display\r\n * driving.\r\n * @throws FileNotFoundException - if the help file is not found.\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "signature": "HelpManager",
        "variables": [
            "private HashMap<String,String> dictionary",
            "private JTextComponent destination",
            "private String previousMessage"
        ]
    }
]