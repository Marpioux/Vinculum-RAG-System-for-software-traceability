[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    // Check identifier passed\r\n    if (pPuntoDiRistoroID < 0) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    // Return Instance\r\n    BeanPuntoDiRistoro toReturn = null;\r\n    try {\r\n        // Revenue data through the instance of the database connection\r\n        toReturn = puntoRistoro.ottieniPuntoDiRistoro(pPuntoDiRistoroID);\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // Check the variable return, so they do not pass bad data\r\n    // To the caller\r\n    // And triggers an exception if the format of the bean\r\n    if (toReturn == null) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n    }\r\n    // Return the bean that contains information about Refreshment\r\n    // Required\r\n    return toReturn;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanPuntoDiRistoro ottieniPuntoDiRistoro(int)",
                "comments": "Optional[/**\r\n * Method which allows to obtain a BeanPuntoDiRistoro through\r\n * Connect to database\r\n */\r\n]",
                "innerComments": "Optional[[// Check the variable return, so they do not pass bad data\r\n, // To the caller\r\n, // Return the bean that contains information about Refreshment\r\n, // Check identifier passed\r\n, // Return Instance\r\n, // Revenue data through the instance of the database connection\r\n, // And triggers an exception if the format of the bean\r\n, // Required\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Check identifier passed\r\n    if (pPuntoDiRistoroID < 0) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    // Return Instance\r\n    ArrayList<BeanTag> toReturn = null;\r\n    try {\r\n        // Revenue data through the instance of the database connection\r\n        toReturn = tags.ottieniTagPuntoDiRistoro(pPuntoDiRistoroID);\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // Check the variable return, so they do not pass bad data\r\n    // To the caller\r\n    // And triggers an exception if the format of the bean\r\n    if (toReturn == null) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n    }\r\n    // Return the ArrayList containing beans tag of refreshment\r\n    // Passed as parameter\r\n    return toReturn;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public ArrayList<BeanTag> ottieniTagPuntoDiRistoro(int)",
                "comments": "Optional[// Some Refreshment\r\n]",
                "innerComments": "Optional[[// Check the variable return, so they do not pass bad data\r\n, // To the caller\r\n, // Return the ArrayList containing beans tag of refreshment\r\n, // Check identifier passed\r\n, // Return Instance\r\n, // Revenue data through the instance of the database connection\r\n, // And triggers an exception if the format of the bean\r\n, // Passed as parameter\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Check the validity identifier passed\r\n    if (pPuntoDiRistoroID < 0) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    // String that contains only the last 10 comments made\r\n    String[] toReturn = new String[10];\r\n    // ArrayList temporary then save the comments contained in the beans\r\n    // Inside\r\n    ArrayList<BeanVisitaPR> temp = null;\r\n    try {\r\n        // Attempt to retrieve information from the database via\r\n        // The connection instance\r\n        temp = feeds.ottieniListaVisitaPR(pPuntoDiRistoroID);\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method ottieniUltimiCommenti: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method ottieniUltimiCommenti: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // The bean that I receive from the database are already sorted by date\r\n    // Implicitly, so there is no need for sorting algorithms\r\n    for (int i = 0; i < 10; i++) {\r\n        // Insert the text of the comments in cyclically\r\n        // Array\r\n        toReturn[i] = (temp.get(temp.size() - (i + 1))).getCommento();\r\n    }\r\n    // E 'unnecessary control the format of the array\r\n    // Then return the array directly with comments\r\n    return toReturn;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public String[] ottieniUltimiCommenti(int)",
                "comments": "Optional[// Issued by tourists for Refreshment passed as parameter\r\n]",
                "innerComments": "Optional[[// ArrayList temporary then save the comments contained in the beans\r\n, // The bean that I receive from the database are already sorted by date\r\n, // E 'unnecessary control the format of the array\r\n, // Check the validity identifier passed\r\n, // String that contains only the last 10 comments made\r\n, // Inside\r\n, // Attempt to retrieve information from the database via\r\n, // The connection instance\r\n, // Implicitly, so there is no need for sorting algorithms\r\n, // Insert the text of the comments in cyclically\r\n, // Array\r\n, // Then return the array directly with comments\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Check the validity identifier passed\r\n    if (pPuntoDiRistoroID < 0) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    // ArrayList that allows me to store the bean containing the feedback\r\n    ArrayList<BeanVisitaPR> bVisita = null;\r\n    // ArrayList that allows me to store the counters\r\n    // And then return to the calling method\r\n    ArrayList<Integer> listaRisultati = new ArrayList<>(5);\r\n    // Initialize the array of counters\r\n    for (int i = 0; i < 5; i++) {\r\n        listaRisultati.add(0);\r\n    }\r\n    // Data useful to verify that the issued date back thirty Feedback\r\n    // Days from current date\r\n    Date ultimiTrentaGiorni = new Date(new Date().getTime() - CostantiGlobali.TRENTA_GIORNI);\r\n    System.out.println(\"The date of 30 days ago: \" + ultimiTrentaGiorni);\r\n    try {\r\n        // All feedback Revenue issued for Refreshment\r\n        // Passed as parameter\r\n        bVisita = feeds.ottieniListaVisitaPR(pPuntoDiRistoroID);\r\n        // Iterate the collection of elements to control the bean\r\n        // Visits\r\n        for (Iterator<BeanVisitaPR> iteratoreVisitaPR = bVisita.iterator(); iteratoreVisitaPR.hasNext(); ) {\r\n            // Recuperto the BeanVisitaPR\r\n            BeanVisitaPR bVisitaTemp = iteratoreVisitaPR.next();\r\n            // ... Do not know what does ...\r\n            System.out.println(\"The date of this visit is: \" + bVisitaTemp.getDataVisita());\r\n            if (bVisitaTemp.getDataVisita().after(ultimiTrentaGiorni)) {\r\n                listaRisultati.set(bVisitaTemp.getVoto() - 1, listaRisultati.get(bVisitaTemp.getVoto() - 1) + 1);\r\n            }\r\n        }\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method ottieniStatistichePuntoDiRistoro: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method ottieniStatistichePuntoDiRistoro: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    if (listaRisultati == null) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n    }\r\n    // Return the list of results that should contain counters\r\n    // Comments\r\n    // Issued in the last 30 days\r\n    return listaRisultati;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public ArrayList<Integer> ottieniStatistichePuntoDiRistoro(int)",
                "comments": "Optional[// From 0 to 1 vote, 1 vote for 2, etc. ..\r\n]",
                "innerComments": "Optional[[// ArrayList that allows me to store the counters\r\n, // Data useful to verify that the issued date back thirty Feedback\r\n, // Return the list of results that should contain counters\r\n, // Comments\r\n, // Check the validity identifier passed\r\n, // ArrayList that allows me to store the bean containing the feedback\r\n, // And then return to the calling method\r\n, // Initialize the array of counters\r\n, // Days from current date\r\n, // All feedback Revenue issued for Refreshment\r\n, // Iterate the collection of elements to control the bean\r\n, // Passed as parameter\r\n, // Visits\r\n, // Recuperto the BeanVisitaPR\r\n, // ... Do not know what does ...\r\n, // Issued in the last 30 days\r\n]]"
            },
            {
                "body": "Optional[{\r\n    // Check the validity of past data\r\n    if ((pPuntoDiRistoroId < 0) || (!(nuovaVisita instanceof BeanVisitaPR))) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    // Revenue from the database the bean and stores saved\r\n    // In order to verify that the vote has not changed\r\n    // Which had been previously released\r\n    BeanVisitaPR temp = null;\r\n    try {\r\n        temp = feeds.ottieniVisitaPR(pPuntoDiRistoroId, nuovaVisita.getIdTurista());\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method modificaFeedbackPuntoDiRistoro: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method modificaFeedbackPuntoDiRistoro: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // If the vote was amended returns an exception\r\n    if (temp.getVoto() != nuovaVisita.getVoto()) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n    } else {\r\n        // If the vote has not been amended shall save the new\r\n        // Comment in the database using the specific method of the bean\r\n        try {\r\n            feeds.modificaVisitaPR(nuovaVisita);\r\n            return true;\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error in method modificaFeedbackPuntoDiRistoro: \" + e.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception ee) {\r\n            System.out.println(\"Error in method modificaFeedbackPuntoDiRistoro: \" + ee.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean modificaFeedbackPuntoDiRistoro(int, BeanVisitaPR)",
                "comments": "Optional[// Refreshment\r\n]",
                "innerComments": "Optional[[// Revenue from the database the bean and stores saved\r\n, // In order to verify that the vote has not changed\r\n, // Check the validity of past data\r\n, // Which had been previously released\r\n, // If the vote was amended returns an exception\r\n, // If the vote has not been amended shall save the new\r\n, // Comment in the database using the specific method of the bean\r\n]]"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super();\r\n    // Connect to the Database\r\n    try {\r\n        puntoRistoro = new DBPuntoDiRistoro();\r\n        tags = new DBTag();\r\n        feeds = new DBVisitaPR();\r\n    } catch (Exception e) {\r\n        System.out.println(\"Error: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n}",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public GestionePuntiDiRistoroComune()",
                "comments": null,
                "innerComments": "[// Connect to the Database\r\n]"
            }
        ],
        "signature": "GestionePuntiDiRistoroComune",
        "variables": [
            "private  static  final long serialVersionUID",
            "protected IDBPuntoDiRistoro puntoRistoro",
            "protected IDBTag tags",
            "protected IDBVisitaPR feeds",
            "protected IDBTurista dbTurista"
        ]
    }
]