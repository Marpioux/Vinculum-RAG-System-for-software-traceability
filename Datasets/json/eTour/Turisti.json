[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    super(\"Tourists\");\r\n    setPreferredSize(new Dimension(700, 480));\r\n    setFrameIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/Turisti.png\")));\r\n    setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE);\r\n    setClosable(true);\r\n    setResizable(true);\r\n    setIconifiable(true);\r\n    setMaximizable(true);\r\n    setContentPane(getJContentPane());\r\n    children = new ArrayList<>();\r\n    addInternalFrameListener(new InternalFrameAdapter() {\r\n        public void internalFrameOpened(InternalFrameEvent pEvent) {\r\n            jDesktopPane = pEvent.getInternalFrame().getDesktopPane();\r\n            desktopManager = (DeskManager) jDesktopPane.getDesktopManager();\r\n        }\r\n        public void internalFrameClosing(InternalFrameEvent pEvent) {\r\n            JPanel root = new JPanel(new BorderLayout());\r\n            JLabel message = new JLabel(\"Are you sure you want to close the management of tourists?\");\r\n            message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n            JLabel alert = new JLabel(\"NB will be closed all the windows opened by this administration.\", SwingConstants.CENTER);\r\n            alert.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/warning16.png\")));\r\n            root.add(message, BorderLayout.NORTH);\r\n            root.add(alert, BorderLayout.CENTER);\r\n            String[] options = {\"Close\", \"Cancel\"};\r\n            int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm closure Tourists\", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, getFrameIcon(), options, options[1]);\r\n            if (choice == JOptionPane.OK_OPTION) {\r\n                for (int i = 0; i < children.size(); i++) {\r\n                    children.get(i).dispose();\r\n                }\r\n                pEvent.getInternalFrame().dispose();\r\n            }\r\n        }\r\n    });\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public Tourists()",
                "comments": "Optional[/**\r\n * This is the default constructor.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructor for the Tourists class.\n * Initializes the Tourists internal frame with specific properties and behaviors.\n * \n * @param None\n * @return None\n * \n * This method sets the title of the internal frame to \"Tourists\", \n * sets the preferred size to 700x480, \n * sets the frame icon to an image located at a specific resource path, \n * sets the default close operation to DO_NOTHING_ON_CLOSE, \n * makes the internal frame closable, resizable, iconifiable, and maximizable, \n * sets the content pane to a specific component, \n * initializes an ArrayList for children internal frames, \n * and adds internal frame listeners for opening and closing events. \n * \n * When the internal frame is closing, a confirmation dialog is displayed to the user. \n * If the user chooses to close the internal frame, all child internal frames are disposed \n * and the current internal frame is also disposed. \n */\npublic Tourists() {\n    // method body\n}\n**/"
            },
            {
                "body": "Optional[{\r\n    if (null == jContentPane) {\r\n        jContentPane = new JPanel();\r\n        jContentPane.setLayout(new BorderLayout());\r\n        jContentPane.add(getToolbarTuristi(), BorderLayout.NORTH);\r\n        jContentPane.add(getRightPanel(), BorderLayout.EAST);\r\n        jContentPane.add(getScrollTableTuristi(), BorderLayout.CENTER);\r\n    }\r\n    return jContentPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getJContentPane()",
                "comments": "Optional[/**\r\n * This method initializes the internal frame's content pane.\r\n *\r\n * @return javax.swing.JPanel - the content pane.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the content pane for the main GUI window.\n * If the content pane has not been initialized yet, it creates a new JPanel\n * with a BorderLayout layout and adds the toolbar, right panel, and scrollable table\n * components to it. Subsequent calls to this method will return the same instance\n * of the content pane.\n * \n * @return the JPanel representing the content pane of the main GUI window\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == toolbarTuristi) {\r\n        toolbarTuristi = new JToolBar();\r\n        toolbarTuristi.setLayout(null);\r\n        toolbarTuristi.setPreferredSize(new Dimension(1, 50));\r\n        toolbarTuristi.setOrientation(JToolBar.HORIZONTAL);\r\n        toolbarTuristi.setFloatable(false);\r\n        toolbarTuristi.add(getBtnAttiva());\r\n        toolbarTuristi.add(getBtnModificaDati());\r\n        toolbarTuristi.add(getBtnVisualizzaScheda());\r\n        toolbarTuristi.add(getBtnElimina());\r\n    }\r\n    return toolbarTuristi;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JToolBar getToolbarTuristi()",
                "comments": "Optional[/**\r\n * This method initializes the toolbar on the management of\r\n * Tourists.\r\n *\r\n * @return javax.swing.JToolBar - the toolbar.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the toolbar for managing tourists.\n * If the toolbar has not been initialized yet, it creates a new JToolBar with specific settings and adds buttons for activating, modifying data, viewing details, and deleting tourists.\n * \n * @return the toolbarTuristi JToolBar for managing tourists\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == btnAttiva) {\r\n        btnAttiva = new JButton();\r\n        btnAttiva.setText(\"Enable <html> <br> region </html>\");\r\n        btnAttiva.setBounds(5, 5, 140, 40);\r\n        btnAttiva.setEnabled(false);\r\n        btnAttiva.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/AttivaTurista32.png\")));\r\n        btnAttiva.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                int selected = tableTuristi.getSelectedRow();\r\n                String[] fields = {\"Name\", \"Surname\", \"Date of Birth\", \"Place of Birth\", \"E-Mail\", \"Phone\", \"Address\", \"CPC\", \"Province\", \"City\"};\r\n                int[] modelReference = {1, 2, 5, 6, 3, 4, 7, 9, 10, 8};\r\n                JPanel datiTurista = new JPanel(new GridBagLayout());\r\n                JPanel rootDialog = new JPanel(new GridBagLayout());\r\n                datiTurista.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 102, 255), 2), \"Tourist Information\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(0, 102, 204)));\r\n                GridBagConstraints g = new GridBagConstraints();\r\n                g.insets = new Insets(5, 5, 5, 5);\r\n                g.anchor = GridBagConstraints.WEST;\r\n                g.gridx = 0;\r\n                g.gridy = 0;\r\n                for (int i = 0; i < fields.length; i++) {\r\n                    datiTurista.add(new JLabel(fields[i]), g);\r\n                    g.gridx++;\r\n                    if (i == 2) { // Date of Birth\r\n                        Date dob = (Date) tableModel.getValueAt(selected, 5);\r\n                        datiTurista.add(new JLabel(Data.toCompact(dob)), g);\r\n                    } else {\r\n                        datiTurista.add(new JLabel(tableModel.getValueAt(selected, modelReference[i]).toString()), g);\r\n                    }\r\n                    g.gridx--;\r\n                    g.gridy++;\r\n                }\r\n                g.gridx = 0;\r\n                g.gridy = 0;\r\n                rootDialog.add(datiTurista, g);\r\n                g.gridy++;\r\n                JLabel txtAttiva = new JLabel();\r\n                rootDialog.add(txtAttiva, g);\r\n                String[] options = new String[2];\r\n                ImageIcon iconDialog;\r\n                options[1] = \"Cancel\";\r\n                String title;\r\n                boolean enabled = (Boolean) tableModel.getValueAt(selected, 0);\r\n                if (enabled) { // The process of decommissioning\r\n                    title = \"Turn off the tourist \" + tableModel.getValueAt(selected, 1) + \" \" + tableModel.getValueAt(selected, 2) + \"?\";\r\n                    options[0] = \"Disable\";\r\n                    txtAttiva.setText(\"Turn off the tourist selected?\");\r\n                    iconDialog = new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/DisattivaTurista48.png\"));\r\n                } else { // The process of activation\r\n                    title = \"Turn on the tourist \" + tableModel.getValueAt(selected, 1) + \" \" + tableModel.getValueAt(selected, 2) + \"?\";\r\n                    options[0] = \"Enable\";\r\n                    txtAttiva.setText(\"Activate the tourists selected?\");\r\n                    iconDialog = new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/AttivaTurista48.png\"));\r\n                }\r\n                txtAttiva.setForeground(Color.red);\r\n                int choice = JOptionPane.showInternalOptionDialog(jContentPane, rootDialog, title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, iconDialog, options, options[1]);\r\n                if (choice == JOptionPane.OK_OPTION) {\r\n                    tableModel.setValueAt(!enabled, selected, 0);\r\n                    tableModel.fireTableDataChanged();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return btnAttiva;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnAttiva()",
                "comments": "Optional[/**\r\n * This method initializes the button to activate\r\n * A tourist.\r\n *\r\n * @return javax.swing.JButton - the button.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JButton used to enable or disable a tourist based on the selected row in a table.\n * The button is initialized with specific text, bounds, icon, and ActionListener to handle the activation/deactivation process.\n * \n * @return the JButton used to enable/disable a tourist\n */\n \n/**\n * This method retrieves or creates a JButton for enabling or disabling a tourist based on the selected row in a table.\n * If the JButton is null, it initializes the button with specific properties such as text, bounds, icon, and ActionListener.\n * The ActionListener prompts a dialog to confirm the action and updates the table model accordingly.\n * \n * @return the JButton used to enable/disable a tourist\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == btnModificaDati) {\r\n        btnModificaDati = new JButton();\r\n        btnModificaDati.setText(\"Edit Data <html> <br> region </html>\");\r\n        btnModificaDati.setBounds(155, 5, 140, 40);\r\n        btnModificaDati.setEnabled(false);\r\n        btnModificaDati.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/ModificaTurista32.png\")));\r\n        btnModificaDati.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                // TEST\r\n                Date nuova = new Date();\r\n                nuova.setMonth(12);\r\n                nuova.setDate(30);\r\n                nuova.setYear(82);\r\n                Date nuova2 = new Date();\r\n                nuova2.setMonth(4);\r\n                nuova2.setDate(30);\r\n                nuova2.setYear(107);\r\n                BeanTurista test = new BeanTurista(0, \"mlmlml\", \"Ottabio\", \"of Michil\", \"Ottawa\", \"Frattamaggiore\", \"61616161\", \"84932nd\", \"V.le della Mimosa 33\", \"NA\", \"ottavio_ottawa@wawa.com\", \"micacae\", nuova2, false);\r\n                // TEST\r\n                OpenOffice.orgMessengerMSN(test, true);\r\n            }\r\n        });\r\n    }\r\n    return btnModificaDati;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnModificaDati()",
                "comments": "Optional[/**\r\n * This method initializes the button for changing\r\n * Data of a tourist.\r\n *\r\n * @return javax.swing.JButton - the button.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JButton used for editing data. If the JButton has not been initialized yet, it creates a new JButton with specified properties such as text, bounds, icon, and action listener. When the button is clicked, it performs a test action by creating a new Date object, setting its values, creating a BeanTurista object with test data, and calling the OpenOffice.orgMessengerMSN method with the test data. \n * \n * @return the JButton used for editing data\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == btnVisualizzaScheda) {\r\n        btnVisualizzaScheda = new JButton();\r\n        btnVisualizzaScheda.setText(\"Show <html> <br> tourist profile </html>\");\r\n        btnVisualizzaScheda.setBounds(305, 5, 140, 40);\r\n        btnVisualizzaScheda.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/schedaturista.png\")));\r\n        btnVisualizzaScheda.setEnabled(false);\r\n        btnVisualizzaScheda.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                // TEST\r\n                Date nuova = new Date();\r\n                nuova.setMonth(12);\r\n                nuova.setDate(30);\r\n                nuova.setYear(82);\r\n                Date nuova2 = new Date();\r\n                nuova2.setMonth(4);\r\n                nuova2.setDate(30);\r\n                nuova2.setYear(107);\r\n                BeanTurista test = new BeanTurista(0, \"mlmlml\", \"Ottabio\", \"of Michil\", \"Ottawa\", \"Frattamaggiore\", \"61616161\", \"84932nd\", \"V.le della Mimosa 33\", \"NA\", \"ottavio_ottawa@wawa.com\", \"micacae\", nuova2, false);\r\n                // TEST\r\n                OpenOffice.orgMessengerMSN(test, false);\r\n            }\r\n        });\r\n    }\r\n    return btnVisualizzaScheda;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnVisualizzaScheda()",
                "comments": "Optional[/**\r\n * This method initializes the button to display the\r\n * Board a tourist.\r\n *\r\n * @return javax.swing.JButton - the button.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JButton used to display a tourist profile. If the button has not been initialized yet, it creates a new JButton with specific properties such as text, bounds, icon, and disabled state. When the button is clicked, it creates a test BeanTurista object with dummy data and calls the OpenOffice.orgMessengerMSN method with the test object and a boolean parameter. \n * \n * @return the JButton used to display a tourist profile\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == btnElimina) {\r\n        btnElimina = new JButton();\r\n        btnElimina.setText(\"Delete <html> <br> region </html>\");\r\n        btnElimina.setBounds(455, 5, 140, 40);\r\n        btnElimina.setEnabled(false);\r\n        btnElimina.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/EliminaTurista32.png\")));\r\n        btnElimina.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                int selectedRow = tableTuristi.getSelectedRow();\r\n                if (selectedRow != -1) {\r\n                    String name = (String) tableModel.getValueAt(selectedRow, 1) + \" \" + (String) tableModel.getValueAt(selectedRow, 2);\r\n                    JPanel root = new JPanel(new BorderLayout());\r\n                    JLabel message = new JLabel(\"Are you sure you want to delete the account of the tourist \" + name + \"?\");\r\n                    message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n                    JLabel alert = new JLabel(\"The data account and all personal settings can not be filled again.\", SwingConstants.CENTER);\r\n                    alert.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/warning16.png\")));\r\n                    root.add(message, BorderLayout.NORTH);\r\n                    root.add(alert, BorderLayout.CENTER);\r\n                    String[] options = {\"Delete\", \"Cancel\"};\r\n                    int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm Delete\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/EliminaTurista48.png\")), options, options[1]);\r\n                    if (choice == JOptionPane.YES_OPTION) {\r\n                        tableModel.removeTurista(selectedRow);\r\n                        tableModel.fireTableDataChanged();\r\n                        JLabel confirm = new JLabel(\"Account Tourists \" + name + \" was deleted.\");\r\n                        confirm.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n                        JOptionPane.showInternalMessageDialog(jContentPane, confirm, \"Accounts Turista out!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/ok32.png\")));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return btnElimina;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnElimina()",
                "comments": "Optional[/**\r\n * This method initializes the delete button for a tourist.\r\n *\r\n * @return javax.swing.JButton - the button.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JButton used for deleting a tourist account. If the button has not been initialized yet, it creates a new JButton with specific properties and adds an ActionListener to handle the deletion process. When the button is clicked, a confirmation dialog is displayed to ensure the user wants to delete the selected tourist account. If confirmed, the tourist account is removed from the table model and a success message is shown. \n * \n * @return the JButton for deleting a tourist account\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == scrollTableTuristi) {\r\n        tableModel = new TuristiTableModel();\r\n        // TEST\r\n        Date nuova = new Date();\r\n        nuova.setMonth(12);\r\n        nuova.setDate(30);\r\n        nuova.setYear(82);\r\n        Date nuova2 = new Date();\r\n        nuova2.setMonth(4);\r\n        nuova2.setDate(30);\r\n        nuova2.setYear(107);\r\n        BeanTurista newTurista = new BeanTurista(0, \"mlmlml\", \"Ottabio\", \"of Michil\", \"Ottawa\", \"Frattamaggiore\", \"61616161\", \"84932nd\", \"V.le della Mimosa 33\", \"NA\", \"ottavio_ottawa@wawa.com\", \"micacae\", nuova2, false);\r\n        BeanTurista nuovo2 = new BeanTurista(1, \"mlmlml\", \"Ottabiolino\", \"of Michil\", \"Ottawa\", \"Frattamaggiore\", \"61616161\", \"84932nd\", \"V.le della Mimosa 33\", \"NA\", \"ottavio_ottawa@wawa.com\", \"micacae\", nuova2, true);\r\n        BeanTurista nuovo3 = new BeanTurista(2, \"mlmlml\", \"Ottavio\", \"Michil\", \"Ottawa\", \"Frattamaggiore\", \"61616161\", \"84932nd\", \"V.le Mimose 33\", \"NA\", \"ottavio_ottawa@wawa.com\", \"micacae\", nuova2, false);\r\n        tableModel.insertTurista(newTurista);\r\n        tableModel.insertTurista(nuovo2);\r\n        tableModel.insertTurista(nuovo3);\r\n        for (int i = 0; i < 12; i++) {\r\n            tableModel.insertTurista(newTurista);\r\n        }\r\n        // END TEST\r\n        tableTuristi = new ScrollableTable(tableModel);\r\n        tableTuristi.setAutoCreateColumnsFromModel(true);\r\n        tableTuristi.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n        tableTuristi.setSelectionForeground(Color.RED);\r\n        tableTuristi.setSelectionBackground(Color.white);\r\n        tableTuristi.setColumnSelectionAllowed(false);\r\n        tableTuristi.setShowVerticalLines(false);\r\n        tableTuristi.setRowHeight(32);\r\n        // Status\r\n        tableTuristi.getColumnModel().getColumn(0).setPreferredWidth(40);\r\n        tableTuristi.getColumnModel().getColumn(0).setCellRenderer(new AttivazioneTuristaRenderer());\r\n        // Name\r\n        tableTuristi.getColumnModel().getColumn(1).setPreferredWidth(100);\r\n        // Surname\r\n        tableTuristi.getColumnModel().getColumn(2).setPreferredWidth(100);\r\n        // Email\r\n        tableTuristi.getColumnModel().getColumn(3).setPreferredWidth(140);\r\n        // Phone\r\n        tableTuristi.getColumnModel().getColumn(4).setPreferredWidth(80);\r\n        // Date of Birth\r\n        tableTuristi.getColumnModel().getColumn(5).setPreferredWidth(100);\r\n        // City of Birth\r\n        tableTuristi.getColumnModel().getColumn(6).setPreferredWidth(100);\r\n        // Address\r\n        tableTuristi.getColumnModel().getColumn(7).setPreferredWidth(100);\r\n        // Residence\r\n        tableTuristi.getColumnModel().getColumn(8).setPreferredWidth(80);\r\n        // CAP\r\n        tableTuristi.getColumnModel().getColumn(9).setPreferredWidth(60);\r\n        // State\r\n        tableTuristi.getColumnModel().getColumn(10).setPreferredWidth(30);\r\n        // Data entry\r\n        tableTuristi.getColumnModel().getColumn(11).setPreferredWidth(90);\r\n        ListSelectionModel selectionModel = tableTuristi.getSelectionModel();\r\n        selectionModel.addListSelectionListener(new ListSelectionListener() {\r\n            public void valueChanged(ListSelectionEvent event) {\r\n                int selectedRow = tableTuristi.getSelectedRow();\r\n                if (selectedRow != -1) {\r\n                    btnAttiva.setEnabled(true);\r\n                    btnModificaDati.setEnabled(true);\r\n                    btnVisualizzaScheda.setEnabled(true);\r\n                    btnElimina.setEnabled(true);\r\n                    if ((Boolean) tableModel.getValueAt(selectedRow, 0)) {\r\n                        btnAttiva.setText(\"Enable <html> <br> region </html>\");\r\n                        btnAttiva.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/AttivaTurista32.png\")));\r\n                    } else {\r\n                        btnAttiva.setText(\"Disable <html> <br> region </html>\");\r\n                        btnAttiva.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/DisattivaTurista32.png\")));\r\n                    }\r\n                } else {\r\n                    btnElimina.setEnabled(false);\r\n                    btnModificaDati.setEnabled(false);\r\n                    btnAttiva.setEnabled(false);\r\n                    btnVisualizzaScheda.setEnabled(false);\r\n                }\r\n            }\r\n        });\r\n        scrollTableTuristi = new JScrollPane();\r\n        scrollTableTuristi.setViewportView(tableTuristi);\r\n        scrollTableTuristi.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n        scrollTableTuristi.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n    }\r\n    return scrollTableTuristi;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JScrollPane getScrollTableTuristi()",
                "comments": "Optional[/**\r\n * This method initializes the scroll with the table of tourists.\r\n *\r\n * @return javax.swing.JScrollPane - the scroll pane.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method creates and returns a JScrollPane containing a table of tourists.\n * If the scrollTableTuristi object is null, it initializes a new TuristiTableModel and adds test data to it.\n * The table is then customized with specific column widths and cell renderers.\n * Listeners are added to the table selection model to enable/disable buttons based on the selected row.\n * Finally, the table is added to a JScrollPane with horizontal and vertical scroll bars.\n * \n * @return a JScrollPane containing a table of tourists\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == searchPanel) {\r\n        searchPanel = new JPanel();\r\n        searchPanel.setLayout(new GridBagLayout());\r\n        searchPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 102, 255), 3), \"Research Tourists\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(0, 102, 204)));\r\n        GridBagConstraints g = new GridBagConstraints();\r\n        // Create Panel, choose tourists\r\n        JPanel turisti = new JPanel(new GridBagLayout());\r\n        turisti.setPreferredSize(new Dimension(200, 120));\r\n        turisti.setBorder(BorderFactory.createLoweredBevelBorder());\r\n        turistiAttivati = new JToggleButton(\"active tourists\");\r\n        turistiAttivati.setPreferredSize(new Dimension(165, 30));\r\n        turistiDisattivati = new JToggleButton(\"Tourists Off\");\r\n        turistiDisattivati.setPreferredSize(new Dimension(165, 30));\r\n        turistiAttivati.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/schedaturista24.png\")));\r\n        ActionListener almenoUno = new ActionListener() {\r\n            public void actionPerformed(ActionEvent pEvent) {\r\n                if (pEvent.getSource() == turistiAttivati) {\r\n                    if (!turistiAttivati.isSelected() && !turistiDisattivati.isSelected()) {\r\n                        turistiDisattivati.setSelected(true);\r\n                    }\r\n                } else {\r\n                    if (!turistiAttivati.isSelected() && !turistiDisattivati.isSelected()) {\r\n                        turistiAttivati.setSelected(true);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        turistiAttivati.addActionListener(almenoUno);\r\n        turistiDisattivati.addActionListener(almenoUno);\r\n        turistiAttivati.setSelected(true);\r\n        turistiDisattivati.setSelected(true);\r\n        turistiDisattivati.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/DisattivaTurista24.png\")));\r\n        g.insets = new Insets(8, 8, 8, 8);\r\n        g.gridx = 0;\r\n        g.gridy = 0;\r\n        g.weighty = 0.2;\r\n        g.fill = GridBagConstraints.HORIZONTAL;\r\n        turisti.add(turistiAttivati, g);\r\n        g.gridy++;\r\n        turisti.add(turistiDisattivati, g);\r\n        // Create search panel\r\n        g.gridx = 0;\r\n        g.gridy = 0;\r\n        g.gridwidth = 2;\r\n        g.anchor = GridBagConstraints.CENTER;\r\n        g.fill = GridBagConstraints.NONE;\r\n        g.insets = new Insets(5, 5, 5, 5);\r\n        searchPanel.add(new JLabel(\"Name Turista\"), g);\r\n        cognomeTurista = new JTextField(12);\r\n        g.gridy++;\r\n        searchPanel.add(cognomeTurista, g);\r\n        g.gridy++;\r\n        searchPanel.add(new JLabel(\"View\"), g);\r\n        g.gridy++;\r\n        g.weighty = 0.2;\r\n        g.insets = new Insets(5, 5, 20, 5);\r\n        searchPanel.add(turisti, g);\r\n        g.insets = new Insets(5, 5, 5, 5);\r\n        g.gridwidth = 1;\r\n        g.gridy++;\r\n        searchPanel.add(getBtnRicerca(), g);\r\n        g.gridx = 1;\r\n        searchPanel.add(getBtnAzzera(), g);\r\n    }\r\n    return searchPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getSearchPanel()",
                "comments": "Optional[/**\r\n * This method initializes the form to the search for tourists.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JPanel containing a search panel for researching tourists. \n * The search panel includes options to choose between active and inactive tourists, \n * input fields for entering the name of the tourist to search for, and buttons for \n * performing the search and resetting the search criteria. \n * \n * @return JPanel - the search panel for researching tourists\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == panelHelp) {\r\n        panelHelp = new JPanel();\r\n        panelHelp.setLayout(new BorderLayout());\r\n        panelHelp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 102, 255), 3), \"Help\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(0, 102, 204)));\r\n        panelHelp.setPreferredSize(new Dimension(200, 100));\r\n        textGuida = new JTextPane();\r\n        textGuida.setOpaque(false);\r\n        textGuida.setContentType(\"text/html\");\r\n        textGuida.setEditable(false);\r\n        textGuida.setOpaque(false);\r\n        panelHelp.add(textGuida, BorderLayout.CENTER);\r\n    }\r\n    return panelHelp;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getPanelHelp()",
                "comments": "Optional[/**\r\n * This method initializes the panel's online help.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JPanel containing a help section for the application.\n * If the panel has not been initialized yet, it creates a new JPanel with a titled border,\n * sets its layout to BorderLayout, and adds a JTextPane for displaying help text in HTML format.\n * The panel has a preferred size of 200x100 pixels.\n * \n * @return a JPanel containing the help section\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == rightPanel) {\r\n        rightPanel = new JPanel();\r\n        rightPanel.setLayout(new GridBagLayout());\r\n        GridBagConstraints g = new GridBagConstraints();\r\n        g.gridx = 0;\r\n        g.gridy = 1;\r\n        g.fill = GridBagConstraints.BOTH;\r\n        g.weighty = 0.3;\r\n        rightPanel.add(getPanelHelp(), g);\r\n        g.weighty = 0.7;\r\n        g.gridx = 0;\r\n        g.gridy = 0;\r\n        rightPanel.add(getSearchPanel(), g);\r\n    }\r\n    return rightPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getRightPanel()",
                "comments": "Optional[/**\r\n * This method initializes the side panel of the interface.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns the right panel of the GUI. If the right panel has not been initialized yet, it creates a new JPanel with a GridBagLayout and adds two sub-panels to it: a help panel at grid position (0, 1) with a weight of 0.3, and a search panel at grid position (0, 0) with a weight of 0.7. \n * \n * @return the right panel of the GUI\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == btnRicerca) {\r\n        btnRicerca = new JButton();\r\n        btnRicerca.setText(\"Search\");\r\n        btnRicerca.setPreferredSize(new Dimension(98, 26));\r\n        btnRicerca.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/Ricerca16.png\")));\r\n    }\r\n    return btnRicerca;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnRicerca()",
                "comments": "Optional[/**\r\n * This method initializes the search button tourists.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the search button used in the GUI.\n * If the button has not been initialized yet, it creates a new JButton with text \"Search\", \n * sets its preferred size to 98x26, and assigns an icon to it.\n * \n * @return the search button used in the GUI\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == btnAzzera) {\r\n        btnAzzera = new JButton();\r\n        btnAzzera.setText(\"Clear\");\r\n        btnAzzera.setHorizontalTextPosition(SwingConstants.LEADING);\r\n        btnAzzera.setPreferredSize(new Dimension(98, 26));\r\n        btnAzzera.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/Azzera16.png\")));\r\n        btnAzzera.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent pAcEvent) {\r\n                cognomeTurista.setText(\"\");\r\n                turistiAttivati.setSelected(true);\r\n                turistiDisattivati.setSelected(true);\r\n            }\r\n        });\r\n    }\r\n    return btnAzzera;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnAzzera()",
                "comments": "Optional[/**\r\n * This method initializes the button to reset form\r\n * Search.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JButton used to clear input fields and reset selection checkboxes.\n * If the button has not been initialized yet, it creates a new JButton with the text \"Clear\",\n * sets the text position to leading, sets the preferred size to 98x26, and adds an icon.\n * When the button is clicked, it clears the text field \"cognomeTurista\" and selects both checkboxes.\n * \n * @return the JButton used for clearing input fields and resetting checkboxes\n */"
            },
            {
                "body": "Optional[{\r\n    for (int i = 0; i < children.size(); i++) {\r\n        JInternalFrame current = children.get(i);\r\n        if (pTurista.getId() == current.getId()) {\r\n            desktopManager.activateFrame(current);\r\n            return;\r\n        }\r\n    }\r\n    JInternalFrame newInternalFrame = new JInternalFrame(this, pTurista, pModifica);\r\n    jDesktopPane.add(newInternalFrame, Integer.MAX_VALUE);\r\n    newInternalFrame.setVisible(true);\r\n    children.add(newInternalFrame);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void OpenOffice(org.messenger.MSN(BeanTurista pTurista, boolean pModifica)",
                "comments": "Optional[/**\r\n * This method opens a tab for the bean tourists supplied input.\r\n *\r\n * @param pTurista BeanTurista - the bean tourists\r\n * @param boolean pModifica <ul> <li> true - if you change the data.\r\n *                          <li> false - if you receive the card. </ul>\r\n * @return void\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Opens a new internal frame in the desktop pane for a given tourist bean.\n * If an internal frame for the tourist already exists, it will be activated.\n * \n * @param pTurista the tourist bean to display in the internal frame\n * @param pModifica a boolean indicating whether the tourist information can be modified\n */\nprivate void OpenOffice(org.messenger.MSN.BeanTurista pTurista, boolean pModifica) {\n    for (int i = 0; i < children.size(); i++) {\n        JInternalFrame current = children.get(i);\n        if (pTurista.getId() == current.getId()) {\n            desktopManager.activateFrame(current);\n            return;\n        }\n    }\n    JInternalFrame newInternalFrame = new JInternalFrame(this, pTurista, pModifica);\n    jDesktopPane.add(newInternalFrame, Integer.MAX_VALUE);\n    newInternalFrame.setVisible(true);\n    children.add(newInternalFrame);\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    children.remove(pScheda);\r\n    pScheda.dispose();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "protected void closeScheda(JInternalFrame pScheda)",
                "comments": "Optional[/**\r\n * Closes the selected tab.\r\n *\r\n * @param pScheda JInternalFrame - the tab to close.\r\n * @return void\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Removes the specified internal frame from the list of children and disposes of it.\n * \n * @param pScheda the internal frame to be closed\n * \n * This method removes the specified internal frame from the list of children and disposes of it, effectively closing it. \n * If the internal frame is not in the list of children, no action is taken. \n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    tableModel.updateTurista(pTurista);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "protected void updateTableModel(BeanTurista pTurista)",
                "comments": "Optional[/**\r\n * Update the table model of the tourists with the bean supplied\r\n * Input.\r\n *\r\n * @param pTurista BeanTurista - the bean of the tourist.\r\n * @return void\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Updates the table model with the provided Turista object.\n * \n * @param pTurista the Turista object to be updated in the table model\n * \n * This method updates the table model with the provided Turista object by calling the updateTurista method\n * on the tableModel object. The table model is then refreshed to reflect the changes made.\n * \n * Note: This method does not return any value as it is a void method.\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"Tourists\");\r\n    setPreferredSize(new Dimension(700, 480));\r\n    setFrameIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/Turisti.png\")));\r\n    setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE);\r\n    setClosable(true);\r\n    setResizable(true);\r\n    setIconifiable(true);\r\n    setMaximizable(true);\r\n    setContentPane(getJContentPane());\r\n    children = new ArrayList<>();\r\n    addInternalFrameListener(new InternalFrameAdapter() {\r\n        public void internalFrameOpened(InternalFrameEvent pEvent) {\r\n            jDesktopPane = pEvent.getInternalFrame().getDesktopPane();\r\n            desktopManager = (DeskManager) jDesktopPane.getDesktopManager();\r\n        }\r\n        public void internalFrameClosing(InternalFrameEvent pEvent) {\r\n            JPanel root = new JPanel(new BorderLayout());\r\n            JLabel message = new JLabel(\"Are you sure you want to close the management of tourists?\");\r\n            message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n            JLabel alert = new JLabel(\"NB will be closed all the windows opened by this administration.\", SwingConstants.CENTER);\r\n            alert.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/warning16.png\")));\r\n            root.add(message, BorderLayout.NORTH);\r\n            root.add(alert, BorderLayout.CENTER);\r\n            String[] options = {\"Close\", \"Cancel\"};\r\n            int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm closure Tourists\", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, getFrameIcon(), options, options[1]);\r\n            if (choice == JOptionPane.OK_OPTION) {\r\n                for (int i = 0; i < children.size(); i++) {\r\n                    children.get(i).dispose();\r\n                }\r\n                pEvent.getInternalFrame().dispose();\r\n            }\r\n        }\r\n    });\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public Tourists()",
                "comments": "Optional[/**\r\n * This is the default constructor.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new Tourists internal frame with the specified title and settings.\n * This constructor sets the title of the internal frame to \"Tourists\", \n * sets the preferred size to 700x480 pixels, \n * sets the frame icon to an image of tourists, \n * sets the default close operation to DO_NOTHING_ON_CLOSE, \n * makes the frame closable, resizable, iconifiable, and maximizable, \n * sets the content pane to a custom panel, \n * initializes an empty list of children frames, \n * and adds internal frame listeners for opening and closing events. \n * \n * When the internal frame is closing, a confirmation dialog is displayed to the user \n * asking if they are sure they want to close the management of tourists. \n * If the user chooses to close, all child frames opened by this administration are closed \n * and the internal frame itself is disposed. \n * \n * @param None\n */"
            }
        ],
        "signature": "Tourists",
        "variables": [
            "private JPanel jContentPane = null",
            "private JToolBar toolbarTuristi = null",
            "private JButton btnModificaDati = null",
            "private JScrollPane scrollTableTuristi = null",
            "private JTable tableTuristi = null",
            "private JPanel searchPanel = null",
            "private JTextField cognomeTurista = null",
            "private JPanel panelHelp = null",
            "private JTextPane textGuida = null",
            "private JPanel rightPanel = null",
            "private JButton btnAttiva",
            "private JButton btnVisualizzaScheda",
            "private JButton btnElimina",
            "private TuristiTableModel tableModel",
            "private JToggleButton turistiDisattivati",
            "private JToggleButton turistiAttivati",
            "private JButton btnAzzera",
            "private JButton btnRicerca",
            "protected DeskManager desktopManager",
            "protected JDesktopPane jDesktopPane",
            "private ArrayList<JInternalFrame> children"
        ],
        "generated_class_comment": "/**\n * The Tourists class represents an internal frame for managing tourists in a GUI application.\n * This class provides functionalities for creating, updating, and deleting tourist information,\n * as well as displaying tourist profiles and managing multiple internal frames for tourists.\n * The internal frame includes a toolbar with buttons for activating, modifying data, viewing details,\n * and deleting tourists. It also contains a scrollable table for listing tourists and a search panel\n * for filtering tourists based on specific criteria. Additionally, the class features a help panel\n * for providing online assistance and a right panel for organizing the layout of the interface.\n * \n * The Tourists class initializes the internal frame with specific properties and behaviors, such as:\n * - Setting the title to \"Tourists\"\n * - Setting the preferred size to 700x480 pixels\n * - Setting the frame icon to an image of tourists\n * - Setting the default close operation to DO_NOTHING_ON_CLOSE\n * - Making the frame closable, resizable, iconifiable, and maximizable\n * - Setting the content pane to a custom panel\n * - Initializing an empty list of children frames for managing multiple internal frames\n * - Adding internal frame listeners for opening and closing events\n * \n * The class also includes methods for opening new internal frames for tourists, closing specific tabs,\n * updating the table model with tourist information, and handling user interactions with the GUI components.\n * \n * Overall, the Tourists class provides a comprehensive interface for managing tourist data and interactions\n * within the application, offering a user-friendly experience for administrators and operators.\n */\n*/"
    }
]