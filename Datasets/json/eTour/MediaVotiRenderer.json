[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    if (!(pValue instanceof Double || pValue instanceof Integer)) {\r\n        throw new IllegalArgumentException(\"Value cell unexpected.\");\r\n    }\r\n    double rating = 0;\r\n    if (pValue instanceof Double) {\r\n        rating = (Double) pValue;\r\n    } else {\r\n        rating += (Integer) pValue;\r\n    }\r\n    JLabel aLabel = new JLabel(\"\");\r\n    aLabel.setHorizontalAlignment(JLabel.CENTER);\r\n    if (rating > 4) {\r\n        aLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella5.gif\")));\r\n    } else if (rating <= 4 && rating > 3) {\r\n        aLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella4.gif\")));\r\n    } else if (rating <= 3 && rating > 2) {\r\n        aLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella3.gif\")));\r\n    } else if (rating <= 2 && rating > 1) {\r\n        aLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella2.gif\")));\r\n    } else {\r\n        aLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella1.gif\")));\r\n    }\r\n    return aLabel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public Component getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",
                "comments": "Optional[/**\r\n * Method that returns the custom component for the\r\n * display of the data contained in the cell of a table.\r\n *\r\n * @param pTable JTable - the table.\r\n * @param pValue Object - the data.\r\n * @param pSelected boolean -\r\n * <ul>\r\n * <li><i>True</i> if the selected cell.</li>\r\n * <li><i>False</i> otherwise.</li>\r\n * </ul>\r\n * @param pHasFocus boolean -\r\n * <ul>\r\n * <li><i>True</i> if the cell has the focus.</li>\r\n * <li><i>False</i> otherwise.</li>\r\n * </ul>\r\n * @param pRow int - the line number.\r\n * @param pColumn int - the column number.\r\n * @return Component - the component that customizes render the cell.\r\n * @throws IllegalArgumentException - if the value of the cell cannot\r\n * be rendered by this renderer.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a component that renders a cell in a JTable based on the rating value provided.\n * If the value is not a Double or Integer, an IllegalArgumentException is thrown.\n * The rating value is used to determine which star icon to display in the cell.\n * \n * @param table the JTable that the cell belongs to\n * @param value the value to be rendered in the cell\n * @param isSelected true if the cell is selected\n * @param hasFocus true if the cell has focus\n * @param row the row of the cell\n * @param column the column of the cell\n * @return a JLabel component with the appropriate star icon based on the rating value\n */\npublic Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n    if (!(value instanceof Double || value instanceof Integer)) {\n        throw new IllegalArgumentException(\"Value cell unexpected.\");\n    }\n    double rating = 0;\n    if (value instanceof Double) {\n        rating = (Double) value;\n    } else {\n        rating += (Integer) value;\n    }\n    JLabel aLabel = new JLabel(\"\");\n    aLabel.setHorizontalAlignment(JLabel.CENTER);\n    if (rating > 4) {\n        aLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella5.gif\")));\n    } else if (rating <= 4 && rating > 3) {\n        aLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella4.gif\")));\n    } else if (rating <= 3 && rating > 2) {\n        aLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella3.gif\")));\n    } else if (rating <= 2 && rating > 1) {\n        aLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella2.gif\")));\n    } else {\n        aLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella1.gif\")));\n    }\n    return aLabel;\n}\n*/"
            }
        ],
        "constructors": [],
        "signature": "MediaVotiRenderer",
        "variables": [],
        "generated_class_comment": "/**\n * The MediaVotiRenderer class is responsible for rendering a custom component in a JTable cell based on the rating value provided.\n * It contains a method getTableCellRendererComponent that returns a JLabel component with a star icon corresponding to the rating value.\n * If the value is not a Double or Integer, an IllegalArgumentException is thrown to indicate an unexpected value type.\n * The rating value is used to determine which star icon to display in the cell, with different icons for different rating ranges.\n * \n * This class enhances the visual representation of data in a JTable by providing a more intuitive and visually appealing way to display ratings.\n * It ensures that the cell rendering is consistent and informative, making it easier for users to interpret the data at a glance.\n * \n * The getTableCellRendererComponent method takes parameters such as the JTable, the value to be rendered, and flags indicating whether the cell is selected or has focus.\n * It returns a JLabel component with the appropriate star icon based on the rating value, aligned in the center of the cell for better presentation.\n * \n * Overall, the MediaVotiRenderer class adds value to the user interface by improving the display of rating data in a JTable, making it more user-friendly and visually appealing.\n */"
    }
]