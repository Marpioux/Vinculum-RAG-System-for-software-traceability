[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    if (pStringa == null) {\r\n        return false;\r\n    }\r\n    int lunghezzaStringa = pStringa.length();\r\n    char carattereCorrente;\r\n    if (lunghezzaStringa < numeroCaratteriMin || lunghezzaStringa > numeroCaratteriMax) {\r\n        return false;\r\n    }\r\n    if (caratteriNecessari != null && !caratteriNecessari.isEmpty()) {\r\n        for (int i = 0; i < caratteriNecessari.length(); i++) {\r\n            carattereCorrente = caratteriNecessari.charAt(i);\r\n            if (!pStringa.contains(Character.toString(carattereCorrente))) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    String stringaCaratteriPermessi = caratteriPermessi + (letterePermesse ? LETTERS : \"\") + (numeriPermessi ? NUMBERS : \"\");\r\n    for (int i = 0; i < lunghezzaStringa; i++) {\r\n        carattereCorrente = pStringa.charAt(i);\r\n        if (!stringaCaratteriPermessi.contains(Character.toString(carattereCorrente))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public static boolean controllaStringa(String, boolean, boolean, String, String, int, int)",
                "comments": "Optional[/**\r\n * Static method for verifying correctness of a string\r\n *\r\n * @param pStringa           string to check\r\n * @param letterePermesse    Boolean: True if it is allowed to be present\r\n *                           Letters in the string, False otherwise\r\n * @param numeriPermessi     Boolean: True if it is allowed to be present\r\n *                           Numbers in the string, False otherwise\r\n * @param caratteriPermessi   string containing all characters\r\n *                           Allowed in the string\r\n * @param caratteriNecessari  string containing all required characters\r\n *                           Must be present in the string\r\n * @param numeroCaratteriMin integer representing the minimum number of\r\n *                           Characters allowed in string\r\n * @param numeroCaratteriMax integer representing the maximum number of\r\n *                           Characters allowed in string\r\n * @return Boolean: True if the string meets the conditions, False\r\n * otherwise\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a given string meets certain criteria.\n * \n * @param pStringa the string to be checked\n * @param letterePermesse true if letters are allowed, false otherwise\n * @param numeriPermessi true if numbers are allowed, false otherwise\n * @param caratteriNecessari a string containing required characters (can be null)\n * @param caratteriPermessi a string containing allowed characters\n * @param numeroCaratteriMin the minimum number of characters allowed in the string\n * @param numeroCaratteriMax the maximum number of characters allowed in the string\n * @return true if the string meets all criteria, false otherwise\n */\npublic static boolean controllaStringa(String pStringa, boolean letterePermesse, boolean numeriPermessi, String caratteriNecessari, String caratteriPermessi, int numeroCaratteriMin, int numeroCaratteriMax) {\n    if (pStringa == null) {\n        return false;\n    }\n    int lunghezzaStringa = pStringa.length();\n    char carattereCorrente;\n    if (lunghezzaStringa < numeroCaratteriMin || lunghezzaStringa > numeroCaratteriMax) {\n        return false;\n    }\n    if (caratteriNecessari != null && !caratteriNecessari.isEmpty()) {\n        for (int i = 0; i < caratteriNecessari.length(); i++) {\n            carattereCorrente = caratteriNecessari.charAt(i);\n            if (!pStringa.contains(Character.toString(carattereCorrente))) {\n                return false;\n            }\n        }\n    }\n    String stringaCaratteriPermessi = caratteriPermessi + (letterePermesse ? LETTERS : \"\") + (numeriPermessi ? NUMBERS : \"\");\n    for (int i = 0; i < lunghezzaStringa; i++) {\n        carattereCorrente = pStringa.charAt(i);\n        if (!stringaCaratteriPermessi.contains(Character.toString(carattereCorrente))) {\n            return false;\n        }\n    }\n    return true;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (pStringa == null) {\r\n        return null;\r\n    }\r\n    String stringaCaratteriPermessi = caratteriPermessi + (letterePermesse ? LETTERS : \"\") + (numeriPermessi ? NUMBERS : \"\");\r\n    char carattereCorrente;\r\n    int lunghezzaStringa = pStringa.length();\r\n    int i = 0;\r\n    while (i < lunghezzaStringa) {\r\n        carattereCorrente = pStringa.charAt(i);\r\n        if (!stringaCaratteriPermessi.contains(Character.toString(carattereCorrente))) {\r\n            pStringa = pStringa.replaceAll(\"\\\\\\\\\" + Character.toString(carattereCorrente), \"\");\r\n            lunghezzaStringa = pStringa.length();\r\n        } else {\r\n            i++;\r\n        }\r\n    }\r\n    if (lunghezzaStringa > numeroCaratteriMax) {\r\n        pStringa = pStringa.substring(0, numeroCaratteriMax);\r\n    }\r\n    return pStringa;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static String correggiStringa(String, boolean, boolean, String, int)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method corrects a given string by removing any characters that are not allowed based on the specified criteria.\n * \n * @param pStringa The string to be corrected.\n * @param letterePermesse A boolean indicating whether letters are allowed in the string.\n * @param numeriPermesse A boolean indicating whether numbers are allowed in the string.\n * @param caratteriPermessi A string containing additional characters that are allowed in the string.\n * @param numeroCaratteriMax An integer specifying the maximum number of characters allowed in the corrected string.\n * @return The corrected string with only the allowed characters and a maximum length of 'numeroCaratteriMax'.\n */\npublic static String correggiStringa(String pStringa, boolean letterePermesse, boolean numeriPermesse, String caratteriPermessi, int numeroCaratteriMax) {\n    if (pStringa == null) {\n        return null;\n    }\n    \n    String stringaCaratteriPermessi = caratteriPermessi + (letterePermesse ? LETTERS : \"\") + (numeriPermessi ? NUMBERS : \"\");\n    char carattereCorrente;\n    int lunghezzaStringa = pStringa.length();\n    int i = 0;\n    \n    while (i < lunghezzaStringa) {\n        carattereCorrente = pStringa.charAt(i);\n        if (!stringaCaratteriPermessi.contains(Character.toString(carattereCorrente))) {\n            pStringa = pStringa.replaceAll(\"\\\\\\\\\" + Character.toString(carattereCorrente), \"\");\n            lunghezzaStringa = pStringa.length();\n        } else {\n            i++;\n        }\n    }\n    \n    if (lunghezzaStringa > numeroCaratteriMax) {\n        pStringa = pStringa.substring(0, numeroCaratteriMax);\n    }\n    \n    return pStringa;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    return true;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean controllaData(String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method checks the validity of the input data.\n * \n * @param data the data to be checked\n * @return true if the data is valid, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    if (pDataInizio != null && pDataFine != null) {\r\n        return pDataInizio.before(pDataFine);\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean controllaDate(Date, Date)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method checks if the given start date is before the end date.\n * \n * @param pDataInizio the start date to be checked\n * @param pDataFine the end date to be checked\n * @return true if the start date is before the end date, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pTurista != null && pTurista instanceof BeanTurista;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanTurista(BeanTurista)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a valid instance of BeanTurista.\n * \n * @param pTurista the object to be checked\n * @return true if the object is not null and is an instance of BeanTurista, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pPreferenzaDiRicerca != null && pPreferenzaDiRicerca instanceof BeanPreferenzaDiRicerca;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanPreferenzaDiRicerca(BeanPreferenzaDiRicerca)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a valid instance of BeanPreferenzaDiRicerca.\n * \n * @param pPreferenzaDiRicerca the object to be checked\n * @return true if the object is not null and is an instance of BeanPreferenzaDiRicerca, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pPreferenzeGeneriche != null && pPreferenzeGeneriche instanceof BeanPreferenzeGeneriche;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanPreferenzeGeneriche(BeanPreferenzeGeneriche)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a valid instance of BeanPreferenzeGeneriche.\n * \n * @param pPreferenzeGeneriche the object to be checked\n * @return true if the object is not null and is an instance of BeanPreferenzeGeneriche, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pBeneCulturale != null && pBeneCulturale instanceof BeanBeneCulturale;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanBeneCulturale(BeanBeneCulturale)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a valid instance of BeanBeneCulturale.\n * \n * @param pBeneCulturale the object to be checked\n * @return true if the object is not null and is an instance of BeanBeneCulturale, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pPuntoDiRistoro != null && pPuntoDiRistoro instanceof BeanPuntoDiRistoro;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanPuntoDiRistoro(BeanPuntoDiRistoro)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a valid instance of BeanPuntoDiRistoro.\n * \n * @param pPuntoDiRistoro the object to be checked\n * @return true if the object is not null and is an instance of BeanPuntoDiRistoro, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pOperatorePuntoDiRistoro != null && pOperatorePuntoDiRistoro instanceof BeanOperatorePuntoDiRistoro;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanOperatorePuntoDiRistoro(BeanOperatorePuntoDiRistoro)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a valid instance of BeanOperatorePuntoDiRistoro.\n * \n * @param pOperatorePuntoDiRistoro the object to be checked\n * @return true if the object is not null and is an instance of BeanOperatorePuntoDiRistoro, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    if (pBanner != null && pBanner instanceof BeanBanner) {\r\n        return pBanner.getId() > 0 && !pBanner.getPercorsoFile().isEmpty() && pBanner.getIdPuntoDiRistoro() > 0;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanBanner(BeanBanner)",
                "comments": "Optional[/**\r\n * Please formal control and consistency on the data of the banner\r\n * Content in the bean passed by parameter.\r\n *\r\n * @author Fabio Palladino\r\n * @param pBanner bean contains the data of the banner.\r\n * @return True if the data of the banner is correct false otherwise.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the provided object is a valid BeanBanner instance by verifying that it is not null and of type BeanBanner.\n * Additionally, it checks if the BeanBanner's ID is greater than 0, if the file path is not empty, and if the associated restaurant ID is greater than 0.\n * \n * @param pBanner the object to be checked if it is a valid BeanBanner instance\n * @return true if the object is a valid BeanBanner instance with all required fields populated, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return image != null && (image.getImage() instanceof BufferedImage);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public static boolean checkImmagine(ImageIcon)",
                "comments": "Optional[/**\r\n * Method which controls the image contained in the object ImageIcon passed\r\n * per parameter.\r\n *\r\n * @author Fabio Palladino\r\n * @param image ImageIcon object containing the image to be checked\r\n * @return true if the image contained in the object is an instance of BufferedImage.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given ImageIcon is a valid image.\n * \n * @param image the ImageIcon to be checked\n * @return true if the ImageIcon is not null and its image is an instance of BufferedImage, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    if (pNews != null) {\r\n        Date dataPubb = pNews.getDataPubblicazione();\r\n        Date dataScad = pNews.getDataScadenza();\r\n        String news = pNews.getNews();\r\n        int priority = pNews.getPriorita();\r\n        if (dataPubb != null && dataScad != null && news != null) {\r\n            boolean toReturn = dataPubb.before(dataScad);\r\n            toReturn = toReturn && !news.isEmpty();\r\n            toReturn = toReturn && (pNews.getId() > 0);\r\n            toReturn = toReturn && (priority <= CostantiGlobali.MAX_PRIORITY_NEWS) && (priority >= CostantiGlobali.MIN_PRIORITY_NEWS);\r\n            return toReturn;\r\n        }\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanNews(BeanNews)",
                "comments": "Optional[/**\r\n * Function that checks the data in a news;\r\n *\r\n * @author Fabio Palladino\r\n * @param pNews containing details of a news.\r\n * @return\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if a BeanNews object is valid by verifying that it has a non-null publication date, expiration date, news content, and a positive ID.\n * Additionally, the method ensures that the news content is not empty, the ID is greater than 0, and the priority falls within the specified range.\n * \n * @param pNews the BeanNews object to be checked for validity\n * @return true if the BeanNews object is valid, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return ptagi != null && ptagi instanceof BeanTag;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanTag(BeanTag)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a BeanTag instance.\n * \n * @param ptagi the object to be checked\n * @return true if the object is not null and an instance of BeanTag, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pConvenzione != null && pConvenzione instanceof BeanConvenzione;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanConvenzione(BeanConvenzione)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method checks if the given object is a valid instance of BeanConvenzione.\n * \n * @param pConvenzione the object to be checked if it is an instance of BeanConvenzione\n * @return true if the object is not null and is an instance of BeanConvenzione, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pMenu != null && pMenu instanceof BeanMenu;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanMenu(BeanMenu)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a valid BeanMenu instance.\n * \n * @param pMenu the object to be checked if it is a BeanMenu instance\n * @return true if the object is not null and is an instance of BeanMenu, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pPiatto != null && pPiatto instanceof BeanPiatto;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanPiatto(BeanPiatto)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a valid instance of BeanPiatto.\n * \n * @param pPiatto the object to be checked if it is a BeanPiatto instance\n * @return true if the object is not null and is an instance of BeanPiatto, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pVisitaBC != null && pVisitaBC instanceof BeanVisitaBC;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanVisitaBC(BeanVisitaBC)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a valid instance of BeanVisitaBC.\n * \n * @param pVisitaBC the object to be checked\n * @return true if the object is not null and is an instance of BeanVisitaBC, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return pVisitaPR != null && pVisitaPR instanceof BeanVisitaPR;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public static boolean checkBeanVisitaPR(BeanVisitaPR)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given object is a valid instance of BeanVisitaPR.\n * \n * @param pVisitaPR the object to be checked\n * @return true if the object is not null and is an instance of BeanVisitaPR, false otherwise\n */"
            }
        ],
        "constructors": [],
        "signature": "ControlloDati",
        "variables": [
            "private  static  final String LETTERS",
            "private  static  final String NUMBERS",
            "public  static  final int MAX_LENGTH"
        ],
        "generated_class_comment": "/**\n * The ControlloDati class provides static methods for data validation and verification in various scenarios.\n * It includes methods for checking strings, dates, object instances, images, news, tags, and various beans used in the application.\n * The class also offers functionality to correct strings by removing disallowed characters based on specified criteria.\n * \n * The class contains constants for letters, numbers, and the maximum length allowed for certain data elements.\n * \n * This class serves as a utility for ensuring data integrity and consistency throughout the application.\n * It encapsulates common validation logic that can be reused across different modules.\n * \n * The methods in this class are designed to return boolean values indicating the validity of the input data or objects.\n * They follow specific criteria and rules to determine if the data meets the required conditions.\n * \n * Overall, the ControlloDati class plays a crucial role in maintaining data quality and reliability within the application.\n */\n**/"
    }
]