[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    ((JComponent) actionEvent.getSource()).transferFocus();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It transfers the focus to the next component in the focus traversal cycle. \n * \n * @param actionEvent the ActionEvent that triggered this method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (fe.getSource() instanceof JTextField) {\r\n        JTextField textbox = (JTextField) fe.getSource();\r\n        text = textbox.getText();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void focusGained(FocusEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when a component gains focus. If the source of the event is a JTextField,\n * it retrieves the text from the JTextField and stores it in a variable. \n * \n * @param fe the FocusEvent object representing the event that occurred\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (fe.getSource() instanceof JTextField) {\r\n        JTextField textbox = (JTextField) fe.getSource();\r\n        if (!text.equals(textbox.getText())) {\r\n            text = textbox.getText();\r\n            if (text.equals(\"\")) {\r\n                textbox.setBackground(ERROR_BACKGROUND);\r\n                Rectangle bounds = textbox.getBounds();\r\n                JLabel newLabel = new JLabel();\r\n                newLabel.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/images/error.png\")));\r\n                newLabel.setBounds(bounds.x - 24, bounds.y, 24, 24);\r\n                newLabel.setToolTipText(\"Field \" + textbox.getName() + \" cannot be empty!\");\r\n                datiPR.add(newLabel, null);\r\n                datiPR.repaint();\r\n            }\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void focusLost(FocusEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when a component loses focus. It checks if the source of the event is a JTextField,\n * then compares the current text in the JTextField with the previous text. If the text has changed and is now empty,\n * it sets the background color of the JTextField to an error color, adds an error icon next to the JTextField,\n * and displays a tooltip indicating that the field cannot be empty. \n * \n * @param fe the FocusEvent that triggered this method\n */"
            },
            {
                "body": "Optional[{\r\n    this.setIconifiable(true);\r\n    this.setBounds(new Rectangle(0, 0, 600, 540));\r\n    this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\r\n    this.setFrameIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/scheda.png\")));\r\n    this.setClosable(true);\r\n    this.setContentPane(getJContentPane());\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void initialize()",
                "comments": "Optional[/**\r\n * Method called by the constructor\r\n *\r\n * @return void\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Initializes the properties of the current window.\n * This method sets the iconifiability, bounds, close operation, frame icon, and content pane of the window.\n * \n * @param none\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    Component[] components = datiPR.getComponents();\r\n    for (int i = 0; i < components.length; i++) {\r\n        Component current = components[i];\r\n        if (current instanceof JTextField) {\r\n            JTextField textbox = (JTextField) current;\r\n            textbox.setEditable(!textbox.isEditable());\r\n            textbox.setBackground(Color.white);\r\n        } else if (current instanceof JComboBox) {\r\n            JComboBox<?> combo = (JComboBox<?>) current;\r\n            combo.setEnabled(!combo.isEnabled());\r\n        }\r\n    }\r\n    descrizionePR.setEditable(!descrizionePR.isEditable());\r\n    pannelloTag.attivaDisattiva();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private void makeEditable()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Makes all text fields editable and changes their background color to white, \n * and toggles the enabled state of all combo boxes. Also toggles the editable \n * state of a specific text field and activates/deactivates a specific panel.\n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    if (jContentPane == null) {\r\n        jContentPane = new JPanel();\r\n        jContentPane.setLayout(new BorderLayout());\r\n        jContentPane.add(getJTabbedPane(), BorderLayout.CENTER);\r\n        jContentPane.add(getToolbarSchedaPR(), BorderLayout.NORTH);\r\n    }\r\n    return jContentPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getJContentPane()",
                "comments": "Optional[/**\r\n * Method which initializes a jContentPane\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the content pane of the application. If the content pane has not been initialized yet,\n * it creates a new JPanel with a BorderLayout layout, adds a JTabbedPane to the center and a toolbar\n * to the north. Subsequent calls to this method will return the same instance of the JPanel.\n * \n * @return the content pane of the application\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnModifica == null) {\r\n        btnModifica = new JToggleButton();\r\n        btnModifica.setText(\"Change Data\");\r\n        btnModifica.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/modifica.png\")));\r\n        btnModifica.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                makeEditable();\r\n                btnSalva.setVisible(btnModifica.isSelected());\r\n                btnAnnulla.setVisible(btnModifica.isSelected());\r\n            }\r\n        });\r\n    }\r\n    return btnModifica;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JToggleButton getBtnModifica()",
                "comments": "Optional[/**\r\n * This method initializes the button (ToggleButton) the alteration\r\n * Data for puntoDiRistoro\r\n *\r\n * @return javax.swing.JToggleButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the button used to modify data.\n * If the button has not been initialized yet, it creates a new JToggleButton with the text \"Change Data\" and an icon for modification.\n * When the button is clicked, it makes the data editable and shows the save and cancel buttons.\n * \n * @return the JToggleButton used for modifying data\n */"
            },
            {
                "body": "Optional[{\r\n    makeEditable();\r\n    btnSalva.setVisible(btnModifica.isSelected());\r\n    btnAnnulla.setVisible(btnModifica.isSelected());\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event is triggered. It makes a component editable and sets the visibility of two buttons based on the selection of a third button.\n * \n * @param e the ActionEvent that triggered the method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnSalva == null) {\r\n        btnSalva = new JButton();\r\n        btnSalva.setText(\"Save\");\r\n        btnSalva.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/salva.png\")));\r\n        btnSalva.setVisible(false);\r\n    }\r\n    return btnSalva;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnSalva()",
                "comments": "Optional[/**\r\n * Method to initialize the Save button (btnSalva)\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JButton used for saving data. If the JButton has not been initialized yet, it creates a new instance, sets its text to \"Save\", \n * sets its icon to a specified image, and hides it. Subsequent calls to this method will return the same JButton instance.\n * \n * @return the JButton used for saving data\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnAnnulla == null) {\r\n        btnAnnulla = new JButton();\r\n        btnAnnulla.setText(\"Cancel\");\r\n        btnAnnulla.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/annulla.png\")));\r\n        btnAnnulla.setVisible(false);\r\n    }\r\n    return btnAnnulla;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnAnnulla()",
                "comments": "Optional[/**\r\n * Method to initialize the Cancel button (btnAnnulla)\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JButton for cancel action. If the button has not been initialized yet, it creates a new JButton with the text \"Cancel\" and an icon. \n * The button is initially set to invisible.\n * \n * @return the JButton for cancel action\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnModificaCommento == null) {\r\n        btnModificaCommento = new JButton();\r\n        btnModificaCommento.setText(\"Edit Comment\");\r\n        btnModificaCommento.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/modificaCommento.png\")));\r\n        btnModificaCommento.setVisible(false);\r\n    }\r\n    return btnModificaCommento;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnModificaCommento()",
                "comments": "Optional[/**\r\n * Method to initialize the button for\r\n * Changing a comment (btnModificaCommento)\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JButton used for editing comments.\n * If the button has not been initialized yet, it creates a new JButton with the text \"Edit Comment\" and an icon.\n * The button is initially set to be invisible.\n * \n * @return the JButton used for editing comments\n */"
            },
            {
                "body": "Optional[{\r\n    if (jTabbedPane == null) {\r\n        jTabbedPane = new JTabbedPane();\r\n        jTabbedPane.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\r\n        jTabbedPane.addTab(\"Data Refreshment\", new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/dati.png\")), getDatiPR(), null);\r\n        jTabbedPane.addTab(\"MenuTuristico\", new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/stat24.png\")), null, null);\r\n        jTabbedPane.addTab(\"Statistics\", new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/stat24.png\")), getStatistiche(), null);\r\n        jTabbedPane.addTab(\"Feedback received\", new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/feedback.png\")), getFeedback(), null);\r\n    }\r\n    return jTabbedPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTabbedPane getJTabbedPane()",
                "comments": "Optional[/**\r\n * Create and initialize a JTabbedPane\r\n *\r\n * @return javax.swing.JTabbedPane\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JTabbedPane component for displaying different tabs in the GUI.\n * If the JTabbedPane has not been initialized yet, it creates a new instance and adds\n * tabs for Data Refreshment, MenuTuristico, Statistics, and Feedback received.\n * Each tab is associated with an icon and a corresponding panel.\n * \n * @return the JTabbedPane component with the added tabs\n */"
            },
            {
                "body": "Optional[{\r\n    if (datiPR == null) {\r\n        datiPR = new JPanel();\r\n        datiPR.setLayout(new GridBagLayout());\r\n        datiPR.setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n        gridBagConstraints.insets = new Insets(5, 5, 5, 5);\r\n        gridBagConstraints.gridx = 0;\r\n        gridBagConstraints.gridy = 0;\r\n        txtNome = new JLabel(\"Name Refreshment\");\r\n        txtIndirizzo = new JLabel(\"Address\");\r\n        txtCitta = new JLabel(\"City\");\r\n        txtLocalità = new JLabel(\"Location\");\r\n        txtCAP = new JLabel(\"CAP\");\r\n        txtProvincia = new JLabel(\"Province\");\r\n        txtPos = new JLabel(\"Geographic Position\");\r\n        txtTel = new JLabel(\"Phone\");\r\n        txtOraAp = new JLabel(\"Opening Hours\");\r\n        txtOraCh = new JLabel(\"Closing Time\");\r\n        datiPR.add(txtNome, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtIndirizzo, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtCitta, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtLocalità, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtCAP, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtProvincia, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtPos, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtTel, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtOraAp, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtOraCh, gridBagConstraints);\r\n    }\r\n    return datiPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getDatiPR()",
                "comments": "Optional[/**\r\n * Method to initialize a panel (datiPR)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JPanel containing labels for various information related to a refreshment point.\n * If the JPanel has not been initialized yet, it creates a new instance and sets its layout and border.\n * The method then adds JLabels for the name, address, city, location, CAP, province, geographic position, phone, opening hours, and closing time to the JPanel.\n * \n * @return JPanel containing labels for refreshment point information\n */"
            },
            {
                "body": "Optional[{\r\n    if (statistics == null) {\r\n        statistics = new JPanel();\r\n        statistics.setLayout(new GridBagLayout());\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.gridx = 0;\r\n        gridBagConstraints.gridwidth = 1;\r\n        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n        gridBagConstraints.insets = new Insets(20, 0, 0, 0);\r\n        gridBagConstraints.gridy = 0;\r\n        mediaVotoPR = new JLabel(\"Average Vote\");\r\n        statistics.add(mediaVotoPR, gridBagConstraints);\r\n    }\r\n    return statistics;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getStatistiche()",
                "comments": "Optional[/**\r\n * Method for initializing a panel (statistics)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JPanel containing statistics related to average vote.\n * If the JPanel has not been initialized yet, it creates a new JPanel with a GridBagLayout\n * and adds a JLabel displaying the text \"Average Vote\" to it.\n * \n * @return a JPanel containing statistics related to average vote\n */"
            },
            {
                "body": "Optional[{\r\n    if (feedback == null) {\r\n        feedback = new JPanel();\r\n        feedback.setLayout(new GridBagLayout());\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n        gridBagConstraints.gridy = 0;\r\n        gridBagConstraints.weightx = 1.0;\r\n        gridBagConstraints.weighty = 1.0;\r\n        gridBagConstraints.gridx = 0;\r\n        feedback.add(getJScrollPane2(), gridBagConstraints);\r\n    }\r\n    return feedback;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getFeedback()",
                "comments": "Optional[/**\r\n * Method to initialize a panel (feedback)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JPanel that contains feedback information. If the feedback panel has not been initialized yet, it creates a new JPanel with a GridBagLayout and adds a JScrollPane containing feedback data to it. The GridBagConstraints are set to fill both horizontally and vertically, with a weight of 1.0 for both dimensions. The feedback panel is then returned.\n * \n * @return the JPanel containing feedback information\n */"
            },
            {
                "body": "Optional[{\r\n    if (indirizzoPR == null) {\r\n        indirizzoPR = new JTextField();\r\n        indirizzoPR.setColumns(12);\r\n        indirizzoPR.addActionListener(campoCompilato);\r\n    }\r\n    return indirizzoPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getIndirizzoPR()",
                "comments": "Optional[/**\r\n * Initialize a JTextField (indirizzoPR)\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JTextField component for entering a shipping address.\n * If the JTextField has not been initialized yet, it creates a new instance with 12 columns\n * and adds an ActionListener to it. Subsequent calls will return the same instance.\n * \n * @return the JTextField component for entering a shipping address\n */"
            },
            {
                "body": "Optional[{\r\n    if (indirizzoPR1 == null) {\r\n        indirizzoPR1 = new JComboBox<>();\r\n        indirizzoPR1.setPreferredSize(new Dimension(60, 20));\r\n        indirizzoPR1.setMinimumSize(new Dimension(60, 25));\r\n        indirizzoPR1.addItem(\"Via\");\r\n        indirizzoPR1.addItem(\"P.zza\");\r\n        indirizzoPR1.addItem(\"V.le\");\r\n        indirizzoPR1.addItem(\"V.co\");\r\n        indirizzoPR1.addItem(\"Largo\");\r\n        indirizzoPR1.addItem(\"Corso\");\r\n    }\r\n    return indirizzoPR1;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getIndirizzoPR1()",
                "comments": "Optional[/**\r\n * Method to initialize the type field address (indirizzoPR)\r\n * Or via, piazza ....\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JComboBox<String> object representing the address prefix selection for a specific address field.\n * If the JComboBox object is null, it creates a new one with predefined address prefixes and sets its preferred and minimum size.\n * The address prefixes added to the JComboBox are \"Via\", \"P.zza\", \"V.le\", \"V.co\", \"Largo\", and \"Corso\".\n * \n * @return a JComboBox<String> object containing address prefixes for selection\n */"
            },
            {
                "body": "Optional[{\r\n    if (cittaPR == null) {\r\n        cittaPR = new JTextField();\r\n        cittaPR.setColumns(12);\r\n        cittaPR.addActionListener(campoCompilato);\r\n    }\r\n    return cittaPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getCittaPR()",
                "comments": "Optional[/**\r\n * Initialize a JTextField for entering a city CittaPR\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JTextField component used for entering the city in Puerto Rico.\n * If the JTextField has not been initialized yet, it creates a new instance with 12 columns\n * and adds an ActionListener to it.\n * \n * @return the JTextField component for entering the city in Puerto Rico\n */"
            },
            {
                "body": "Optional[{\r\n    if (localitaPR == null) {\r\n        localitaPR = new JComboBox<>();\r\n        localitaPR.setMinimumSize(new Dimension(80, 25));\r\n        localitaPR.setPreferredSize(new Dimension(80, 20));\r\n        localitaPR.addActionListener(campoCompilato);\r\n    }\r\n    return localitaPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getLocalitaPR()",
                "comments": "Optional[/**\r\n * This method initializes localitaPR\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JComboBox<String> component representing the localitaPR.\n * If the localitaPR is null, a new JComboBox<String> is created with minimum size of 80x25 and preferred size of 80x20.\n * An ActionListener is added to the localitaPR component to listen for changes in the selection.\n * \n * @return the localitaPR JComboBox<String> component\n */"
            },
            {
                "body": "Optional[{\r\n    if (capPR == null) {\r\n        capPR = new JTextField();\r\n        capPR.setColumns(8);\r\n        capPR.addActionListener(campoCompilato);\r\n    }\r\n    return capPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getCapPR()",
                "comments": "Optional[/**\r\n * Code of refreshment. Definition capPR JTextField\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method retrieves the JTextField component for capturing PR (Purchase Request) information. If the JTextField component has not been initialized yet, it creates a new instance, sets the number of columns to 8, and adds an ActionListener to handle when the field is filled out. \n * \n * @return The JTextField component for capturing PR information\n */"
            },
            {
                "body": "Optional[{\r\n    if (jScrollPane == null) {\r\n        jScrollPane = new JScrollPane();\r\n        jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n        jScrollPane.setViewportView(getDescrizionePR());\r\n    }\r\n    return jScrollPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JScrollPane getJScrollPane()",
                "comments": "Optional[/**\r\n * Creation JScrollPane\r\n *\r\n * @return javax.swing.JScrollPane\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JScrollPane component that contains a description of a PR (Pull Request).\n * If the JScrollPane has not been initialized yet, it will create a new JScrollPane with a vertical scroll bar\n * and set its view to the description of the PR.\n * \n * @return the JScrollPane component containing the description of the PR\n */"
            },
            {
                "body": "Optional[{\r\n    if (descrizionePR == null) {\r\n        descrizionePR = new JTextArea();\r\n        descrizionePR.setColumns(12);\r\n        descrizionePR.setCursor(new Cursor(Cursor.TEXT_CURSOR));\r\n    }\r\n    return descrizionePR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextArea getDescrizionePR()",
                "comments": "Optional[/**\r\n * Method to create JTextArea's whole descrizionePR\r\n *\r\n * @return javax.swing.JTextArea\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JTextArea component for the description of a product.\n * If the JTextArea has not been initialized yet, it will be created with default settings.\n * \n * @return the JTextArea component for the description of a product\n */"
            },
            {
                "body": "Optional[{\r\n    if (telefonoPR == null) {\r\n        telefonoPR = new JTextField();\r\n        telefonoPR.setColumns(12);\r\n        telefonoPR.addActionListener(campoCompilato);\r\n    }\r\n    return telefonoPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getTelefonoPR()",
                "comments": "Optional[/**\r\n * Method to create the JTextField telefonoPR\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JTextField object for the telefonoPR field. If the telefonoPR field is null, a new JTextField object is created with 12 columns and an ActionListener is added to it. \n * \n * @return the JTextField object for the telefonoPR field\n */"
            },
            {
                "body": "Optional[{\r\n    if (orarioAPOrePR == null) {\r\n        orarioAPOrePR = new JComboBox<>();\r\n        orarioAPOrePR.setPreferredSize(new Dimension(40, 20));\r\n        for (int i = 0; i < 24; i++) {\r\n            if (i < 10) {\r\n                orarioAPOrePR.addItem(\"0\" + i);\r\n            } else {\r\n                orarioAPOrePR.addItem(i);\r\n            }\r\n        }\r\n        orarioAPOrePR.addActionListener(campoCompilato);\r\n    }\r\n    return orarioAPOrePR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getOrarioAPOrePR()",
                "comments": "Optional[/**\r\n * method to initialize a JComboBox with the hours (orarioAPOrePR)\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JComboBox<String> containing the hours of the day in a 24-hour format.\n * If the JComboBox has not been initialized yet, it creates a new one, sets its preferred size to 40x20,\n * adds the hours from 00 to 23 as items (with leading zeros for single-digit numbers), and adds an ActionListener.\n * \n * @return a JComboBox<String> containing the hours of the day\n */"
            },
            {
                "body": "Optional[{\r\n    if (orarioApMinPR == null) {\r\n        orarioApMinPR = new JComboBox<>();\r\n        orarioApMinPR.setPreferredSize(new Dimension(40, 20));\r\n        orarioApMinPR.addItem(\"00\");\r\n        orarioApMinPR.addItem(\"15\");\r\n        orarioApMinPR.addItem(\"30\");\r\n        orarioApMinPR.addItem(\"45\");\r\n        orarioApMinPR.addActionListener(campoCompilato);\r\n    }\r\n    return orarioApMinPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getOrarioApMinPR()",
                "comments": "Optional[/**\r\n * Method to initialize a JComboBox with the minutes (orarioApMinPR)\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JComboBox<String> component for selecting minutes in a time picker.\n * If the JComboBox has not been initialized yet, it creates a new one with preset values (00, 15, 30, 45) and adds an ActionListener.\n * \n * @return the JComboBox<String> component for selecting minutes in a time picker\n */"
            },
            {
                "body": "Optional[{\r\n    if (orarioCHMinPR == null) {\r\n        orarioCHMinPR = new JComboBox<>();\r\n        orarioCHMinPR.setPreferredSize(new Dimension(40, 20));\r\n        orarioCHMinPR.addItem(\"00\");\r\n        orarioCHMinPR.addItem(\"15\");\r\n        orarioCHMinPR.addItem(\"30\");\r\n        orarioCHMinPR.addItem(\"45\");\r\n        orarioCHMinPR.addActionListener(campoCompilato);\r\n    }\r\n    return orarioCHMinPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getOrarioCHMinPR()",
                "comments": "Optional[/**\r\n * Method to initialize a JComboBox with the minutes (orarioCHMinPR)\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JComboBox<String> object that allows the user to select a time in 15-minute intervals.\n * If the JComboBox object has not been initialized yet, it creates a new one with preset values of \"00\", \"15\", \"30\", and \"45\".\n * The JComboBox object is then set to have a preferred size of 40x20 pixels and an ActionListener is added to it.\n * \n * @return a JComboBox<String> object representing a time selection dropdown menu\n */"
            },
            {
                "body": "Optional[{\r\n    if (provPR == null) {\r\n        final String[] province = { \"AG\", \"AL\", \"AN\", \"AO\", \"AQ\", \"AR\", \"AP\", \"AT\", \"AV\", \"BA\", \"BL\", \"BN\", \"BG\", \"BI\", \"BO\", \"BR\", \"BS\", \"BZ\", \"CA\", \"CB\", \"CE\", \"CH\", \"CI\", \"CL\", \"CN\", \"CO\", \"CR\", \"CS\", \"KR\", \"EN\", \"FC\", \"FE\", \"FI\", \"FG\", \"FR\", \"GE\", \"GO\", \"GR\", \"IM\", \"IS\", \"LC\", \"LE\", \"LI\", \"LO\", \"LT\", \"LU\", \"MC\", \"ME\", \"MF\", \"MN\", \"MO\", \"MS\", \"MT\", \"NA\", \"NO\", \"NU\", \"OG\", \"OR\", \"OT\", \"PA\", \"PC\", \"PD\", \"PE\", \"PG\", \"PO\", \"PR\", \"PU\", \"R\", \"RA\", \"RC\", \"RE\", \"RG\", \"RI\", \"RM\", \"RN\", \"RO\", \"SA\", \"SI\", \"SO\", \"SP\", \"SS\", \"SV\", \"TA\", \"TE\", \"TN\", \"TP\", \"TR\", \"TS\", \"TV\", \"UD\", \"VA\", \"VB\", \"VC\", \"VE\", \"VI\", \"VR\", \"VS\", \"VT\", \"VV\" };\r\n        provPR = new JComboBox<>();\r\n        for (String provincia : province) {\r\n            provPR.addItem(provincia);\r\n        }\r\n        provPR.addActionListener(campoCompilato);\r\n    }\r\n    return provPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getProvPR()",
                "comments": "Optional[/**\r\n * Create and initialize a JComboBox with all the provinces (provPR)\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JComboBox<String> containing a list of Italian province codes.\n * If the JComboBox has not been initialized yet, it creates a new JComboBox and populates it with the province codes.\n * The JComboBox is then set to trigger an ActionListener when an item is selected.\n * \n * @return a JComboBox<String> containing a list of Italian province codes\n */"
            },
            {
                "body": "Optional[{\r\n    if (pStr == null) {\r\n        return;\r\n    }\r\n    if ((getLength() + pStr.length()) <= limit) {\r\n        super.insertString(pOffset, pStr, attr);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void insertString(int, String, AttributeSet)",
                "comments": "Optional[/**\r\n * Initialization and management position\r\n *\r\n * @param pOffset\r\n * @param pStr\r\n * @param attr\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Inserts a string into the document at the specified offset, with the given attributes.\n * \n * @param pOffset the offset at which to insert the string\n * @param pStr the string to be inserted\n * @param attr the attributes to apply to the inserted string\n * \n * @throws IllegalArgumentException if the specified string is null\n * \n * @return void\n * \n * This method checks if the combined length of the existing text in the document and the new string to be inserted is less than or equal to the specified limit. If so, the string is inserted at the specified offset with the given attributes. If the specified string is null, the method returns without performing any insertion.\n */"
            },
            {
                "body": "Optional[{\r\n    if (nomePR == null) {\r\n        nomePR = new JTextField();\r\n        nomePR.setColumns(12);\r\n        nomePR.setPreferredSize(new Dimension(180, 20));\r\n        nomePR.addActionListener(campoCompilato);\r\n        nomePR.addFocusListener(validating);\r\n        nomePR.setDocument(new DocumentoNumerico(20));\r\n    }\r\n    return nomePR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getNomePR()",
                "comments": "Optional[/**\r\n * Initialization of a data point of the snack (nomePR)\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the JTextField component for entering the name of a PR (Purchase Request).\n * If the JTextField has not been initialized yet, it creates a new instance with specific properties.\n * \n * @return The JTextField component for entering the name of a PR.\n */"
            },
            {
                "body": "Optional[{\r\n    if (jPanel == null) {\r\n        jPanel = new JPanel();\r\n        jPanel.setLayout(new BorderLayout());\r\n        jPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), \"Tag the 'Search\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), Color.black));\r\n        BeanTag[] test = new BeanTag[8];\r\n        test[0] = new BeanTag(0, \"castle\", \"really a castle\");\r\n        test[1] = new BeanTag(1, \"stronghold\", \"really a hostel\");\r\n        test[2] = new BeanTag(2, \"statue\", \"really a basket\");\r\n        test[3] = new BeanTag(3, \"column\", \"really a basket\");\r\n        test[4] = new BeanTag(4, \"internal\", \"really a basket\");\r\n        test[5] = new BeanTag(5, \"external\", \"really a basket\");\r\n        test[6] = new BeanTag(6, \"eight hundred\", \"really a basket\");\r\n        test[7] = new BeanTag(7, \"Novecento\", \"really a basket\");\r\n        pannelloTag = new TagPanel(test);\r\n        jPanel.add(pannelloTag, BorderLayout.CENTER);\r\n    }\r\n    return jPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getJPanel()",
                "comments": "Optional[/**\r\n * Initialize and create a panel (JPanel)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JPanel containing a TagPanel with predefined BeanTags.\n * If the JPanel has not been initialized yet, it creates a new instance with a titled border.\n * The TagPanel contains BeanTags for various items such as castles, statues, and columns.\n * \n * @return a JPanel with a TagPanel containing predefined BeanTags\n */"
            },
            {
                "body": "Optional[{\r\n    if (jScrollPane2 == null) {\r\n        jScrollPane2 = new JScrollPane();\r\n        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n        jScrollPane2.setViewportView(getFeedbackTable());\r\n    }\r\n    return jScrollPane2;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JScrollPane getJScrollPane2()",
                "comments": "Optional[/**\r\n * Creating a JScrollPane (jScrollPane2)\r\n *\r\n * @return javax.swing.JScrollPane\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JScrollPane object that contains a feedback table.\n * If the JScrollPane object has not been initialized yet, it creates a new JScrollPane\n * with a vertical scroll bar and sets the view to the feedback table.\n * \n * @return the JScrollPane object containing the feedback table\n */"
            },
            {
                "body": "Optional[{\r\n    if (feedbackTable == null) {\r\n        feedbackTable = new JTable();\r\n    }\r\n    return feedbackTable;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTable getFeedbackTable()",
                "comments": "Optional[/**\r\n * Create a JTable (feedbackTable)\r\n *\r\n * @return javax.swing.JTable\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the feedback table, creating a new instance if it doesn't already exist.\n * \n * @return the feedback table instance\n */"
            },
            {
                "body": "Optional[{\r\n    if (statisticheMeseCorrente == null) {\r\n        statisticheMeseCorrente = new JPanel();\r\n        statisticheMeseCorrente.setLayout(new GridBagLayout());\r\n        statisticheMeseCorrente.setPreferredSize(new Dimension(500, 120));\r\n    }\r\n    return statisticheMeseCorrente;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getStatisticheMeseCorrente()",
                "comments": "Optional[/**\r\n * Creation of a panel (statisticheMeseCorrente)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves or initializes the JPanel component for displaying statistics for the current month.\n * If the statisticheMeseCorrente JPanel is null, it creates a new instance, sets its layout to GridBagLayout,\n * and sets its preferred size to 500x120. Subsequent calls will return the existing statisticheMeseCorrente instance.\n * \n * @return the statisticheMeseCorrente JPanel component for displaying statistics for the current month\n */"
            },
            {
                "body": "Optional[{\r\n    if (statisticheTotali == null) {\r\n        statisticheTotali = new JPanel();\r\n        statisticheTotali.setLayout(new GridBagLayout());\r\n        statisticheTotali.setPreferredSize(new Dimension(500, 120));\r\n    }\r\n    return statisticheTotali;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getStatisticheTotali()",
                "comments": "Optional[/**\r\n * Creation of a panel (statisticheTotali)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JPanel containing total statistics.\n * If the JPanel has not been initialized yet, it creates a new JPanel with a GridBagLayout\n * and sets its preferred size to 500x120.\n * \n * @return the JPanel containing total statistics\n */"
            },
            {
                "body": "Optional[{\r\n    if (toolbarSchedaPR == null) {\r\n        toolbarSchedaPR = new JToolBar();\r\n        toolbarSchedaPR.setFloatable(false);\r\n        toolbarSchedaPR.add(getBtnModifica());\r\n        toolbarSchedaPR.addSeparator();\r\n        toolbarSchedaPR.add(getBtnSalva());\r\n        toolbarSchedaPR.addSeparator();\r\n        toolbarSchedaPR.add(getBtnAnnulla());\r\n        toolbarSchedaPR.addSeparator();\r\n        toolbarSchedaPR.add(getBtnModificaCommento());\r\n        toolbarSchedaPR.addSeparator();\r\n    }\r\n    return toolbarSchedaPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JToolBar getToolbarSchedaPR()",
                "comments": "Optional[/**\r\n * Method for creating a toolbar (ToolbarSchedaPR)\r\n *\r\n * @return javax.swing.JToolBar\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the toolbar for the PR card.\n * If the toolbar has not been initialized yet, it creates a new JToolBar instance, sets it as non-floatable, and adds buttons for modifying, saving, canceling, and modifying comments on the PR card.\n * \n * @return the toolbar for the PR card\n */"
            },
            {
                "body": "Optional[{\r\n    if (posGeoX == null) {\r\n        posGeoX = new JTextField();\r\n    }\r\n    return posGeoX;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getPosGeoX()",
                "comments": "Optional[/**\r\n * Method to initialize posGeoX\r\n * The X position of the GPS\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JTextField component for the X position of the geographical coordinates.\n * If the JTextField has not been initialized yet, a new instance is created.\n * \n * @return the JTextField component for the X position of the geographical coordinates\n */"
            },
            {
                "body": "Optional[{\r\n    if (posGeoY == null) {\r\n        posGeoY = new JTextField();\r\n    }\r\n    return posGeoY;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getPosGeoY()",
                "comments": "Optional[/**\r\n * Method to initialize posGeoY\r\n * The Y position of the GPS\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JTextField component for the Y position of a geographical point.\n * If the JTextField has not been initialized yet, it creates a new instance.\n * \n * @return the JTextField component for the Y position of a geographical point\n */"
            },
            {
                "body": "Optional[{\r\n    if (posGeoZ == null) {\r\n        posGeoZ = new JTextField();\r\n    }\r\n    return posGeoZ;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getPosGeoZ()",
                "comments": "Optional[/**\r\n * Method to initialize posGeoZ\r\n * The Z position of the GPS\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JTextField component for the position's geometric Z coordinate.\n * If the JTextField component has not been initialized yet, it will be created and returned.\n * \n * @return the JTextField component for the position's geometric Z coordinate\n */"
            },
            {
                "body": "Optional[{\r\n    if (orarioCHOrePR == null) {\r\n        orarioCHOrePR = new JComboBox<>();\r\n        orarioCHOrePR.setPreferredSize(new Dimension(40, 20));\r\n    }\r\n    return orarioCHOrePR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getOrarioCHOrePR()",
                "comments": "Optional[/**\r\n * Method to initialize a JComboBox with the hours (orarioCHOrePR)\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JComboBox<String> object representing the choice of either \"Orario\" or \"PR\".\n * If the JComboBox object is null, a new JComboBox object is created with a preferred size of 40x20.\n * \n * @return the JComboBox<String> object representing the choice of \"Orario\" or \"PR\"\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"New Refreshment\");\r\n    campoCompilato = new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent actionEvent) {\r\n            ((JComponent) actionEvent.getSource()).transferFocus();\r\n        }\r\n    };\r\n    validating = new FocusListener() {\r\n\r\n        private final Color ERROR_BACKGROUND = new Color(255, 215, 215);\r\n\r\n        private final Color WARNING_BACKGROUND = new Color(255, 235, 205);\r\n\r\n        private String text;\r\n\r\n        public void focusGained(FocusEvent fe) {\r\n            if (fe.getSource() instanceof JTextField) {\r\n                JTextField textbox = (JTextField) fe.getSource();\r\n                text = textbox.getText();\r\n            }\r\n        }\r\n\r\n        public void focusLost(FocusEvent fe) {\r\n            if (fe.getSource() instanceof JTextField) {\r\n                JTextField textbox = (JTextField) fe.getSource();\r\n                if (!text.equals(textbox.getText())) {\r\n                    text = textbox.getText();\r\n                    if (text.equals(\"\")) {\r\n                        textbox.setBackground(ERROR_BACKGROUND);\r\n                        Rectangle bounds = textbox.getBounds();\r\n                        JLabel newLabel = new JLabel();\r\n                        newLabel.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/images/error.png\")));\r\n                        newLabel.setBounds(bounds.x - 24, bounds.y, 24, 24);\r\n                        newLabel.setToolTipText(\"Field \" + textbox.getName() + \" cannot be empty!\");\r\n                        datiPR.add(newLabel, null);\r\n                        datiPR.repaint();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    initialize();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public SchedaPR()",
                "comments": "Optional[/**\r\n * The default constructor for inclusion of the interface model\r\n * A new refreshment.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new SchedaPR object with the default title \"New Refreshment\".\n * This constructor initializes the campoCompilato ActionListener to transfer focus to the next component when an action is performed.\n * It also initializes the validating FocusListener to check for changes in JTextField components and display an error icon and message if the field is left empty.\n */"
            },
            {
                "body": "{\r\n    this();\r\n    nomePR.setText(pr.getNome());\r\n    setTitle(pr.getNome());\r\n    capPR.setText(pr.getCap());\r\n    cittaPR.setText(pr.getCitta());\r\n    descrizionePR.setText(pr.getDescrizione());\r\n    StringTokenizer tokenizer = new StringTokenizer(pr.getVia());\r\n    String[] via = { \"Via\", \"P.zza\", \"V.le\", \"V.co\", \"Largo\", \"Corso\" };\r\n    String string = tokenizer.nextToken();\r\n    int i;\r\n    for (i = 0; i < via.length; i++) {\r\n        if (string.equalsIgnoreCase(via[i])) {\r\n            break;\r\n        }\r\n    }\r\n    this.indirizzoPR1.setSelectedIndex(i);\r\n    while (tokenizer.hasMoreTokens()) {\r\n        this.indirizzoPR.setText(indirizzoPR.getText() + \" \" + tokenizer.nextToken());\r\n    }\r\n    this.provPR.setSelectedItem(pr.getProvincia());\r\n    Punto3D pos = pr.getPosizione();\r\n    this.posGeoX.setText(\"\" + pos.getX());\r\n    this.posGeoY.setText(\"\" + pos.getY());\r\n    this.posGeoZ.setText(\"\" + pos.getZ());\r\n    this.telefonoPR.setText(pr.getTelefono());\r\n    int minutes = pr.getOrarioApertura().getMinutes();\r\n    if (minutes == 0) {\r\n        this.orarioApMinPR.setSelectedIndex(0);\r\n    } else {\r\n        this.orarioApMinPR.setSelectedItem(minutes);\r\n    }\r\n    int hours = pr.getOrarioApertura().getHours();\r\n    if (hours < 10) {\r\n        this.orarioAPOrePR.setSelectedItem(\"0\" + hours);\r\n    } else {\r\n        this.orarioAPOrePR.setSelectedItem(hours);\r\n    }\r\n    this.orarioCHMinPR.setSelectedItem(pr.getOrarioChiusura().getMinutes());\r\n    this.orarioAPOrePR.setSelectedItem(pr.getOrarioApertura().getHours());\r\n    this.orarioCHOrePR.setSelectedItem(pr.getOrarioChiusura().getHours());\r\n    if (edit) {\r\n        btnModifica.setSelected(true);\r\n    } else {\r\n        makeEditable();\r\n    }\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public SchedaPR(BeanPuntoDiRistoro, boolean)",
                "comments": "Optional[/**\r\n * This interface models the manufacturer regarding modification of data and\r\n * Display board a refreshment.\r\n *\r\n * @param pr    the bean contains the data of PuntoDiRistoro selected.\r\n * @param edit  indicates whether the fields should be editable, so if\r\n *              You are viewing a card or change the cultural property.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new SchedaPR object with the specified BeanPuntoDiRistoro and boolean parameters.\n * This constructor initializes the SchedaPR object by setting various GUI components based on the properties of the provided BeanPuntoDiRistoro object.\n * \n * @param pr the BeanPuntoDiRistoro object containing the information to be displayed in the SchedaPR GUI components\n * @param edit a boolean value indicating whether the SchedaPR object is being created for editing purposes\n */"
            },
            {
                "body": "{\r\n    this.limit = limit;\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public DocumentoNumerico(int)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new DocumentoNumerico with the specified limit.\n * \n * @param limit the limit for the DocumentoNumerico\n * @throws IllegalArgumentException if the limit is negative\n */\npublic DocumentoNumerico(int limit) {\n    if (limit < 0) {\n        throw new IllegalArgumentException(\"Limit cannot be negative\");\n    }\n    \n    this.limit = limit;\n} \nThis constructor creates a new DocumentoNumerico object with the given limit. If the limit is negative, an IllegalArgumentException is thrown."
            }
        ],
        "signature": "SchedaPR",
        "variables": [
            "private JPanel jContentPane",
            "private JToolBar toolbarSchedaBC",
            "private JToggleButton btnModifica",
            "private JButton btnSalva",
            "private JButton btnAnnulla",
            "private JButton btnModificaCommento",
            "private JTabbedPane jTabbedPane",
            "private JPanel statistics",
            "private JPanel feedback",
            "private JLabel txtNome",
            "private JLabel txtIndirizzo",
            "private JLabel txtCAP",
            "private JLabel txtCitta",
            "private JLabel txtLocalità",
            "private JLabel txtProvincia",
            "private JLabel txtPos",
            "private JLabel txtTel",
            "private JLabel txtOraAp",
            "private JLabel txtOraCh",
            "private JLabel jLabel",
            "private JTextField indirizzoPR",
            "private JComboBox<String> indirizzoPR1",
            "private JTextField cittaPR",
            "private JComboBox<String> localitaPR",
            "private JTextField capPR",
            "private JScrollPane jScrollPane",
            "private JTextArea descrizionePR",
            "private JTextField telefonoPR",
            "private JComboBox<String> orarioAPOrePR",
            "private JLabel jLabel1",
            "private JComboBox<String> orarioApMinPR",
            "private TagPanel pannelloTag",
            "private JTextField costoBC",
            "private JLabel jLabel3",
            "private JComboBox<String> orarioCHMinPR",
            "private JComboBox<String> provPR",
            "private JPanel datiPR",
            "private JTextField nomePR",
            "private JPanel jPanel",
            "private JScrollPane jScrollPane2",
            "private JTable feedbackTable",
            "private JLabel txtNomeBene",
            "private JLabel mediaVotoPR",
            "private JPanel statisticheMeseCorrente",
            "private JPanel statisticheTotali",
            "private JLabel jLabel4",
            "private JLabel jLabel41",
            "private ActionListener campoCompilato",
            "private FocusListener validating",
            "private JToolBar toolbarSchedaPR",
            "private JTextField posGeoX",
            "private JTextField posGeoY",
            "private JTextField posGeoZ",
            "private JLabel jLabel2",
            "private JComboBox<String> orarioCHOrePR",
            "private  final Color ERROR_BACKGROUND",
            "private  final Color WARNING_BACKGROUND",
            "private String text",
            "private int limit"
        ],
        "generated_class_comment": "/**\n * This class represents a GUI component that handles focus events and action events for text fields. It contains methods to transfer focus to the next component in the focus traversal cycle, retrieve text from text fields when they gain focus, and validate text fields when they lose focus.\n * \n * The class includes the following methods:\n * - actionPerformed(ActionEvent): This method is called when an action event occurs. It transfers the focus to the next component in the focus traversal cycle.\n * - focusGained(FocusEvent): This method is called when a component gains focus. If the source of the event is a JTextField, it retrieves the text from the JTextField and stores it in a variable.\n * - focusLost(FocusEvent): This method is called when a component loses focus. If the source of the event is a JTextField, it compares the current text with the previous text, validates the text, and displays an error message if the text is empty.\n * \n * Overall, this class provides functionality to manage focus events and text validation for text fields in a GUI application.\n */\npublic class TextFieldFocusHandler {\n    // class implementation goes here\n}\n**/\n/**\n * This class represents a component that handles focus events. When a component loses focus, it checks if the source of the event is a JTextField.\n * If the source is a JTextField, it compares the current text with the previous text. If the text has changed and is now empty, it sets the background color of the JTextField to an error color,\n * adds an error icon next to the JTextField, and displays a tooltip indicating that the field cannot be empty.\n * \n * The class also initializes the properties of a window, such as iconifiability, bounds, close operation, frame icon, and content pane.\n * \n * Additionally, the class contains a method to make components editable. It loops through all components in a container, toggles the editability of JTextFields and enables/disables JComboBoxes.\n * It also toggles the editability of a specific JTextArea and activates/deactivates a custom panel.\n * \n * @param fe the FocusEvent that triggered this method\n * @return void\n */\n*/\n/**\n * This class contains methods for making text fields editable, changing their background color to white,\n * toggling the enabled state of combo boxes, and activating/deactivating specific panels.\n * \n * The getJContentPane method initializes a JPanel with a BorderLayout layout, adds a JTabbedPane to the center,\n * and a toolbar to the north. Subsequent calls to this method will return the same instance of the JPanel.\n * \n * The getBtnModifica method initializes a JToggleButton that allows the user to change data. It sets the text,\n * icon, and action listener for the button, which calls the makeEditable method and toggles the visibility of\n * save and cancel buttons based on the selection state of the toggle button.\n * \n * @return None\n */\n*/\nI can help you generate a comprehensive JavaDoc comment for the class. Here is a sample comment that describes the purpose of the class, its main functionalities, and its overall behavior:\n\n/**\n * This class represents a data management component for a restaurant point.\n * It provides functionality to modify and save data related to the restaurant point.\n * The class contains methods to initialize buttons for modifying data, saving data, and canceling changes.\n * When the modify button is clicked, the data becomes editable and the save and cancel buttons are displayed.\n * The save button allows the user to save the modified data, while the cancel button cancels any changes made.\n * Overall, this class facilitates the management of data for a restaurant point in a user-friendly manner.\n */\n \nPlease let me know if you need any further assistance or modifications to the JavaDoc comment.\n/**\n * This class represents a GUI component for managing operator agency operations.\n * It contains methods for initializing various buttons and components used in the interface.\n * The class provides functionalities for canceling actions, editing comments, and managing tabbed panes.\n * \n * The class includes methods for initializing the Cancel button, the Edit Comment button, and the JTabbedPane.\n * If these components have not been initialized yet, the methods create new instances with appropriate text, icons, and visibility settings.\n * \n * @author [Your Name]\n * @version 1.0\n */\n*/\n/**\n * This class represents a GUI component for an operator agency, providing various functionalities for managing data, statistics, and feedback.\n * It contains methods for creating and initializing a JTabbedPane with tabs for Data Refreshment, MenuTuristico, Statistics, and Feedback received.\n * Each tab is associated with an icon and a corresponding panel to display relevant information.\n * The class also includes methods for setting up the layout and components of the Data Refreshment panel, such as labels for name, address, city, location, CAP, and province.\n * Overall, this class serves as a central hub for the operator agency to access and interact with different aspects of their operations.\n */\nSure, here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a GUI component that displays information related to a refreshment point.\n * It contains two main panels: one for general data about the refreshment point and another for statistics.\n * The general data panel includes labels for the name, address, city, location, CAP, province, geographic position, phone number, opening hours, and closing time.\n * The statistics panel is initially set to null and is created when needed. It uses a GridBagLayout for layout management.\n * \n * This class provides methods to initialize and retrieve the general data panel and the statistics panel.\n * The getDatiPR() method initializes the general data panel and adds JLabels for the refreshment point information.\n * The getStatisticsPanel() method initializes the statistics panel if it is null and returns it.\n * \n * Overall, this class serves as a visual representation of information related to a refreshment point, providing a user-friendly interface for viewing and managing data.\n */\n \nI hope this helps clarify the purpose and functionality of the class!\n/**\n * This class represents a GUI component that displays statistics and feedback related to average vote.\n * It contains methods to initialize and retrieve panels for statistics and feedback.\n * \n * The getStatistiche() method initializes a JPanel for statistics, with a GridBagLayout, and adds a JLabel displaying the text \"Average Vote\" to it.\n * \n * The getFeedback() method initializes a JPanel for feedback, with a GridBagLayout, and adds a JScrollPane containing feedback data to it.\n * The feedback panel is set to fill both horizontally and vertically, with a weight of 1.0 for both dimensions.\n * \n * Overall, this class provides a user interface for viewing and interacting with statistical information and feedback related to average vote.\n */\npublic class StatisticsFeedbackPanel {\n    // Class implementation here\n}\n*/\n/**\n * This class contains methods for initializing JTextField and JComboBox components for entering shipping addresses.\n * It provides functionality to create and return instances of these components with specific properties.\n * \n * The getIndirizzoPR method initializes a JTextField component for entering a shipping address. If the component has not been initialized yet, it creates a new instance with 12 columns and adds an ActionListener to it. Subsequent calls will return the same instance.\n * \n * The getIndirizzoPR1 method initializes a JComboBox<String> component for selecting the type of address prefix (e.g., Via, P.zza, V.le). If the component has not been initialized yet, it creates a new instance with predefined address prefixes and sets its preferred and minimum size.\n * \n * Overall, this class provides convenient methods for setting up address input components in a graphical user interface.\n */\n*/\nI can help you generate a comprehensive JavaDoc comment for your class. Here is a suggestion:\n\n/**\n * The Via class represents address prefixes including \"Via\", \"P.zza\", \"V.le\", \"V.co\", \"Largo\", and \"Corso\".\n * It provides a JComboBox<String> object for selecting address prefixes.\n * \n * @return a JComboBox<String> object containing address prefixes for selection\n */\n \nThis comment describes the purpose of the class, its main functionalities, and its overall behavior. Let me know if you need any further assistance with JavaDoc comments.\n/**\n * This class represents a GUI component for capturing Purchase Request (PR) information.\n * It contains methods to create and manage JTextField, JScrollPane, and JTextArea components.\n * \n * The getCapPR() method retrieves the JTextField component for capturing PR information.\n * If the component has not been initialized yet, it creates a new instance with 8 columns\n * and adds an ActionListener to handle when the field is filled out.\n * \n * The getJScrollPane() method returns a JScrollPane component that contains a description of a PR.\n * If the component has not been initialized yet, it creates a new JScrollPane with a vertical scroll bar\n * and sets its view to the description of the PR.\n * \n * The getDescrizionePR() method creates a JTextArea component for displaying the description of a PR.\n * If the component has not been initialized yet, it creates a new JTextArea with 12 columns\n * and sets the cursor to a text cursor.\n */\n**/\n/**\n * This class represents a ProductRegistrationForm that allows users to input and register product information.\n * It contains various components such as JTextArea for product description, JTextField for phone number, and JComboBox for hours selection.\n * If the components have not been initialized, they will be created with default settings.\n * \n * The class provides methods to get and set the product description, phone number, and hours selection.\n * It also includes ActionListener for handling user input and validation.\n * \n * Overall, the ProductRegistrationForm class serves as a user-friendly interface for registering product details.\n */\n**/\n/**\n * This class represents a utility for creating JComboBox components for selecting hours and minutes in a time picker.\n * The class includes methods to initialize JComboBox components with preset values for hours and minutes.\n * It also adds ActionListeners to the JComboBox components to handle user input.\n * \n * The class provides the following functionalities:\n * - Initialization of a JComboBox with hours ranging from 00 to 23\n * - Initialization of a JComboBox with minutes ranging from 00 to 45 in intervals of 15\n * \n * The class ensures that the JComboBox components are created with the appropriate dimensions and preset values.\n * If the JComboBox components have not been initialized yet, the methods create new instances with the required settings.\n * \n * Overall, this class simplifies the process of creating time picker components with customizable options for hours and minutes.\n * \n * @author [Your Name]\n * @version 1.0\n */\n*/\n/**\n * This class provides a set of utility methods for creating JComboBox objects with specific functionalities.\n * The class includes methods for selecting a time in 15-minute intervals and for selecting Italian province codes.\n * If the JComboBox object has not been initialized yet, it creates a new one with preset values.\n * The JComboBox objects are set to have preferred sizes and ActionListeners are added to them for interaction.\n *\n * @return a JComboBox<String> object representing a time selection dropdown menu\n */\n*/\n/**\n * This class contains methods related to handling user input in a Java Swing application. \n * It includes a JComboBox for selecting Italian province codes, a method for inserting a string into a document with specified attributes, \n * and a method for retrieving a JTextField component for entering a data point related to a snack.\n * \n * The JComboBox<String> method triggers an ActionListener when an item is selected. \n * \n * The insertString method inserts a string into a document at a specified offset with given attributes. \n * It checks if the combined length of existing text and new string does not exceed a specified limit before insertion.\n * \n * The getNomePR method initializes and returns a JTextField component for entering a data point related to a snack. \n * It sets the column size, preferred size, ActionListener, FocusListener, and Document for numeric input.\n * \n * @return a JComboBox<String> containing a list of Italian province codes\n * @param pOffset the offset at which to insert the string\n * @param pStr the string to be inserted\n * @param attr the attributes to apply to the inserted string\n * @throws IllegalArgumentException if the specified string is null\n * @return void\n * \n * @return javax.swing.JTextField for entering a data point related to a snack\n */ \n*/\n\", \"hasComment\": false, \"hasInnerComment\": false, \"signature\": \"private JScrollPane getJScrollPane2()\", \"comments\": null, \"innerComments\": null, \"generated_comment\": \"/**\\n * This method returns a JScrollPane component.\\n * If the JScrollPane has not been initialized yet, it creates a new instance.\\n * \\n * @return The JScrollPane component\\n */\" }]\n/**\n * The FeedbackPanel class represents a panel that displays feedback data in a table format.\n * It contains methods to create and manage a JScrollPane that holds the feedback table, as well as methods to retrieve\n * the feedback table and a JPanel for displaying statistics for the current month.\n * \n * The class includes the following main functionalities:\n * - Creating a JScrollPane with a vertical scroll bar and setting the view to the feedback table\n * - Creating a JTable for displaying feedback data\n * - Creating a JPanel for displaying statistics for the current month\n * \n * The overall behavior of the class is to provide a user interface component for viewing feedback data and statistics.\n * It ensures that the feedback table is displayed within a scrollable pane and that statistics for the current month\n * are presented in a visually appealing manner.\n */\npublic class FeedbackPanel {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a collection of utility methods for creating and managing Swing components in a Java GUI application.\n * It provides methods for creating JPanel components with specific layouts and sizes, as well as toolbars with various buttons.\n * \n * The class includes methods for creating and returning instances of JPanel and JToolBar components, ensuring that only one instance is created and returned for each method call.\n * \n * The getStatisticheMeseCorrente method creates a JPanel component (statisticheMeseCorrente) for displaying statistics for the current month. If the panel has not been initialized yet, it creates a new JPanel with a GridBagLayout and sets its preferred size to 500x120.\n * \n * The getStatisticheTotali method creates a JPanel component (statisticheTotali) for displaying total statistics. If the panel has not been initialized yet, it creates a new JPanel with a GridBagLayout and sets its preferred size to 500x120.\n * \n * The getToolbarSchedaPR method creates a JToolBar component (toolbarSchedaPR) for displaying a toolbar with various buttons. If the toolbar has not been initialized yet, it creates a new JToolBar, adds buttons for modifying, saving, canceling, and editing comments, and sets it as non-floatable.\n * \n * Overall, this class provides convenient methods for creating and managing Swing components in a Java GUI application, ensuring consistency in component creation and layout.\n */\n*/\n/**\n * This class represents a PR card with functionalities for modifying, saving, canceling, and modifying comments.\n * It contains a JToolBar instance that is set as non-floatable and includes buttons for the mentioned actions.\n * \n * The class also includes methods to initialize and retrieve JTextField components for the X, Y, and Z positions of geographical coordinates.\n * If the JTextField components have not been initialized yet, new instances are created.\n * \n * Overall, this class provides a user interface for managing PR card information and geographical positions.\n */\n*/\n/**\n * This class represents a New Refreshment form for user input.\n * It contains fields for entering information about a new refreshment, such as name, quantity, and price.\n * The class includes event listeners for handling user input validation and focus transfer.\n * \n * The class constructor initializes the form with the title \"New Refreshment\" and sets up action listeners for user input.\n * \n * The class provides methods for getting and setting the name, quantity, and price of the refreshment.\n * It also includes methods for validating user input and transferring focus between input fields.\n * \n * Overall, this class serves as a user interface component for entering new refreshment information and ensuring data integrity.\n */\n **/\n/**\n * The SchedaPR class represents a form for displaying and editing information about a specific point of interest.\n * It provides fields for entering and updating details such as name, address, description, and geographical position.\n * The class includes methods for initializing the form with data from a given PointOfInterest object, as well as for saving any changes made to the information.\n * Additionally, the class implements ActionListener and FocusListener interfaces to handle user interactions and validate input fields.\n * \n * This class also contains a constructor that sets up the form with default values and initializes event listeners for user actions.\n * The constructor takes no parameters and can be used to create a new instance of the SchedaPR class.\n * \n * Overall, the SchedaPR class encapsulates the functionality of managing and displaying information about points of interest in a user-friendly interface.\n */\n**/\n/** \n * Constructs a new DocumentoNumerico object with the specified limit parameter.\n * This constructor initializes the DocumentoNumerico object with a limit value.\n * \n * @param limit an integer value representing the limit for the DocumentoNumerico object\n */ \n*/\n/**\n * The DocumentoNumerico class represents a numeric document with a specified limit.\n * \n * @param limit the limit for the DocumentoNumerico\n * @throws IllegalArgumentException if the limit is negative\n */\npublic DocumentoNumerico(int limit) {\n    if (limit < 0) {\n        throw new IllegalArgumentException(\"Limit cannot be negative\");\n    }\n    \n    this.limit = limit;\n}\n\n/**\n * This constructor creates a new DocumentoNumerico object with the given limit. \n * If the limit is negative, an IllegalArgumentException is thrown.\n */\n*/\n/**\n * The SchedaPR class represents a GUI component for managing GPS coordinates in a Java application.\n * It contains various components such as text fields, labels, and combo boxes for inputting and displaying data.\n * \n * The class includes ActionListener and FocusListener interfaces for handling user interactions with the components.\n * The ActionListener is used to transfer focus to the next component when an action event occurs.\n * The FocusListener is used to validate input data in the text fields and display error messages if necessary.\n * \n * The class also includes a JToolBar for additional functionality and styling options.\n * The text fields posGeoX, posGeoY, and posGeoZ are used for inputting geographical coordinates.\n * The JComboBox orarioCHOrePR is used for selecting time values.\n * \n * The class defines ERROR_BACKGROUND and WARNING_BACKGROUND colors for highlighting input errors.\n * It also includes a limit variable for setting a maximum character limit for text fields.\n * \n * The actionPerformed method transfers focus to the next component when called.\n * The focusGained method retrieves text from a text field when it gains focus.\n * The focusLost method validates input data in text fields and displays error messages if necessary.\n * \n * Overall, the SchedaPR class provides a user-friendly interface for managing GPS coordinates and time values in a Java application.\n */\n**/\n/**\n * This class represents a GUI component for managing data related to operators in a travel agency.\n * It contains methods for initializing the GUI components, making them editable, and getting the main content pane.\n * The class also includes functionality for toggling the edit mode of text fields and combo boxes.\n * \n * The initialize method sets up the GUI components, including setting the icon and making the window closable.\n * The makeEditable method allows for toggling the edit mode of text fields and combo boxes, as well as enabling/disabling certain components.\n * The getJContentPane method initializes and returns the main content pane for the GUI.\n * \n * Overall, this class provides a user interface for managing operator data in a travel agency, with functionality for editing and displaying information.\n */\npublic class OperatorAgencyGUI extends JInternalFrame {\n    // Class implementation here\n}\n*/\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a GUI component for managing data related to a puntoDiRistoro.\n * It provides functionality for editing, saving, and canceling changes to the data.\n * The class contains methods for initializing buttons such as Modifica, Salva, and Annulla.\n * When the Modifica button is clicked, the data becomes editable and the Salva and Annulla buttons are displayed.\n * The actionPerformed method handles the actions performed when buttons are clicked.\n * The getBtnModifica, getBtnSalva, and getBtnAnnulla methods initialize and return the Modifica, Salva, and Annulla buttons respectively.\n * Overall, this class facilitates user interaction with puntoDiRistoro data in a graphical user interface.\n */\n/**\n * This class represents a GUI component for an operator agency application.\n * It contains various methods for initializing and managing different components such as buttons and tabbed panes.\n * The class provides functionalities for editing comments, displaying data refreshment, managing tourist menus, showing statistics, and handling feedback received.\n * \n * The main functionalities of this class include:\n * - Initializing a button for editing comments\n * - Creating and managing a JTabbedPane with tabs for data refreshment, tourist menus, statistics, and feedback\n * \n * Overall, this class serves as a user interface for the operator agency application, allowing operators to interact with and manage various aspects of the system.\n */\npublic class OperatorAgencyGUI {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a GUI component that displays information about a refreshment location.\n * It contains labels for various details such as name, address, city, location, CAP, province, geographic position, phone, opening hours, and closing time.\n * The class provides a method getDatiPR() that initializes a panel with these labels arranged in a grid layout using GridBagConstraints.\n * The getDatiPR() method returns the JPanel containing these labels for display in the GUI.\n * \n * @author [Your Name]\n * @version 1.0\n */\n**/\n/**\n * This class represents a GUI component that contains various panels for displaying statistics, feedback, and address information.\n * It provides methods for initializing and retrieving these panels, as well as setting up the layout and components within them.\n * \n * The class includes methods such as getStatistiche(), getFeedback(), getIndirizzoPR(), and getIndirizzoPR1() for creating and accessing different parts of the GUI.\n * Each method initializes a specific panel or component with specific properties and behaviors.\n * \n * Overall, this class serves as a container for organizing and displaying information related to statistics, feedback, and address details within a graphical user interface.\n */\n**/\nUnfortunately, I cannot generate a comprehensive JavaDoc comment for the entire class as the code provided is only a snippet of individual methods within the class. In order to provide a complete JavaDoc comment for the class, I would need to see the entire class including its fields, constructors, and other methods.\n\nIf you can provide the full class code, I would be happy to help you generate a JavaDoc comment for the class that describes its purpose, main functionalities, and overall behavior.\n/**\n * This class represents a GUI component for managing a PR (Public Relations) entity. \n * It provides fields for entering and displaying information such as description, phone number, and operating hours.\n * The main functionalities of this class include creating JTextArea for description, JTextField for phone number,\n * and JComboBox for selecting operating hours. It also sets up event listeners for user input validation.\n * \n * The class encapsulates the creation of these components and their layout within a JScrollPane for easy navigation.\n * It ensures that the components are properly initialized and configured with appropriate dimensions and listeners.\n * \n * Overall, this class serves as a user-friendly interface for inputting and viewing PR-related information,\n * enhancing the user experience and interaction with the PR entity.\n */\n**/\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a GUI component for managing appointments. It provides functionality for setting appointment times, locations, and other details.\n * \n * The class contains methods for initializing JComboBox components with specific values for minutes and provinces. It also includes event listeners for handling user input.\n * \n * Overall, this class serves as a user-friendly interface for scheduling and managing appointments in a graphical environment.\n */\n/**\n * The R class represents a utility class that contains methods for initializing and managing GUI components in a Java Swing application.\n * It provides functionalities for creating JComboBox, JTextField, and managing text insertion.\n * \n * This class includes methods for initializing a JComboBox with a list of provinces, managing text insertion with a specified limit, and initializing a JTextField for data entry.\n * \n * The main functionalities of this class include:\n * - Creating and initializing a JComboBox with all the provinces\n * - Managing position and text insertion in a document\n * - Initializing a data point of the snack with a JTextField\n * \n * Overall, the R class serves as a utility class for handling GUI components and text manipulation in a Java Swing application.\n */\npublic class R {\n    /**\n     * Create and initialize a JComboBox with all the provinces (provPR)\n     *\n     * @return javax.swing.JTextField\n     */\n    private JComboBox<String> getProvPR() {\n        String[] province = { \"R\", \"RA\", \"RC\", \"RE\", \"RG\", \"RI\", \"RM\", \"RN\", \"RO\", \"SA\", \"SI\", \"SO\", \"SP\", \"SS\", \"SV\", \"TA\", \"TE\", \"TN\", \"TP\", \"TR\", \"TS\", \"TV\", \"UD\", \"VA\", \"VB\", \"VC\", \"VE\", \"VI\", \"VR\", \"VS\", \"VT\", \"VV\" };\n        JComboBox<String> provPR = new JComboBox<>();\n        for (String provincia : province) {\n            provPR.addItem(provincia);\n        }\n        provPR.addActionListener(campoCompilato);\n        return provPR;\n    }\n\n    /**\n     * Initialization and management position\n     *\n     * @param pOffset\n     * @param pStr\n     * @param attr\n     */\n    public void insertString(int pOffset, String pStr, AttributeSet attr) {\n        if (pStr == null) {\n            return;\n        }\n        if ((getLength() + pStr.length()) <= limit) {\n            super.insertString(pOffset, pStr, attr);\n        }\n    }\n\n    /**\n     * Initialization of a data point of the snack (nomePR)\n     *\n     * @return javax.swing.JTextField\n     */\n    private JTextField getNomePR() {\n        if (nomePR == null) {\n            nomePR = new JTextField();\n            nomePR.setColumns(12);\n            nomePR.setPreferredSize(new Dimension(180, 20));\n            nomePR.addActionListener(campoCompilato);\n            nomePR.addFocusListener(validating);\n            nomePR.setDocument(new DocumentoNumerico(20));\n        }\n        return nomePR;\n    }\n\n    // Other methods and variables can be included here\n}\n*/\nI'm sorry, but I cannot generate a comprehensive JavaDoc comment for the entire class as the code provided is only a snippet of the class and does not contain enough information about its purpose, main functionalities, and overall behavior. In order to generate a comprehensive JavaDoc comment, I would need to see the complete code of the class including its variables, methods, and any other relevant information. If you can provide me with the complete code, I would be happy to help you generate a JavaDoc comment for the class.\n* Method for creating a text field (posGeoX)\n*\n* @return javax.swing.JTextField\n*/\n/**\n * This class represents a form for entering new refreshment data. It contains fields for entering the X, Y, and Z positions of a GPS, as well as a JComboBox for selecting hours. The form includes validation and focus transfer functionality.\n * \n * The class includes methods for initializing the X, Y, and Z position fields, as well as the hours JComboBox. It also includes constructors for setting up the form with appropriate title and listeners for field validation and focus transfer.\n * \n * Overall, this class provides a user-friendly interface for entering refreshment data with validation and focus management features.\n */\n**/\n/**\n * The SchedaPR class represents a GUI component for displaying and editing information about a specific location.\n * It includes text fields for entering and displaying various details such as name, address, description, etc.\n * This class also provides functionality for validating user input and displaying error messages when necessary.\n * \n * The main functionalities of this class include:\n * - Setting and displaying information about a location\n * - Validating user input for required fields\n * - Displaying error messages when fields are left empty\n * \n * The behavior of this class is as follows:\n * - When a user interacts with a text field, the focusGained method is triggered to store the current text value.\n * - When the focus is lost from a text field, the focusLost method is triggered to compare the new text value with the stored value.\n * - If the text field is empty, an error message is displayed and the background color of the text field is changed to indicate an error.\n * \n * This class also includes a constructor for initializing the GUI components and a method for setting the values of the text fields based on a provided location object.\n * \n * @author [Your Name]\n * @version 1.0\n */\n*/\n/**\n * This class represents a DocumentoNumerico, which is used to handle numeric documents.\n * It contains methods for setting limits and performing numeric operations.\n * \n * The class includes a constructor that initializes the DocumentoNumerico with a specified limit.\n * \n * Main functionalities include setting limits and performing numeric operations.\n * \n * The class also includes private variables for UI components such as JPanel, JToolBar, JToggleButton, JButton, JLabel, and JTabbedPane.\n * \n * Overall behavior of the class is to provide functionality for handling numeric documents and performing operations within the specified limit.\n */\n*/\n/**\n * This class represents a GUI component for managing information related to a specific location.\n * It contains various fields for inputting and displaying data such as address, city, description, phone number, opening hours, tags, and feedback.\n * The class also includes functionality for validating user input, displaying statistics, and managing the position coordinates of the location.\n * \n * The main functionalities of this class include:\n * - Input and display of location details such as name, address, city, locality, postal code, description, phone number, and cost\n * - Selection of opening hours for different days of the week\n * - Tagging the location with relevant keywords\n * - Displaying feedback from users in a table format\n * - Calculating and displaying average rating for the location\n * - Displaying statistics for the current month and overall\n * - Validating user input for required fields and formatting\n * - Managing the position coordinates (latitude, longitude, altitude) of the location\n * \n * The overall behavior of this class is to provide a user-friendly interface for managing and viewing information about a location.\n * It ensures that the user input is validated and displayed correctly, and provides tools for analyzing feedback and statistics.\n * The class also allows for easy navigation and editing of location details, making it a comprehensive tool for location management.\n */"
    },
    {
        "methods": [
            {
                "body": "Optional[{\r\n    ((JComponent) actionEvent.getSource()).transferFocus();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (fe.getSource() instanceof JTextField) {\r\n        JTextField textbox = (JTextField) fe.getSource();\r\n        text = textbox.getText();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void focusGained(FocusEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (fe.getSource() instanceof JTextField) {\r\n        JTextField textbox = (JTextField) fe.getSource();\r\n        if (!text.equals(textbox.getText())) {\r\n            text = textbox.getText();\r\n            if (text.equals(\"\")) {\r\n                textbox.setBackground(ERROR_BACKGROUND);\r\n                Rectangle bounds = textbox.getBounds();\r\n                JLabel newLabel = new JLabel();\r\n                newLabel.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/images/error.png\")));\r\n                newLabel.setBounds(bounds.x - 24, bounds.y, 24, 24);\r\n                newLabel.setToolTipText(\"Field \" + textbox.getName() + \" cannot be empty!\");\r\n                datiPR.add(newLabel, null);\r\n                datiPR.repaint();\r\n            }\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void focusLost(FocusEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    this.setIconifiable(true);\r\n    this.setBounds(new Rectangle(0, 0, 600, 540));\r\n    this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\r\n    this.setFrameIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/scheda.png\")));\r\n    this.setClosable(true);\r\n    this.setContentPane(getJContentPane());\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void initialize()",
                "comments": "Optional[/**\r\n * Method called by the constructor\r\n *\r\n * @return void\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Component[] components = datiPR.getComponents();\r\n    for (int i = 0; i < components.length; i++) {\r\n        Component current = components[i];\r\n        if (current instanceof JTextField) {\r\n            JTextField textbox = (JTextField) current;\r\n            textbox.setEditable(!textbox.isEditable());\r\n            textbox.setBackground(Color.white);\r\n        } else if (current instanceof JComboBox) {\r\n            JComboBox<?> combo = (JComboBox<?>) current;\r\n            combo.setEnabled(!combo.isEnabled());\r\n        }\r\n    }\r\n    descrizionePR.setEditable(!descrizionePR.isEditable());\r\n    pannelloTag.attivaDisattiva();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private void makeEditable()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (jContentPane == null) {\r\n        jContentPane = new JPanel();\r\n        jContentPane.setLayout(new BorderLayout());\r\n        jContentPane.add(getJTabbedPane(), BorderLayout.CENTER);\r\n        jContentPane.add(getToolbarSchedaPR(), BorderLayout.NORTH);\r\n    }\r\n    return jContentPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getJContentPane()",
                "comments": "Optional[/**\r\n * Method which initializes a jContentPane\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnModifica == null) {\r\n        btnModifica = new JToggleButton();\r\n        btnModifica.setText(\"Change Data\");\r\n        btnModifica.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/modifica.png\")));\r\n        btnModifica.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                makeEditable();\r\n                btnSalva.setVisible(btnModifica.isSelected());\r\n                btnAnnulla.setVisible(btnModifica.isSelected());\r\n            }\r\n        });\r\n    }\r\n    return btnModifica;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JToggleButton getBtnModifica()",
                "comments": "Optional[/**\r\n * This method initializes the button (ToggleButton) the alteration\r\n * Data for puntoDiRistoro\r\n *\r\n * @return javax.swing.JToggleButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    makeEditable();\r\n    btnSalva.setVisible(btnModifica.isSelected());\r\n    btnAnnulla.setVisible(btnModifica.isSelected());\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnSalva == null) {\r\n        btnSalva = new JButton();\r\n        btnSalva.setText(\"Save\");\r\n        btnSalva.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/salva.png\")));\r\n        btnSalva.setVisible(false);\r\n    }\r\n    return btnSalva;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnSalva()",
                "comments": "Optional[/**\r\n * Method to initialize the Save button (btnSalva)\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnAnnulla == null) {\r\n        btnAnnulla = new JButton();\r\n        btnAnnulla.setText(\"Cancel\");\r\n        btnAnnulla.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/annulla.png\")));\r\n        btnAnnulla.setVisible(false);\r\n    }\r\n    return btnAnnulla;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnAnnulla()",
                "comments": "Optional[/**\r\n * Method to initialize the Cancel button (btnAnnulla)\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnModificaCommento == null) {\r\n        btnModificaCommento = new JButton();\r\n        btnModificaCommento.setText(\"Edit Comment\");\r\n        btnModificaCommento.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/modificaCommento.png\")));\r\n        btnModificaCommento.setVisible(false);\r\n    }\r\n    return btnModificaCommento;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnModificaCommento()",
                "comments": "Optional[/**\r\n * Method to initialize the button for\r\n * Changing a comment (btnModificaCommento)\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (jTabbedPane == null) {\r\n        jTabbedPane = new JTabbedPane();\r\n        jTabbedPane.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\r\n        jTabbedPane.addTab(\"Data Refreshment\", new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/dati.png\")), getDatiPR(), null);\r\n        jTabbedPane.addTab(\"MenuTuristico\", new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/stat24.png\")), null, null);\r\n        jTabbedPane.addTab(\"Statistics\", new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/stat24.png\")), getStatistiche(), null);\r\n        jTabbedPane.addTab(\"Feedback received\", new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/operatoreagenzia/images/feedback.png\")), getFeedback(), null);\r\n    }\r\n    return jTabbedPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTabbedPane getJTabbedPane()",
                "comments": "Optional[/**\r\n * Create and initialize a JTabbedPane\r\n *\r\n * @return javax.swing.JTabbedPane\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (datiPR == null) {\r\n        datiPR = new JPanel();\r\n        datiPR.setLayout(new GridBagLayout());\r\n        datiPR.setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n        gridBagConstraints.insets = new Insets(5, 5, 5, 5);\r\n        gridBagConstraints.gridx = 0;\r\n        gridBagConstraints.gridy = 0;\r\n        txtNome = new JLabel(\"Name Refreshment\");\r\n        txtIndirizzo = new JLabel(\"Address\");\r\n        txtCitta = new JLabel(\"City\");\r\n        txtLocalità = new JLabel(\"Location\");\r\n        txtCAP = new JLabel(\"CAP\");\r\n        txtProvincia = new JLabel(\"Province\");\r\n        txtPos = new JLabel(\"Geographic Position\");\r\n        txtTel = new JLabel(\"Phone\");\r\n        txtOraAp = new JLabel(\"Opening Hours\");\r\n        txtOraCh = new JLabel(\"Closing Time\");\r\n        datiPR.add(txtNome, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtIndirizzo, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtCitta, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtLocalità, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtCAP, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtProvincia, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtPos, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtTel, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtOraAp, gridBagConstraints);\r\n        gridBagConstraints.gridy++;\r\n        datiPR.add(txtOraCh, gridBagConstraints);\r\n    }\r\n    return datiPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getDatiPR()",
                "comments": "Optional[/**\r\n * Method to initialize a panel (datiPR)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (statistics == null) {\r\n        statistics = new JPanel();\r\n        statistics.setLayout(new GridBagLayout());\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.gridx = 0;\r\n        gridBagConstraints.gridwidth = 1;\r\n        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n        gridBagConstraints.insets = new Insets(20, 0, 0, 0);\r\n        gridBagConstraints.gridy = 0;\r\n        mediaVotoPR = new JLabel(\"Average Vote\");\r\n        statistics.add(mediaVotoPR, gridBagConstraints);\r\n    }\r\n    return statistics;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getStatistiche()",
                "comments": "Optional[/**\r\n * Method for initializing a panel (statistics)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (feedback == null) {\r\n        feedback = new JPanel();\r\n        feedback.setLayout(new GridBagLayout());\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n        gridBagConstraints.gridy = 0;\r\n        gridBagConstraints.weightx = 1.0;\r\n        gridBagConstraints.weighty = 1.0;\r\n        gridBagConstraints.gridx = 0;\r\n        feedback.add(getJScrollPane2(), gridBagConstraints);\r\n    }\r\n    return feedback;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getFeedback()",
                "comments": "Optional[/**\r\n * Method to initialize a panel (feedback)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (indirizzoPR == null) {\r\n        indirizzoPR = new JTextField();\r\n        indirizzoPR.setColumns(12);\r\n        indirizzoPR.addActionListener(campoCompilato);\r\n    }\r\n    return indirizzoPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getIndirizzoPR()",
                "comments": "Optional[/**\r\n * Initialize a JTextField (indirizzoPR)\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (indirizzoPR1 == null) {\r\n        indirizzoPR1 = new JComboBox<>();\r\n        indirizzoPR1.setPreferredSize(new Dimension(60, 20));\r\n        indirizzoPR1.setMinimumSize(new Dimension(60, 25));\r\n        indirizzoPR1.addItem(\"Via\");\r\n        indirizzoPR1.addItem(\"P.zza\");\r\n        indirizzoPR1.addItem(\"V.le\");\r\n        indirizzoPR1.addItem(\"V.co\");\r\n        indirizzoPR1.addItem(\"Largo\");\r\n        indirizzoPR1.addItem(\"Corso\");\r\n    }\r\n    return indirizzoPR1;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getIndirizzoPR1()",
                "comments": "Optional[/**\r\n * Method to initialize the type field address (indirizzoPR)\r\n * Or via, piazza ....\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (cittaPR == null) {\r\n        cittaPR = new JTextField();\r\n        cittaPR.setColumns(12);\r\n        cittaPR.addActionListener(campoCompilato);\r\n    }\r\n    return cittaPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getCittaPR()",
                "comments": "Optional[/**\r\n * Initialize a JTextField for entering a city CittaPR\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (localitaPR == null) {\r\n        localitaPR = new JComboBox<>();\r\n        localitaPR.setMinimumSize(new Dimension(80, 25));\r\n        localitaPR.setPreferredSize(new Dimension(80, 20));\r\n        localitaPR.addActionListener(campoCompilato);\r\n    }\r\n    return localitaPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getLocalitaPR()",
                "comments": "Optional[/**\r\n * This method initializes localitaPR\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (capPR == null) {\r\n        capPR = new JTextField();\r\n        capPR.setColumns(8);\r\n        capPR.addActionListener(campoCompilato);\r\n    }\r\n    return capPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getCapPR()",
                "comments": "Optional[/**\r\n * Code of refreshment. Definition capPR JTextField\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (jScrollPane == null) {\r\n        jScrollPane = new JScrollPane();\r\n        jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n        jScrollPane.setViewportView(getDescrizionePR());\r\n    }\r\n    return jScrollPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JScrollPane getJScrollPane()",
                "comments": "Optional[/**\r\n * Creation JScrollPane\r\n *\r\n * @return javax.swing.JScrollPane\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (descrizionePR == null) {\r\n        descrizionePR = new JTextArea();\r\n        descrizionePR.setColumns(12);\r\n        descrizionePR.setCursor(new Cursor(Cursor.TEXT_CURSOR));\r\n    }\r\n    return descrizionePR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextArea getDescrizionePR()",
                "comments": "Optional[/**\r\n * Method to create JTextArea's whole descrizionePR\r\n *\r\n * @return javax.swing.JTextArea\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (telefonoPR == null) {\r\n        telefonoPR = new JTextField();\r\n        telefonoPR.setColumns(12);\r\n        telefonoPR.addActionListener(campoCompilato);\r\n    }\r\n    return telefonoPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getTelefonoPR()",
                "comments": "Optional[/**\r\n * Method to create the JTextField telefonoPR\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (orarioAPOrePR == null) {\r\n        orarioAPOrePR = new JComboBox<>();\r\n        orarioAPOrePR.setPreferredSize(new Dimension(40, 20));\r\n        for (int i = 0; i < 24; i++) {\r\n            if (i < 10) {\r\n                orarioAPOrePR.addItem(\"0\" + i);\r\n            } else {\r\n                orarioAPOrePR.addItem(i);\r\n            }\r\n        }\r\n        orarioAPOrePR.addActionListener(campoCompilato);\r\n    }\r\n    return orarioAPOrePR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getOrarioAPOrePR()",
                "comments": "Optional[/**\r\n * method to initialize a JComboBox with the hours (orarioAPOrePR)\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (orarioApMinPR == null) {\r\n        orarioApMinPR = new JComboBox<>();\r\n        orarioApMinPR.setPreferredSize(new Dimension(40, 20));\r\n        orarioApMinPR.addItem(\"00\");\r\n        orarioApMinPR.addItem(\"15\");\r\n        orarioApMinPR.addItem(\"30\");\r\n        orarioApMinPR.addItem(\"45\");\r\n        orarioApMinPR.addActionListener(campoCompilato);\r\n    }\r\n    return orarioApMinPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getOrarioApMinPR()",
                "comments": "Optional[/**\r\n * Method to initialize a JComboBox with the minutes (orarioApMinPR)\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (orarioCHMinPR == null) {\r\n        orarioCHMinPR = new JComboBox<>();\r\n        orarioCHMinPR.setPreferredSize(new Dimension(40, 20));\r\n        orarioCHMinPR.addItem(\"00\");\r\n        orarioCHMinPR.addItem(\"15\");\r\n        orarioCHMinPR.addItem(\"30\");\r\n        orarioCHMinPR.addItem(\"45\");\r\n        orarioCHMinPR.addActionListener(campoCompilato);\r\n    }\r\n    return orarioCHMinPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getOrarioCHMinPR()",
                "comments": "Optional[/**\r\n * Method to initialize a JComboBox with the minutes (orarioCHMinPR)\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (provPR == null) {\r\n        final String[] province = { \"AG\", \"AL\", \"AN\", \"AO\", \"AQ\", \"AR\", \"AP\", \"AT\", \"AV\", \"BA\", \"BL\", \"BN\", \"BG\", \"BI\", \"BO\", \"BR\", \"BS\", \"BZ\", \"CA\", \"CB\", \"CE\", \"CH\", \"CI\", \"CL\", \"CN\", \"CO\", \"CR\", \"CS\", \"KR\", \"EN\", \"FC\", \"FE\", \"FI\", \"FG\", \"FR\", \"GE\", \"GO\", \"GR\", \"IM\", \"IS\", \"LC\", \"LE\", \"LI\", \"LO\", \"LT\", \"LU\", \"MC\", \"ME\", \"MF\", \"MN\", \"MO\", \"MS\", \"MT\", \"NA\", \"NO\", \"NU\", \"OG\", \"OR\", \"OT\", \"PA\", \"PC\", \"PD\", \"PE\", \"PG\", \"PO\", \"PR\", \"PU\", \"R\", \"RA\", \"RC\", \"RE\", \"RG\", \"RI\", \"RM\", \"RN\", \"RO\", \"SA\", \"SI\", \"SO\", \"SP\", \"SS\", \"SV\", \"TA\", \"TE\", \"TN\", \"TP\", \"TR\", \"TS\", \"TV\", \"UD\", \"VA\", \"VB\", \"VC\", \"VE\", \"VI\", \"VR\", \"VS\", \"VT\", \"VV\" };\r\n        provPR = new JComboBox<>();\r\n        for (String provincia : province) {\r\n            provPR.addItem(provincia);\r\n        }\r\n        provPR.addActionListener(campoCompilato);\r\n    }\r\n    return provPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getProvPR()",
                "comments": "Optional[/**\r\n * Create and initialize a JComboBox with all the provinces (provPR)\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (pStr == null) {\r\n        return;\r\n    }\r\n    if ((getLength() + pStr.length()) <= limit) {\r\n        super.insertString(pOffset, pStr, attr);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public void insertString(int, String, AttributeSet)",
                "comments": "Optional[/**\r\n * Initialization and management position\r\n *\r\n * @param pOffset\r\n * @param pStr\r\n * @param attr\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (nomePR == null) {\r\n        nomePR = new JTextField();\r\n        nomePR.setColumns(12);\r\n        nomePR.setPreferredSize(new Dimension(180, 20));\r\n        nomePR.addActionListener(campoCompilato);\r\n        nomePR.addFocusListener(validating);\r\n        nomePR.setDocument(new DocumentoNumerico(20));\r\n    }\r\n    return nomePR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getNomePR()",
                "comments": "Optional[/**\r\n * Initialization of a data point of the snack (nomePR)\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (jPanel == null) {\r\n        jPanel = new JPanel();\r\n        jPanel.setLayout(new BorderLayout());\r\n        jPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), \"Tag the 'Search\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), Color.black));\r\n        BeanTag[] test = new BeanTag[8];\r\n        test[0] = new BeanTag(0, \"castle\", \"really a castle\");\r\n        test[1] = new BeanTag(1, \"stronghold\", \"really a hostel\");\r\n        test[2] = new BeanTag(2, \"statue\", \"really a basket\");\r\n        test[3] = new BeanTag(3, \"column\", \"really a basket\");\r\n        test[4] = new BeanTag(4, \"internal\", \"really a basket\");\r\n        test[5] = new BeanTag(5, \"external\", \"really a basket\");\r\n        test[6] = new BeanTag(6, \"eight hundred\", \"really a basket\");\r\n        test[7] = new BeanTag(7, \"Novecento\", \"really a basket\");\r\n        pannelloTag = new TagPanel(test);\r\n        jPanel.add(pannelloTag, BorderLayout.CENTER);\r\n    }\r\n    return jPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getJPanel()",
                "comments": "Optional[/**\r\n * Initialize and create a panel (JPanel)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (jScrollPane2 == null) {\r\n        jScrollPane2 = new JScrollPane();\r\n        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n        jScrollPane2.setViewportView(getFeedbackTable());\r\n    }\r\n    return jScrollPane2;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JScrollPane getJScrollPane2()",
                "comments": "Optional[/**\r\n * Creating a JScrollPane (jScrollPane2)\r\n *\r\n * @return javax.swing.JScrollPane\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (feedbackTable == null) {\r\n        feedbackTable = new JTable();\r\n    }\r\n    return feedbackTable;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTable getFeedbackTable()",
                "comments": "Optional[/**\r\n * Create a JTable (feedbackTable)\r\n *\r\n * @return javax.swing.JTable\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (statisticheMeseCorrente == null) {\r\n        statisticheMeseCorrente = new JPanel();\r\n        statisticheMeseCorrente.setLayout(new GridBagLayout());\r\n        statisticheMeseCorrente.setPreferredSize(new Dimension(500, 120));\r\n    }\r\n    return statisticheMeseCorrente;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getStatisticheMeseCorrente()",
                "comments": "Optional[/**\r\n * Creation of a panel (statisticheMeseCorrente)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (statisticheTotali == null) {\r\n        statisticheTotali = new JPanel();\r\n        statisticheTotali.setLayout(new GridBagLayout());\r\n        statisticheTotali.setPreferredSize(new Dimension(500, 120));\r\n    }\r\n    return statisticheTotali;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getStatisticheTotali()",
                "comments": "Optional[/**\r\n * Creation of a panel (statisticheTotali)\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (toolbarSchedaPR == null) {\r\n        toolbarSchedaPR = new JToolBar();\r\n        toolbarSchedaPR.setFloatable(false);\r\n        toolbarSchedaPR.add(getBtnModifica());\r\n        toolbarSchedaPR.addSeparator();\r\n        toolbarSchedaPR.add(getBtnSalva());\r\n        toolbarSchedaPR.addSeparator();\r\n        toolbarSchedaPR.add(getBtnAnnulla());\r\n        toolbarSchedaPR.addSeparator();\r\n        toolbarSchedaPR.add(getBtnModificaCommento());\r\n        toolbarSchedaPR.addSeparator();\r\n    }\r\n    return toolbarSchedaPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JToolBar getToolbarSchedaPR()",
                "comments": "Optional[/**\r\n * Method for creating a toolbar (ToolbarSchedaPR)\r\n *\r\n * @return javax.swing.JToolBar\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (posGeoX == null) {\r\n        posGeoX = new JTextField();\r\n    }\r\n    return posGeoX;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getPosGeoX()",
                "comments": "Optional[/**\r\n * Method to initialize posGeoX\r\n * The X position of the GPS\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (posGeoY == null) {\r\n        posGeoY = new JTextField();\r\n    }\r\n    return posGeoY;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getPosGeoY()",
                "comments": "Optional[/**\r\n * Method to initialize posGeoY\r\n * The Y position of the GPS\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (posGeoZ == null) {\r\n        posGeoZ = new JTextField();\r\n    }\r\n    return posGeoZ;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getPosGeoZ()",
                "comments": "Optional[/**\r\n * Method to initialize posGeoZ\r\n * The Z position of the GPS\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (orarioCHOrePR == null) {\r\n        orarioCHOrePR = new JComboBox<>();\r\n        orarioCHOrePR.setPreferredSize(new Dimension(40, 20));\r\n    }\r\n    return orarioCHOrePR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JComboBox<String> getOrarioCHOrePR()",
                "comments": "Optional[/**\r\n * Method to initialize a JComboBox with the hours (orarioCHOrePR)\r\n *\r\n * @return javax.swing.JComboBox\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"New Refreshment\");\r\n    campoCompilato = new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent actionEvent) {\r\n            ((JComponent) actionEvent.getSource()).transferFocus();\r\n        }\r\n    };\r\n    validating = new FocusListener() {\r\n\r\n        private final Color ERROR_BACKGROUND = new Color(255, 215, 215);\r\n\r\n        private final Color WARNING_BACKGROUND = new Color(255, 235, 205);\r\n\r\n        private String text;\r\n\r\n        public void focusGained(FocusEvent fe) {\r\n            if (fe.getSource() instanceof JTextField) {\r\n                JTextField textbox = (JTextField) fe.getSource();\r\n                text = textbox.getText();\r\n            }\r\n        }\r\n\r\n        public void focusLost(FocusEvent fe) {\r\n            if (fe.getSource() instanceof JTextField) {\r\n                JTextField textbox = (JTextField) fe.getSource();\r\n                if (!text.equals(textbox.getText())) {\r\n                    text = textbox.getText();\r\n                    if (text.equals(\"\")) {\r\n                        textbox.setBackground(ERROR_BACKGROUND);\r\n                        Rectangle bounds = textbox.getBounds();\r\n                        JLabel newLabel = new JLabel();\r\n                        newLabel.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/images/error.png\")));\r\n                        newLabel.setBounds(bounds.x - 24, bounds.y, 24, 24);\r\n                        newLabel.setToolTipText(\"Field \" + textbox.getName() + \" cannot be empty!\");\r\n                        datiPR.add(newLabel, null);\r\n                        datiPR.repaint();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    initialize();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public SchedaPR()",
                "comments": "Optional[/**\r\n * The default constructor for inclusion of the interface model\r\n * A new refreshment.\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "{\r\n    this();\r\n    nomePR.setText(pr.getNome());\r\n    setTitle(pr.getNome());\r\n    capPR.setText(pr.getCap());\r\n    cittaPR.setText(pr.getCitta());\r\n    descrizionePR.setText(pr.getDescrizione());\r\n    StringTokenizer tokenizer = new StringTokenizer(pr.getVia());\r\n    String[] via = { \"Via\", \"P.zza\", \"V.le\", \"V.co\", \"Largo\", \"Corso\" };\r\n    String string = tokenizer.nextToken();\r\n    int i;\r\n    for (i = 0; i < via.length; i++) {\r\n        if (string.equalsIgnoreCase(via[i])) {\r\n            break;\r\n        }\r\n    }\r\n    this.indirizzoPR1.setSelectedIndex(i);\r\n    while (tokenizer.hasMoreTokens()) {\r\n        this.indirizzoPR.setText(indirizzoPR.getText() + \" \" + tokenizer.nextToken());\r\n    }\r\n    this.provPR.setSelectedItem(pr.getProvincia());\r\n    Punto3D pos = pr.getPosizione();\r\n    this.posGeoX.setText(\"\" + pos.getX());\r\n    this.posGeoY.setText(\"\" + pos.getY());\r\n    this.posGeoZ.setText(\"\" + pos.getZ());\r\n    this.telefonoPR.setText(pr.getTelefono());\r\n    int minutes = pr.getOrarioApertura().getMinutes();\r\n    if (minutes == 0) {\r\n        this.orarioApMinPR.setSelectedIndex(0);\r\n    } else {\r\n        this.orarioApMinPR.setSelectedItem(minutes);\r\n    }\r\n    int hours = pr.getOrarioApertura().getHours();\r\n    if (hours < 10) {\r\n        this.orarioAPOrePR.setSelectedItem(\"0\" + hours);\r\n    } else {\r\n        this.orarioAPOrePR.setSelectedItem(hours);\r\n    }\r\n    this.orarioCHMinPR.setSelectedItem(pr.getOrarioChiusura().getMinutes());\r\n    this.orarioAPOrePR.setSelectedItem(pr.getOrarioApertura().getHours());\r\n    this.orarioCHOrePR.setSelectedItem(pr.getOrarioChiusura().getHours());\r\n    if (edit) {\r\n        btnModifica.setSelected(true);\r\n    } else {\r\n        makeEditable();\r\n    }\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public SchedaPR(BeanPuntoDiRistoro, boolean)",
                "comments": "Optional[/**\r\n * This interface models the manufacturer regarding modification of data and\r\n * Display board a refreshment.\r\n *\r\n * @param pr    the bean contains the data of PuntoDiRistoro selected.\r\n * @param edit  indicates whether the fields should be editable, so if\r\n *              You are viewing a card or change the cultural property.\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "{\r\n    this.limit = limit;\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public DocumentoNumerico(int)",
                "comments": null,
                "innerComments": null
            }
        ],
        "signature": "DocumentoNumerico",
        "variables": [
            "private JPanel jContentPane",
            "private JToolBar toolbarSchedaBC",
            "private JToggleButton btnModifica",
            "private JButton btnSalva",
            "private JButton btnAnnulla",
            "private JButton btnModificaCommento",
            "private JTabbedPane jTabbedPane",
            "private JPanel statistics",
            "private JPanel feedback",
            "private JLabel txtNome",
            "private JLabel txtIndirizzo",
            "private JLabel txtCAP",
            "private JLabel txtCitta",
            "private JLabel txtLocalità",
            "private JLabel txtProvincia",
            "private JLabel txtPos",
            "private JLabel txtTel",
            "private JLabel txtOraAp",
            "private JLabel txtOraCh",
            "private JLabel jLabel",
            "private JTextField indirizzoPR",
            "private JComboBox<String> indirizzoPR1",
            "private JTextField cittaPR",
            "private JComboBox<String> localitaPR",
            "private JTextField capPR",
            "private JScrollPane jScrollPane",
            "private JTextArea descrizionePR",
            "private JTextField telefonoPR",
            "private JComboBox<String> orarioAPOrePR",
            "private JLabel jLabel1",
            "private JComboBox<String> orarioApMinPR",
            "private TagPanel pannelloTag",
            "private JTextField costoBC",
            "private JLabel jLabel3",
            "private JComboBox<String> orarioCHMinPR",
            "private JComboBox<String> provPR",
            "private JPanel datiPR",
            "private JTextField nomePR",
            "private JPanel jPanel",
            "private JScrollPane jScrollPane2",
            "private JTable feedbackTable",
            "private JLabel txtNomeBene",
            "private JLabel mediaVotoPR",
            "private JPanel statisticheMeseCorrente",
            "private JPanel statisticheTotali",
            "private JLabel jLabel4",
            "private JLabel jLabel41",
            "private ActionListener campoCompilato",
            "private FocusListener validating",
            "private JToolBar toolbarSchedaPR",
            "private JTextField posGeoX",
            "private JTextField posGeoY",
            "private JTextField posGeoZ",
            "private JLabel jLabel2",
            "private JComboBox<String> orarioCHOrePR",
            "private  final Color ERROR_BACKGROUND",
            "private  final Color WARNING_BACKGROUND",
            "private String text",
            "private int limit"
        ]
    }
]