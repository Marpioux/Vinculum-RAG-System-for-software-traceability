[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    // Reset the parameters of the previous search\r\n    azzeraParametri();\r\n    // Start checking the correctness of the search parameters\r\n    try {\r\n        this.pIdTurista = pIdTurista;\r\n        this.pTags = arrayToArrayListTag(pTagsId);\r\n        this.pParoleChiave = ControlloDati.correggiStringa(pParoleChiave, true, true, \"\", ControlloDati.LUNGHEZZA_MASSIMA);\r\n        this.pRaggioMax = pRaggioMax;\r\n        this.pPosizioneUtente = pPosizioneUtente;\r\n        this.pTipologiaSito = pTipologiaSito;\r\n        // If the parameters are valid, I get the number of results\r\n        if (pElementiPerPagina > 0 && ((pTipologiaSito == 0) || (pTipologiaSito == 1)) && pRaggioMax > 0 && pPosizioneUtente != null && (this.numeroElementiRicerca = ottieniNumeroElementiRicercaSpecializzato()) >= 0) {\r\n            this.pElementiPerPagina = pElementiPerPagina;\r\n            this.numeroPagineRisultati = calcolaNumeroPagineRicerca();\r\n            return this.numeroElementiRicerca;\r\n        } else\r\n            // Otherwise returns -1\r\n            return -1;\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public int search(int, String, int[], double, int, Punto3D, byte)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n * @see unisa.gps.etour.control.GestioneRicerche.IRicerca#search(int, java.lang.String, int[], double, int, unisa.gps.etour.util.Punto3D, byte)\r\n */\r\n]",
                "innerComments": "Optional[[// Reset the parameters of the previous search\r\n, // Start checking the correctness of the search parameters\r\n, // If the parameters are valid, I get the number of results\r\n, // Otherwise returns -1\r\n]]",
                "generated_comment": "/**\n * Resets the parameters of the previous search and validates the input parameters before performing the search.\n * \n * @param pIdTurista The ID of the tourist performing the search.\n * @param pTagsId The array of tags associated with the search.\n * @param pParoleChiave The keywords for the search.\n * @param pRaggioMax The maximum radius for the search.\n * @param pPosizioneUtente The user's position for the search.\n * @param pTipologiaSito The type of site for the search.\n * @param pElementiPerPagina The number of elements per page for displaying search results.\n * @return The number of search results if the parameters are valid, -1 otherwise.\n * @throws RemoteException If there is an error with the database or an unknown error occurs.\n */\npublic int search(int pIdTurista, String pTagsId, int[] pParoleChiave, double pRaggioMax, int pPosizioneUtente, Punto3D pTipologiaSito, byte pElementiPerPagina) {\n    // Reset the parameters of the previous search\n    azzeraParametri();\n    \n    // Start checking the correctness of the search parameters\n    try {\n        this.pIdTurista = pIdTurista;\n        this.pTags = arrayToArrayListTag(pTagsId);\n        this.pParoleChiave = ControlloDati.correggiStringa(pParoleChiave, true, true, \"\", ControlloDati.LUNGHEZZA_MASSIMA);\n        this.pRaggioMax = pRaggioMax;\n        this.pPosizioneUtente = pPosizioneUtente;\n        this.pTipologiaSito = pTipologiaSito;\n        \n        // If the parameters are valid, I get the number of results\n        if (pElementiPerPagina > 0 && ((pTipologiaSito == 0) || (pTipologiaSito == 1)) && pRaggioMax > 0 && pPosizioneUtente != null && (this.numeroElementiRicerca = ottieniNumeroElementiRicercaSpecializzato()) >= 0) {\n            this.pElementiPerPagina = pElementiPerPagina;\n            this.numeroPagineRisultati = calcolaNumeroPagineRicerca();\n            return this.numeroElementiRicerca;\n        } else {\n            // Otherwise returns -1\n            return -1;\n        }\n    } catch (SQLException e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    } catch (Exception e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Check that the type of site is valid and that the page is in the range\r\n    if ((this.pTipologiaSito == BENE_CULTURALE) && controllaPagina(pPagina)) {\r\n        // Transform the list obtained in array\r\n        BeanBeneCulturale[] results = new BeanBeneCulturale[calcolaNumeroElementiPagina(pPagina)];\r\n        results = ricercaPerPagina(pPagina).toArray(results);\r\n        return results;\r\n    } else\r\n        return null;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanBeneCulturale[] ottieniPaginaRisultatiBeneCulturale(int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n * @see unisa.gps.etour.control.GestioneRicerche.IRicerca#ottieniPaginaRisultatiBeneCulturale(int)\r\n */\r\n]",
                "innerComments": "Optional[[// Check that the type of site is valid and that the page is in the range\r\n, // Transform the list obtained in array\r\n]]",
                "generated_comment": "/**\n * Retrieves an array of cultural assets for a specific page.\n * \n * This method checks if the type of site is a cultural asset and if the page number is within the valid range. \n * If both conditions are met, it transforms the list of cultural assets obtained for the specified page into an array.\n * \n * @param pPagina the page number for which to retrieve the cultural assets\n * @return an array of BeanBeneCulturale objects representing the cultural assets on the specified page, \n *         or null if the type of site is not a cultural asset or the page number is invalid\n */\npublic BeanBeneCulturale[] ottieniPaginaRisultatiBeneCulturale(int pPagina) {\n    if ((this.pTipologiaSito == BENE_CULTURALE) && controllaPagina(pPagina)) {\n        BeanBeneCulturale[] results = new BeanBeneCulturale[calcolaNumeroElementiPagina(pPagina)];\n        results = ricercaPerPagina(pPagina).toArray(results);\n        return results;\n    } else {\n        return null;\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Check that the type of site is valid and that the page is in the range\r\n    if ((this.pTipologiaSito == PUNTO_DI_RISTORO) && controllaPagina(pPagina)) {\r\n        // Transform the list obtained in array\r\n        BeanPuntoDiRistoro[] results = new BeanPuntoDiRistoro[calcolaNumeroElementiPagina(pPagina)];\r\n        results = ricercaPerPagina(pPagina).toArray(results);\r\n        return results;\r\n    } else\r\n        return null;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public BeanPuntoDiRistoro[] ottieniPaginaRisultatiPuntoDiRistoro(int)",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n * @see unisa.gps.etour.control.GestioneRicerche.IRicerca#ottieniPaginaRisultatiPuntoDiRistoro(int)\r\n */\r\n]",
                "innerComments": "Optional[[// Check that the type of site is valid and that the page is in the range\r\n, // Transform the list obtained in array\r\n]]",
                "generated_comment": "/**\n * Retrieves a page of results for a point of refreshment.\n * \n * This method retrieves a page of results for a point of refreshment based on the specified page number.\n * \n * @param pPagina the page number to retrieve results for\n * @return an array of BeanPuntoDiRistoro objects representing the results for the specified page, or null if the type of site is not a point of refreshment or the page number is out of range\n */"
            },
            {
                "body": "Optional[{\r\n    return numeroElementiRicerca;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public int ottieniNumeroElementiRicerca()",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n * @see unisa.gps.etour.control.GestioneRicerche.IRicerca#ottieniNumeroElementiRicerca()\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the number of elements in the search.\n * \n * @return the number of elements in the search\n */"
            },
            {
                "body": "Optional[{\r\n    return numeroPagineRisultati;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public int ottieniNumeroPagineRicerca()",
                "comments": "Optional[/**\r\n * (Non-Javadoc)\r\n * @see unisa.gps.etour.control.GestioneRicerche.IRicerca#ottieniNumeroPagineRicerca()\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns the number of pages of search results.\n * \n * @return The number of pages of search results as an integer.\n */"
            },
            {
                "body": "Optional[{\r\n    // Check the type of site and gets the number of results\r\n    if (controllaIdTurista()) {\r\n        switch(pTipologiaSito) {\r\n            case BENE_CULTURALE:\r\n                return pIdTurista > 0 ? BeneCulturale.ottieniNumeroElementiRicercaAvanzata(this.pIdTurista, this.pParoleChiave, this.pTags, this.pPosizioneUtente, this.pRaggioMax) : BeneCulturale.ottieniNumeroElementiRicerca(this.pParoleChiave, this.pTags, this.pPosizioneUtente, this.pRaggioMax);\r\n            case PUNTO_DI_RISTORO:\r\n                return pIdTurista > 0 ? PuntoDiRistoro.ottieniNumeroElementiRicercaAvanzata(this.pIdTurista, this.pParoleChiave, this.pTags, this.pPosizioneUtente, this.pRaggioMax) : PuntoDiRistoro.ottieniNumeroElementiRicerca(this.pParoleChiave, this.pTags, this.pPosizioneUtente, this.pRaggioMax);\r\n        }\r\n    }\r\n    return -1;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private int ottieniNumeroElementiRicercaSpecializzato()",
                "comments": "Optional[/**\r\n * Method for returning the number of findings from research\r\n *\r\n * @return number of findings from research. On error Returns -1\r\n * @throws SQLException Exception Connecting to Database\r\n */\r\n]",
                "innerComments": "Optional[[// Check the type of site and gets the number of results\r\n]]",
                "generated_comment": "/**\n * This method retrieves the number of search results based on the type of site and the search criteria.\n * If the tourist ID is valid, it checks the type of site (cultural heritage or dining establishment) and \n * calls the appropriate method to obtain the number of search results either for advanced search or regular search.\n * \n * @return the number of search results based on the type of site and search criteria, or -1 if the tourist ID is invalid\n */"
            },
            {
                "body": "Optional[{\r\n    // Declare the list of sites related to the page input\r\n    ArrayList<?> risultatiPaginaCorrente = null;\r\n    try {\r\n        if (controllaIdTurista()) {\r\n            // Check the type of site\r\n            switch(pTipologiaSito) {\r\n                case BENE_CULTURALE:\r\n                    // If the list has not already been obtained previously\r\n                    // Search\r\n                    if ((risultatiPaginaCorrente = risultatiRicercaBeniCulturali.get(pNumeroPagina)) == null) {\r\n                        risultatiPaginaCorrente = (ArrayList<?>) (pIdTurista > 0 ? BeneCulturale.ricercaAvanzata(pIdTurista, pParoleChiave, pTags, pNumeroPagina, pElementiPerPagina, pPosizioneUtente, pRaggioMax) : BeneCulturale.ricerca(pParoleChiave, pTags, pNumeroPagina, pElementiPerPagina, pPosizioneUtente, pRaggioMax));\r\n                        risultatiRicercaBeniCulturali.put(pNumeroPagina, (ArrayList<BeanBeneCulturale>) risultatiPaginaCorrente);\r\n                    }\r\n                    break;\r\n                case PUNTO_DI_RISTORO:\r\n                    // If the list has not already been obtained previously\r\n                    // Search\r\n                    if ((risultatiPaginaCorrente = risultatiRicercaPuntiDiRistoro.get(pNumeroPagina)) == null) {\r\n                        risultatiPaginaCorrente = (ArrayList<?>) (pIdTurista > 0 ? PuntoDiRistoro.ricercaAvanzata(pIdTurista, pParoleChiave, pTags, pNumeroPagina, pElementiPerPagina, pPosizioneUtente, pRaggioMax) : PuntoDiRistoro.ricerca(pParoleChiave, pTags, pNumeroPagina, pElementiPerPagina, pPosizioneUtente, pRaggioMax));\r\n                        risultatiRicercaPuntiDiRistoro.put(pNumeroPagina, (ArrayList<BeanPuntoDiRistoro>) risultatiPaginaCorrente);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        // Return the results\r\n        return risultatiPaginaCorrente;\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private ArrayList<?> ricercaPerPagina(int)",
                "comments": "Optional[/**\r\n * Method for returning the list of results\r\n *\r\n * @param pNumeroPagina range of results to return\r\n * @return Container sites emerged in the research phase as the interval\r\n * @throws RemoteException Exception Remote\r\n */\r\n]",
                "innerComments": "Optional[[// Declare the list of sites related to the page input\r\n, // Check the type of site\r\n, // If the list has not already been obtained previously\r\n, // Search\r\n, // If the list has not already been obtained previously\r\n, // Search\r\n, // Return the results\r\n]]",
                "generated_comment": "/**\n * This method searches for a list of sites related to a specific page number based on the type of site specified.\n * \n * @param pNumeroPagina the page number to search for\n * @return an ArrayList containing the results of the search for the specified page\n * @throws RemoteException if an error occurs during the database query or an unknown error occurs\n */\nprivate ArrayList<?> ricercaPerPagina(int pNumeroPagina) {\n    // Declare the list of sites related to the page input\n    ArrayList<?> risultatiPaginaCorrente = null;\n    try {\n        if (controllaIdTurista()) {\n            // Check the type of site\n            switch(pTipologiaSito) {\n                case BENE_CULTURALE:\n                    // If the list has not already been obtained previously\n                    // Search\n                    if ((risultatiPaginaCorrente = risultatiRicercaBeniCulturali.get(pNumeroPagina)) == null) {\n                        risultatiPaginaCorrente = (ArrayList<?>) (pIdTurista > 0 ? BeneCulturale.ricercaAvanzata(pIdTurista, pParoleChiave, pTags, pNumeroPagina, pElementiPerPagina, pPosizioneUtente, pRaggioMax) : BeneCulturale.ricerca(pParoleChiave, pTags, pNumeroPagina, pElementiPerPagina, pPosizioneUtente, pRaggioMax));\n                        risultatiRicercaBeniCulturali.put(pNumeroPagina, (ArrayList<BeanBeneCulturale>) risultatiPaginaCorrente);\n                    }\n                    break;\n                case PUNTO_DI_RISTORO:\n                    // If the list has not already been obtained previously\n                    // Search\n                    if ((risultatiPaginaCorrente = risultatiRicercaPuntiDiRistoro.get(pNumeroPagina)) == null) {\n                        risultatiPaginaCorrente = (ArrayList<?>) (pIdTurista > 0 ? PuntoDiRistoro.ricercaAvanzata(pIdTurista, pParoleChiave, pTags, pNumeroPagina, pElementiPerPagina, pPosizioneUtente, pRaggioMax) : PuntoDiRistoro.ricerca(pParoleChiave, pTags, pNumeroPagina, pElementiPerPagina, pPosizioneUtente, pRaggioMax));\n                        risultatiRicercaPuntiDiRistoro.put(pNumeroPagina, (ArrayList<BeanPuntoDiRistoro>) risultatiPaginaCorrente);\n                    }\n                    break;\n            }\n        }\n        // Return the results\n        return risultatiPaginaCorrente;\n    } catch (SQLException e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    } catch (Exception e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // If the number of pages is greater than or equal to 0 returns the number of Pages\r\n    if (numeroPagineRisultati >= 0)\r\n        return numeroPagineRisultati;\r\n    // If the number of elements is a multiple of the number of items per page\r\n    // Return their relationship\r\n    if ((numeroElementiRicerca % pElementiPerPagina == 0))\r\n        return (numeroElementiRicerca / pElementiPerPagina);\r\n    // Otherwise returns their relationship + 1\r\n    return (numeroElementiRicerca / pElementiPerPagina) + 1;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private int calcolaNumeroPagineRicerca()",
                "comments": "Optional[/**\r\n * Method for calculating the number of pages found at Search\r\n *\r\n * @return many pages in the research phase\r\n */\r\n]",
                "innerComments": "Optional[[// If the number of elements is a multiple of the number of items per page\r\n, // If the number of pages is greater than or equal to 0 returns the number of Pages\r\n, // Return their relationship\r\n, // Otherwise returns their relationship + 1\r\n]]",
                "generated_comment": "/**\n * Calculates the number of pages needed for displaying search results based on the total number of elements in the search and the number of elements per page.\n * If the total number of pages is greater than or equal to 0, it returns the number of pages.\n * If the total number of elements is a multiple of the number of items per page, it returns their relationship.\n * Otherwise, it returns their relationship + 1 to account for any remaining elements on an additional page.\n * \n * @return the calculated number of pages needed for displaying search results\n */"
            },
            {
                "body": "Optional[{\r\n    // If page number is the last return their form\r\n    if (nPagina == (numeroPagineRisultati - 1))\r\n        return (numeroElementiRicerca % pElementiPerPagina);\r\n    else\r\n        // Otherwise returns the number of items per page\r\n        return (pElementiPerPagina);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private int calcolaNumeroElementiPagina(int)",
                "comments": "Optional[/**\r\n * Method for calculating the number of elements of nell'intevallo A given page\r\n *\r\n * @param nPagina results\r\n * @return number of elements in a page\r\n */\r\n]",
                "innerComments": "Optional[[// If page number is the last return their form\r\n, // Otherwise returns the number of items per page\r\n]]",
                "generated_comment": "/**\n * Calculates the number of elements to display on a given page based on the page number.\n *\n * @param nPagina The page number for which to calculate the number of elements to display.\n * @return The number of elements to display on the specified page. If the page number is the last page, \n * it returns the remaining elements on that page. Otherwise, it returns the default number of elements per page.\n */"
            },
            {
                "body": "Optional[{\r\n    // If page number is in the range returns true\r\n    return (pPagina >= 0 && pPagina < numeroPagineRisultati);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private boolean controllaPagina(int)",
                "comments": "Optional[/**\r\n * Method for checking the validity of a page\r\n *\r\n * @param pPagina page to check\r\n * @return true if the page is valid\r\n */\r\n]",
                "innerComments": "Optional[[// If page number is in the range returns true\r\n]]",
                "generated_comment": "/**\n * Checks if the given page number is within the valid range of pages for the search results.\n * \n * @param pPagina the page number to be checked\n * @return true if the page number is within the valid range, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    return ((pIdTurista > 0) || (pIdTurista == -1));\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private boolean controllaIdTurista()",
                "comments": "Optional[/**\r\n * Method for checking the correctness of the identifier Tourist\r\n *\r\n * @return true if the identifier is valid, false otherwise\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the given tourist ID is valid.\n * \n * @return true if the tourist ID is greater than 0 or equal to -1, false otherwise\n */"
            },
            {
                "body": "Optional[{\r\n    // Clears all the search parameters\r\n    pIdTurista = -1;\r\n    pTipologiaSito = -1;\r\n    pElementiPerPagina = -1;\r\n    numeroElementiRicerca = -1;\r\n    numeroPagineRisultati = -1;\r\n    risultatiRicercaBeniCulturali.clear();\r\n    risultatiRicercaPuntiDiRistoro.clear();\r\n    return -1;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private int azzeraParametri()",
                "comments": "Optional[/**\r\n * Method to reset all the variables related to a search\r\n *\r\n * @return A constant that indicates the correct zero\r\n */\r\n]",
                "innerComments": "Optional[[// Clears all the search parameters\r\n]]",
                "generated_comment": "/**\n * Clears all the search parameters used for searching cultural assets and dining points.\n * Sets the search parameters for tourist ID, site type, elements per page, number of search results, and number of result pages to -1.\n * Clears the lists of search results for cultural assets and dining points.\n * \n * @return -1 indicating successful clearing of search parameters\n */"
            },
            {
                "body": "Optional[{\r\n    // Initialize the list of Tags\r\n    ArrayList<BeanTag> pTags = new ArrayList<>();\r\n    // If the list of identifiers of the tag is empty I get the tags\r\n    if (pTagsId == null) {\r\n        BeanTag currentTag = null;\r\n        try {\r\n            // Loop for the insertion of tags found in the list\r\n            for (int i = 0; i < pTagsId.length; i++) {\r\n                // If the identifier is greater than 0\r\n                if (pTagsId[i] > 0) {\r\n                    currentTag = Tag.ottieniTag(pTagsId[i]);\r\n                    // Check correctness on tags\r\n                    if (ControlloDati.checkBeanTag(currentTag))\r\n                        pTags.add(currentTag);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new SQLException(MessaggiErrore.ERRORE_DBMS);\r\n        }\r\n    }\r\n    // Return the list of tags\r\n    return pTags;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private ArrayList<BeanTag> arrayToArrayListTag(int[])",
                "comments": "Optional[/**\r\n * Method for the detection and conversion of data tags in struttara List\r\n *\r\n * @param pTagsId Search Tags\r\n * @return List Search Tags\r\n * @throws SQLException\r\n */\r\n]",
                "innerComments": "Optional[[// Initialize the list of Tags\r\n, // If the list of identifiers of the tag is empty I get the tags\r\n, // Loop for the insertion of tags found in the list\r\n, // If the identifier is greater than 0\r\n, // Check correctness on tags\r\n, // Return the list of tags\r\n]]",
                "generated_comment": "/**\n * Converts an array of tag identifiers into an ArrayList of BeanTag objects.\n * If the array of tag identifiers is empty, it retrieves the corresponding tags from the database.\n * \n * @param pTagsId an array of integers representing tag identifiers\n * @return an ArrayList of BeanTag objects containing the tags corresponding to the given identifiers\n * @throws SQLException if there is an error accessing the database\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public Search()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new Search object.\n * This constructor initializes the Search object by calling the constructor of its superclass.\n */"
            }
        ],
        "signature": "Search",
        "variables": [
            "private  static  final long serialVersionUID",
            "private int pIdTurista",
            "private String pParoleChiave",
            "private double pRaggioMax",
            "private Punto3D pPosizioneUtente",
            "private int pElementiPerPagina",
            "private byte pTipologiaSito",
            "private IDBBeneCulturale BeneCulturale",
            "private IDBPuntoDiRistoro PuntoDiRistoro",
            "private IDBTag Tag",
            "private ArrayList<BeanTag> pTags",
            "private Hashtable<Integer,ArrayList<BeanBeneCulturale>> risultatiRicercaBeniCulturali",
            "private Hashtable<Integer,ArrayList<BeanPuntoDiRistoro>> risultatiRicercaPuntiDiRistoro",
            "private int numeroPagineRisultati",
            "private int numeroElementiRicerca"
        ],
        "generated_class_comment": "/**\n * The Search class represents a search engine for retrieving information about tourist sites based on various search criteria.\n * It provides methods for performing searches, retrieving search results, and calculating the number of search results and pages.\n * \n * This class includes functionality for searching cultural assets and dining points based on parameters such as tourist ID, keywords, tags, radius, user position, site type, and elements per page.\n * It also allows for retrieving specific pages of search results for cultural assets and dining points.\n * \n * The Search class encapsulates the logic for validating search parameters, performing database queries, and handling exceptions related to database connectivity.\n * It maintains data structures for storing search results and provides methods for clearing search parameters and converting tag identifiers into tag objects.\n * \n * Overall, the Search class serves as a central component for managing search operations within the application, ensuring accurate and efficient retrieval of tourist site information.\n */\n**/"
    }
]