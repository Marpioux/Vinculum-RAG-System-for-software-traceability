[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query cancellation\r\n        String query = \"DELETE FROM preferenzediricerca WHERE Id =\" + pIdPreferenza;\r\n        // You run the query Cancellation\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean cancellaPreferenzaDiRicerca(int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query cancellation\r\n, // You run the query Cancellation\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the connection\r\n]]",
                "generated_comment": "/**\n * Deletes a search preference from the database based on the provided preference ID.\n * \n * @param pIdPreferenza the ID of the preference to be deleted\n * @return true if the preference was successfully deleted, false otherwise\n * @throws SQLException if an error occurs while accessing the database\n */\npublic boolean cancellaPreferenzaDiRicerca(int pIdPreferenza) {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query cancellation\n        String query = \"DELETE FROM preferenzediricerca WHERE Id =\" + pIdPreferenza;\n        // You run the query Cancellation\n        int i = stat.executeUpdate(query);\n        // This returns the backup\n        return (i == 1);\n    } finally {\n        // Always runs and takes care of closing the Statement and the connection\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query cancellation\r\n        String query = \"DELETE FROM associazionebc WHERE IdPreferenzeDiRicerca =\" + pIdPreferenzaDiRicerca + \" AND IdBeneCulturale =\" + pIdBeneCulturale;\r\n        // You run the query Cancellation\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean cancellaPreferenzaDiRicercaBC(int, int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query cancellation\r\n, // You run the query Cancellation\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the connection\r\n]]",
                "generated_comment": "/**\n * Deletes a preference of search for a cultural asset from the database.\n * \n * @param pIdPreferenzaDiRicerca The ID of the preference of search to be deleted\n * @param pIdBeneCulturale The ID of the cultural asset to be deleted from the preference of search\n * @return true if the preference of search for the cultural asset was successfully deleted, false otherwise\n * @throws SQLException if a database access error occurs\n */"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query cancellation\r\n        String query = \"DELETE FROM associazionepr WHERE IdPreferenzeDiRicerca =\" + pIdPreferenza + \" AND IdPuntoDiRistoro =\" + pIdPuntoDiRistoro;\r\n        // You run the query Cancellation\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean cancellaPreferenzaDiRicercaPR(int, int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query cancellation\r\n, // You run the query Cancellation\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the connection\r\n]]",
                "generated_comment": "/**\n * Deletes a preference of search for a restaurant from the database.\n * \n * @param pIdPreferenza the ID of the preference of search to be deleted\n * @param pIdPuntoDiRistoro the ID of the restaurant to be unlinked from the preference of search\n * @return true if the preference of search was successfully deleted, false otherwise\n * @throws SQLException if an error occurs while accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query cancellation\r\n        String query = \"DELETE FROM rating WHERE IdTurista =\" + pIdTurista + \" AND IdPreferenzeDiRicerca =\" + pIdPreferenza;\r\n        // You run the query Cancellation\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean cancellaPreferenzaDiRicercaTurista(int, int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query cancellation\r\n, // You run the query Cancellation\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the connection\r\n]]",
                "generated_comment": "/**\n * Deletes a tourist's preference of search from the database.\n * \n * @param pIdTurista the ID of the tourist whose preference is to be deleted\n * @param pIdPreferenza the ID of the preference to be deleted\n * @return true if the preference was successfully deleted, false otherwise\n * @throws SQLException if a database access error occurs\n */\npublic boolean cancellaPreferenzaDiRicercaTurista(int pIdTurista, int pIdPreferenza) {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query cancellation\n        String query = \"DELETE FROM rating WHERE IdTurista =\" + pIdTurista + \" AND IdPreferenzeDiRicerca =\" + pIdPreferenza;\n        // You run the query Cancellation\n        int i = stat.executeUpdate(query);\n        // This returns the backup\n        return (i == 1);\n    } finally {\n        // Always runs and takes care of closing the Statement and the connection\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query for the insertion\r\n        String query = \"INSERT INTO associazionebc (IdPreferenzeDiRicerca, IdBeneCulturale) VALUES (\" + pIdPreferenzaDiRicerca + \", \" + pIdBeneCulturale + \")\";\r\n        // You run the insert query\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean inserisciPreferenzaDiRicercaDelBC(int, int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query for the insertion\r\n, // You run the insert query\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the connection\r\n]]",
                "generated_comment": "/**\n * Inserts a preference of search for a cultural asset into the database.\n * \n * @param pIdPreferenzaDiRicerca the ID of the preference of search to be inserted\n * @param pIdBeneCulturale the ID of the cultural asset to associate with the preference of search\n * @return true if the preference of search was successfully inserted, false otherwise\n * @throws SQLException if a database access error occurs\n */"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query for the insertion\r\n        String query = \"INSERT INTO preferenzediricerca (Id, Name) VALUES (\" + pPreferenza.getId() + \", '\" + pPreferenza.getNome() + \"')\";\r\n        // You run the insert query\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean inserisciPreferenzaDiRicerca(BeanPreferenzaDiRicerca)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query for the insertion\r\n, // You run the insert query\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the connection\r\n]]",
                "generated_comment": "/**\n * Inserts a new preference of search into the database.\n * \n * @param pPreferenza the BeanPreferenzaDiRicerca object containing the preference to be inserted\n * @return true if the preference was successfully inserted, false otherwise\n * @throws SQLException if an error occurs while executing the SQL query\n */\npublic boolean inserisciPreferenzaDiRicerca(BeanPreferenzaDiRicerca pPreferenza) {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query for the insertion\n        String query = \"INSERT INTO preferenzediricerca (Id, Name) VALUES (\" + pPreferenza.getId() + \", '\" + pPreferenza.getNome() + \"')\";\n        // You run the insert query\n        int i = stat.executeUpdate(query);\n        // This returns the backup\n        return (i == 1);\n    } finally {\n        // Always runs and takes care of closing the Statement and the connection\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query for the insertion\r\n        String query = \"INSERT INTO associazionepr (IdPreferenzeDiRicerca, IdPuntoDiRistoro) VALUES (\" + pIdPreferenzaDiRicerca + \", \" + pIdPuntoDiRistoro + \")\";\r\n        // You run the insert query\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean inserisciPreferenzaDiRicercaDelPR(int, int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query for the insertion\r\n, // You run the insert query\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the connection\r\n]]",
                "generated_comment": "/**\n * Inserts a preference of search for a restaurant into the database for a specific Point of Interest.\n * \n * @param pIdPreferenzaDiRicerca the ID of the preference of search to be inserted\n * @param pIdPuntoDiRistoro the ID of the Point of Interest where the preference of search will be associated\n * @return true if the preference of search was successfully inserted, false otherwise\n * @throws SQLException if a database access error occurs\n */"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query for the insertion\r\n        String query = \"INSERT INTO rating (IdTurista, IdPreferenzeDiRicerca) VALUES (\" + pIdTurista + \", \" + pIdPreferenzaDiRicerca + \")\";\r\n        // You run the insert query\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean inserisciPreferenzaDiRicercaDelTurista(int, int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query for the insertion\r\n, // You run the insert query\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the connection\r\n]]",
                "generated_comment": "/**\n * Inserts a tourist's search preference into the database.\n * \n * @param pIdTurista the ID of the tourist\n * @param pIdPreferenzaDiRicerca the ID of the search preference\n * @return true if the insertion was successful, false otherwise\n * @throws SQLException if an error occurs while accessing the database\n */\npublic boolean inserisciPreferenzaDiRicercaDelTurista(int pIdTurista, int pIdPreferenzaDiRicerca) {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query for the insertion\n        String query = \"INSERT INTO rating (IdTurista, IdPreferenzeDiRicerca) VALUES (\" + pIdTurista + \", \" + pIdPreferenzaDiRicerca + \")\";\n        // You run the insert query\n        int i = stat.executeUpdate(query);\n        // This returns the backup\n        return (i == 1);\n    } finally {\n        // Always runs and takes care of closing the Statement and the connection\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    // Variable for the query results\r\n    ResultSet result = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query to extract the list of search preferences\r\n        String query = \"SELECT * FROM associazionebc, preferenzediricerca WHERE IdBeneCulturale =\" + pIdBeneCulturale + \" AND IdPreferenzeDiRicerca = preferenzediricerca.Id\";\r\n        // The query is executed\r\n        result = stat.executeQuery(query);\r\n        // List that will contain the BeanPreferenzaDiRicerca\r\n        ArrayList<BeanPreferenzaDiRicerca> list = new ArrayList<BeanPreferenzaDiRicerca>();\r\n        // We extract the results from the result set and moves in the list\r\n        while (result.next()) {\r\n            // Add to the list BeanPreferenzaDiRicerca\r\n            list.add(new BeanPreferenzaDiRicerca(result.getInt(\"Id\"), result.getString(\"Name\")));\r\n        }\r\n        return list;\r\n    } finally {\r\n        // Always runs and takes care to close the Result, the Statement and Connection\r\n        if (result != null) {\r\n            result.close();\r\n        }\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public ArrayList<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelBC(int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Variable for the query results\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query to extract the list of search preferences\r\n, // The query is executed\r\n, // List that will contain the BeanPreferenzaDiRicerca\r\n, // We extract the results from the result set and moves in the list\r\n, // Add to the list BeanPreferenzaDiRicerca\r\n, // Always runs and takes care to close the Result, the Statement and Connection\r\n]]",
                "generated_comment": "/**\n * Retrieves the list of search preferences associated with a specific cultural asset.\n * \n * @param pIdBeneCulturale the ID of the cultural asset for which to retrieve the search preferences\n * @return an ArrayList of BeanPreferenzaDiRicerca objects containing the search preferences associated with the cultural asset\n * @throws SQLException if a database access error occurs\n */"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    // Variable for the query results\r\n    ResultSet result = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query to extract the list of search preferences\r\n        String query = \"SELECT * FROM associazionepr, preferenzediricerca WHERE IdPuntoDiRistoro =\" + pIdPuntoDiRistoro + \" AND IdPreferenzeDiRicerca = preferenzediricerca.Id\";\r\n        // The query is executed\r\n        result = stat.executeQuery(query);\r\n        // List that will contain the BeanPreferenzaDiRicerca\r\n        ArrayList<BeanPreferenzaDiRicerca> list = new ArrayList<BeanPreferenzaDiRicerca>();\r\n        // We extract the results from the result set and moves in the list\r\n        while (result.next()) {\r\n            // Add to the list BeanPreferenzaDiRicerca\r\n            list.add(new BeanPreferenzaDiRicerca(result.getInt(\"Id\"), result.getString(\"Name\")));\r\n        }\r\n        return list;\r\n    } finally {\r\n        // Always runs and takes care to close the Result, the Statement and Connection\r\n        if (result != null) {\r\n            result.close();\r\n        }\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public ArrayList<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelPR(int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Variable for the query results\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query to extract the list of search preferences\r\n, // The query is executed\r\n, // List that will contain the BeanPreferenzaDiRicerca\r\n, // We extract the results from the result set and moves in the list\r\n, // Add to the list BeanPreferenzaDiRicerca\r\n, // Always runs and takes care to close the Result, the Statement and Connection\r\n]]",
                "generated_comment": "/**\n * Retrieves the list of search preferences associated with a specific restaurant.\n * \n * @param pIdPuntoDiRistoro the ID of the restaurant to retrieve search preferences for\n * @return an ArrayList of BeanPreferenzaDiRicerca objects containing the search preferences\n * @throws SQLException if a database access error occurs\n */\npublic ArrayList<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelPR(int pIdPuntoDiRistoro) throws SQLException {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    // Variable for the query results\n    ResultSet result = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query to extract the list of search preferences\n        String query = \"SELECT * FROM associazionepr, preferenzediricerca WHERE IdPuntoDiRistoro =\" + pIdPuntoDiRistoro + \" AND IdPreferenzeDiRicerca = preferenzediricerca.Id\";\n        // The query is executed\n        result = stat.executeQuery(query);\n        // List that will contain the BeanPreferenzaDiRicerca\n        ArrayList<BeanPreferenzaDiRicerca> list = new ArrayList<BeanPreferenzaDiRicerca>();\n        // We extract the results from the result set and moves in the list\n        while (result.next()) {\n            // Add to the list BeanPreferenzaDiRicerca\n            list.add(new BeanPreferenzaDiRicerca(result.getInt(\"Id\"), result.getString(\"Name\")));\n        }\n        return list;\n    } finally {\n        // Always runs and takes care to close the Result, the Statement and Connection\n        if (result != null) {\n            result.close();\n        }\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    // Variable for the query results\r\n    ResultSet result = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query to extract the list of search preferences\r\n        String query = \"SELECT * FROM rating, preferenzediricerca WHERE IdTurista =\" + pIdTurista + \" AND IdPreferenzeDiRicerca = preferenzediricerca.Id\";\r\n        // The query is executed\r\n        result = stat.executeQuery(query);\r\n        // List that will contain the BeanPreferenzaDiRicerca\r\n        ArrayList<BeanPreferenzaDiRicerca> list = new ArrayList<BeanPreferenzaDiRicerca>();\r\n        // We extract the results from the result set and moves in the list\r\n        while (result.next()) {\r\n            // Add to the list BeanPreferenzaDiRicerca\r\n            list.add(new BeanPreferenzaDiRicerca(result.getInt(\"Id\"), result.getString(\"Name\")));\r\n        }\r\n        return list;\r\n    } finally {\r\n        // Always runs and takes care to close the Result, the Statement and Connection\r\n        if (result != null) {\r\n            result.close();\r\n        }\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public ArrayList<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelTurista(int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Variable for the query results\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query to extract the list of search preferences\r\n, // The query is executed\r\n, // List that will contain the BeanPreferenzaDiRicerca\r\n, // We extract the results from the result set and moves in the list\r\n, // Add to the list BeanPreferenzaDiRicerca\r\n, // Always runs and takes care to close the Result, the Statement and Connection\r\n]]",
                "generated_comment": "/**\n * Retrieves the search preferences of a tourist based on their ID.\n * \n * @param pIdTurista the ID of the tourist whose search preferences are to be retrieved\n * @return an ArrayList of BeanPreferenzaDiRicerca objects representing the search preferences of the tourist\n * \n * This method connects to the database, executes a query to retrieve the search preferences of the tourist with the specified ID,\n * and returns a list of BeanPreferenzaDiRicerca objects containing the ID and name of each search preference.\n * If no search preferences are found for the specified tourist ID, an empty list is returned.\n * \n * @throws SQLException if an error occurs while accessing the database\n */"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    // Variable for the query results\r\n    ResultSet result = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query to extract the list of search preferences\r\n        String query = \"SELECT * FROM preferenzediricerca\";\r\n        // The query is executed\r\n        result = stat.executeQuery(query);\r\n        // List that will contain the BeanPreferenzaDiRicerca\r\n        ArrayList<BeanPreferenzaDiRicerca> list = new ArrayList<BeanPreferenzaDiRicerca>();\r\n        // We extract the results from the result set and moves in the list\r\n        while (result.next()) {\r\n            // Add to the list BeanPreferenzaDiRicerca\r\n            list.add(new BeanPreferenzaDiRicerca(result.getInt(\"Id\"), result.getString(\"Name\")));\r\n        }\r\n        // Return the list of search preferences in the DB\r\n        return list;\r\n    } finally {\r\n        // Always runs and takes care to close the Result, the Statement and Connection\r\n        if (result != null) {\r\n            result.close();\r\n        }\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public ArrayList<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicerca()",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Variable for the query results\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query to extract the list of search preferences\r\n, // The query is executed\r\n, // List that will contain the BeanPreferenzaDiRicerca\r\n, // We extract the results from the result set and moves in the list\r\n, // Add to the list BeanPreferenzaDiRicerca\r\n, // Return the list of search preferences in the DB\r\n, // Always runs and takes care to close the Result, the Statement and Connection\r\n]]",
                "generated_comment": "/**\n * Retrieves a list of search preferences from the database.\n * \n * @return An ArrayList of BeanPreferenzaDiRicerca objects containing the search preferences\n * @throws SQLException if a database access error occurs\n */\npublic ArrayList<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicerca() throws SQLException {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    // Variable for the query results\n    ResultSet result = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query to extract the list of search preferences\n        String query = \"SELECT * FROM preferenzediricerca\";\n        // The query is executed\n        result = stat.executeQuery(query);\n        // List that will contain the BeanPreferenzaDiRicerca\n        ArrayList<BeanPreferenzaDiRicerca> list = new ArrayList<BeanPreferenzaDiRicerca>();\n        // We extract the results from the result set and moves in the list\n        while (result.next()) {\n            // Add to the list BeanPreferenzaDiRicerca\n            list.add(new BeanPreferenzaDiRicerca(result.getInt(\"Id\"), result.getString(\"Name\")));\n        }\n        // Return the list of search preferences in the DB\n        return list;\n    } finally {\n        // Always runs and takes care to close the Result, the Statement and Connection\n        if (result != null) {\n            result.close();\n        }\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public DBPreferenzeDiRicerca()",
                "comments": "Optional[// Empty constructor\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This is the constructor for the DBPreferenzeDiRicerca class.\n * It initializes a new instance of the class with default values for all preferences.\n */"
            }
        ],
        "signature": "DBPreferenzeDiRicerca",
        "variables": [],
        "generated_class_comment": "/**\n * The DBPreferenzeDiRicerca class provides methods for managing search preferences in the database.\n * It includes functionality for inserting, deleting, and retrieving search preferences for cultural assets,\n * restaurants, and tourists. The class also allows for associating search preferences with specific entities\n * such as cultural assets and restaurants.\n *\n * This class interacts with the database to perform CRUD operations on search preferences and their associations.\n * It handles database connections, executes SQL queries, and manages result sets to ensure data integrity and consistency.\n *\n * The main functionalities of this class include:\n * - Inserting a new search preference into the database\n * - Deleting a search preference from the database\n * - Retrieving a list of search preferences associated with a specific entity (cultural asset, restaurant, or tourist)\n * - Associating a search preference with a specific entity\n *\n * This class follows best practices for database interaction, error handling, and resource management.\n * It ensures that database connections are properly established and closed, SQL queries are executed safely,\n * and exceptions are handled gracefully to prevent data corruption and ensure data reliability.\n *\n * @see BeanPreferenzaDiRicerca\n * @see DBConnessionePool\n * @see SQLException\n */\npublic class DBPreferenzeDiRicerca {\n    // Class methods and constructors are listed below\n}\n*/"
    }
]