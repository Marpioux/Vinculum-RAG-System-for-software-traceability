[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    JInternalFrame frame = (JInternalFrame) pEvent.getInternalFrame();\r\n    // Setting up of remote objects for the management of cultural heritage.\r\n    try {\r\n        Registry reg = LocateRegistry.getRegistry(Home.HOST);\r\n        tags = (IGestioneTagComune) reg.lookup(\"GestioneTagComune\");\r\n        gestioneBC = (IGestioneBeniCulturaliAgenzia) reg.lookup(\"GestioneBeniCulturaliAgenzia\");\r\n        // Load data.\r\n        caricaTags();\r\n    } catch (Exception ex) {\r\n        JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Card for entering a new cultural asset will be closed. </u> </h3>\" + \"<p> <b> Possible Causes: </b>\" + \"<ul> <li> No connection to the network. </li>\" + \"<li> Server inactive. </li>\" + \"<li> Server clogged. </li> </ul>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n        ImageIcon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n        JOptionPane.showMessageDialog(frame, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n        frame.dispose();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void internalFrameOpened(InternalFrameEvent)",
                "comments": null,
                "innerComments": "Optional[[// Setting up of remote objects for the management of cultural heritage.\r\n, // Load data.\r\n]]",
                "generated_comment": "/**\n * This method is called when an internal frame is opened. It sets up remote objects for the management of cultural heritage by\n * establishing a connection with the server eTour. It loads data related to tags and cultural assets. If there is an exception\n * during the communication with the server, an error message is displayed and the internal frame is closed.\n * \n * @param pEvent the InternalFrameEvent that triggered the method\n */"
            },
            {
                "body": "Optional[{\r\n    JPanel root = new JPanel(new BorderLayout());\r\n    JLabel message = new JLabel(\"Are you sure you want to cancel the creation of a new cultural asset?\");\r\n    message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n    JLabel alert = new JLabel(\"Warning! Unsaved data will be lost.\", SwingConstants.CENTER);\r\n    alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\r\n    root.add(message, BorderLayout.NORTH);\r\n    root.add(alert, BorderLayout.CENTER);\r\n    String[] options = { \"Close\", \"Cancel\" };\r\n    int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm closure\", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, getFrameIcon(), options, options[1]);\r\n    if (choice == JOptionPane.OK_OPTION) {\r\n        parent.closeScheda((SchedaBC) pEvent.getInternalFrame());\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void internalFrameClosing(InternalFrameEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Displays a confirmation dialog when the internal frame is closing, asking the user if they want to cancel the creation of a new cultural asset.\n * \n * @param pEvent the InternalFrameEvent that triggered the closing of the internal frame\n */\npublic void internalFrameClosing(InternalFrameEvent pEvent) {\n    // Create a panel to hold the message and alert\n    JPanel root = new JPanel(new BorderLayout());\n    \n    // Create a message label\n    JLabel message = new JLabel(\"Are you sure you want to cancel the creation of a new cultural asset?\");\n    message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\n    \n    // Create an alert label with a warning icon\n    JLabel alert = new JLabel(\"Warning! Unsaved data will be lost.\", SwingConstants.CENTER);\n    alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\"));\n    \n    // Add the message and alert to the panel\n    root.add(message, BorderLayout.NORTH);\n    root.add(alert, BorderLayout.CENTER);\n    \n    // Display a dialog with options to close or cancel\n    String[] options = { \"Close\", \"Cancel\" };\n    int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm closure\", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, getFrameIcon(), options, options[1]);\n    \n    // If the user chooses to close, call the parent's closeScheda method with the internal frame\n    if (choice == JOptionPane.OK_OPTION) {\n        parent.closeScheda((SchedaBC) pEvent.getInternalFrame());\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (bc == null) {\r\n        return -1;\r\n    }\r\n    return bc.getId();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public int getId()",
                "comments": "Optional[/**\r\n * This method returns the id of the cultural property for which you are viewing the\r\n * Contact or changing data.\r\n *\r\n * @return int - the id of the cultural property.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the ID of this object. If the object is null, returns -1.\n * \n * @return the ID of this object, or -1 if the object is null\n */"
            },
            {
                "body": "Optional[{\r\n    setTitle(bc.getNome());\r\n    // Dialog closed frame\r\n    addInternalFrameListener(new InternalFrameAdapter() {\r\n\r\n        public void internalFrameOpened(InternalFrameEvent pEvent) {\r\n            JInternalFrame frame = (JInternalFrame) pEvent.getInternalFrame();\r\n            // Setting up of remote objects for the management of cultural heritage.\r\n            try {\r\n                Registry reg = LocateRegistry.getRegistry(Home.HOST);\r\n                tags = (IGestioneTagComune) reg.lookup(\"GestioneTagComune\");\r\n                gestioneBC = (IGestioneBeniCulturaliAgenzia) reg.lookup(\"GestioneBeniCulturaliAgenzia\");\r\n                // Load data.\r\n                caricaTags();\r\n                caricaStatistiche();\r\n            } catch (Exception ex) {\r\n                JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> The board of the cultural inquiry will be closed. </u> </h3>\" + \"<p> <b> Possible Causes: </b>\" + \"<ul> <li> No connection to the network. </li>\" + \"<li> Server inactive. </li>\" + \"<li> Server clogged. </li> </ul>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n                ImageIcon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n                JOptionPane.showMessageDialog(frame, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n                frame.dispose();\r\n            }\r\n        }\r\n\r\n        public void internalFrameClosing(InternalFrameEvent pEvent) {\r\n            // If you are an amendment asks for confirmation.\r\n            if (btnModifica.isSelected()) {\r\n                JPanel root = new JPanel(new BorderLayout());\r\n                JLabel message = new JLabel(\"Are you sure you want to close the tab of this cultural asset?\");\r\n                message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n                JLabel alert = new JLabel(\"Warning! Unsaved data will be lost.\", SwingConstants.CENTER);\r\n                alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\r\n                root.add(message, BorderLayout.NORTH);\r\n                root.add(alert, BorderLayout.CENTER);\r\n                String[] options = { \"Close\", \"Cancel\" };\r\n                int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm closing tab Cultural Heritage: \" + bc.getNome(), JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, getFrameIcon(), options, options[1]);\r\n                if (choice == JOptionPane.OK_OPTION) {\r\n                    parent.closeScheda((SchedaBC) pEvent.getInternalFrame());\r\n                }\r\n            } else {\r\n                // Otherwise directly closes the window.\r\n                parent.closeScheda((SchedaBC) pEvent.getInternalFrame());\r\n            }\r\n        }\r\n    });\r\n    // Initialize the content pane.\r\n    jContentPane = new JPanel();\r\n    jContentPane.setLayout(new BorderLayout());\r\n    jContentPane.add(getToolbarSchedaBC(), BorderLayout.CENTER);\r\n    jTabbedPane = new JTabbedPane();\r\n    jTabbedPane.addTab(\"Data Cultural Heritage\", new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"dati.png\")), getDatiBCForm(), null);\r\n    JScrollPane newScrollPane = new JScrollPane(getStatistiche());\r\n    newScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n    jTabbedPane.addTab(\"Statistics\", new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stat24.png\")), newScrollPane, null);\r\n    jTabbedPane.addTab(\"Feedback received\", new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"feedback.png\")), getFeedback(), null);\r\n    jContentPane.add(jTabbedPane, BorderLayout.CENTER);\r\n    setContentPane(jContentPane);\r\n    jTabbedPane.addChangeListener(new ChangeListener() {\r\n\r\n        public void stateChanged(ChangeEvent pChange) {\r\n            // Data cultural\r\n            if (jTabbedPane.getSelectedIndex() == 0) {\r\n                toolbarSchedaBC.setVisible(true);\r\n                btnModifica.setVisible(true);\r\n                if (btnModifica.isSelected()) {\r\n                    btnSalva.setVisible(true);\r\n                    btnAnnulla.setVisible(true);\r\n                }\r\n                btnModificaCommento.setVisible(false);\r\n            } else if (jTabbedPane.getSelectedIndex() == 1) {\r\n                // Statistics\r\n                toolbarSchedaBC.setVisible(false);\r\n            } else {\r\n                // Feedback received\r\n                if (btnModifica.isSelected()) {\r\n                    btnSalva.setVisible(false);\r\n                    btnAnnulla.setVisible(false);\r\n                }\r\n                toolbarSchedaBC.setVisible(true);\r\n                btnModificaCommento.setVisible(true);\r\n                btnModifica.setVisible(false);\r\n            }\r\n        }\r\n    });\r\n    // Load the data of the cultural and statistics.\r\n    caricaDatiForm();\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private void initializeSchedaBC()",
                "comments": "Optional[/**\r\n * This method initializes the interface for display board\r\n * A cultural object.\r\n *\r\n * @return void\r\n */\r\n]",
                "innerComments": "Optional[[// Dialog closed frame\r\n, // Setting up of remote objects for the management of cultural heritage.\r\n, // Load data.\r\n, // If you are an amendment asks for confirmation.\r\n, // Otherwise directly closes the window.\r\n, // Initialize the content pane.\r\n, // Data cultural\r\n, // Statistics\r\n, // Feedback received\r\n, // Load the data of the cultural and statistics.\r\n]]",
                "generated_comment": "/**\n * Initializes the cultural heritage board by setting the title, loading remote objects for cultural heritage management,\n * loading data, setting up event listeners for internal frame opening and closing, initializing the content pane with\n * toolbar and tabbed panes for displaying cultural heritage data, statistics, and feedback received. \n * \n * @param none\n * @return void\n * \n * This method initializes the cultural heritage board by setting the title based on the cultural heritage name,\n * loading remote objects for managing cultural heritage, loading data, and setting up event listeners for internal frame opening and closing.\n * It also initializes the content pane with toolbar and tabbed panes for displaying cultural heritage data, statistics, and feedback received.\n * The method handles exceptions by displaying an error message if communication with the server fails and closes the board.\n * It also prompts for confirmation before closing the tab if there are unsaved changes, otherwise it directly closes the window.\n * The method also handles tab change events to show/hide toolbar buttons based on the selected tab.\n * Finally, it loads the data of the cultural heritage and statistics.\n */\n \n private void initializeSchedaBC() {\n    // method body\n }\n**/"
            },
            {
                "body": "Optional[{\r\n    JInternalFrame frame = (JInternalFrame) pEvent.getInternalFrame();\r\n    // Setting up of remote objects for the management of cultural heritage.\r\n    try {\r\n        Registry reg = LocateRegistry.getRegistry(Home.HOST);\r\n        tags = (IGestioneTagComune) reg.lookup(\"GestioneTagComune\");\r\n        gestioneBC = (IGestioneBeniCulturaliAgenzia) reg.lookup(\"GestioneBeniCulturaliAgenzia\");\r\n        // Load data.\r\n        caricaTags();\r\n        caricaStatistiche();\r\n    } catch (Exception ex) {\r\n        JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> The board of the cultural inquiry will be closed. </u> </h3>\" + \"<p> <b> Possible Causes: </b>\" + \"<ul> <li> No connection to the network. </li>\" + \"<li> Server inactive. </li>\" + \"<li> Server clogged. </li> </ul>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n        ImageIcon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n        JOptionPane.showMessageDialog(frame, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n        frame.dispose();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void internalFrameOpened(InternalFrameEvent)",
                "comments": null,
                "innerComments": "Optional[[// Setting up of remote objects for the management of cultural heritage.\r\n, // Load data.\r\n]]",
                "generated_comment": "/**\n * This method is called when an internal frame is opened. It sets up remote objects for the management of cultural heritage, loads data such as tags and statistics, and handles any communication errors with the server eTour. If an exception occurs during the setup process, an error message is displayed and the internal frame is closed.\n * \n * @param pEvent the InternalFrameEvent that triggered the method\n */"
            },
            {
                "body": "Optional[{\r\n    // If you are an amendment asks for confirmation.\r\n    if (btnModifica.isSelected()) {\r\n        JPanel root = new JPanel(new BorderLayout());\r\n        JLabel message = new JLabel(\"Are you sure you want to close the tab of this cultural asset?\");\r\n        message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n        JLabel alert = new JLabel(\"Warning! Unsaved data will be lost.\", SwingConstants.CENTER);\r\n        alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\r\n        root.add(message, BorderLayout.NORTH);\r\n        root.add(alert, BorderLayout.CENTER);\r\n        String[] options = { \"Close\", \"Cancel\" };\r\n        int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm closing tab Cultural Heritage: \" + bc.getNome(), JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, getFrameIcon(), options, options[1]);\r\n        if (choice == JOptionPane.OK_OPTION) {\r\n            parent.closeScheda((SchedaBC) pEvent.getInternalFrame());\r\n        }\r\n    } else {\r\n        // Otherwise directly closes the window.\r\n        parent.closeScheda((SchedaBC) pEvent.getInternalFrame());\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void internalFrameClosing(InternalFrameEvent)",
                "comments": null,
                "innerComments": "Optional[[// If you are an amendment asks for confirmation.\r\n, // Otherwise directly closes the window.\r\n]]",
                "generated_comment": "/**\n * This method is called when an internal frame is closing. If the \"Modify\" button is selected, it prompts the user for confirmation before closing the tab of the cultural asset. If the user confirms, the tab is closed. If the user cancels, the tab remains open. If the \"Modify\" button is not selected, the tab is closed directly without confirmation.\n * \n * @param pEvent the InternalFrameEvent that triggered the closing of the internal frame\n */"
            },
            {
                "body": "Optional[{\r\n    // Data cultural\r\n    if (jTabbedPane.getSelectedIndex() == 0) {\r\n        toolbarSchedaBC.setVisible(true);\r\n        btnModifica.setVisible(true);\r\n        if (btnModifica.isSelected()) {\r\n            btnSalva.setVisible(true);\r\n            btnAnnulla.setVisible(true);\r\n        }\r\n        btnModificaCommento.setVisible(false);\r\n    } else if (jTabbedPane.getSelectedIndex() == 1) {\r\n        // Statistics\r\n        toolbarSchedaBC.setVisible(false);\r\n    } else {\r\n        // Feedback received\r\n        if (btnModifica.isSelected()) {\r\n            btnSalva.setVisible(false);\r\n            btnAnnulla.setVisible(false);\r\n        }\r\n        toolbarSchedaBC.setVisible(true);\r\n        btnModificaCommento.setVisible(true);\r\n        btnModifica.setVisible(false);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void stateChanged(ChangeEvent)",
                "comments": null,
                "innerComments": "Optional[[// Data cultural\r\n, // Statistics\r\n, // Feedback received\r\n]]",
                "generated_comment": "/**\n * This method is called when the state of a ChangeEvent is changed. \n * It updates the visibility of various components based on the selected index of a JTabbedPane.\n * \n * @param e the ChangeEvent that triggered this method\n */\npublic void stateChanged(ChangeEvent e) {\n    // Data cultural\n    if (jTabbedPane.getSelectedIndex() == 0) {\n        toolbarSchedaBC.setVisible(true);\n        btnModifica.setVisible(true);\n        if (btnModifica.isSelected()) {\n            btnSalva.setVisible(true);\n            btnAnnulla.setVisible(true);\n        }\n        btnModificaCommento.setVisible(false);\n    } else if (jTabbedPane.getSelectedIndex() == 1) {\n        // Statistics\n        toolbarSchedaBC.setVisible(false);\n    } else {\n        // Feedback received\n        if (btnModifica.isSelected()) {\n            btnSalva.setVisible(false);\n            btnAnnulla.setVisible(false);\n        }\n        toolbarSchedaBC.setVisible(true);\n        btnModificaCommento.setVisible(true);\n        btnModifica.setVisible(false);\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    nomeBC.setText(bc.getNome());\r\n    capBC.setText(bc.getCap());\r\n    cittaBC.setText(bc.getCitta());\r\n    costoBC.setText(\"\" + bc.getCostoBiglietto());\r\n    descrizioneBC.setText(bc.getDescrizione());\r\n    StringTokenizer tokenizer = new StringTokenizer(bc.getVia());\r\n    String string = tokenizer.nextToken();\r\n    address1.setSelectedItem(string);\r\n    address2.setText(bc.getVia().substring(string.length()));\r\n    provBC.setSelectedItem(bc.getProvincia());\r\n    Punto3D pos = bc.getPosizione();\r\n    posGeoX.setText(\"\" + pos.getLatitudine());\r\n    posGeoY.setText(\"\" + pos.getLongitudine());\r\n    posGeoZ.setText(\"\" + pos.getAltitudine());\r\n    telefonoBC.setText(bc.getTelefono());\r\n    int minutes = bc.getOrarioApertura().getMinutes();\r\n    minAP.setSelectedIndex(minutes == 0 ? 0 : minutes);\r\n    int hours = bc.getOrarioApertura().getHours();\r\n    oreAP.setSelectedItem(hours < 10 ? \"0\" + hours : hours);\r\n    minutes = bc.getOrarioChiusura().getMinutes();\r\n    minCH.setSelectedIndex(minutes == 0 ? 0 : minutes);\r\n    hours = bc.getOrarioChiusura().getHours();\r\n    oreCH.setSelectedItem(hours < 10 ? \"0\" + hours : hours);\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void caricaDatiForm()",
                "comments": "Optional[/**\r\n * This method loads the data supplied to the constructor of the cultural\r\n * In the form.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Loads data from a Business Center object into the form fields.\n * Sets the text of various text fields and combo boxes with data from the Business Center object.\n * \n * @param bc the Business Center object containing the data to be loaded into the form\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    txtNomeBene.setText(bc.getNome());\r\n    double rating = bc.getMediaVoti();\r\n    if (rating >= 4) {\r\n        mediaVotoBC.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella5.gif\")));\r\n    } else if (rating < 4 && rating >= 3) {\r\n        mediaVotoBC.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella4.gif\")));\r\n    } else if (rating < 3 && rating >= 2) {\r\n        mediaVotoBC.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella3.gif\")));\r\n    } else if (rating < 2 && rating >= 1) {\r\n        mediaVotoBC.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella2.gif\")));\r\n    } else {\r\n        mediaVotoBC.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"stella1.gif\")));\r\n    }\r\n    ArrayList<Integer> stats = null;\r\n    try {\r\n        stats = gestioneBC.ottieniStatisticheBeneCulturale(bc.getId());\r\n    } catch (RemoteException e) {\r\n        e.printStackTrace();\r\n    }\r\n    statMeseC[0].setText(\"\" + stats.get(0));\r\n    statMeseC[1].setText(\"\" + stats.get(1));\r\n    statMeseC[2].setText(\"\" + stats.get(2));\r\n    statMeseC[3].setText(\"\" + stats.get(3));\r\n    statMeseC[4].setText(\"\" + stats.get(4));\r\n    statMeseC[5].setText(\"\" + stats.get(5));\r\n    statt[0].setText(\"142\");\r\n    statt[1].setText(\"112\");\r\n    statt[2].setText(\"132\");\r\n    statt[3].setText(\"212\");\r\n    statt[4].setText(\"152\");\r\n    statt[5].setText(\"748\");\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void caricaStatistiche()",
                "comments": "Optional[/**\r\n * This method loads the statistics provided cultural\r\n * Input to the constructor of the class.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Loads and displays statistics for a cultural asset.\n * Sets the name of the cultural asset in the text field.\n * Sets an icon based on the average rating of the cultural asset.\n * Retrieves statistics for the cultural asset from the server and displays them in the corresponding text fields.\n * \n * @param bc the cultural asset for which statistics are being loaded\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    Iterator<JLabel> s = suggestions.iterator();\r\n    while (s.hasNext()) {\r\n        JLabel current = s.next();\r\n        current.setVisible(!current.isVisible());\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void mostraNascondiSuggerimenti()",
                "comments": "Optional[/**\r\n * This method shows or hides the label next to the suggestions\r\n * Of the form.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Toggles the visibility of all suggestions displayed on the screen.\n * Iterates through the list of JLabel suggestions and toggles their visibility.\n * If a suggestion is currently visible, it will be hidden, and vice versa.\n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    Component[] components = datiBC.getComponents();\r\n    for (Component current : components) {\r\n        if (current instanceof JTextField) {\r\n            JTextField textbox = (JTextField) current;\r\n            textbox.setEditable(!textbox.isEditable());\r\n            textbox.setBackground(Color.white);\r\n        } else if (current instanceof JComboBox) {\r\n            JComboBox combo = (JComboBox) current;\r\n            combo.setEnabled(!combo.isEnabled());\r\n        }\r\n    }\r\n    descrizioneBC.setEditable(!descrizioneBC.isEditable());\r\n    pannelloTag.attivaDisattiva();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void attivaDisattivaEdit()",
                "comments": "Optional[/**\r\n * This method makes the form editable or not.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Toggles the editability of all JTextFields and the enablement of all JComboBoxes within the datiBC component.\n * Additionally, toggles the editability of the descrizioneBC JTextField and triggers the attivaDisattiva method of the pannelloTag panel.\n */\nprivate void attivaDisattivaEdit() {\n    Component[] components = datiBC.getComponents();\n    for (Component current : components) {\n        if (current instanceof JTextField) {\n            JTextField textbox = (JTextField) current;\n            textbox.setEditable(!textbox.isEditable());\n            textbox.setBackground(Color.white);\n        } else if (current instanceof JComboBox) {\n            JComboBox combo = (JComboBox) current;\n            combo.setEnabled(!combo.isEnabled());\n        }\n    }\n    descrizioneBC.setEditable(!descrizioneBC.isEditable());\n    pannelloTag.attivaDisattiva();\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (toolbarSchedaBC == null) {\r\n        toolbarSchedaBC = new JToolBar();\r\n        toolbarSchedaBC.setFloatable(false);\r\n        toolbarSchedaBC.add(getBtnModifica());\r\n        toolbarSchedaBC.addSeparator();\r\n        toolbarSchedaBC.add(getBtnSalva());\r\n        toolbarSchedaBC.addSeparator();\r\n        toolbarSchedaBC.add(getBtnAnnulla());\r\n        toolbarSchedaBC.addSeparator();\r\n        if (bc != null) {\r\n            toolbarSchedaBC.add(getBtnModificaCommento());\r\n            toolbarSchedaBC.addSeparator();\r\n        }\r\n    }\r\n    return toolbarSchedaBC;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JToolBar getToolbarSchedaBC()",
                "comments": "Optional[/**\r\n * This method initializes the toolbar tab of a cultural object.\r\n *\r\n * @return javax.swing.JToolBar - the toolbar.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the toolbar for the SchedaBC (Business Card) panel. If the toolbar has not been initialized yet, it creates a new JToolBar instance with specific buttons and separators added to it. The buttons include a \"Modifica\" button, a \"Salva\" button, and an \"Annulla\" button. If the Business Card (bc) is not null, a \"Modifica Commento\" button is also added. The toolbar is set to be non-floatable.\n * \n * @return the JToolBar instance for the SchedaBC panel\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnModifica == null) {\r\n        btnModifica = new JToggleButton();\r\n        btnModifica.setText(\"Change Data\");\r\n        btnModifica.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"ModificaBC32.png\")));\r\n        btnModifica.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\r\n        btnModifica.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                mostraNascondiSuggerimenti();\r\n                attivaDisattivaEdit();\r\n                btnSalva.setVisible(btnModifica.isSelected());\r\n                btnAnnulla.setVisible(btnModifica.isSelected());\r\n            }\r\n        });\r\n    }\r\n    return btnModifica;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JToggleButton getBtnModifica()",
                "comments": "Optional[/**\r\n * This method initializes the button to modify data of good\r\n * Cultural.\r\n *\r\n * @return javax.swing.JToggleButton - the button for the change.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JToggleButton used for modifying data. If the button has not been initialized yet, it creates a new instance with the text \"Change Data\", an icon, and a hand cursor. \n * When the button is clicked, it toggles the visibility of suggestions, enables/disables editing, and shows/hides save and cancel buttons accordingly.\n * \n * @return the JToggleButton used for modifying data\n */"
            },
            {
                "body": "Optional[{\r\n    mostraNascondiSuggerimenti();\r\n    attivaDisattivaEdit();\r\n    btnSalva.setVisible(btnModifica.isSelected());\r\n    btnAnnulla.setVisible(btnModifica.isSelected());\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It performs the following actions:\n * 1. Shows or hides suggestions based on user input.\n * 2. Enables or disables editing functionality.\n * 3. Sets the visibility of the save and cancel buttons based on whether the edit button is selected.\n * \n * @param e the ActionEvent that triggered this method\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnSalva == null) {\r\n        btnSalva = new JButton();\r\n        btnSalva.setText(\"Save\");\r\n        btnSalva.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"salva.png\")));\r\n        btnSalva.setVisible(false);\r\n        btnSalva.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\r\n        btnSalva.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent pEvent) {\r\n                if (bc == null) {\r\n                    bc = riversaDatiNelBean();\r\n                    try {\r\n                        gestioneBC.inserisciBeneCulturale(bc);\r\n                    } catch (RemoteException ex) {\r\n                        ex.printStackTrace();\r\n                    }\r\n                } else {\r\n                    // Construction of the dialog for confirmation of the change\r\n                    JPanel root = new JPanel(new BorderLayout());\r\n                    JLabel message = new JLabel(\"Updating the data of the cultural \" + bc.getNome() + \" with Data form?\");\r\n                    message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n                    JLabel alert = new JLabel(\"The previous data can not be more recovered.\", SwingConstants.CENTER);\r\n                    alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\r\n                    root.add(message, BorderLayout.NORTH);\r\n                    root.add(alert, BorderLayout.CENTER);\r\n                    String[] options = { \"Edit\", \"Cancel\" };\r\n                    // The dialog screen appears\r\n                    int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Edit Data Confirm Cultural Heritage\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"ModificaBC48.png\")), options, options[1]);\r\n                    // If you chose to confirm the change\r\n                    if (choice == JOptionPane.YES_OPTION) {\r\n                        bc = riversaDatiNelBean();\r\n                        caricaDatiForm();\r\n                        attivaDisattivaEdit();\r\n                        btnSalva.setVisible(false);\r\n                        btnAnnulla.setVisible(false);\r\n                        btnModifica.setSelected(false);\r\n                        mostraNascondiSuggerimenti();\r\n                        parent.updateTableModel(bc);\r\n                        JOptionPane.showInternalMessageDialog(jContentPane, \"The data of the cultural object has been updated successfully.\", \"Data cultural change!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"ok32.png\")));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return btnSalva;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private JButton getBtnSalva()",
                "comments": "Optional[/**\r\n * This method initializes btnSalva\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": "Optional[[// Construction of the dialog for confirmation of the change\r\n, // The dialog screen appears\r\n, // If you chose to confirm the change\r\n]]",
                "generated_comment": "/**\n * Returns a JButton object that allows the user to save changes made to a cultural heritage object.\n * If the JButton object is null, a new JButton is created with the text \"Save\" and an icon.\n * The JButton is set to be invisible and have a hand cursor.\n * When the button is clicked, it checks if a cultural heritage object is already created.\n * If not, it creates a new cultural heritage object and inserts it into the database.\n * If a cultural heritage object already exists, a confirmation dialog is displayed to update the data.\n * If the user confirms the update, the data is updated, the form is reloaded, and edit options are activated.\n * The \"Save\" button is hidden, the \"Cancel\" button is hidden, and the \"Edit\" button is deselected.\n * A success message is displayed, and the table model is updated with the new data.\n * \n * @return a JButton object that allows the user to save changes made to a cultural heritage object\n */\nprivate JButton getBtnSalva() {\n    // method body\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (bc == null) {\r\n        bc = riversaDatiNelBean();\r\n        try {\r\n            gestioneBC.inserisciBeneCulturale(bc);\r\n        } catch (RemoteException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    } else {\r\n        // Construction of the dialog for confirmation of the change\r\n        JPanel root = new JPanel(new BorderLayout());\r\n        JLabel message = new JLabel(\"Updating the data of the cultural \" + bc.getNome() + \" with Data form?\");\r\n        message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n        JLabel alert = new JLabel(\"The previous data can not be more recovered.\", SwingConstants.CENTER);\r\n        alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\r\n        root.add(message, BorderLayout.NORTH);\r\n        root.add(alert, BorderLayout.CENTER);\r\n        String[] options = { \"Edit\", \"Cancel\" };\r\n        // The dialog screen appears\r\n        int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Edit Data Confirm Cultural Heritage\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"ModificaBC48.png\")), options, options[1]);\r\n        // If you chose to confirm the change\r\n        if (choice == JOptionPane.YES_OPTION) {\r\n            bc = riversaDatiNelBean();\r\n            caricaDatiForm();\r\n            attivaDisattivaEdit();\r\n            btnSalva.setVisible(false);\r\n            btnAnnulla.setVisible(false);\r\n            btnModifica.setSelected(false);\r\n            mostraNascondiSuggerimenti();\r\n            parent.updateTableModel(bc);\r\n            JOptionPane.showInternalMessageDialog(jContentPane, \"The data of the cultural object has been updated successfully.\", \"Data cultural change!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"ok32.png\")));\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": "Optional[[// Construction of the dialog for confirmation of the change\r\n, // The dialog screen appears\r\n, // If you chose to confirm the change\r\n]]",
                "generated_comment": "/**\n * This method is called when an action event is triggered. If the cultural object is not already initialized, it populates the cultural object with data and inserts it into the database using the remote method inserisciBeneCulturale() from the gestioneBC object. If the cultural object is already initialized, it prompts the user with a dialog to confirm the update of the cultural object's data. If the user confirms the update, it populates the cultural object with new data, loads the data into the form, and updates the table model. It also hides the save and cancel buttons, deselects the edit button, and displays a success message.\n * \n * @param e the ActionEvent that triggered the method\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnAnnulla == null) {\r\n        btnAnnulla = new JButton();\r\n        btnAnnulla.setText(\"Cancel\");\r\n        btnAnnulla.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Annulla32.png\")));\r\n        btnAnnulla.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\r\n        btnAnnulla.setVisible(false);\r\n        btnAnnulla.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                if (bc == null) {\r\n                    Component[] components = datiBC.getComponents();\r\n                    for (Component current : components) {\r\n                        if (current instanceof JTextComponent) {\r\n                            ((JTextComponent) current).setText(\"\");\r\n                        } else if (current instanceof JComboBox) {\r\n                            JComboBox combo = (JComboBox) current;\r\n                            combo.setSelectedIndex(-1);\r\n                        }\r\n                    }\r\n                    pannelloTag.azzera();\r\n                    descrizioneBC.setText(\"\");\r\n                } else {\r\n                    caricaDatiForm();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return btnAnnulla;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnAnnulla()",
                "comments": "Optional[/**\r\n * This method initializes the button to clear the form (well again\r\n * Culture) or reload the data of the cultural (change data).\r\n *\r\n * @return javax.swing.JButton - the button above.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JButton used for canceling an operation. If the button has not been initialized yet, it creates a new JButton with the text \"Cancel\", an icon, and sets its cursor to a hand cursor. The button is initially set to invisible and an ActionListener is added to handle the cancel action.\n * \n * @return the JButton used for canceling an operation\n */"
            },
            {
                "body": "Optional[{\r\n    if (bc == null) {\r\n        Component[] components = datiBC.getComponents();\r\n        for (Component current : components) {\r\n            if (current instanceof JTextComponent) {\r\n                ((JTextComponent) current).setText(\"\");\r\n            } else if (current instanceof JComboBox) {\r\n                JComboBox combo = (JComboBox) current;\r\n                combo.setSelectedIndex(-1);\r\n            }\r\n        }\r\n        pannelloTag.azzera();\r\n        descrizioneBC.setText(\"\");\r\n    } else {\r\n        caricaDatiForm();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event is triggered. It checks if the variable 'bc' is null,\n * and if so, it clears the text fields and combo boxes within the 'datiBC' component. It also resets\n * the 'pannelloTag' panel and clears the text in the 'descrizioneBC' text field. If 'bc' is not null,\n * it calls the 'caricaDatiForm' method to load data into the form. \n * \n * @param e the ActionEvent that triggered the method\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnModificaCommento == null) {\r\n        btnModificaCommento = new JButton();\r\n        btnModificaCommento.setText(\"Edit Comment\");\r\n        btnModificaCommento.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"modificaCommento.png\")));\r\n        btnModificaCommento.setVisible(false);\r\n        btnModificaCommento.setEnabled(false);\r\n        btnModificaCommento.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent pEvent) {\r\n                int selectedRow = tableFeedback.getSelectedRow();\r\n                String nuovoCommento = (String) JOptionPane.showInternalInputDialog(jContentPane, \"Changing the selected comment:\", \"Edit Comment\", JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"modificaCommento.png\")), null, feedbackModel.getValueAt(selectedRow, 1));\r\n                if (nuovoCommento != null) {\r\n                    feedbackModel.modificaCommento(nuovoCommento, selectedRow);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return btnModificaCommento;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnModificaCommento()",
                "comments": "Optional[/**\r\n * This method initializes the button to edit a comment.\r\n *\r\n * @return javax.swing.JButton - the button to edit a comment.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JButton used for editing comments in the feedback table.\n * If the JButton has not been initialized yet, it creates a new JButton with the text \"Edit Comment\" and an icon.\n * The button is initially set to be invisible and disabled.\n * When clicked, a dialog box prompts the user to enter a new comment for the selected row in the feedback table.\n * If a new comment is entered, the method updates the feedback model with the new comment.\n * \n * @return the JButton used for editing comments\n */"
            },
            {
                "body": "Optional[{\r\n    int selectedRow = tableFeedback.getSelectedRow();\r\n    String nuovoCommento = (String) JOptionPane.showInternalInputDialog(jContentPane, \"Changing the selected comment:\", \"Edit Comment\", JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"modificaCommento.png\")), null, feedbackModel.getValueAt(selectedRow, 1));\r\n    if (nuovoCommento != null) {\r\n        feedbackModel.modificaCommento(nuovoCommento, selectedRow);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event is triggered. It allows the user to edit a selected comment in the feedback table.\n * \n * @param e the ActionEvent that triggered the method\n * @return void\n */\npublic void actionPerformed(ActionEvent e) {\n    int selectedRow = tableFeedback.getSelectedRow();\n    String nuovoCommento = (String) JOptionPane.showInternalInputDialog(jContentPane, \"Changing the selected comment:\", \"Edit Comment\", JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"modificaCommento.png\")), null, feedbackModel.getValueAt(selectedRow, 1));\n    if (nuovoCommento != null) {\n        feedbackModel.modificaCommento(nuovoCommento, selectedRow);\n    }\n}"
            },
            {
                "body": "Optional[{\r\n    if (datiBC == null) {\r\n        datiBC = new JPanel(null);\r\n        datiBC.setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));\r\n        // Creation Tips\r\n        for (int i = 0; i < help.length; i++) {\r\n            JLabel newLabel = new JLabel();\r\n            newLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Info16.png\")));\r\n            newLabel.setBounds(145, 8 + 30 * i, 24, 24);\r\n            newLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\r\n            newLabel.setToolTipText(help[i]);\r\n            suggestions.add(newLabel);\r\n            datiBC.add(newLabel);\r\n            if (i == help.length - 1) {\r\n                newLabel.setBounds(400, 155, 24, 24);\r\n            }\r\n        }\r\n        for (int i = 0; i < txts.length; i++) {\r\n            JLabel newLabel = new JLabel(txts[i], SwingConstants.RIGHT);\r\n            newLabel.setBounds(25, 10 + 30 * i, 120, 16);\r\n            newLabel.repaint();\r\n            datiBC.add(newLabel, null);\r\n        }\r\n        // Name of Cultural Heritage\r\n        nomeBC = new JTextField();\r\n        nomeBC.setColumns(12);\r\n        nomeBC.setDocument(new LimitedDocument(30));\r\n        nomeBC.setBounds(185, 10, 136, 20);\r\n        nomeBC.setName(\"Name Cultural Heritage\");\r\n        datiBC.add(nomeBC, null);\r\n        // Address\r\n        address2 = new JTextField();\r\n        address2.setBounds(270, 40, 136, 20);\r\n        address2.setDocument(new LimitedDocument(30));\r\n        address1 = new JComboBox<>(address);\r\n        address1.setSelectedIndex(-1);\r\n        address1.setBounds(185, 40, 60, 20);\r\n        address2.setName(\"Address\");\r\n        datiBC.add(address2, null);\r\n        datiBC.add(address1, null);\r\n        // City\r\n        cittaBC = new JTextField();\r\n        cittaBC.setColumns(12);\r\n        cittaBC.setBounds(185, 70, 136, 20);\r\n        cittaBC.setName(\"City\");\r\n        cittaBC.setDocument(new OnlyCharactersDocument(25));\r\n        datiBC.add(cittaBC);\r\n        // Location\r\n        localitaBC = new JTextField();\r\n        localitaBC.setBounds(185, 100, 136, 20);\r\n        localitaBC.setName(\"Locality\");\r\n        localitaBC.setDocument(new OnlyCharactersDocument(25));\r\n        datiBC.add(localitaBC, null);\r\n        // CAP\r\n        capBC = new JTextField();\r\n        capBC.setColumns(8);\r\n        capBC.setBounds(185, 130, 92, 20);\r\n        capBC.setDocument(new NumericDocument(5));\r\n        datiBC.add(capBC, null);\r\n        // Geographical Location\r\n        JLabel txtX = new JLabel(\"X\");\r\n        JLabel txtY = new JLabel(\"Y\");\r\n        JLabel txtZ = new JLabel(\"Z\");\r\n        Font fonts = new Font(\"Dialog\", Font.BOLD, 14);\r\n        txtX.setFont(fonts);\r\n        txtY.setFont(fonts);\r\n        txtZ.setFont(fonts);\r\n        txtZ.setBounds(365, 190, 10, 22);\r\n        txtY.setBounds(295, 190, 10, 22);\r\n        txtX.setBounds(227, 190, 14, 20);\r\n        posGeoX = new JTextField(12);\r\n        posGeoX.setBounds(185, 190, 40, 20);\r\n        posGeoY = new JTextField(12);\r\n        posGeoY.setBounds(255, 190, 40, 20);\r\n        posGeoZ = new JTextField(12);\r\n        posGeoZ.setBounds(325, 190, 40, 20);\r\n        posGeoX.setName(\"X-coordinate\");\r\n        posGeoY.setName(\"Y coordinate\");\r\n        posGeoZ.setName(\"Z coordinate\");\r\n        datiBC.add(txtX, null);\r\n        datiBC.add(txtY, null);\r\n        datiBC.add(txtZ, null);\r\n        datiBC.add(posGeoX, null);\r\n        datiBC.add(posGeoY, null);\r\n        datiBC.add(posGeoZ, null);\r\n        // State\r\n        provBC = new JComboBox<>(province);\r\n        provBC.setSelectedIndex(-1);\r\n        provBC.setBounds(185, 160, 50, 20);\r\n        datiBC.add(provBC, null);\r\n        // Description\r\n        descrizioneBC = new JTextArea();\r\n        descrizioneBC.setCursor(new Cursor(Cursor.TEXT_CURSOR));\r\n        descrizioneBC.setWrapStyleWord(true);\r\n        descrizioneBC.setLineWrap(true);\r\n        jScrollPane = new JScrollPane(descrizioneBC);\r\n        jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n        jScrollPane.setBounds(new Rectangle(185, 370, 395, 69));\r\n        descrizioneBC.setName(\"Description\");\r\n        datiBC.add(jScrollPane, null);\r\n        // Phone\r\n        telefonoBC = new JTextField(12);\r\n        telefonoBC.setBounds(185, 220, 136, 20);\r\n        telefonoBC.setDocument(new NumericDocument(10));\r\n        telefonoBC.setName(\"Phone\");\r\n        datiBC.add(telefonoBC, null);\r\n        // Opening\r\n        oreAP = new JComboBox<>();\r\n        oreAP.setBounds(185, 250, 40, 20);\r\n        oreCH = new JComboBox<>();\r\n        oreCH.setBounds(185, 280, 40, 20);\r\n        for (int i = 0; i < 24; i++) {\r\n            if (i < 10) {\r\n                oreCH.addItem(\"0\" + i);\r\n                oreAP.addItem(\"0\" + i);\r\n            } else {\r\n                oreAP.addItem(i);\r\n                oreCH.addItem(i);\r\n            }\r\n        }\r\n        minAP = new JComboBox<>();\r\n        minAP.setBounds(241, 250, 40, 20);\r\n        minAP.addItem(\"00\");\r\n        minAP.addItem(\"15\");\r\n        minAP.addItem(\"30\");\r\n        minAP.addItem(\"45\");\r\n        minCH = new JComboBox<>();\r\n        minCH.setBounds(241, 280, 40, 20);\r\n        minCH.addItem(\"00\");\r\n        minCH.addItem(\"15\");\r\n        minCH.addItem(\"30\");\r\n        minCH.addItem(\"45\");\r\n        minAP.setSelectedIndex(0);\r\n        oreAP.setSelectedIndex(-1);\r\n        minCH.setSelectedIndex(0);\r\n        oreCH.setSelectedIndex(-1);\r\n        Font newFont = new Font(\"Dialog\", Font.BOLD, 18);\r\n        JLabel punto1 = new JLabel(\":\");\r\n        punto1.setBounds(230, 245, 10, 24);\r\n        punto1.setFont(newFont);\r\n        JLabel punto2 = new JLabel(\":\");\r\n        punto2.setBounds(230, 275, 10, 24);\r\n        punto2.setFont(newFont);\r\n        datiBC.add(oreAP, null);\r\n        datiBC.add(minAP, null);\r\n        datiBC.add(minCH, null);\r\n        datiBC.add(oreCH, null);\r\n        datiBC.add(punto1, null);\r\n        datiBC.add(punto2, null);\r\n        // Closed\r\n        String[] days = { \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\" };\r\n        giornoChiusura = new JComboBox<>(days);\r\n        giornoChiusura.setBounds(185, 310, 96, 20);\r\n        giornoChiusura.setSelectedIndex(-1);\r\n        datiBC.add(giornoChiusura, null);\r\n        // Cost\r\n        costoBC = new JTextField();\r\n        costoBC.setColumns(8);\r\n        costoBC.setBounds(185, 340, 40, 20);\r\n        JLabel euro = new JLabel(\"Euro\");\r\n        euro.setBounds(230, 340, 30, 16);\r\n        datiBC.add(costoBC, null);\r\n        datiBC.add(euro, null);\r\n        // PannelloTag\r\n        pannelloTag = new TagPanel();\r\n        pannelloTag.setBounds(405, 180, 180, 170);\r\n        JLabel txtTag = new JLabel(\"Search Tags\");\r\n        txtTag.setBounds(420, 150, 140, 30);\r\n        datiBC.add(txtTag, null);\r\n        datiBC.add(pannelloTag, null);\r\n    }\r\n    return datiBC;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private JPanel getDatiBCForm()",
                "comments": "Optional[/**\r\n * This method initializes the format for the data of a cultural object.\r\n *\r\n * @return javax.swing.JPanel - the form for the data.\r\n */\r\n]",
                "innerComments": "Optional[[// Creation Tips\r\n, // Name of Cultural Heritage\r\n, // Address\r\n, // City\r\n, // Location\r\n, // CAP\r\n, // Geographical Location\r\n, // State\r\n, // Description\r\n, // Phone\r\n, // Opening\r\n, // Closed\r\n, // Cost\r\n, // PannelloTag\r\n]]",
                "generated_comment": "/**\n * This method returns a JPanel containing a form for entering data related to a cultural heritage site. \n * The form includes fields for the name, address, city, locality, CAP, geographical location, state, description, phone number, opening and closing hours, day of closure, cost, and search tags of the cultural heritage site. \n * \n * @return a JPanel containing the form for entering data related to a cultural heritage site\n */ \nprivate JPanel getDatiBCForm() {\n    if (datiBC == null) {\n        // Create the JPanel and set its border\n        datiBC = new JPanel(null);\n        datiBC.setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));\n        \n        // Creation Tips section\n        // Add labels with icons and tooltips for help\n        for (int i = 0; i < help.length; i++) {\n            JLabel newLabel = new JLabel();\n            // Set icon, position, cursor, and tooltip\n            // Add label to suggestions list and JPanel\n            // Adjust position for the last label\n        }\n        \n        // Add labels for text fields\n        for (int i = 0; i < txts.length; i++) {\n            JLabel newLabel = new JLabel(txts[i], SwingConstants.RIGHT);\n            // Set position and add label to JPanel\n        }\n        \n        // Add text fields for name, address, city, locality, CAP, and geographical location\n        // Set properties and add to JPanel\n        \n        // Add combo boxes for state, opening and closing hours, and day of closure\n        // Set options and add to JPanel\n        \n        // Add text area for description, scroll pane, and set properties\n        \n        // Add text field for phone number and set properties\n        \n        // Add labels and combo boxes for opening and closing hours\n        \n        // Add combo box for day of closure\n        \n        // Add text field for cost and label for currency\n        \n        // Add TagPanel for search tags\n        \n        // Add components to JPanel\n    }\n    return datiBC;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (statistics == null) {\r\n        statistics = new JPanel(new GridBagLayout());\r\n        GridBagConstraints g = new GridBagConstraints();\r\n        g.gridx = 0;\r\n        g.gridy = 0;\r\n        g.insets = new Insets(5, 5, 5, 5);\r\n        g.anchor = GridBagConstraints.WEST;\r\n        JLabel stat = new JLabel(\"Statistics\");\r\n        Font newFonts = new Font(\"Dialog\", Font.BOLD, 18);\r\n        stat.setFont(newFonts);\r\n        statistics.add(stat, g);\r\n        g.gridx = 1;\r\n        txtNomeBene = new JLabel();\r\n        txtNomeBene.setFont(newFonts);\r\n        statistics.add(txtNomeBene, g);\r\n        g.gridx = 2;\r\n        mediaVotoBC = new JLabel();\r\n        statistics.add(mediaVotoBC, g);\r\n        g.gridwidth = 3;\r\n        g.gridx = 0;\r\n        g.anchor = GridBagConstraints.CENTER;\r\n        g.gridy = 1;\r\n        statistics.add(getStatMeseCorrente(), g);\r\n        g.gridy = 2;\r\n        statistics.add(getStatTotali(), g);\r\n    }\r\n    return statistics;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getStatistiche()",
                "comments": "Optional[/**\r\n * This method initializes the statistics of a container panel\r\n * Cultural.\r\n *\r\n * @return javax.swing.JPanel - the panel statistics.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JPanel containing statistics related to a specific entity.\n * If the statistics panel has not been initialized yet, it creates and populates it with relevant information.\n * The statistics panel includes the entity name, average rating, current month statistics, and total statistics.\n * \n * @return a JPanel containing the statistics information\n */"
            },
            {
                "body": "Optional[{\r\n    if (feedback == null) {\r\n        feedback = new JPanel();\r\n        feedback.setLayout(new BorderLayout());\r\n        feedbackModel = new FeedBackTableModel();\r\n        tableFeedback = new JTable(feedbackModel);\r\n        TableColumn aColumn = tableFeedback.getColumnModel().getColumn(0);\r\n        // Rating\r\n        aColumn.setPreferredWidth(80);\r\n        aColumn.setCellRenderer(new MediaVotiRenderer());\r\n        // Comment\r\n        aColumn = tableFeedback.getColumnModel().getColumn(1);\r\n        aColumn.setPreferredWidth(260);\r\n        // Release Date\r\n        aColumn = tableFeedback.getColumnModel().getColumn(2);\r\n        aColumn.setPreferredWidth(80);\r\n        // Username\r\n        aColumn = tableFeedback.getColumnModel().getColumn(3);\r\n        aColumn.setPreferredWidth(80);\r\n        tableFeedback.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n        tableFeedback.setColumnSelectionAllowed(false);\r\n        ListSelectionModel selectionModel = tableFeedback.getSelectionModel();\r\n        selectionModel.addListSelectionListener(new ListSelectionListener() {\r\n\r\n            public void valueChanged(ListSelectionEvent event) {\r\n                btnModificaCommento.setEnabled(tableFeedback.getSelectedRow() != -1);\r\n            }\r\n        });\r\n        scrollPaneFeedback = new JScrollPane(tableFeedback);\r\n        scrollPaneFeedback.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n        feedback.add(scrollPaneFeedback, BorderLayout.CENTER);\r\n    }\r\n    return feedback;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private JPanel getFeedback()",
                "comments": "Optional[/**\r\n * This method initializes the panel to display feedback\r\n * Received from a cultural object.\r\n *\r\n * @return javax.swing.JPanel - the panel of feedback.\r\n */\r\n]",
                "innerComments": "Optional[[// Rating\r\n, // Comment\r\n, // Release Date\r\n, // Username\r\n]]",
                "generated_comment": "/**\n * Retrieves the feedback panel, creating it if necessary.\n * The feedback panel displays a table of feedback entries including rating, comment, release date, and username.\n * The table allows for single selection and enables a button to modify a selected comment.\n * \n * @return the feedback panel\n */"
            },
            {
                "body": "Optional[{\r\n    btnModificaCommento.setEnabled(tableFeedback.getSelectedRow() != -1);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void valueChanged(ListSelectionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when the value of the list selection changes. \n * It enables the \"Modify Comment\" button if a row is selected in the feedback table.\n * \n * @param e the ListSelectionEvent that triggered the method call\n */"
            },
            {
                "body": "Optional[{\r\n    if (statMeseCorrente == null) {\r\n        statMeseCorrente = new JPanel();\r\n        statMeseCorrente.setLayout(new GridBagLayout());\r\n        statMeseCorrente.setPreferredSize(new Dimension(500, 280));\r\n        statMeseCorrente.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 102, 255), 3), \"Statistics Current Month\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(0, 102, 204)));\r\n        statMeseCorrente.setBackground(Color.white);\r\n        statMeseC = new JLabel[6];\r\n        GridBagConstraints g = new GridBagConstraints();\r\n        g.gridx = 0;\r\n        g.gridy = 0;\r\n        g.gridwidth = 3;\r\n        g.insets = new Insets(5, 5, 5, 8);\r\n        g.anchor = GridBagConstraints.WEST;\r\n        statMeseCorrente.add(new JLabel(\"Details votes received this month:\"), g);\r\n        g.anchor = GridBagConstraints.CENTER;\r\n        g.gridwidth = 1;\r\n        Font newFonts = new Font(\"Dialog\", Font.BOLD, 16);\r\n        for (int i = 5; i >= 1; i--) {\r\n            int gridX = g.gridx;\r\n            g.gridy++;\r\n            JLabel aLabel = new JLabel(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"star\" + i + \".gif\")), JLabel.CENTER);\r\n            statMeseCorrente.add(aLabel, g);\r\n            g.gridx++;\r\n            statMeseCorrente.add(new JLabel(\"==\"), g);\r\n            g.gridx++;\r\n            g.anchor = GridBagConstraints.EAST;\r\n            statMeseC[i - 1] = new JLabel();\r\n            statMeseC[i - 1].setFont(newFonts);\r\n            statMeseCorrente.add(statMeseC[i - 1], g);\r\n            g.gridx = gridX;\r\n            g.anchor = GridBagConstraints.CENTER;\r\n        }\r\n        g.gridy = 6;\r\n        g.anchor = GridBagConstraints.WEST;\r\n        g.gridwidth = 2;\r\n        g.gridx = 0;\r\n        statMeseCorrente.add(new JLabel(\"Number of ratings released this month:\"), g);\r\n        statMeseC[5] = new JLabel();\r\n        statMeseC[5].setFont(new Font(\"Dialog\", Font.BOLD, 18));\r\n        g.gridx = 2;\r\n        g.gridwidth = 1;\r\n        statMeseCorrente.add(statMeseC[5], g);\r\n    }\r\n    return statMeseCorrente;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getStatMeseCorrente()",
                "comments": "Optional[/**\r\n * This method initializes the panel of statistics for the current month.\r\n *\r\n * @return javax.swing.JPanel - the panel of statistics for the current month.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JPanel containing statistics for the current month.\n * If the JPanel has not been initialized yet, it creates a new JPanel with specific layout, dimensions, border, and background color.\n * It then populates the JPanel with labels displaying details of votes received this month and the number of ratings released this month.\n * The method utilizes GridBagConstraints to properly layout the components within the JPanel.\n * \n * @return a JPanel containing statistics for the current month\n */"
            },
            {
                "body": "Optional[{\r\n    if (statTotali == null) {\r\n        statTotali = new JPanel();\r\n        statTotali.setLayout(new GridBagLayout());\r\n        statTotali.setPreferredSize(new Dimension(500, 280));\r\n        statTotali.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 102, 255), 3), \"Statistics Total\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(0, 102, 204)));\r\n        statTotali.setBackground(Color.white);\r\n        statt = new JLabel[6];\r\n        GridBagConstraints g = new GridBagConstraints();\r\n        g.gridx = 0;\r\n        g.gridy = 0;\r\n        g.gridwidth = 3;\r\n        g.insets = new Insets(5, 5, 5, 8);\r\n        g.anchor = GridBagConstraints.WEST;\r\n        statTotali.add(new JLabel(\"Details votes received this month:\"), g);\r\n        g.anchor = GridBagConstraints.CENTER;\r\n        g.gridwidth = 1;\r\n        Font newFonts = new Font(\"Dialog\", Font.BOLD, 16);\r\n        for (int i = 5; i >= 1; i--) {\r\n            int gridX = g.gridx;\r\n            g.gridy++;\r\n            JLabel aLabel = new JLabel(new ImageIcon(getClass().getResource(\"/unisa/gps/eTour/gui/images/star\" + i + \".gif\")), JLabel.CENTER);\r\n            statTotali.add(aLabel, g);\r\n            g.gridx++;\r\n            statTotali.add(new JLabel(\"==\"), g);\r\n            g.gridx++;\r\n            g.anchor = GridBagConstraints.EAST;\r\n            statt[i - 1] = new JLabel();\r\n            statt[i - 1].setFont(newFonts);\r\n            statTotali.add(statt[i - 1], g);\r\n            g.gridx = gridX;\r\n            g.anchor = GridBagConstraints.CENTER;\r\n        }\r\n        g.gridy = 6;\r\n        g.anchor = GridBagConstraints.WEST;\r\n        g.gridwidth = 2;\r\n        g.gridx = 0;\r\n        statTotali.add(new JLabel(\"Number of ratings released this month:\"), g);\r\n        statt[5] = new JLabel();\r\n        statt[5].setFont(new Font(\"Dialog\", Font.BOLD, 18));\r\n        g.gridx = 2;\r\n        g.gridwidth = 1;\r\n        statTotali.add(statt[5], g);\r\n    }\r\n    return statTotali;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getStatTotali()",
                "comments": "Optional[/**\r\n * This method initializes the panel on the total statistics\r\n * The cultural property.\r\n *\r\n * @return javax.swing.JPanel - the panel statistics totals.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method creates and returns a JPanel containing statistics related to total votes received and ratings released in a month.\n * The JPanel is styled with a titled border, a specific size, and a white background.\n * The statistics are displayed using JLabels and ImageIcons representing star ratings.\n * \n * @return a JPanel displaying statistics related to total votes received and ratings released in a month\n */"
            },
            {
                "body": "Optional[{\r\n    BeanBeneCulturale newBC = new BeanBeneCulturale();\r\n    newBC.setNome(nomeBC.getText());\r\n    newBC.setDescrizione(descrizioneBC.getText());\r\n    newBC.setCap(capBC.getText());\r\n    newBC.setCostoBiglietto(Double.parseDouble(costoBC.getText()));\r\n    newBC.setGiornoChiusura((String) giornoChiusura.getSelectedItem());\r\n    newBC.setTelefono(telefonoBC.getText());\r\n    newBC.setCitta(cittaBC.getText());\r\n    newBC.setLocalita(localitaBC.getText());\r\n    // Date (int year, int month, int date, int hrs, int min)\r\n    Date orarioAP = new Date(0, 0, 0, oreAP.getSelectedIndex(), minAP.getSelectedIndex());\r\n    Date orarioCH = new Date(0, 0, 0, oreCH.getSelectedIndex(), minCH.getSelectedIndex());\r\n    newBC.setOrarioApertura(orarioAP);\r\n    newBC.setOrarioChiusura(orarioCH);\r\n    newBC.setProvincia((String) provBC.getSelectedItem());\r\n    newBC.setVia(((String) address1.getSelectedItem()) + \" \" + address2.getText());\r\n    Punto3D position = new Punto3D(Double.parseDouble(posGeoX.getText()), Double.parseDouble(posGeoY.getText()), Double.parseDouble(posGeoZ.getText()));\r\n    newBC.setPosizione(position);\r\n    return newBC;\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "private BeanBeneCulturale riversaDatiNelBean()",
                "comments": null,
                "innerComments": "Optional[[// Date (int year, int month, int date, int hrs, int min)\r\n]]",
                "generated_comment": "/**\n * This method creates a new instance of BeanBeneCulturale and populates it with data from various GUI components.\n * \n * @return a BeanBeneCulturale object with all the data filled in from the GUI components\n */\nprivate BeanBeneCulturale riversaDatiNelBean() {\n    BeanBeneCulturale newBC = new BeanBeneCulturale();\n    newBC.setNome(nomeBC.getText());\n    newBC.setDescrizione(descrizioneBC.getText());\n    newBC.setCap(capBC.getText());\n    newBC.setCostoBiglietto(Double.parseDouble(costoBC.getText()));\n    newBC.setGiornoChiusura((String) giornoChiusura.getSelectedItem());\n    newBC.setTelefono(telefonoBC.getText());\n    newBC.setCitta(cittaBC.getText());\n    newBC.setLocalita(localitaBC.getText());\n    \n    // Set the opening and closing times using the selected indices from dropdown menus\n    Date orarioAP = new Date(0, 0, 0, oreAP.getSelectedIndex(), minAP.getSelectedIndex());\n    Date orarioCH = new Date(0, 0, 0, oreCH.getSelectedIndex(), minCH.getSelectedIndex());\n    newBC.setOrarioApertura(orarioAP);\n    newBC.setOrarioChiusura(orarioCH);\n    \n    newBC.setProvincia((String) provBC.getSelectedItem());\n    newBC.setVia(((String) address1.getSelectedItem()) + \" \" + address2.getText());\n    \n    // Create a new Punto3D object with the specified coordinates\n    Punto3D position = new Punto3D(Double.parseDouble(posGeoX.getText()), Double.parseDouble(posGeoY.getText()), Double.parseDouble(posGeoZ.getText()));\n    newBC.setPosizione(position);\n    \n    return newBC;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    ArrayList<BeanTag> beanTags = null;\r\n    try {\r\n        beanTags = tags.ottieniTags();\r\n        if (bc != null) {\r\n            idTag = new ArrayList<>();\r\n            ArrayList<BeanTag> tagDaSelezionare = gestioneBC.ottieniTagBeneCulturale(bc.getId());\r\n            for (BeanTag b : tagDaSelezionare) {\r\n                idTag.add(b.getId());\r\n            }\r\n        }\r\n    } catch (RemoteException e) {\r\n        e.printStackTrace();\r\n    } finally {\r\n        for (BeanTag b : beanTags) {\r\n            pannelloTag.insertTag(b);\r\n        }\r\n        if (idTag != null) {\r\n            pannelloTag.setSelectedTags(idTag);\r\n        }\r\n        pannelloTag.repaint();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "private void caricaTags()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Loads tags for a specific entity, populating a panel with the tags obtained.\n * If a cultural asset is associated with the entity, it retrieves the tags associated with it.\n * \n * @throws RemoteException if there is a communication-related issue\n */\nprivate void caricaTags() {\n    // Initialize the list of BeanTag objects\n    ArrayList<BeanTag> beanTags = null;\n    \n    try {\n        // Retrieve tags from the server\n        beanTags = tags.ottieniTags();\n        \n        // If a cultural asset is associated with the entity\n        if (bc != null) {\n            idTag = new ArrayList<>();\n            // Retrieve tags associated with the cultural asset\n            ArrayList<BeanTag> tagDaSelezionare = gestioneBC.ottieniTagBeneCulturale(bc.getId());\n            // Add tag IDs to the list\n            for (BeanTag b : tagDaSelezionare) {\n                idTag.add(b.getId());\n            }\n        }\n    } catch (RemoteException e) {\n        // Print stack trace in case of communication error\n        e.printStackTrace();\n    } finally {\n        // Insert tags into the panel\n        for (BeanTag b : beanTags) {\n            pannelloTag.insertTag(b);\n        }\n        // Set selected tags in the panel\n        if (idTag != null) {\n            pannelloTag.setSelectedTags(idTag);\n        }\n        // Repaint the panel\n        pannelloTag.repaint();\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"New Cultural Heritage\");\r\n    setFrameIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"nuovoBC.png\")));\r\n    setClosable(true);\r\n    setResizable(false);\r\n    setIconifiable(true);\r\n    setSize(600, 560);\r\n    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\r\n    suggestions = new Vector<>();\r\n    parent = pParent;\r\n    bc = null;\r\n    // Initialize the content pane\r\n    jContentPane = new JPanel();\r\n    jContentPane.setLayout(new BorderLayout());\r\n    jContentPane.add(getToolbarSchedaBC(), BorderLayout.CENTER);\r\n    jTabbedPane = new JTabbedPane();\r\n    jTabbedPane.addTab(\"Data Cultural Heritage\", new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"dati.png\")), getDatiBCForm(), null);\r\n    jContentPane.add(jTabbedPane, BorderLayout.CENTER);\r\n    setContentPane(jContentPane);\r\n    // Dialog closure to close the entry window.\r\n    addInternalFrameListener(new InternalFrameAdapter() {\r\n\r\n        public void internalFrameOpened(InternalFrameEvent pEvent) {\r\n            JInternalFrame frame = (JInternalFrame) pEvent.getInternalFrame();\r\n            // Setting up of remote objects for the management of cultural heritage.\r\n            try {\r\n                Registry reg = LocateRegistry.getRegistry(Home.HOST);\r\n                tags = (IGestioneTagComune) reg.lookup(\"GestioneTagComune\");\r\n                gestioneBC = (IGestioneBeniCulturaliAgenzia) reg.lookup(\"GestioneBeniCulturaliAgenzia\");\r\n                // Load data.\r\n                caricaTags();\r\n            } catch (Exception ex) {\r\n                JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Card for entering a new cultural asset will be closed. </u> </h3>\" + \"<p> <b> Possible Causes: </b>\" + \"<ul> <li> No connection to the network. </li>\" + \"<li> Server inactive. </li>\" + \"<li> Server clogged. </li> </ul>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n                ImageIcon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n                JOptionPane.showMessageDialog(frame, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n                frame.dispose();\r\n            }\r\n        }\r\n\r\n        public void internalFrameClosing(InternalFrameEvent pEvent) {\r\n            JPanel root = new JPanel(new BorderLayout());\r\n            JLabel message = new JLabel(\"Are you sure you want to cancel the creation of a new cultural asset?\");\r\n            message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n            JLabel alert = new JLabel(\"Warning! Unsaved data will be lost.\", SwingConstants.CENTER);\r\n            alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\r\n            root.add(message, BorderLayout.NORTH);\r\n            root.add(alert, BorderLayout.CENTER);\r\n            String[] options = { \"Close\", \"Cancel\" };\r\n            int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm closure\", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, getFrameIcon(), options, options[1]);\r\n            if (choice == JOptionPane.OK_OPTION) {\r\n                parent.closeScheda((SchedaBC) pEvent.getInternalFrame());\r\n            }\r\n        }\r\n    });\r\n    // Initialize button\r\n    btnModifica.setVisible(false);\r\n    btnSalva.setVisible(true);\r\n    btnAnnulla.setVisible(true);\r\n    btnAnnulla.setText(\"Clear\");\r\n}",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public SchedaBC(Beniculturali)",
                "comments": "Optional[/**\r\n * The default constructor for inclusion of the interface model\r\n * A new cultural object.\r\n */\r\n]",
                "innerComments": "[// Initialize the content pane\r\n, // Dialog closure to close the entry window.\r\n, // Setting up of remote objects for the management of cultural heritage.\r\n, // Load data.\r\n, // Initialize button\r\n]",
                "generated_comment": "/**\n * Constructs a new instance of SchedaBC with the specified parent frame.\n * The constructor initializes the frame with a title of \"New Cultural Heritage\", sets the frame icon,\n * and configures the frame properties such as closable, resizable, and iconifiable.\n * It also sets the size of the frame to 600x560 pixels and sets the default close operation to DO_NOTHING_ON_CLOSE.\n * The constructor initializes the suggestions vector, sets the parent frame, and initializes the bc object to null.\n * The content pane is initialized with a toolbar and a tabbed pane containing the form for entering data about the cultural heritage.\n * An internal frame listener is added to handle the opening and closing events of the frame.\n * When the frame is opened, it establishes communication with remote objects for managing cultural heritage and loads data.\n * If an error occurs during communication, an error message is displayed and the frame is closed.\n * When the frame is closing, a confirmation dialog is shown to confirm the cancellation of creating a new cultural asset.\n * If confirmed, the parent frame is notified to close the SchedaBC instance.\n * Additionally, the constructor initializes the visibility and text of buttons for modifying, saving, and clearing data.\n * @param pParent the parent frame for the SchedaBC instance\n */"
            },
            {
                "body": "{\r\n    super();\r\n    setFrameIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"scheda.png\")));\r\n    setClosable(true);\r\n    setResizable(false);\r\n    setIconifiable(true);\r\n    setSize(600, 560);\r\n    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\r\n    // Initialize instance variables\r\n    bc = pbc;\r\n    this.parent = pParent;\r\n    suggestions = new Vector<>();\r\n    initializeSchedaBC();\r\n    if (pModifica) {\r\n        // Are we changing the cultural property.\r\n        btnModifica.setSelected(true);\r\n        btnSalva.setVisible(true);\r\n        btnAnnulla.setVisible(true);\r\n        btnAnnulla.setText(\"Reset\");\r\n    } else {\r\n        // We're viewing the tab of a cultural object.\r\n        mostraNascondiSuggerimenti();\r\n        attivaDisattivaEdit();\r\n    }\r\n}",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public SchedaBC(Beniculturali, BeanBeneCulturale, boolean)",
                "comments": "Optional[/**\r\n * This interface models the manufacturer regarding modification of data and\r\n * Display of the tab of a cultural object.\r\n *\r\n * @param pbc - the bean contains the data of\r\n * Selected cultural.\r\n * @param pModifica <ul> <li> true - the fields will be editable, and then you are\r\n * To amend the data of a cultural object. <li> False - the fields will not be\r\n * Edit, and then you are viewing the tab of a cultural object. </ul>\r\n */\r\n]",
                "innerComments": "[// Initialize instance variables\r\n, // Are we changing the cultural property.\r\n, // We're viewing the tab of a cultural object.\r\n]",
                "generated_comment": "/**\n * Constructs a new SchedaBC object with the specified parameters.\n * \n * @param pbc the Beniculturali object associated with the cultural property\n * @param pParent the BeanBeneCulturale object representing the parent of the cultural property\n * @param pModifica a boolean indicating whether the cultural property is being modified\n * \n * This constructor initializes the SchedaBC object by setting its frame icon, size, and various properties.\n * It also initializes instance variables, such as bc, parent, and suggestions, and calls the initializeSchedaBC method.\n * If pModifica is true, it sets the appropriate buttons visible and selected for modifying the cultural property.\n * Otherwise, it displays the tab of the cultural object and activates editing functionalities.\n */"
            }
        ],
        "signature": "SchedaBC",
        "variables": [
            "private  static  final String txts",
            "private  static  final String help",
            "private JPanel jContentPane",
            "private JToolBar toolbarSchedaBC",
            "private JToggleButton btnModifica",
            "private JButton btnSalva",
            "private JButton btnAnnulla",
            "private JButton btnModificaCommento",
            "private JTabbedPane jTabbedPane",
            "private JPanel statistics",
            "private JPanel feedback",
            "private JTextField address2",
            "private JComboBox<String> address1",
            "private JTextField cittaBC",
            "private JTextField localitaBC",
            "private JTextField capBC",
            "private JTextField posGeoX",
            "private JScrollPane jScrollPane",
            "private JTextArea descrizioneBC",
            "private JTextField telefonoBC",
            "private JComboBox<String> oreAP",
            "private JComboBox<String> minAP",
            "private TagPanel pannelloTag",
            "private JTextField costoBC",
            "private JComboBox<String> oreCH",
            "private JComboBox<String> minCH",
            "private JComboBox<String> provBC",
            "private JPanel datiBC",
            "private JTextField nomeBC",
            "private JScrollPane scrollPaneFeedback",
            "private JTable tableFeedback",
            "private JLabel txtNomeBene",
            "private JLabel mediaVotoBC",
            "private JPanel statMeseCorrente",
            "private JPanel statTotali",
            "private JTextField posGeoY",
            "private JTextField posGeoZ",
            "private Vector<JLabel> suggestions",
            "private BeanBeneCulturale bc",
            "private JComboBox<String> giornoChiusura",
            "private JLabel statMeseC",
            "private JLabel statt",
            "private Beniculturali parent",
            "private FeedBackTableModel feedbackModel",
            "protected IGestioneTagComune tags",
            "protected IGestioneBeniCulturaliAgenzia gestioneBC",
            "private ArrayList<Integer> idTag"
        ],
        "generated_class_comment": "/**\n * This class represents a Java Swing internal frame listener that handles events related to the opening and closing of internal frames. \n * It contains methods to set up remote objects for the management of cultural heritage by establishing a connection with the server eTour, \n * loading data related to tags and cultural assets, and displaying error messages in case of communication failures.\n * \n * The class includes the following methods:\n * \n * 1. public void internalFrameOpened(InternalFrameEvent pEvent) - This method is called when an internal frame is opened. It sets up remote objects \n * for the management of cultural heritage by establishing a connection with the server eTour. It loads data related to tags and cultural assets. \n * If there is an exception during the communication with the server, an error message is displayed and the internal frame is closed.\n * \n * 2. [Add method description here]\n * \n * [Add more method descriptions as needed]\n * \n * Overall, this class provides functionality to interact with remote objects for managing cultural heritage and handles exceptions \n * related to server communication effectively.\n */\n**/\n/**\n * This class contains a method that displays a confirmation dialog when the internal frame is closing. \n * The dialog asks the user if they want to cancel the creation of a new cultural asset. \n * If the user chooses to close, the method calls the closeScheda method on the parent object with the internal frame as a parameter.\n * The method creates a panel with a message and an alert label with a warning icon. \n * The message asks the user if they are sure they want to cancel the creation of a new cultural asset. \n * The alert warns the user that unsaved data will be lost. \n * The method then displays a dialog with options to close or cancel. \n * If the user chooses to close, the method calls the closeScheda method on the parent object with the internal frame as a parameter.\n * \n * @param pEvent the InternalFrameEvent that triggered the closing of the internal frame\n */\npublic void internalFrameClosing(InternalFrameEvent pEvent) {\n    JPanel root = new JPanel(new BorderLayout());\n    \n    JLabel message = new JLabel(\"Are you sure you want to cancel the creation of a new cultural asset?\");\n    message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\n    \n    JLabel alert = new JLabel(\"Warning! Unsaved data will be lost.\", SwingConstants.CENTER);\n    alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\"));\n    \n    root.add(message, BorderLayout.NORTH);\n    root.add(alert, BorderLayout.CENTER);\n    \n    String[] options = { \"Close\", \"Cancel\" };\n    int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm closure\", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, getFrameIcon(), options, options[1]);\n    \n    if (choice == JOptionPane.OK_OPTION) {\n        parent.closeScheda((SchedaBC) pEvent.getInternalFrame());\n    }\n}\n**/\nSure! Here is a comprehensive JavaDoc comment that describes the purpose of the class, its main functionalities, and its overall behavior:\n\n/**\n * This class represents a dialog window for confirming closure or cancellation of a cultural property view. \n * It provides options for the user to either close the view or cancel the operation. \n * The class contains methods for handling user choices and performing actions based on those choices.\n * \n * Main functionalities:\n * - Display a dialog window with options to close or cancel a cultural property view.\n * - Handle user choice and perform actions accordingly.\n * \n * Overall behavior:\n * - When the dialog is displayed, the user can choose to close the view or cancel the operation.\n * - If the user chooses to close the view, the parent's closeScheda method is called with the internal frame as a parameter.\n * - If the user cancels the operation, no action is taken.\n * \n * Note: This class interacts with other classes and components to manage cultural heritage data and perform related operations.\n */\n \nThis JavaDoc comment provides a clear and detailed description of the class, its purpose, functionalities, and behavior.\n/**\n * This class represents a GUI component for managing cultural heritage data. It provides functionalities for creating, editing, and deleting cultural assets. The main features of this class include displaying a tabbed interface for managing cultural heritage information, handling user interactions through buttons and menus, and providing error handling and confirmation dialogs.\n * \n * The class includes methods for initializing the GUI components, handling user actions such as creating or editing cultural assets, and closing the tabbed interface. It also includes error handling mechanisms to display error messages and notify the user of any issues.\n * \n * The class implements the InternalFrameListener interface to handle internal frame events, such as closing a tab or confirming the closure of a cultural asset. It also uses JOptionPane dialogs to prompt the user for confirmation before closing a tab with unsaved data.\n * \n * Overall, this class provides a user-friendly interface for managing cultural heritage data, with error handling and confirmation dialogs to ensure data integrity and user experience. It is designed to be used in conjunction with other components in a larger application for managing cultural assets.\n */\n \npublic class CulturalHeritageManager extends JInternalFrame implements InternalFrameListener {\n    // Class implementation goes here\n}\n**/\nThe class `initializeSchedaBC` is a private method that initializes the interface for displaying a cultural object on a board. It includes functionalities for loading data, setting up remote objects for managing cultural heritage, and handling user interactions such as modifications and feedback received. \n\nThe method includes a ChangeListener that updates the interface based on the selected tab in a JTabbedPane component. It controls the visibility of toolbar buttons and manages the display of different components based on the selected tab. \n\nOverall, the class provides a user-friendly interface for interacting with cultural objects, displaying statistics, and managing feedback received. It encapsulates the logic for handling user interactions and updating the interface accordingly.\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a CulturalHeritageBoard that manages cultural heritage data, statistics, and feedback received.\n * It initializes the board by setting the title, loading remote objects for cultural heritage management,\n * loading data, setting up event listeners for internal frame opening and closing, and initializing the content pane with\n * toolbar and tabbed panes for displaying cultural heritage data, statistics, and feedback received.\n * \n * The class handles exceptions by displaying an error message if communication with the server fails and closes the board.\n * It also prompts for confirmation before closing the tab if there are unsaved changes, otherwise it directly closes the window.\n * The class also handles tab change events to show/hide toolbar buttons based on the selected tab.\n * \n * The main functionalities of the CulturalHeritageBoard class include:\n * - Setting up remote objects for managing cultural heritage\n * - Loading cultural heritage data and statistics\n * - Handling internal frame opening and closing events\n * - Displaying cultural heritage data, statistics, and feedback received in tabbed panes\n * \n * @author [Your Name]\n * @version 1.0\n * @since [Date]\n */\n \nI hope this helps! Let me know if you need any more assistance.\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a handler for internal frame events in a cultural heritage management application. It contains methods to handle the opening of internal frames, such as setting up remote objects for managing cultural heritage, loading data, and handling communication errors with the server eTour. If an exception occurs during the setup process, an error message is displayed and the internal frame is closed.\n * \n * The class also includes a method for confirming the closure of a tab for a cultural asset, displaying a warning message if unsaved data will be lost. This method provides options to either close the tab or cancel the action.\n * \n * Overall, this class plays a crucial role in managing internal frame events and ensuring smooth operation of the cultural heritage management application. It provides functionalities for handling user interactions, displaying messages, and maintaining data integrity.\n * \n * @author [Your Name]\n * @version 1.0\n */\nSure, here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a Java Swing application that handles internal frame events related to cultural heritage assets. It contains methods for handling the closing of internal frames, updating the user interface based on the selected tab, and managing user interactions with the application.\n * \n * The internalFrameClosing method is called when an internal frame is closing. If the \"Modify\" button is selected, it prompts the user for confirmation before closing the tab of the cultural asset. If the user confirms, the tab is closed. If the user cancels, the tab remains open. If the \"Modify\" button is not selected, the tab is closed directly without confirmation.\n * \n * The updateUI method updates the user interface based on the selected tab in the application. It shows or hides toolbar buttons and controls based on the selected tab to provide a better user experience.\n * \n * Overall, this class provides functionality for managing internal frame events, updating the user interface, and handling user interactions in a Java Swing application related to cultural heritage assets.\n */\n\nI hope this helps! Let me know if you need any more information.\n/**\n * This class represents a controller for managing a specific type of data related to a business center.\n * It contains methods for updating the visibility of components based on the selected index of a JTabbedPane,\n * as well as for setting various attributes of the business center object.\n * \n * The stateChanged method is called when the state of a ChangeEvent is changed, and it updates the visibility\n * of components based on the selected index of a JTabbedPane.\n * \n * The setBusinessCenterData method is used to set the attributes of a business center object, such as name, address,\n * description, cost, position, phone number, and opening hours.\n * \n * Overall, this class provides functionality for managing and displaying data related to a business center,\n * as well as handling user interactions and updating the UI accordingly.\n */\npublic class BusinessCenterController {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a form that is used to display and manipulate data related to a Business Center object.\n * It contains methods to load data from a Business Center object into the form fields, set text and icons based on the rating of the Business Center, and display statistics for the Business Center.\n * \n * The class includes a method to load data from a Business Center object into the form fields, setting the text of various text fields and combo boxes with data from the Business Center object.\n * It also sets the icon for the media rating based on the rating value of the Business Center.\n * \n * Additionally, the class retrieves statistics for the Business Center from a remote source and displays them in the form.\n * \n * @param bc the Business Center object containing the data to be loaded into the form\n * @return void\n */\n */\n/**\n * This class represents a GUI component that loads and displays statistics for a cultural asset.\n * It provides methods to set the name of the cultural asset in a text field, set an icon based on the average rating,\n * retrieve statistics from a server, and display them in corresponding text fields.\n * \n * The class includes a method to toggle the visibility of suggestions displayed on the screen.\n * It iterates through a list of JLabel suggestions and toggles their visibility.\n * \n * Main functionalities:\n * - Load and display statistics for a cultural asset\n * - Set the name of the cultural asset in a text field\n * - Set an icon based on the average rating of the cultural asset\n * - Retrieve statistics from a server and display them in text fields\n * - Toggle visibility of suggestions displayed on the screen\n * \n * @param bc the cultural asset for which statistics are being loaded\n * @return void\n */\npublic class CulturalAssetStatistics {\n    private void caricaStatistiche() {\n        statMeseC[5].setText(\"\" + stats.get(5));\n        statt[0].setText(\"142\");\n        statt[1].setText(\"112\");\n        statt[2].setText(\"132\");\n        statt[3].setText(\"212\");\n        statt[4].setText(\"152\");\n        statt[5].setText(\"748\");\n    }\n\n    private void mostraNascondiSuggerimenti() {\n        Iterator<JLabel> s = suggestions.iterator();\n        while (s.hasNext()) {\n            JLabel current = s.next();\n            current.setVisible(!current.isVisible());\n        }\n    }\n\n    // Additional methods and properties can be added here\n}\n*/\n*/\\r\\n]\", \"innerComments\": null, \"generated_comment\": \"/**\\n * Initializes the toolbar tab of a cultural object.\\n * If the toolbarSchedaBC is null, creates a new JToolBar, sets it as non-floatable, and adds buttons for modification, saving, and canceling.\\n * If a cultural object is present, adds a button for modifying comments.\\n *\\n * @return the toolbarSchedaBC JToolBar\\n */\\nprivate JToolBar getToolbarSchedaBC() {\\n if (toolbarSchedaBC == null) {\\n toolbarSchedaBC = new JToolBar();\\n toolbarSchedaBC.setFloatable(false);\\n toolbarSchedaBC.add(getBtnModifica());\\n toolbarSchedaBC.addSeparator();\\n toolbarSchedaBC.add(getBtnSalva());\\n toolbarSchedaBC.addSeparator();\\n toolbarSchedaBC.add(getBtnAnnulla());\\n toolbarSchedaBC.addSeparator();\\n if (bc != null) {\\n toolbarSchedaBC.add(getBtnModificaCommento());\\n toolbarSchedaBC.addSeparator();\\n }\\n }\\n return toolbarSchedaBC;\\n}\\n\" }]\n\nThis is the information extracted from the Java class. Let me know if you need any more assistance.\n\", \"hasComment\": false, \"hasInnerComment\": false, \"signature\": null, \"comments\": null, \"innerComments\": null, \"generated_comment\": \"/**\\n * This class represents a toolbar for the SchedaBC (Business Card) panel. It provides buttons for modifying, saving, and canceling data, as well as an additional button for modifying comments if the Business Card is not null. The toolbar is non-floatable.\\n */\" }]\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a ActionListener implementation that handles various actions in a user interface.\n * It contains methods to show or hide suggestions, enable or disable editing functionality, and manage the visibility of save and cancel buttons.\n * The class also includes a method to handle the action performed when the save button is clicked, which involves saving data or updating existing data.\n * \n * The actionPerformed method is called when an action event occurs, triggering the necessary actions based on user input.\n * \n * The class encapsulates the logic for interacting with user interface components and performing data operations.\n * It provides a structured approach to handling user interactions and managing the state of the interface elements.\n * \n * Overall, this class serves as a central component for managing user actions and updating data in the application's interface.\n */\npublic class ActionListenerImplementation {\n    // Class implementation goes here\n}\n*/\n*/\n/**\n * This class represents a dialog window for editing cultural heritage objects.\n * It allows users to make changes to the data of a cultural heritage object and save those changes.\n * The class provides functionality to display a confirmation dialog before updating the data.\n * The \"Edit\" button allows users to confirm the changes, while the \"Cancel\" button allows users to cancel the operation.\n * If the changes are confirmed, the data is updated in the table model and a success message is displayed.\n * \n * @return a JButton object that allows the user to save changes made to a cultural heritage object\n */\nprivate JButton getBtnSalva() {\n    // method body\n}\n*/\n/**\n * This class represents a dialog window that prompts the user to confirm a change. It contains methods to handle user actions and update cultural object data accordingly.\n * \n * Main functionalities:\n * - Constructs a dialog for confirmation of a change\n * - Displays the dialog screen to the user\n * - Handles user actions when confirming or canceling the change\n * - Updates the cultural object data in the database\n * - Populates the cultural object with new data if the change is confirmed\n * - Loads the new data into the form and updates the table model\n * - Hides save and cancel buttons, deselects the edit button, and displays success messages\n * \n * Overall behavior:\n * When an action event is triggered, this class checks if the cancel button is pressed. If the cultural object is not initialized, it clears the form data. If the cultural object is initialized, it loads new data into the form and updates the table model. It also handles confirmation dialogs for updating the cultural object data. The class provides visual feedback to the user and ensures that the database is updated with the latest changes.\n */\n```\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a GUI component that allows users to interact with cultural data. It contains methods for initializing buttons, handling actions, and managing form data.\n * \n * The class includes a method to create a JButton for canceling an operation, which sets the button text to \"Cancel\", adds an icon, and sets a hand cursor. An ActionListener is also added to handle the cancel action.\n * \n * Additionally, the class includes a method for handling action events, specifically checking if a variable 'bc' is null. If 'bc' is null, it clears text fields and combo boxes within a component 'datiBC', resets a panel 'pannelloTag', and clears text in a text field 'descrizioneBC'. If 'bc' is not null, it calls the 'caricaDatiForm' method to load data into the form.\n * \n * Overall, this class provides functionality for managing cultural data forms and interacting with user input.\n */\n \nI hope this helps clarify the purpose and functionality of the class! Let me know if you need any further assistance.\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a JButton used for editing comments in a feedback table.\n * The JButton is initialized with the text \"Edit Comment\" and an icon.\n * Initially, the button is set to be invisible and disabled.\n * When the button is clicked, a dialog box prompts the user to enter a new comment for the selected row in the feedback table.\n * If a new comment is entered, the feedback model is updated with the new comment.\n * \n * This class provides a method to get the JButton for editing comments.\n * \n * @author [Your Name]\n * @version 1.0\n */\nOptional[/**\n * This method initializes the JPanel containing data for the class.\n * It creates labels with icons and tooltips for each piece of data, as well as labels for the data itself.\n * \n * @return void\n */\npublic void initializeDataPanel() {\n    if (datiBC == null) {\n        datiBC = new JPanel(null);\n        datiBC.setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));\n        \n        // Creation Tips\n        for (int i = 0; i < help.length; i++) {\n            JLabel newLabel = new JLabel();\n            newLabel.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Info16.png\")));\n            newLabel.setBounds(145, 8 + 30 * i, 24, 24);\n            newLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n            newLabel.setToolTipText(help[i]);\n            suggestions.add(newLabel);\n            datiBC.add(newLabel);\n            \n            if (i == help.length - 1) {\n                newLabel.setBounds(400, 155, 24, 24);\n            }\n        }\n        \n        for (int i = 0; i < txts.length; i++) {\n            JLabel newLabel = new JLabel(txts[i], SwingConstants.RIGHT);\n            newLabel.setBounds(25, 10 + 30 * i, 120, 16);\n            newLabel.repaint();\n            datiBC.add(newLabel, null);\n        }\n    }\n}\n}]\"\n/**\n * This class represents a form for entering information about a Cultural Heritage site.\n * It provides fields for entering the name, address, city, locality, CAP code, and geographical location of the site.\n * The main functionalities of this class include setting up text fields for each piece of information, limiting the input length,\n * and ensuring that only valid characters are entered in certain fields.\n * The overall behavior of this class is to create a user-friendly interface for inputting and storing data related to Cultural Heritage sites.\n * Users can enter the required information in the designated fields and the class will enforce restrictions on the input to maintain data integrity.\n */\n/**\n * This class represents a form for collecting data related to a business entity. It includes fields for the business name, address, geographical position, province, description, phone number, and opening hours.\n * \n * The main functionalities of this class include:\n * - Adding text fields for the business name, address, geographical position, province, and phone number\n * - Adding a text area for the description of the business\n * - Adding combo boxes for selecting the opening hours of the business\n * \n * The overall behavior of this class is to provide a user-friendly interface for inputting and storing information about a business entity. It allows users to enter details such as the business name, address, description, contact information, and opening hours in a structured manner.\n * \n * Note: This class assumes the existence of certain components such as JComboBox, JTextField, JTextArea, JScrollPane, and NumericDocument for handling input validation.\n */\npublic class BusinessForm {\n    // Fields for storing components related to business data\n    private JTextField txtY;\n    private JTextField txtZ;\n    private JTextField posGeoX;\n    private JTextField posGeoY;\n    private JTextField posGeoZ;\n    private JComboBox<String> provBC;\n    private JTextArea descrizioneBC;\n    private JScrollPane jScrollPane;\n    private JTextField telefonoBC;\n    private JComboBox<Integer> oreAP;\n    private JComboBox<Integer> oreCH;\n    private JComboBox<String> minAP;\n    private JComboBox<String> minCH;\n    \n    /**\n     * Constructs a new BusinessForm object with the specified components for collecting business data.\n     */\n    public BusinessForm() {\n        // Add text fields for business data\n        datiBC.add(txtY, null);\n        datiBC.add(txtZ, null);\n        datiBC.add(posGeoX, null);\n        datiBC.add(posGeoY, null);\n        datiBC.add(posGeoZ, null);\n        \n        // Add province selection combo box\n        provBC = new JComboBox<>(province);\n        provBC.setSelectedIndex(-1);\n        provBC.setBounds(185, 160, 50, 20);\n        datiBC.add(provBC, null);\n        \n        // Add text area for business description\n        descrizioneBC = new JTextArea();\n        descrizioneBC.setCursor(new Cursor(Cursor.TEXT_CURSOR));\n        descrizioneBC.setWrapStyleWord(true);\n        descrizioneBC.setLineWrap(true);\n        jScrollPane = new JScrollPane(descrizioneBC);\n        jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        jScrollPane.setBounds(new Rectangle(185, 370, 395, 69));\n        descrizioneBC.setName(\"Description\");\n        datiBC.add(jScrollPane, null);\n        \n        // Add text field for phone number\n        telefonoBC = new JTextField(12);\n        telefonoBC.setBounds(185, 220, 136, 20);\n        telefonoBC.setDocument(new NumericDocument(10));\n        telefonoBC.setName(\"Phone\");\n        datiBC.add(telefonoBC, null);\n        \n        // Add combo boxes for selecting opening hours\n        oreAP = new JComboBox<>();\n        oreAP.setBounds(185, 250, 40, 20);\n        oreCH = new JComboBox<>();\n        oreCH.setBounds(185, 280, 40, 20);\n        for (int i = 0; i < 24; i++) {\n            if (i < 10) {\n                oreCH.addItem(\"0\" + i);\n                oreAP.addItem(\"0\" + i);\n            } else {\n                oreAP.addItem(i);\n                oreCH.addItem(i);\n            }\n        }\n        minAP = new JComboBox<>();\n        minAP.setBounds(241, 250, 40, 20);\n        minAP.addItem(\"00\");\n        minAP.addItem(\"15\");\n        minAP.addItem(\"30\");\n        minAP.addItem(\"45\");\n        minCH = new JComboBox<>();\n        minCH.setBounds(241, 280, 40, 20);\n        minCH.addItem(\"00\");\n        minCH.addItem(\"15\");\n        minCH.addItem(\"30\");\n        minCH.addItem(\"45\");\n        minAP.setSelectedIndex(0);\n        oreAP.setSelectedIndex(-1);\n        minCH.setSelectedIndex(0);\n        oreCH.setSelectedIndex(-1);\n        \n        // Add labels for separating hours and minutes\n        Font newFont = new Font(\"Dialog\", Font.BOLD, 18);\n        JLabel punto1 = new JLabel(\":\");\n        punto1.setBounds(230, 245, 10, 24);\n        punto1.setFont(newFont);\n        JLabel punto2 = new\n\n        // Additional components can be added as needed for collecting more detailed business information\n    }\n}\n```\n/**\n * This method initializes the format for the data of a cultural object.\n * The form includes fields for the name, address, city, locality, CAP, geographical location, state, description, phone number, opening and closing hours, day of closure, cost, and search tags of the cultural object.\n * \n * @return javax.swing.JPanel - the form for the data.\n * \n * // Creation Tips\n * // Name of Cultural Heritage\n * // Address\n * // City\n * // Location\n * // CAP\n * // Geographical Location\n * // State\n * // Description\n * // Phone\n * // Opening\n * // Closed\n * // Cost\n * // PannelloTag\n */\nprivate JPanel getDatiBCForm() {\n    JPanel datiBC = new JPanel();\n    // Name of Cultural Heritage\n    JTextField nomeCH = new JTextField();\n    nomeCH.setColumns(20);\n    nomeCH.setBounds(185, 20, 200, 20);\n    datiBC.add(nomeCH, null);\n    // Address\n    JTextField indirizzoCH = new JTextField();\n    indirizzoCH.setColumns(20);\n    indirizzoCH.setBounds(185, 50, 200, 20);\n    datiBC.add(indirizzoCH, null);\n    // City\n    JTextField cittaCH = new JTextField();\n    cittaCH.setColumns(20);\n    cittaCH.setBounds(185, 80, 200, 20);\n    datiBC.add(cittaCH, null);\n    // Location\n    JTextField localitaCH = new JTextField();\n    localitaCH.setColumns(20);\n    localitaCH.setBounds(185, 110, 200, 20);\n    datiBC.add(localitaCH, null);\n    // CAP\n    JTextField capCH = new JTextField();\n    capCH.setColumns(5);\n    capCH.setBounds(185, 140, 60, 20);\n    datiBC.add(capCH, null);\n    // Geographical Location\n    JTextField locGeoCH = new JTextField();\n    locGeoCH.setColumns(20);\n    locGeoCH.setBounds(185, 170, 200, 20);\n    datiBC.add(locGeoCH, null);\n    // State\n    JTextField statoCH = new JTextField();\n    statoCH.setColumns(20);\n    statoCH.setBounds(185, 200, 200, 20);\n    datiBC.add(statoCH, null);\n    // Description\n    JTextArea descrizioneCH = new JTextArea();\n    descrizioneCH.setLineWrap(true);\n    descrizioneCH.setWrapStyleWord(true);\n    descrizioneCH.setBounds(185, 230, 200, 40);\n    datiBC.add(descrizioneCH, null);\n    // Phone\n    JTextField telefonoCH = new JTextField();\n    telefonoCH.setColumns(10);\n    telefonoCH.setBounds(185, 275, 100, 20);\n    datiBC.add(telefonoCH, null);\n    // Opening\n    JTextField oreAP = new JTextField();\n    oreAP.setColumns(2);\n    oreAP.setBounds(185, 310, 30, 20);\n    JTextField minAP = new JTextField();\n    minAP.setColumns(2);\n    minAP.setBounds(220, 310, 30, 20);\n    JLabel punto1 = new JLabel(\":\");\n    punto1.setBounds(230, 310, 10, 24);\n    punto1.setFont(newFont);\n    JTextField oreCH = new JTextField();\n    oreCH.setColumns(2);\n    oreCH.setBounds(185, 340, 30, 20);\n    JTextField minCH = new JTextField();\n    minCH.setColumns(2);\n    minCH.setBounds(220, 340, 30, 20);\n    JLabel punto2 = new JLabel(\":\");\n    punto2.setBounds(230, 275, 10, 24);\n    punto2.setFont(newFont);\n    datiBC.add(oreAP, null);\n    datiBC.add(minAP, null);\n    datiBC.add(minCH, null);\n    datiBC.add(oreCH, null);\n    datiBC.add(punto1, null);\n    datiBC.add(punto2, null);\n    // Closed\n    String[] days = { \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\" };\n    JComboBox<String> giornoChiusura = new JComboBox<>(days);\n    giornoChiusura.setBounds(185, 310, 96, 20);\n    giornoChiusura.setSelectedIndex(-1);\n    datiBC.add(giornoChiusura, null);\n    // Cost\n    JTextField costoBC = new JTextField();\n    costoBC.setColumns(8);\n    costoBC.setBounds(185, 340, 40, 20);\n    JLabel euro = new JLabel(\"Euro\");\n    euro.setBounds(230, 340, 30, 16);\n    datiBC.add(costoBC, null);\n    datiBC.add(euro, null);\n    // PannelloTag\n    TagPanel pannelloTag = new TagPanel();\n    pannelloTag.setBounds(405, 180, 180, 170);\n    JLabel txtTag = new JLabel(\"Search Tags\");\n    txtTag.setBounds(420, 150, 140, 30);\n    datiBC.add(txtTag, null);\n    datiBC.add(pannelloTag, null);\n    \n    return datiBC;\n}\n*/\nSure! Here is a comprehensive JavaDoc comment for the heritage site class:\n\n/**\n * The heritage site class represents a JPanel containing a form for entering data related to a cultural heritage site. \n * This class includes methods for creating and setting up the form with various components such as labels, text fields, combo boxes, text areas, and more.\n * \n * The getDatiBCForm method initializes and returns the JPanel with all the necessary components for entering data about a cultural heritage site. \n * It includes sections for creation tips, labels with icons and tooltips, text fields for name, address, city, locality, CAP, and geographical location, combo boxes for state, opening and closing hours, day of closure, text area for description, phone number, cost, currency, and search tags.\n * \n * The class also includes a statistics panel for displaying statistics related to the heritage site, such as the name of the site. \n * \n * Overall, the heritage site class provides a user-friendly interface for inputting and viewing data about cultural heritage sites, making it easier to manage and organize information about these important historical landmarks.\n */\n/**\n * This class represents a JPanel that contains statistics related to a specific entity. \n * It provides functionalities to display and manage statistics such as average rating, current month statistics, and total statistics.\n * The class includes methods to initialize and populate the statistics panel with relevant information.\n * \n * The main functionalities of this class include:\n * - Creating and managing a JPanel to display statistics\n * - Initializing and populating the statistics panel with entity information\n * - Displaying average rating, current month statistics, and total statistics\n * \n * The class structure consists of methods to handle the creation and management of the statistics panel, as well as methods to update and display the statistics information.\n * \n * Overall Behavior:\n * - When instantiated, the class creates a JPanel to display statistics related to a specific entity.\n * - It provides methods to populate the statistics panel with relevant information such as average rating, current month statistics, and total statistics.\n * - The class allows for the display and management of statistics in a user-friendly interface.\n * \n * @return a JPanel containing the statistics information\n */\n*/\n/**\n * This class represents a panel that displays feedback received from a cultural object. \n * It provides methods to interact with the feedback data, such as modifying comments and selecting entries.\n * The panel includes a table that shows feedback entries with details like rating, comment, release date, and username.\n * Users can select a single entry in the table and use a button to modify the selected comment.\n * \n * The class also includes a ListSelectionListener that enables the \"Modify Comment\" button when a row is selected in the feedback table.\n * \n * @return the feedback panel\n */\n*/\n/**\n * This method initializes the panel of statistics for the current month.\n * It creates a JPanel containing details about the votes received this month, \n * including the number of ratings released and the corresponding star ratings.\n * \n * @return javax.swing.JPanel - the panel of statistics for the current month.\n */\n*/\n/**\n * This class represents a JPanel containing statistics for the current month.\n * If the JPanel has not been initialized yet, it creates a new JPanel with specific layout, dimensions, border, and background color.\n * It then populates the JPanel with labels displaying details of votes received this month and the number of ratings released this month.\n * The method utilizes GridBagConstraints to properly layout the components within the JPanel.\n * \n * @return a JPanel containing statistics for the current month\n */\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a collection of methods related to managing cultural properties.\n * It provides functionalities for creating, updating, and retrieving information about cultural properties.\n * The class includes methods for setting and getting various attributes of a cultural property such as name, description, address, cost, opening hours, and contact information.\n * Additionally, it contains methods for handling dates and provinces associated with cultural properties.\n * The class also includes a method for generating statistics related to total votes received and ratings released in a month.\n * Overall, this class serves as a utility for managing and analyzing data related to cultural properties.\n */\nSure! Here is a comprehensive JavaDoc comment for the class:\n\n/**\n * This class represents a GUI component that allows users to input data for a cultural heritage site.\n * It contains various methods for populating a BeanBeneCulturale object with data from the GUI components.\n * The class handles user input for the name, description, address, contact information, opening and closing times,\n * location coordinates, and other details related to a cultural heritage site.\n * It also includes methods for setting and getting data from the BeanBeneCulturale object.\n * \n * @author [Your Name]\n * @version 1.0\n */\n/**\n * This class represents a GUI panel for managing tags associated with a specific entity. \n * It provides methods to load tags from a server, populate a panel with the retrieved tags, \n * and select tags associated with a cultural asset if one is present. \n * \n * The main functionality of this class includes loading tags, inserting tags into the panel, \n * setting selected tags, and repainting the panel. \n * \n * This class also handles communication-related issues by catching RemoteExceptions and \n * printing stack traces for debugging purposes. \n * \n * Note: This class extends a superclass named \"New Cultural Heritage\" and sets a frame icon. \n */\npublic class TagManagerPanel extends JPanel {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a dialog window for entering a new cultural asset. It allows the user to input data related to a cultural heritage site and submit it to the server for storage.\n * The main functionalities of this class include:\n * - Displaying a form for entering data about a new cultural asset\n * - Communicating with the server to load necessary data and submit the new asset information\n * - Handling errors in case of communication failure with the server\n * \n * The overall behavior of this class is as follows:\n * - Upon opening the dialog window, it establishes a connection with the server and loads necessary data such as tags for the cultural asset\n * - The user can input information about the new cultural asset in the form provided\n * - If there is a communication error with the server, an error message is displayed and the dialog window is closed\n * - The user can submit the entered data to the server for storage\n * \n * This class extends JInternalFrame and implements functionality for entering a new cultural asset. It contains methods for loading tags, setting up remote objects for server communication, and handling dialog closure events.\n */\n \npublic class NewCulturalAssetDialog extends JInternalFrame {\n    // Class variables and components\n    private Vector<String> suggestions;\n    private ParentClass parent;\n    private CulturalAsset bc;\n    private JPanel jContentPane;\n    private JTabbedPane jTabbedPane;\n    \n    /**\n     * Constructor for the NewCulturalAssetDialog class. Initializes the dialog window with necessary components and sets up server communication.\n     * @param pParent The parent class reference\n     */\n    public NewCulturalAssetDialog(ParentClass pParent) {\n        // Set dialog properties\n        setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"nuovoBC.png\")));\n        setClosable(true);\n        setResizable(false);\n        setIconifiable(true);\n        setSize(600, 560);\n        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\n        \n        // Initialize variables and components\n        suggestions = new Vector<>();\n        parent = pParent;\n        bc = null;\n        \n        // Initialize the content pane\n        jContentPane = new JPanel();\n        jContentPane.setLayout(new BorderLayout());\n        jContentPane.add(getToolbarSchedaBC(), BorderLayout.CENTER);\n        \n        jTabbedPane = new JTabbedPane();\n        jTabbedPane.addTab(\"Data Cultural Heritage\", new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"dati.png\")), getDatiBCForm(), null);\n        jContentPane.add(jTabbedPane, BorderLayout.CENTER);\n        \n        setContentPane(jContentPane);\n        \n        // Dialog closure to close the entry window\n        addInternalFrameListener(new InternalFrameAdapter() {\n            @Override\n            public void internalFrameOpened(InternalFrameEvent pEvent) {\n                JInternalFrame frame = (JInternalFrame) pEvent.getInternalFrame();\n                \n                // Setting up of remote objects for the management of cultural heritage\n                try {\n                    Registry reg = LocateRegistry.getRegistry(Home.HOST);\n                    tags = (IGestioneTagComune) reg.lookup(\"GestioneTagComune\");\n                    gestioneBC = (IGestioneBeniCulturaliAgenzia) reg.lookup(\"GestioneBeniCulturaliAgenzia\");\n                    \n                    // Load data\n                    caricaTags();\n                } catch (Exception ex) {\n                    JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Card for entering a new cultural asset will be closed. </u> </h3>\" + \"<p> <b> Possible Causes: </b>\" + \"<ul> <li> No connection to the network. </li>\" + \"<li> Server inactive. </li>\" + \"<li> Server clogged. </li> </ul>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\n                    ImageIcon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\n                    // Display error message\n                }\n            }\n        });\n    }\n    \n    // Other methods and functionalities can be added here\n}\n**/\n/**\n * This class represents a SchedaBC object, which is used for managing cultural assets in a cultural heritage application.\n * It contains methods for creating, modifying, and saving cultural assets, as well as handling the closing of internal frames.\n * The class extends a parent frame and initializes various components such as buttons and dialog boxes.\n * \n * The default constructor initializes the interface model for creating a new cultural object.\n * \n * The main functionalities of this class include:\n * - Displaying error messages using JOptionPane.showMessageDialog\n * - Handling the closing of internal frames with a confirmation dialog\n * - Setting up remote objects for managing cultural heritage data\n * - Loading data for cultural assets\n * - Initializing buttons for modifying, saving, and clearing data\n * \n * Overall, this class provides a user interface for managing cultural assets and ensures data integrity by handling closing events appropriately.\n */\npublic SchedaBC(Beniculturali) {\n    // Initialize the content pane\n    // Dialog closure to close the entry window.\n    // Setting up of remote objects for the management of cultural heritage.\n    // Load data.\n    // Initialize button\n}\n*/\n/**\n * This class represents a frame for managing cultural heritage assets. It sets the size of the frame to 600x560 pixels and sets the default close operation to DO_NOTHING_ON_CLOSE.\n * The constructor initializes the suggestions vector, sets the parent frame, and initializes the bc object to null.\n * The content pane is initialized with a toolbar and a tabbed pane containing the form for entering data about the cultural heritage.\n * An internal frame listener is added to handle the opening and closing events of the frame.\n * When the frame is opened, it establishes communication with remote objects for managing cultural heritage and loads data.\n * If an error occurs during communication, an error message is displayed and the frame is closed.\n * When the frame is closing, a confirmation dialog is shown to confirm the cancellation of creating a new cultural asset.\n * If confirmed, the parent frame is notified to close the SchedaBC instance.\n * Additionally, the constructor initializes the visibility and text of buttons for modifying, saving, and clearing data.\n * @param pParent the parent frame for the SchedaBC instance\n */\npublic SchedaBC(Beniculturali pbc, BeanBeneCulturale pbc, boolean pModifica) {\n    super();\n    setFrameIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"scheda.png\"));\n    setClosable(true);\n    setResizable(false);\n    setIconifiable(true);\n    setSize(600, 560);\n    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\n    \n    // Initialize instance variables\n    bc = pbc;\n    this.parent = pParent;\n    suggestions = new Vector<>();\n    initializeSchedaBC();\n    \n    if (pModifica) {\n        // Are we changing the cultural property.\n        btnModifica.setSelected(true);\n        btnSalva.setVisible(true);\n        btnAnnulla.setVisible(true);\n        btnAnnulla.setText(\"Reset\");\n    } else {\n        // We're viewing the tab of a cultural object.\n        mostraNascondiSuggerimenti();\n        attivaDisattivaEdit();\n    }\n}\n*/\n/**\n * The SchedaBC class is responsible for modifying data and displaying the tab of a cultural object.\n * \n * @param pbc - the bean contains the data of the selected cultural.\n * @param pModifica \n *      true - the fields will be editable, allowing for the modification of the data of a cultural object.\n *      false - the fields will not be editable, displaying the tab of a cultural object.\n * \n * This class initializes instance variables and provides functionalities for modifying and displaying cultural object data.\n * It constructs a new SchedaBC object with the specified parameters, including the Beniculturali object associated with the cultural property, the parent object, and a boolean indicating whether the cultural property is being modified.\n * The constructor sets the frame icon, size, and various properties, initializes instance variables, and calls the initializeSchedaBC method.\n * If pModifica is true, it sets the appropriate buttons visible and selected for modifying the cultural property. Otherwise, it displays the tab of the cultural object and activates editing functionalities.\n */\n*/\n/**\n * The posGeoX class represents a graphical user interface for managing cultural assets. \n * It provides functionalities for adding, editing, and deleting cultural assets, as well as viewing statistics and feedback related to them.\n * \n * The main components of the class include text fields and combo boxes for entering information about the cultural asset, \n * a tag panel for managing tags associated with the asset, and a table for displaying feedback from users.\n * \n * The class also includes methods for calculating and displaying statistics on the cultural assets, such as average rating and monthly visits.\n * \n * Overall, the posGeoX class serves as a comprehensive tool for managing and analyzing cultural assets within a cultural heritage agency.\n */"
    }
]