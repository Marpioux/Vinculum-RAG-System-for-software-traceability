[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    // Variable for the connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    // Variable for the query results\r\n    ResultSet result = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query for the extraction of location between the PR and BC\r\n        String query = \"(SELECT DISTINCT Location FROM beneculturale) UNION (SELECT DISTINCT Location FROM puntodiristoro)\";\r\n        // The query is executed\r\n        result = stat.executeQuery(query);\r\n        // List that includes the results obtained\r\n        ArrayList<String> list = new ArrayList<>();\r\n        while (result.next()) {\r\n            // Add to the list the locations obtained\r\n            list.add(result.getString(\"Location\"));\r\n        }\r\n        return list;\r\n    } finally {\r\n        // Always runs and takes care to close the Result, the Statement, and Connection\r\n        if (result != null) {\r\n            result.close();\r\n        }\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public ArrayList<String> ottieniListaLocalita()",
                "comments": null,
                "innerComments": "Optional[[// Variable for the connection\r\n, // Variable for the query\r\n, // Variable for the query results\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query for the extraction of location between the PR and BC\r\n, // The query is executed\r\n, // List that includes the results obtained\r\n, // Add to the list the locations obtained\r\n, // Always runs and takes care to close the Result, the Statement, and Connection\r\n]]",
                "generated_comment": "/**\n * This method retrieves a list of unique locations from the tables \"beneculturale\" and \"puntodiristoro\" in the database.\n * The locations are extracted by executing a query that combines the distinct locations from both tables.\n * \n * @return An ArrayList of Strings containing the unique locations extracted from the database tables.\n * \n * @throws SQLException if a database access error occurs\n */"
            },
            {
                "body": "Optional[{\r\n    // Variable for the connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    // Variable for the query results\r\n    ResultSet result = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query to extract the average of the votes of catering outlets according to a Passo\r\n        String query = \"SELECT avg(MediaVoti) AS MediaVoti FROM puntodiristoro WHERE Location = '\" + plocalita + \"'\";\r\n        // The query is executed\r\n        result = stat.executeQuery(query);\r\n        // We extract the results from the result set\r\n        double point = 0.0;\r\n        if (result.next()) {\r\n            point = result.getDouble(\"MediaVoti\");\r\n        }\r\n        // Query to extract the average of the votes of cultural according to a Passo\r\n        query = \"SELECT avg(MediaVoti) AS MediaVoti FROM beneculturale WHERE Location = '\" + plocalita + \"'\";\r\n        // The query is executed\r\n        result = stat.executeQuery(query);\r\n        // We extract the results from the result set\r\n        double good = 0.0;\r\n        if (result.next()) {\r\n            good = result.getDouble(\"MediaVoti\");\r\n        }\r\n        // It returns the average of the refreshment and heritage\r\n        return (good + point) / 2;\r\n    } finally {\r\n        // Always runs and takes care to close the Result, the Statement, and Connection\r\n        if (result != null) {\r\n            result.close();\r\n        }\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public double ottieniMedieVotiLocalita(String)",
                "comments": null,
                "innerComments": "Optional[[// Variable for the connection\r\n, // Variable for the query\r\n, // Variable for the query results\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query to extract the average of the votes of catering outlets according to a Passo\r\n, // The query is executed\r\n, // We extract the results from the result set\r\n, // Query to extract the average of the votes of cultural according to a Passo\r\n, // The query is executed\r\n, // We extract the results from the result set\r\n, // It returns the average of the refreshment and heritage\r\n, // Always runs and takes care to close the Result, the Statement, and Connection\r\n]]",
                "generated_comment": "/**\n * This method retrieves the average of the votes for catering outlets and cultural heritage sites in a specific location.\n * \n * @param plocalita The location for which to retrieve the average votes.\n * @return The average of the votes for catering outlets and cultural heritage sites in the specified location.\n * @throws SQLException If an error occurs while executing the SQL queries.\n */ \npublic double ottieniMedieVotiLocalita(String plocalita) throws SQLException {\n    // Method body\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public DBStatisticheLocalita()",
                "comments": "Optional[// Empty constructor\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This is the default constructor for the DBStatisticheLocalita class.\n * It initializes a new instance of DBStatisticheLocalita with no parameters.\n * \n * Parameters:\n * None\n * \n * Behavior:\n * Creates a new DBStatisticheLocalita object with default values for its fields.\n */"
            }
        ],
        "signature": "DBStatisticheLocalita",
        "variables": [],
        "generated_class_comment": "/**\n * The DBStatisticheLocalita class provides methods to retrieve statistical data related to locations from the database.\n * It includes functionalities to obtain a list of unique locations from the \"beneculturale\" and \"puntodiristoro\" tables,\n * as well as to calculate the average votes for catering outlets and cultural heritage sites in a specific location.\n * \n * The class contains a default constructor that initializes a new instance of DBStatisticheLocalita with no parameters.\n * \n * Methods:\n * 1. public ArrayList<String> ottieniListaLocalita()\n *    - Retrieves a list of unique locations from the \"beneculturale\" and \"puntodiristoro\" tables in the database.\n *    - Returns an ArrayList of Strings containing the unique locations.\n *    - Throws SQLException if a database access error occurs.\n * \n * 2. public double ottieniMedieVotiLocalita(String plocalita) throws SQLException\n *    - Retrieves the average votes for catering outlets and cultural heritage sites in a specific location.\n *    - Parameter plocalita: The location for which to retrieve the average votes.\n *    - Returns the average of the votes for catering outlets and cultural heritage sites in the specified location.\n *    - Throws SQLException if an error occurs while executing the SQL queries.\n * \n * Behavior:\n * - The class manages database connections, executes SQL queries, and processes query results.\n * - It ensures proper resource management by closing connections, statements, and result sets in a finally block.\n */"
    }
]