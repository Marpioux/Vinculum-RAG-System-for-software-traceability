[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query cancellation\r\n        String query = \"DELETE FROM courses WHERE ID =\" + pIdPiatto;\r\n        // You run the query Cancellation\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the Connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean cancellaPiatto(int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query cancellation\r\n, // You run the query Cancellation\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the Connection\r\n]]",
                "generated_comment": "/**\n * Deletes a dish from the database based on its ID.\n * \n * @param pIdPiatto the ID of the dish to be deleted\n * @return true if the dish was successfully deleted, false otherwise\n * \n * This method connects to the database, creates a Statement, and executes a DELETE query to remove the dish with the specified ID from the 'courses' table. \n * It returns true if the query was successful in deleting one row, indicating that the dish was deleted. \n * The method ensures that the Statement and Connection are properly closed after execution.\n */"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query for the insertion\r\n        String query = \"INSERT INTO courses (Name, Price, IdMenu) VALUES ('\" + pPiatto.getNome() + \"', \" + pPiatto.getPrezzo() + \", \" + pPiatto.getIdMenu() + \")\";\r\n        // You run the insert query\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the Connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean inserisciPiatto(BeanPiatto)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query for the insertion\r\n, // You run the insert query\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the Connection\r\n]]",
                "generated_comment": "/**\n * Inserts a new dish into the database.\n * \n * @param pPiatto the BeanPiatto object representing the dish to be inserted\n * @return true if the dish was successfully inserted, false otherwise\n * @throws SQLException if an error occurs while accessing the database\n */\npublic boolean inserisciPiatto(BeanPiatto pPiatto) {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query for the insertion\n        String query = \"INSERT INTO courses (Name, Price, IdMenu) VALUES ('\" + pPiatto.getNome() + \"', \" + pPiatto.getPrezzo() + \", \" + pPiatto.getIdMenu() + \")\";\n        // You run the insert query\n        int i = stat.executeUpdate(query);\n        // This returns the backup\n        return (i == 1);\n    } finally {\n        // Always runs and takes care of closing the Statement and the Connection\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query for amendment\r\n        String query = \"UPDATE courses SET Name = '\" + pPiatto.getNome() + \"', Price = \" + pPiatto.getPrezzo() + \", IdMenu = \" + pPiatto.getIdMenu() + \" WHERE Id =\" + pPiatto.getId();\r\n        // You run the query for Change\r\n        int i = stat.executeUpdate(query);\r\n        // This returns the backup\r\n        return (i == 1);\r\n    } finally {\r\n        // Always runs and takes care of closing the Statement and the Connection\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public boolean modificaPiatto(BeanPiatto)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query for amendment\r\n, // You run the query for Change\r\n, // This returns the backup\r\n, // Always runs and takes care of closing the Statement and the Connection\r\n]]",
                "generated_comment": "/**\n * Modifies a dish in the database based on the provided BeanPiatto object.\n * \n * @param pPiatto the BeanPiatto object containing the updated dish information\n * @return true if the dish was successfully modified, false otherwise\n * @throws SQLException if an error occurs while accessing the database\n */\npublic boolean modificaPiatto(BeanPiatto pPiatto) {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query for amendment\n        String query = \"UPDATE courses SET Name = '\" + pPiatto.getNome() + \"', Price = \" + pPiatto.getPrezzo() + \", IdMenu = \" + pPiatto.getIdMenu() + \" WHERE Id =\" + pPiatto.getId();\n        // You run the query for Change\n        int i = stat.executeUpdate(query);\n        // This returns the backup\n        return (i == 1);\n    } finally {\n        // Always runs and takes care of closing the Statement and the Connection\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    // Variables for database connection\r\n    Connection conn = null;\r\n    // Variable for the query\r\n    Statement stat = null;\r\n    // Variable for the query results\r\n    ResultSet result = null;\r\n    try {\r\n        // Get the connection\r\n        conn = DBConnessionePool.ottieniConnessione();\r\n        // Create the Statement\r\n        stat = conn.createStatement();\r\n        // Query to extract the list of dishes given the id of the Menu\r\n        String query = \"SELECT * FROM courses WHERE IdMenu =\" + pIdMenu;\r\n        // The query is executed\r\n        result = stat.executeQuery(query);\r\n        // List that contains all the plates obtained\r\n        ArrayList<BeanPiatto> list = new ArrayList<BeanPiatto>();\r\n        // We extract the results from the result set and moves in List\r\n        // To be returned\r\n        while (result.next()) {\r\n            // Add the list BeanPiatto\r\n            list.add(new BeanPiatto(result.getInt(\"Price\"), result.getString(\"Name\"), result.getInt(\"IdMenu\"), result.getInt(\"Id\")));\r\n        }\r\n        return list;\r\n    } finally {\r\n        // Always runs and takes care to close the Result, the Statement and Connection\r\n        if (result != null) {\r\n            result.close();\r\n        }\r\n        if (stat != null) {\r\n            stat.close();\r\n        }\r\n        if (conn != null) {\r\n            DBConnessionePool.rilasciaConnessione(conn);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public ArrayList<BeanPiatto> ottieniPiatto(int)",
                "comments": null,
                "innerComments": "Optional[[// Variables for database connection\r\n, // Variable for the query\r\n, // Variable for the query results\r\n, // We extract the results from the result set and moves in List\r\n, // Get the connection\r\n, // Create the Statement\r\n, // Query to extract the list of dishes given the id of the Menu\r\n, // The query is executed\r\n, // List that contains all the plates obtained\r\n, // To be returned\r\n, // Add the list BeanPiatto\r\n, // Always runs and takes care to close the Result, the Statement and Connection\r\n]]",
                "generated_comment": "/**\n * Retrieves a list of dishes based on the given Menu ID.\n * \n * @param pIdMenu the ID of the Menu for which to retrieve the list of dishes\n * @return an ArrayList of BeanPiatto objects containing the dishes associated with the specified Menu ID\n * @throws SQLException if an error occurs while accessing the database\n */\npublic ArrayList<BeanPiatto> ottieniPiatto(int pIdMenu) throws SQLException {\n    // Variables for database connection\n    Connection conn = null;\n    // Variable for the query\n    Statement stat = null;\n    // Variable for the query results\n    ResultSet result = null;\n    try {\n        // Get the connection\n        conn = DBConnessionePool.ottieniConnessione();\n        // Create the Statement\n        stat = conn.createStatement();\n        // Query to extract the list of dishes given the id of the Menu\n        String query = \"SELECT * FROM courses WHERE IdMenu =\" + pIdMenu;\n        // The query is executed\n        result = stat.executeQuery(query);\n        // List that contains all the plates obtained\n        ArrayList<BeanPiatto> list = new ArrayList<BeanPiatto>();\n        // We extract the results from the result set and moves in List\n        // To be returned\n        while (result.next()) {\n            // Add the list BeanPiatto\n            list.add(new BeanPiatto(result.getInt(\"Price\"), result.getString(\"Name\"), result.getInt(\"IdMenu\"), result.getInt(\"Id\")));\n        }\n        return list;\n    } finally {\n        // Always runs and takes care to close the Result, the Statement and Connection\n        if (result != null) {\n            result.close();\n        }\n        if (stat != null) {\n            stat.close();\n        }\n        if (conn != null) {\n            DBConnessionePool.rilasciaConnessione(conn);\n        }\n    }\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public DBPiatto()",
                "comments": "Optional[// Empty constructor\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This is the default constructor for the DBPiatto class.\n * It creates a new instance of the DBPiatto class with no parameters.\n * \n * Parameters:\n * None\n * \n * Behavior:\n * - Initializes a new instance of the DBPiatto class with default values.\n */"
            }
        ],
        "signature": "DBPiatto",
        "variables": [],
        "generated_class_comment": "/**\n * The DBPiatto class provides methods for interacting with a database table that stores information about dishes.\n * It includes methods for deleting, inserting, modifying, and retrieving dishes from the database.\n * \n * Main functionalities:\n * - delete a dish from the database based on its ID\n * - insert a new dish into the database\n * - modify an existing dish in the database\n * - retrieve a list of dishes based on the given Menu ID\n * \n * Overall behavior:\n * - Each method establishes a database connection, creates a Statement, and executes a SQL query to perform the desired operation.\n * - The methods handle exceptions related to database access and ensure that resources such as Statements, Connections, and ResultSets are properly closed.\n * \n * Note: This class assumes the existence of a DBConnessionePool class for managing database connections.\n */\n*/"
    }
]