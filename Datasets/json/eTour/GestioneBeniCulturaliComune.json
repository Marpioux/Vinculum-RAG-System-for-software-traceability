[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    if (!ControlloBeniCulturali.controllaIdBeneCulturale(pBeneCulturaleID)) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    BeanBeneCulturale bbc = null;\r\n    try {\r\n        bbc = dbbc.ottieniBeneCulturale(pBeneCulturaleID);\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    return bbc;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public BeanBeneCulturale ottieniBeneCulturale(int)",
                "comments": "Optional[/**\r\n * Implements the method for obtaining a cultural object by Id\r\n *\r\n * @see unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune#ottieniBeneCulturale(int)\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Ottiene un bene culturale dal database tramite il suo ID.\n * \n * @param pBeneCulturaleID l'ID del bene culturale da ottenere\n * @return il BeanBeneCulturale corrispondente all'ID specificato\n * @throws RemoteException se l'ID del bene culturale non Ã¨ valido, se si verifica un errore nel database o se si verifica un errore sconosciuto\n */"
            },
            {
                "body": "Optional[{\r\n    if (!ControlloBeniCulturali.controllaIdBeneCulturale(pBeneCulturaleID)) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    ArrayList<BeanTag> btag = null;\r\n    try {\r\n        btag = dbtag.ottieniTagBeneCulturale(pBeneCulturaleID);\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    return btag;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public ArrayList<BeanTag> ottieniTagBeneCulturale(int)",
                "comments": "Optional[/**\r\n * Implements the method for obtaining all the tags of a cultural object.\r\n *\r\n * @see unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune#ottieniTagBeneCulturale(int)\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the list of tags associated with a cultural asset identified by the given ID.\n * \n * @param pBeneCulturaleID the ID of the cultural asset to retrieve tags for\n * @return an ArrayList of BeanTag objects representing the tags associated with the cultural asset\n * @throws RemoteException if the ID of the cultural asset is invalid, if there is an error accessing the database,\n * or if an unknown error occurs\n */\npublic ArrayList<BeanTag> ottieniTagBeneCulturale(int pBeneCulturaleID) {\n    if (!ControlloBeniCulturali.controllaIdBeneCulturale(pBeneCulturaleID)) {\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\n    }\n    ArrayList<BeanTag> btag = null;\n    try {\n        btag = dbtag.ottieniTagBeneCulturale(pBeneCulturaleID);\n    } catch (SQLException e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    } catch (Exception e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n    }\n    return btag;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (!ControlloBeniCulturali.controllaIdBeneCulturale(pBeneCulturaleID)) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    HashMap<BeanVisitaBC, String> mappaRitorno;\r\n    try {\r\n        // Instantiate the map of the same size as the list of BeanVisitaBC\r\n        mappaRitorno = new HashMap<>(dbvisita.ottieniListaVisitaBC(pBeneCulturaleID).size());\r\n        // For each visit by adding their username\r\n        for (BeanVisitaBC b : dbvisita.ottieniListaVisitaBC(pBeneCulturaleID)) {\r\n            mappaRitorno.put(b, dbturista.ottieniTurista(b.getIdTurista()).getUserName());\r\n        }\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    return mappaRitorno;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public HashMap<BeanVisitaBC, String> ottieniFeedbackBeneCulturale(int)",
                "comments": "Optional[/**\r\n * Implements the method to obtain the list of feedback and their username on a property\r\n * Cultural specified by Id\r\n *\r\n * @see unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune#ottieniFeedbackBeneCulturale(int)\r\n */\r\n]",
                "innerComments": "Optional[[// Instantiate the map of the same size as the list of BeanVisitaBC\r\n, // For each visit by adding their username\r\n]]",
                "generated_comment": "/**\n * Retrieves the feedback for a specific cultural asset identified by its ID.\n * \n * @param pBeneCulturaleID the ID of the cultural asset for which to retrieve feedback\n * @return a HashMap containing the feedback for each visit to the cultural asset, \n *         where the key is a BeanVisitaBC object representing the visit and the value is the username of the tourist\n * @throws RemoteException if the ID of the cultural asset is invalid, if there is an error accessing the database, \n *         or if an unknown error occurs\n */\npublic HashMap<BeanVisitaBC, String> ottieniFeedbackBeneCulturale(int pBeneCulturaleID) throws RemoteException {\n    if (!ControlloBeniCulturali.controllaIdBeneCulturale(pBeneCulturaleID)) {\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\n    }\n    HashMap<BeanVisitaBC, String> mappaRitorno;\n    try {\n        // Instantiate the map of the same size as the list of BeanVisitaBC\n        mappaRitorno = new HashMap<>(dbvisita.ottieniListaVisitaBC(pBeneCulturaleID).size());\n        // For each visit by adding their username\n        for (BeanVisitaBC b : dbvisita.ottieniListaVisitaBC(pBeneCulturaleID)) {\n            mappaRitorno.put(b, dbturista.ottieniTurista(b.getIdTurista()).getUserName());\n        }\n    } catch (SQLException e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    } catch (Exception e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n    }\n    return mappaRitorno;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (!ControlloBeniCulturali.controllaIdBeneCulturale(pBeneCulturaleID)) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    ArrayList<Integer> listaRisultati = new ArrayList<>(5);\r\n    // Set all the indices to 0\r\n    for (int i = 0; i < 5; i++) {\r\n        listaRisultati.add(0);\r\n    }\r\n    // Calculate the date for the last thirty days\r\n    Date ultimiTrentaGiorni = new Date(new Date().getTime() - CostantiGlobali.TRENTA_GIORNI);\r\n    try {\r\n        // Get all visits of a certain cultural\r\n        // Loop looking for the requests / feedback obtained within the last thirty days\r\n        for (BeanVisitaBC b : dbvisita.ottieniListaVisitaBC(pBeneCulturaleID)) {\r\n            if (b.getDataVisita().after(ultimiTrentaGiorni)) {\r\n                listaRisultati.set(b.getVoto() - 1, listaRisultati.get(b.getVoto() - 1) + 1);\r\n            }\r\n        }\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    return listaRisultati;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public ArrayList<Integer> ottieniStatisticheBeneCulturale(int)",
                "comments": "Optional[/**\r\n * Implements the method to obtain statistics about a cultural past\r\n * Through Id\r\n *\r\n * @see unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune#ottieniStatisticheBeneCulturale(int)\r\n */\r\n]",
                "innerComments": "Optional[[// Set all the indices to 0\r\n, // Calculate the date for the last thirty days\r\n, // Get all visits of a certain cultural\r\n, // Loop looking for the requests / feedback obtained within the last thirty days\r\n]]",
                "generated_comment": "/**\n * Retrieves statistics for a specific cultural asset based on the ratings received in the last thirty days.\n * \n * @param pBeneCulturaleID the ID of the cultural asset for which statistics are to be retrieved\n * @return an ArrayList<Integer> containing the number of ratings received for each rating category (1-5) in the last thirty days\n * @throws RemoteException if there is an error in the data, database, or an unknown error occurs\n */\npublic ArrayList<Integer> ottieniStatisticheBeneCulturale(int pBeneCulturaleID) throws RemoteException {\n    if (!ControlloBeniCulturali.controllaIdBeneCulturale(pBeneCulturaleID)) {\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\n    }\n    ArrayList<Integer> listaRisultati = new ArrayList<>(5);\n    // Set all the indices to 0\n    for (int i = 0; i < 5; i++) {\n        listaRisultati.add(0);\n    }\n    // Calculate the date for the last thirty days\n    Date ultimiTrentaGiorni = new Date(new Date().getTime() - CostantiGlobali.TRENTA_GIORNI);\n    try {\n        // Get all visits of a certain cultural asset\n        // Loop looking for the requests / feedback obtained within the last thirty days\n        for (BeanVisitaBC b : dbvisita.ottieniListaVisitaBC(pBeneCulturaleID)) {\n            if (b.getDataVisita().after(ultimiTrentaGiorni)) {\n                listaRisultati.set(b.getVoto() - 1, listaRisultati.get(b.getVoto() - 1) + 1);\n            }\n        }\n    } catch (SQLException e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    } catch (Exception e) {\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n    }\n    return listaRisultati;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (!ControlloBeniCulturali.controllaIdBeneCulturale(pBeneCulturaleID) || !ControlloVisiteBeniCulturali.controllaDatiVisitaBeneCulturale(pBeanVisitaBC)) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n    }\r\n    // Please check that the vote has not changed.\r\n    // If the vote is changed to an exception is raised\r\n    boolean votoOk = true;\r\n    try {\r\n        votoOk = dbvisita.ottieniVisitaBC(pBeneCulturaleID, pBeanVisitaBC.getIdTurista()).getVoto() == pBeanVisitaBC.getVoto();\r\n    } catch (SQLException e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // If the vote is not changed we proceed to send the message to the method of\r\n    // Change the layer's database.\r\n    if (votoOk) {\r\n        try {\r\n            return dbvisita.modificaVisitaBC(pBeanVisitaBC);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }\r\n    return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public boolean modificaFeedbackBeneCulturale(int, BeanVisitaBC)",
                "comments": "Optional[/**\r\n * Implement the method for changing a feedback on a cultural past\r\n * Through Id\r\n *\r\n * @see unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune#modificaFeedbackBeneCulturale(int, unisa.gps.etour.bean.BeanVisitaBC)\r\n */\r\n]",
                "innerComments": "Optional[[// Please check that the vote has not changed.\r\n, // If the vote is not changed we proceed to send the message to the method of\r\n, // If the vote is changed to an exception is raised\r\n, // Change the layer's database.\r\n]]",
                "generated_comment": "/**\n * Modifies the feedback of a cultural heritage site visit.\n * \n * This method checks if the provided cultural heritage site ID and visit data are valid.\n * If the data is not valid, an exception is thrown with an error message.\n * It then checks if the vote for the visit has changed. If the vote has changed, an exception is raised.\n * If the vote has not changed, the method proceeds to update the visit feedback in the database.\n * \n * @param pBeneCulturaleID the ID of the cultural heritage site to modify the feedback for\n * @param pBeanVisitaBC the BeanVisitaBC object containing the visit data to be modified\n * @return true if the visit feedback is successfully modified in the database, false otherwise\n * @throws RemoteException if there is an error with the data, database, or an unknown error occurs\n */\npublic boolean modificaFeedbackBeneCulturale(int pBeneCulturaleID, BeanVisitaBC pBeanVisitaBC) {\n    // method body\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    // Class Supercostruttore UnicastRemoteObject\r\n    super();\r\n    // We instantiate objects\r\n    try {\r\n        dbbc = new DBBeneCulturale();\r\n        dbtag = new DBTag();\r\n        dbvisita = new DBVisitaBC();\r\n        dbturista = new DBTurista();\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n}",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public GestioneBeniCulturaliComune()",
                "comments": "Optional[/**\r\n * Constructor; you instantiate all fields relevant to data management;\r\n * Fields are initialized for each instance of the class.\r\n *\r\n * @throws RemoteException Exception flow\r\n */\r\n]",
                "innerComments": "[// Class Supercostruttore UnicastRemoteObject\r\n, // We instantiate objects\r\n]",
                "generated_comment": "/**\n * Constructor for the GestioneBeniCulturaliComune class.\n * This constructor initializes the class by instantiating objects for managing cultural assets, tags, visits, and tourists.\n * It also calls the super constructor from the UnicastRemoteObject class.\n * \n * @throws RemoteException if an error occurs during the instantiation of the database objects\n */"
            }
        ],
        "signature": "GestioneBeniCulturaliComune",
        "variables": [
            "protected IDBBeneCulturale dbbc",
            "protected IDBTag dbtag",
            "protected IDBVisitaBC dbvisita",
            "protected IDBTurista dbturista"
        ],
        "generated_class_comment": "/**\n * The GestioneBeniCulturaliComune class is responsible for managing cultural assets, tags, visits, and tourists.\n * It provides methods for obtaining information about cultural assets, such as retrieving a cultural object by ID,\n * obtaining all tags associated with a cultural object, retrieving feedback and usernames for a cultural asset,\n * and obtaining statistics based on ratings received in the last thirty days for a cultural asset.\n * Additionally, it includes a method for modifying the feedback of a cultural heritage site visit.\n * \n * This class initializes database objects for managing cultural assets, tags, visits, and tourists.\n * It extends the UnicastRemoteObject class and handles RemoteExceptions that may occur during database operations.\n * \n * @author [Author Name]\n * @version 1.0\n * @see unisa.gps.etour.control.GestioneBeniCulturali.IGestioneBeniCulturaliComune\n */"
    }
]