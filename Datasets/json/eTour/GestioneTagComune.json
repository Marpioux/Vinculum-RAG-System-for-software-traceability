[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    // ArrayList to fill with the tags to return\r\n    ArrayList<BeanTag> toReturn;\r\n    // Retrieve data from Database\r\n    try {\r\n        // Get the information from the Database\r\n        toReturn = tag.ottieniListaTag();\r\n    } catch (SQLException e) {\r\n        System.out.println(\"Error in method ottieniTags: \" + e.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n    } catch (Exception ee) {\r\n        System.out.println(\"Error in method ottieniTags: \" + ee.toString());\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n    // Check the data back in order not to return null values\r\n    if (toReturn == null) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n    }\r\n    return toReturn;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public ArrayList<BeanTag> ottieniTags()",
                "comments": "Optional[// Method that returns all tags\r\n]",
                "innerComments": "Optional[[// ArrayList to fill with the tags to return\r\n, // Retrieve data from Database\r\n, // Get the information from the Database\r\n, // Check the data back in order not to return null values\r\n]]",
                "generated_comment": "/**\n * Retrieves a list of tags from the database.\n * \n * @return An ArrayList of BeanTag objects representing the tags retrieved from the database.\n * @throws RemoteException if there is an error accessing the database or if the data retrieved is null.\n */\npublic ArrayList<BeanTag> ottieniTags() {\n    // ArrayList to fill with the tags to return\n    ArrayList<BeanTag> toReturn;\n    \n    // Retrieve data from Database\n    try {\n        // Get the information from the Database\n        toReturn = tag.ottieniListaTag();\n    } catch (SQLException e) {\n        System.out.println(\"Error in method ottieniTags: \" + e.toString());\n        throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n    } catch (Exception ee) {\n        System.out.println(\"Error in method ottieniTags: \" + ee.toString());\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n    }\n    \n    // Check the data back in order not to return null values\n    if (toReturn == null) {\n        throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\n    }\n    \n    return toReturn;\n}\n*/"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super();\r\n    // Connect to the Database\r\n    try {\r\n        tag = new DBTag();\r\n    } catch (Exception e) {\r\n        throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n    }\r\n}",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public GestioneTagComune()",
                "comments": null,
                "innerComments": "[// Connect to the Database\r\n]",
                "generated_comment": "/**\n * Constructs a new instance of GestioneTagComune.\n * This constructor initializes the object by connecting to the database and creating a new instance of DBTag.\n * If an exception occurs during the database connection or creation of DBTag, a RemoteException with an error message is thrown.\n */"
            }
        ],
        "signature": "GestioneTagComune",
        "variables": [
            "private  static  final long serialVersionUID",
            "protected IDBTag tag"
        ],
        "generated_class_comment": "/**\n * The GestioneTagComune class represents a utility class for managing tags in a common context.\n * It provides methods for retrieving a list of tags from the database and handles database connections.\n * \n * This class includes the following main functionalities:\n * - Retrieving a list of tags from the database using the ottieniTags method\n * - Connecting to the database and initializing the DBTag object in the constructor\n * \n * The GestioneTagComune class maintains the following variables:\n * - serialVersionUID: a static final long variable for serialization purposes\n * - tag: an IDBTag object for interacting with the database and retrieving tag data\n * \n * This class is designed to facilitate tag management operations and ensure data integrity.\n * If any exceptions occur during database operations or object initialization, a RemoteException with an appropriate error message is thrown.\n */\npublic class GestioneTagComune {\n    private static final long serialVersionUID;\n    protected IDBTag tag;\n    \n    /**\n     * Constructs a new instance of GestioneTagComune.\n     * This constructor initializes the object by connecting to the database and creating a new instance of DBTag.\n     * If an exception occurs during the database connection or creation of DBTag, a RemoteException with an error message is thrown.\n     */\n    public GestioneTagComune() {\n        super();\n        // Connect to the Database\n        try {\n            tag = new DBTag();\n        } catch (Exception e) {\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n        }\n    }\n    \n    /**\n     * Retrieves a list of tags from the database.\n     * \n     * @return An ArrayList of BeanTag objects representing the tags retrieved from the database.\n     * @throws RemoteException if there is an error accessing the database or if the data retrieved is null.\n     */\n    public ArrayList<BeanTag> ottieniTags() {\n        // ArrayList to fill with the tags to return\n        ArrayList<BeanTag> toReturn;\n        \n        // Retrieve data from Database\n        try {\n            // Get the information from the Database\n            toReturn = tag.ottieniListaTag();\n        } catch (SQLException e) {\n            System.out.println(\"Error in method ottieniTags: \" + e.toString());\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\n        } catch (Exception ee) {\n            System.out.println(\"Error in method ottieniTags: \" + ee.toString());\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\n        }\n        \n        // Check the data back in order not to return null values\n        if (toReturn == null) {\n            throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\n        }\n        \n        return toReturn;\n    }\n}\n*/"
    }
]