[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    SIZE = new Dimension(700, 480);\r\n    setPreferredSize(SIZE);\r\n    this.setSize(new Dimension(700, 480));\r\n    this.setResizable(true);\r\n    this.setClosable(true);\r\n    this.setTitle(\"Refreshments\");\r\n    this.setFrameIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/images/PR.png\")));\r\n    this.setIconifiable(true);\r\n    this.setMaximizable(true);\r\n    this.setContentPane(getJContentPane());\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void initialize()",
                "comments": "Optional[/**\r\n * This method initializes this.\r\n *\r\n * @return void\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Initializes the Refreshments frame by setting its size, preferred size, resizable, closable, title, frame icon, iconifiable, maximizable, and content pane.\n * \n * @param none\n * @return void\n */\nprivate void initialize() {\n    SIZE = new Dimension(700, 480);\n    setPreferredSize(SIZE);\n    this.setSize(new Dimension(700, 480));\n    this.setResizable(true);\n    this.setClosable(true);\n    this.setTitle(\"Refreshments\");\n    this.setFrameIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/images/PR.png\")));\n    this.setIconifiable(true);\n    this.setMaximizable(true);\n    this.setContentPane(getJContentPane());\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (jContentPane == null) {\r\n        jContentPane = new JPanel();\r\n        jContentPane.setLayout(new BorderLayout());\r\n        jContentPane.add(getRightPanel(), BorderLayout.EAST);\r\n        jContentPane.add(getToolbarPR(), BorderLayout.NORTH);\r\n        jContentPane.add(getCentrePanel(), BorderLayout.CENTER);\r\n    }\r\n    return jContentPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getJContentPane()",
                "comments": "Optional[/**\r\n * This method initializes jContentPane.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the content pane for the GUI, creating it if necessary.\n * This method initializes the content pane by adding the right panel to the east,\n * the toolbar panel to the north, and the center panel to the center.\n * \n * @return the content pane for the GUI\n */"
            },
            {
                "body": "Optional[{\r\n    if (rightPanel == null) {\r\n        rightPanel = new JPanel();\r\n        rightPanel.setLayout(new BorderLayout());\r\n        rightPanel.add(getHelpPanel(), BorderLayout.CENTER);\r\n        rightPanel.add(getRicercaPanel(), BorderLayout.CENTER);\r\n    }\r\n    return rightPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getRightPanel()",
                "comments": "Optional[/**\r\n * This method initializes rightPanel.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the right panel of the application, creating it if it doesn't already exist.\n * The right panel contains the help panel and the search panel.\n * \n * @return the right panel of the application\n */"
            },
            {
                "body": "Optional[{\r\n    if (toolbarPR == null) {\r\n        toolbarPR = new JToolBar();\r\n        toolbarPR.setLayout(null);\r\n        toolbarPR.setPreferredSize(new Dimension(1, 49));\r\n        toolbarPR.setFloatable(false);\r\n        toolbarPR.add(getBtnAttiva());\r\n        toolbarPR.addSeparator();\r\n        toolbarPR.add(getBtnStorico());\r\n        toolbarPR.addSeparator();\r\n        toolbarPR.add(getBtnModifica());\r\n        toolbarPR.addSeparator();\r\n        toolbarPR.add(getBtnSkeda());\r\n        toolbarPR.addSeparator();\r\n        toolbarPR.add(getBtnElimina());\r\n    }\r\n    return toolbarPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JToolBar getToolbarPR()",
                "comments": "Optional[/**\r\n * This method initializes toolbarPR.\r\n *\r\n * @return javax.swing.JToolBar\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the toolbar for managing PR (Purchase Requests).\n * If the toolbar has not been initialized yet, it creates a new instance\n * and sets its layout, preferred size, and floatable property. \n * It then adds buttons for activating, viewing history, editing, \n * viewing details, and deleting PRs, separated by separators.\n * \n * @return the toolbar for managing PR\n */"
            },
            {
                "body": "Optional[{\r\n    if (centrePanel == null) {\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n        gridBagConstraints.weighty = 1.0;\r\n        gridBagConstraints.weightx = 1.0;\r\n        centrePanel = new JPanel();\r\n        centrePanel.setLayout(new GridBagLayout());\r\n        centrePanel.setPreferredSize(new Dimension(1, 30));\r\n        centrePanel.add(getJScrollPane(), gridBagConstraints);\r\n    }\r\n    return centrePanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getCentrePanel()",
                "comments": "Optional[/**\r\n * This method initializes centrePanel.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the centre panel of the GUI. If the centre panel has not been initialized yet, it creates a new JPanel with a GridBagLayout and adds a JScrollPane to it. \n * \n * @return the centre panel of the GUI\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnSkeda == null) {\r\n        btnSkeda = new JButton();\r\n        btnSkeda.setText(\"Point Card <html> <br> Refreshments </html>\");\r\n        btnSkeda.setLocation(new Point(16, 3));\r\n        btnSkeda.setSize(new Dimension(130, 42));\r\n        btnSkeda.setPreferredSize(new Dimension(130, 42));\r\n        btnSkeda.setIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/images/Browse1.png\")));\r\n        btnSkeda.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent arg0) {\r\n            }\r\n        });\r\n    }\r\n    return btnSkeda;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnSkeda()",
                "comments": "Optional[/**\r\n * This method initializes btnSkeda.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JButton object representing the \"Skeda\" button.\n * If the button has not been initialized yet, it creates a new JButton with specific properties:\n * - Text: \"Point Card <html> <br> Refreshments </html>\"\n * - Location: (16, 3)\n * - Size: 130x42 pixels\n * - Preferred size: 130x42 pixels\n * - Icon: Browse1.png from the resources folder\n * It also adds an ActionListener to the button, but the actionPerformed method is empty.\n * \n * @return the JButton object representing the \"Skeda\" button\n */"
            },
            {
                "body": "Optional[{\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It performs the necessary actions based on the event.\n * \n * @param e the ActionEvent object that triggered the method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnModifica == null) {\r\n        btnModifica = new JButton();\r\n        btnModifica.setText(\"<html> Edit Point <br> Refreshments </html>\");\r\n        btnModifica.setPreferredSize(new Dimension(130, 42));\r\n        btnModifica.setMnemonic(KeyEvent.VK_UNDEFINED);\r\n        btnModifica.setEnabled(false);\r\n        btnModifica.setBounds(new Rectangle(413, 3, 140, 42));\r\n        btnModifica.setIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/immagini/edit-32x32.png\")));\r\n    }\r\n    return btnModifica;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnModifica()",
                "comments": "Optional[/**\r\n * This method initializes btnModifica.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JButton used for modifying a point with the specified properties.\n * If the JButton has not been initialized yet, it creates a new JButton with the text \"<html> Edit Point <br> Refreshments </html>\",\n * a preferred size of 130x42, disabled state, and an icon of an edit symbol. \n * \n * @return the JButton used for modifying a point\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnElimina == null) {\r\n        btnElimina = new JButton();\r\n        btnElimina.setText(\"Delete item <html> <br> Refreshments </html>\");\r\n        btnElimina.setPreferredSize(new Dimension(130, 42));\r\n        btnElimina.setEnabled(false);\r\n        btnElimina.setMnemonic(KeyEvent.VK_UNDEFINED);\r\n        btnElimina.setBounds(new Rectangle(555, 3, 130, 42));\r\n        btnElimina.setIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/immagini/edit-delete-32x32.png\")));\r\n    }\r\n    return btnElimina;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnElimina()",
                "comments": "Optional[/**\r\n * This method initializes btnElimina.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JButton used for deleting items. If the button has not been initialized yet, it creates a new JButton with specific properties.\n * \n * @return the JButton used for deleting items\n */"
            },
            {
                "body": "Optional[{\r\n    if (jScrollPane == null) {\r\n        if (tablePr == null) {\r\n            BeanPuntoDiRistoro[] test = new BeanPuntoDiRistoro[30];\r\n            for (int i = 0; i < 30; i++) {\r\n                test[i] = new BeanPuntoDiRistoro(1, 12, 3.5, \"Arturo\", \"Near the sea, great view, romantic and Miao\", \"089203202\", \"the mountains\", \"Amalfi\", \"Via Principe 35\", \"84123\", \"Salerno\", \"1234567898741\", new Punto3D(34, 34, 34), new Date(2, 23, 3), new Date(3, 3, 4), \"Monday\");\r\n            }\r\n            SitoTableModel newSitoTableModel = new SitoTableModel(test);\r\n            tablePr = new ScrollableTable(newSitoTableModel);\r\n            // Name\r\n            tablePr.getColumnModel().getColumn(0).setPreferredWidth(140);\r\n            // Description\r\n            tablePr.getColumnModel().getColumn(1).setPreferredWidth(80);\r\n            // Location\r\n            tablePr.getColumnModel().getColumn(2).setPreferredWidth(140);\r\n            // City\r\n            tablePr.getColumnModel().getColumn(3).setPreferredWidth(80);\r\n            // State\r\n            tablePr.getColumnModel().getColumn(4).setPreferredWidth(70);\r\n            // Number of Votes\r\n            tablePr.getColumnModel().getColumn(5).setPreferredWidth(70);\r\n            // Average Ratings\r\n            tablePr.getColumnModel().getColumn(6).setPreferredWidth(60);\r\n            // PosGeo\r\n            tablePr.getColumnModel().getColumn(7).setPreferredWidth(30);\r\n            tablePr.setDefaultRenderer(String.class, new DefaultTableCellRenderer());\r\n            tablePr.setRowHeight(32);\r\n            tablePr.setShowVerticalLines(false);\r\n            tablePr.setDefaultRenderer(Double.class, new MediaVotiRenderer());\r\n            tablePr.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\r\n            tablePr.setSelectionForeground(Color.RED);\r\n            tablePr.setSelectionBackground(Color.white);\r\n            tablePr.setColumnSelectionAllowed(false);\r\n            final javax.swing.ListSelectionModel listSelectionModel = tablePr.getSelectionModel();\r\n            listSelectionModel.addListSelectionListener(new ListSelectionListener() {\r\n\r\n                public void valueChanged(ListSelectionEvent event) {\r\n                    btnElimina.setEnabled(true);\r\n                    btnModifica.setEnabled(true);\r\n                    btnAttiva.setEnabled(true);\r\n                    btnStorico.setEnabled(true);\r\n                }\r\n            });\r\n            tablePr.addKeyListener(new KeyListener() {\r\n\r\n                public void keyPressed(KeyEvent arg0) {\r\n                    System.out.println(\"keyPressed\");\r\n                }\r\n\r\n                public void keyReleased(KeyEvent arg0) {\r\n                    System.out.println(\"keyReleased\");\r\n                }\r\n\r\n                public void keyTyped(KeyEvent arg0) {\r\n                    System.out.println(\"keyTyped\");\r\n                }\r\n            });\r\n        }\r\n        jScrollPane = new JScrollPane(tablePr);\r\n        jScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n        jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n    }\r\n    return jScrollPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private JScrollPane getJScrollPane()",
                "comments": "Optional[/**\r\n * This method initializes jScrollPane.\r\n *\r\n * @return javax.swing.JScrollPane\r\n */\r\n]",
                "innerComments": "Optional[[// Name\r\n, // Description\r\n, // Location\r\n, // City\r\n, // State\r\n, // Number of Votes\r\n, // Average Ratings\r\n, // PosGeo\r\n]]",
                "generated_comment": "/**\n * This method returns a JScrollPane containing a table of restaurant data. If the JScrollPane has not been initialized yet, it creates a new table with 30 sample restaurant entries. Each entry includes information such as name, description, location, city, state, number of votes, average ratings, and geographical position. The table is customized with specific column widths and cell renderers. Listeners are added to enable selection and interaction with the table. If the JScrollPane has already been initialized, it simply returns the existing instance. \n * \n * @return a JScrollPane containing a table of restaurant data\n */"
            },
            {
                "body": "Optional[{\r\n    btnElimina.setEnabled(true);\r\n    btnModifica.setEnabled(true);\r\n    btnAttiva.setEnabled(true);\r\n    btnStorico.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void valueChanged(ListSelectionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Enables buttons for deleting, modifying, activating, and viewing historical data\n * when a value in the list selection changes.\n * \n * @param e the ListSelectionEvent that triggered the method\n */\npublic void valueChanged(ListSelectionEvent e) {\n    btnElimina.setEnabled(true);\n    btnModifica.setEnabled(true);\n    btnAttiva.setEnabled(true);\n    btnStorico.setEnabled(true);\n}"
            },
            {
                "body": "Optional[{\r\n    System.out.println(\"keyPressed\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void keyPressed(KeyEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when a key is pressed. It prints \"keyPressed\" to the console.\n * \n * @param e the KeyEvent object representing the key that was pressed\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    System.out.println(\"keyReleased\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void keyReleased(KeyEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when a key is released. It prints \"keyReleased\" to the console.\n * \n * @param e the KeyEvent object representing the key event that occurred\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    System.out.println(\"keyTyped\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void keyTyped(KeyEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when a key is typed on the keyboard. \n * \n * @param e the KeyEvent object representing the key event\n * \n * This method prints \"keyTyped\" to the console.\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (helpPanel == null) {\r\n        GridBagConstraints gridBagConstraints1 = new GridBagConstraints();\r\n        gridBagConstraints1.fill = GridBagConstraints.BOTH;\r\n        gridBagConstraints1.gridy = 0;\r\n        gridBagConstraints1.weightx = 1.0;\r\n        gridBagConstraints1.weighty = 1.0;\r\n        gridBagConstraints1.ipadx = 0;\r\n        gridBagConstraints1.gridwidth = 1;\r\n        gridBagConstraints1.ipady = 0;\r\n        gridBagConstraints1.gridx = 0;\r\n        helpPanel = new JPanel();\r\n        helpPanel.setLayout(new GridBagLayout());\r\n        helpPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 153, 255), 3), \"Help\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(51, 102, 255)));\r\n        helpPanel.setPreferredSize(new Dimension(100, 100));\r\n        helpPanel.add(getJTextPane(), gridBagConstraints1);\r\n    }\r\n    return helpPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getHelpPanel()",
                "comments": "Optional[/**\r\n * This method initializes helpPanel.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the help panel for the application. If the help panel has not been initialized yet, it creates a new JPanel with a titled border and adds a JTextPane to display help information.\n * \n * @return the help panel containing help information for the application\n */"
            },
            {
                "body": "Optional[{\r\n    if (jTextPane == null) {\r\n        jTextPane = new JTextPane();\r\n        jTextPane.setPreferredSize(new Dimension(6, 30));\r\n    }\r\n    return jTextPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextPane getJTextPane()",
                "comments": "Optional[/**\r\n * This method initializes jTextPane.\r\n *\r\n * @return javax.swing.JTextPane\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JTextPane component for displaying text. If the JTextPane has not been initialized yet, it will be created with a default preferred size of 6x30.\n * \n * @return the JTextPane component for displaying text\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnRicerca2 == null) {\r\n        btnRicerca2 = new JButton();\r\n        btnRicerca2.setPreferredSize(new Dimension(98, 26));\r\n        btnRicerca2.setText(\"Search\");\r\n        btnRicerca2.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/Ricerca16.png\")));\r\n    }\r\n    return btnRicerca2;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnRicerca2()",
                "comments": "Optional[/**\r\n * This method initializes btnRicerca2.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JButton used for searching.\n * If the button has not been initialized yet, it creates a new JButton with specific properties:\n * - Preferred size of 98x26 pixels\n * - Text \"Search\"\n * - Icon set to a predefined image\n * \n * @return the JButton used for searching\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnAzzera2 == null) {\r\n        btnAzzera2 = new JButton();\r\n        btnAzzera2.setPreferredSize(new Dimension(98, 26));\r\n        btnAzzera2.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/Azzera16.png\")));\r\n        btnAzzera2.setText(\"Clear\");\r\n        btnAzzera2.setHorizontalTextPosition(SwingConstants.LEADING);\r\n    }\r\n    return btnAzzera2;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnAzzera2()",
                "comments": "Optional[/**\r\n * This method initializes btnAzzera2.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JButton used to clear a specific field or form.\n * If the button has not been initialized yet, it creates a new JButton with specific properties.\n * \n * @return the JButton used for clearing\n */"
            },
            {
                "body": "Optional[{\r\n    if (ricercaPanel == null) {\r\n        GridBagConstraints gridBagConstraints5 = new GridBagConstraints();\r\n        gridBagConstraints5.fill = GridBagConstraints.BOTH;\r\n        gridBagConstraints5.gridy = 4;\r\n        gridBagConstraints5.weightx = 1.0;\r\n        gridBagConstraints5.weighty = 1.0;\r\n        gridBagConstraints5.gridwidth = 2;\r\n        gridBagConstraints5.gridx = 0;\r\n        GridBagConstraints gridBagConstraints8 = new GridBagConstraints();\r\n        gridBagConstraints8.gridwidth = 2;\r\n        gridBagConstraints8.insets = new Insets(5, 5, 5, 5);\r\n        GridBagConstraints gridBagConstraints7 = new GridBagConstraints();\r\n        gridBagConstraints7.gridx = 0;\r\n        gridBagConstraints7.insets = new Insets(5, 5, 5, 5);\r\n        gridBagConstraints7.gridy = 6;\r\n        GridBagConstraints gridBagConstraints6 = new GridBagConstraints();\r\n        gridBagConstraints6.gridx = 1;\r\n        gridBagConstraints6.gridwidth = 2;\r\n        gridBagConstraints6.insets = new Insets(5, 5, 5, 5);\r\n        gridBagConstraints6.gridy = 6;\r\n        GridBagConstraints gridBagConstraints4 = new GridBagConstraints();\r\n        gridBagConstraints4.gridx = 0;\r\n        gridBagConstraints4.gridwidth = 2;\r\n        gridBagConstraints4.insets = new Insets(5, 5, 5, 5);\r\n        gridBagConstraints4.gridy = 3;\r\n        labelTag = new JLabel();\r\n        labelTag.setText(\"Select search tags:\");\r\n        GridBagConstraints gridBagConstraints3 = new GridBagConstraints();\r\n        gridBagConstraints3.fill = GridBagConstraints.VERTICAL;\r\n        gridBagConstraints3.gridx = 0;\r\n        gridBagConstraints3.gridy = 2;\r\n        gridBagConstraints3.gridwidth = 2;\r\n        gridBagConstraints3.insets = new Insets(5, 5, 5, 5);\r\n        gridBagConstraints3.weightx = 1.0;\r\n        labelPr = new JLabel();\r\n        labelPr.setText(\"Name Refreshments:\");\r\n        ricercaPanel = new JPanel();\r\n        ricercaPanel.setLayout(new GridBagLayout());\r\n        ricercaPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 153, 255), 3), \"Searching for refreshments:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(51, 102, 255)));\r\n        ricercaPanel.add(labelPr, gridBagConstraints8);\r\n        ricercaPanel.add(getNomePR(), gridBagConstraints3);\r\n        ricercaPanel.add(labelTag, gridBagConstraints4);\r\n        BeanTag[] test = new BeanTag[8];\r\n        test[0] = new BeanTag(0, \"castle\", \"really a castle\");\r\n        test[1] = new BeanTag(1, \"stronghold\", \"really a hostel\");\r\n        test[2] = new BeanTag(3, \"Pub\", \"really a basket\");\r\n        test[3] = new BeanTag(4, \"Restaurant\", \"really a basket\");\r\n        test[4] = new BeanTag(5, \"Pizza\", \"really a basket\");\r\n        test[5] = new BeanTag(6, \"Trattoria\", \"really a basket\");\r\n        test[6] = new BeanTag(7, \"range\", \"really a basket\");\r\n        test[7] = new BeanTag(8, \"Romantic\", \"really a basket\");\r\n        pannelloTag = new TagPanel(test);\r\n        pannelloTag.setPreferredSize(new Dimension(180, 40));\r\n        ricercaPanel.add(getBtnAzzera2(), gridBagConstraints6);\r\n        ricercaPanel.add(getBtnRicerca2(), gridBagConstraints7);\r\n        ricercaPanel.add(pannelloTag, gridBagConstraints5);\r\n    }\r\n    return ricercaPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getRicercaPanel()",
                "comments": "Optional[/**\r\n * This method initializes ricercaPanel.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JPanel containing components for searching for refreshments. If the ricercaPanel is null, it creates and initializes the JPanel with labels, text fields, buttons, and a TagPanel for selecting search tags. The JPanel is laid out using GridBagLayout with specific GridBagConstraints for each component. The method also populates the TagPanel with predefined BeanTag objects. \n * \n * @return the JPanel for searching refreshments\n */"
            },
            {
                "body": "Optional[{\r\n    if (nomePR == null) {\r\n        nomePR = new JTextField();\r\n        nomePR.setColumns(12);\r\n    }\r\n    return nomePR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getNomePR()",
                "comments": "Optional[/**\r\n * This method initializes nomePR.\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JTextField object for entering the name of a PR (Pull Request).\n * If the JTextField object has not been initialized yet, it will create a new JTextField\n * with a column size of 12 and return it.\n * \n * @return the JTextField object for entering the name of a PR\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnAttiva == null) {\r\n        btnAttiva = new JButton();\r\n        btnAttiva.setText(\"Enable <html> <br> Convention </html>\");\r\n        btnAttiva.setPreferredSize(new Dimension(130, 42));\r\n        btnAttiva.setSize(new Dimension(130, 42));\r\n        btnAttiva.setLocation(new Point(280, 3));\r\n        btnAttiva.setMnemonic(KeyEvent.VK_UNDEFINED);\r\n        btnAttiva.setEnabled(false);\r\n        btnAttiva.setIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/immagini/wi0054-32x32.png\")));\r\n    }\r\n    return btnAttiva;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnAttiva()",
                "comments": "Optional[/**\r\n * This method initializes btnAttiva.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the JButton used to enable a specific convention.\n * If the button has not been initialized yet, it creates a new JButton with specific properties:\n * - Text: \"Enable <html> <br> Convention </html>\"\n * - Preferred size: 130x42\n * - Location: (280, 3)\n * - Mnemonic key: undefined\n * - Enabled: false\n * - Icon: \"/interfacceAgenzia/immagini/wi0054-32x32.png\"\n * \n * @return the JButton used to enable a specific convention\n */"
            },
            {
                "body": "Optional[{\r\n    if (btnStorico == null) {\r\n        btnStorico = new JButton();\r\n        btnStorico.setText(\"Historical <html> <br> Conventions </html>\");\r\n        btnStorico.setPreferredSize(new Dimension(130, 42));\r\n        btnStorico.setBounds(new Rectangle(148, 3, 130, 42));\r\n        btnStorico.setEnabled(false);\r\n        btnStorico.setIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/images/Browse1.png\")));\r\n        btnStorico.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent e) {\r\n                new StoricoConvenzioni();\r\n            }\r\n        });\r\n    }\r\n    return btnStorico;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnStorico()",
                "comments": "Optional[/**\r\n * This method initializes btnStorico.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JButton object representing the \"Historical Conventions\" button.\n * If the button has not been initialized yet, it creates a new JButton with specific properties:\n * - Text: \"Historical <html> <br> Conventions\"\n * - Preferred size: 130 x 42\n * - Bounds: (148, 3, 130, 42)\n * - Disabled state\n * - Icon: Browse1.png\n * When the button is clicked, it opens a new StoricoConvenzioni window.\n * \n * @return the JButton object representing the \"Historical Conventions\" button\n */"
            },
            {
                "body": "Optional[{\r\n    new StoricoConvenzioni();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It creates a new instance of the StoricoConvenzioni class.\n * \n * @param e the ActionEvent that triggered the method\n * @return void\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super();\r\n    initialize();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PuntiDiRistoro()",
                "comments": "Optional[/**\r\n * This is the default constructor.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new instance of the PuntiDiRistoro class.\n * This constructor initializes the object by calling the superclass constructor and then\n * calling the initialize method to set up the object's initial state.\n */"
            }
        ],
        "signature": "PuntiDiRistoro",
        "variables": [
            "private Dimension SIZE",
            "private JPanel jContentPane",
            "private JPanel rightPanel",
            "private JToolBar toolbarPR",
            "private JLabel status",
            "private JPanel centrePanel",
            "private JButton btnSkeda",
            "private JButton btnModifica",
            "private JButton btnElimina",
            "private JScrollPane jScrollPane",
            "private JPanel helpPanel",
            "private JTextPane jTextPane",
            "private JScrollPane pannelloTag",
            "private JButton btnRicerca2",
            "private JButton btnAzzera2",
            "private JPanel ricercaPanel",
            "private JLabel labelPr",
            "private JTextField nomePR",
            "private JLabel labelTag",
            "private JTable tablePr",
            "private JDesktopPane jDesktopPane",
            "private PuntiDiRistoro internalFrame",
            "private JButton btnAttiva",
            "private JButton btnStorico"
        ],
        "generated_class_comment": "/**\n * The PuntiDiRistoro class represents a frame for managing refreshments in a GUI application.\n * This class includes various components such as panels, buttons, text fields, and tables to facilitate the management of refreshment data.\n * The frame is initialized with a specific size, title, icon, and content pane layout to provide a user-friendly interface.\n * \n * The main functionalities of this class include:\n * - Displaying a list of refreshments with detailed information\n * - Allowing users to search for specific refreshments based on tags and names\n * - Enabling users to modify, delete, and activate refreshments\n * - Providing access to historical data of conventions related to refreshments\n * \n * The class consists of constructors, methods, and variables to support its functionality:\n * - Constructors: The default constructor initializes the frame by calling the superclass constructor and the initialize method.\n * - Methods: \n *      - initialize(): Sets up the frame by defining its size, title, icon, content pane, and other properties.\n *      - getJContentPane(): Creates and returns the content pane with various panels and components.\n *      - getRightPanel(): Retrieves the right panel containing help and search panels.\n *      - getToolbarPR(): Returns the toolbar for managing purchase requests with specific buttons.\n *      - getCentrePanel(): Retrieves the center panel containing a scrollable table of refreshment data.\n *      - Other methods for handling button actions, list selection events, and key events.\n * - Variables: \n *      - SIZE: Represents the size of the frame\n *      - Various panels, buttons, labels, text fields, and tables for displaying and interacting with refreshment data.\n * \n * Overall, the PuntiDiRistoro class provides a comprehensive interface for managing refreshments and related conventions in a user-friendly manner.\n */\n*/"
    }
]