[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    SIZE = new Dimension(700, 480);\r\n    setPreferredSize(SIZE);\r\n    this.setSize(new Dimension(700, 480));\r\n    this.setResizable(true);\r\n    this.setClosable(true);\r\n    this.setTitle(\"Refreshments\");\r\n    this.setFrameIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/images/PR.png\")));\r\n    this.setIconifiable(true);\r\n    this.setMaximizable(true);\r\n    this.setContentPane(getJContentPane());\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void initialize()",
                "comments": "Optional[/**\r\n * This method initializes this.\r\n *\r\n * @return void\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (jContentPane == null) {\r\n        jContentPane = new JPanel();\r\n        jContentPane.setLayout(new BorderLayout());\r\n        jContentPane.add(getRightPanel(), BorderLayout.EAST);\r\n        jContentPane.add(getToolbarPR(), BorderLayout.NORTH);\r\n        jContentPane.add(getCentrePanel(), BorderLayout.CENTER);\r\n    }\r\n    return jContentPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getJContentPane()",
                "comments": "Optional[/**\r\n * This method initializes jContentPane.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (rightPanel == null) {\r\n        rightPanel = new JPanel();\r\n        rightPanel.setLayout(new BorderLayout());\r\n        rightPanel.add(getHelpPanel(), BorderLayout.CENTER);\r\n        rightPanel.add(getRicercaPanel(), BorderLayout.CENTER);\r\n    }\r\n    return rightPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getRightPanel()",
                "comments": "Optional[/**\r\n * This method initializes rightPanel.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (toolbarPR == null) {\r\n        toolbarPR = new JToolBar();\r\n        toolbarPR.setLayout(null);\r\n        toolbarPR.setPreferredSize(new Dimension(1, 49));\r\n        toolbarPR.setFloatable(false);\r\n        toolbarPR.add(getBtnAttiva());\r\n        toolbarPR.addSeparator();\r\n        toolbarPR.add(getBtnStorico());\r\n        toolbarPR.addSeparator();\r\n        toolbarPR.add(getBtnModifica());\r\n        toolbarPR.addSeparator();\r\n        toolbarPR.add(getBtnSkeda());\r\n        toolbarPR.addSeparator();\r\n        toolbarPR.add(getBtnElimina());\r\n    }\r\n    return toolbarPR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JToolBar getToolbarPR()",
                "comments": "Optional[/**\r\n * This method initializes toolbarPR.\r\n *\r\n * @return javax.swing.JToolBar\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (centrePanel == null) {\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n        gridBagConstraints.weighty = 1.0;\r\n        gridBagConstraints.weightx = 1.0;\r\n        centrePanel = new JPanel();\r\n        centrePanel.setLayout(new GridBagLayout());\r\n        centrePanel.setPreferredSize(new Dimension(1, 30));\r\n        centrePanel.add(getJScrollPane(), gridBagConstraints);\r\n    }\r\n    return centrePanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getCentrePanel()",
                "comments": "Optional[/**\r\n * This method initializes centrePanel.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnSkeda == null) {\r\n        btnSkeda = new JButton();\r\n        btnSkeda.setText(\"Point Card <html> <br> Refreshments </html>\");\r\n        btnSkeda.setLocation(new Point(16, 3));\r\n        btnSkeda.setSize(new Dimension(130, 42));\r\n        btnSkeda.setPreferredSize(new Dimension(130, 42));\r\n        btnSkeda.setIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/images/Browse1.png\")));\r\n        btnSkeda.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent arg0) {\r\n            }\r\n        });\r\n    }\r\n    return btnSkeda;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnSkeda()",
                "comments": "Optional[/**\r\n * This method initializes btnSkeda.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnModifica == null) {\r\n        btnModifica = new JButton();\r\n        btnModifica.setText(\"<html> Edit Point <br> Refreshments </html>\");\r\n        btnModifica.setPreferredSize(new Dimension(130, 42));\r\n        btnModifica.setMnemonic(KeyEvent.VK_UNDEFINED);\r\n        btnModifica.setEnabled(false);\r\n        btnModifica.setBounds(new Rectangle(413, 3, 140, 42));\r\n        btnModifica.setIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/immagini/edit-32x32.png\")));\r\n    }\r\n    return btnModifica;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnModifica()",
                "comments": "Optional[/**\r\n * This method initializes btnModifica.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnElimina == null) {\r\n        btnElimina = new JButton();\r\n        btnElimina.setText(\"Delete item <html> <br> Refreshments </html>\");\r\n        btnElimina.setPreferredSize(new Dimension(130, 42));\r\n        btnElimina.setEnabled(false);\r\n        btnElimina.setMnemonic(KeyEvent.VK_UNDEFINED);\r\n        btnElimina.setBounds(new Rectangle(555, 3, 130, 42));\r\n        btnElimina.setIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/immagini/edit-delete-32x32.png\")));\r\n    }\r\n    return btnElimina;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnElimina()",
                "comments": "Optional[/**\r\n * This method initializes btnElimina.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (jScrollPane == null) {\r\n        if (tablePr == null) {\r\n            BeanPuntoDiRistoro[] test = new BeanPuntoDiRistoro[30];\r\n            for (int i = 0; i < 30; i++) {\r\n                test[i] = new BeanPuntoDiRistoro(1, 12, 3.5, \"Arturo\", \"Near the sea, great view, romantic and Miao\", \"089203202\", \"the mountains\", \"Amalfi\", \"Via Principe 35\", \"84123\", \"Salerno\", \"1234567898741\", new Punto3D(34, 34, 34), new Date(2, 23, 3), new Date(3, 3, 4), \"Monday\");\r\n            }\r\n            SitoTableModel newSitoTableModel = new SitoTableModel(test);\r\n            tablePr = new ScrollableTable(newSitoTableModel);\r\n            // Name\r\n            tablePr.getColumnModel().getColumn(0).setPreferredWidth(140);\r\n            // Description\r\n            tablePr.getColumnModel().getColumn(1).setPreferredWidth(80);\r\n            // Location\r\n            tablePr.getColumnModel().getColumn(2).setPreferredWidth(140);\r\n            // City\r\n            tablePr.getColumnModel().getColumn(3).setPreferredWidth(80);\r\n            // State\r\n            tablePr.getColumnModel().getColumn(4).setPreferredWidth(70);\r\n            // Number of Votes\r\n            tablePr.getColumnModel().getColumn(5).setPreferredWidth(70);\r\n            // Average Ratings\r\n            tablePr.getColumnModel().getColumn(6).setPreferredWidth(60);\r\n            // PosGeo\r\n            tablePr.getColumnModel().getColumn(7).setPreferredWidth(30);\r\n            tablePr.setDefaultRenderer(String.class, new DefaultTableCellRenderer());\r\n            tablePr.setRowHeight(32);\r\n            tablePr.setShowVerticalLines(false);\r\n            tablePr.setDefaultRenderer(Double.class, new MediaVotiRenderer());\r\n            tablePr.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\r\n            tablePr.setSelectionForeground(Color.RED);\r\n            tablePr.setSelectionBackground(Color.white);\r\n            tablePr.setColumnSelectionAllowed(false);\r\n            final javax.swing.ListSelectionModel listSelectionModel = tablePr.getSelectionModel();\r\n            listSelectionModel.addListSelectionListener(new ListSelectionListener() {\r\n\r\n                public void valueChanged(ListSelectionEvent event) {\r\n                    btnElimina.setEnabled(true);\r\n                    btnModifica.setEnabled(true);\r\n                    btnAttiva.setEnabled(true);\r\n                    btnStorico.setEnabled(true);\r\n                }\r\n            });\r\n            tablePr.addKeyListener(new KeyListener() {\r\n\r\n                public void keyPressed(KeyEvent arg0) {\r\n                    System.out.println(\"keyPressed\");\r\n                }\r\n\r\n                public void keyReleased(KeyEvent arg0) {\r\n                    System.out.println(\"keyReleased\");\r\n                }\r\n\r\n                public void keyTyped(KeyEvent arg0) {\r\n                    System.out.println(\"keyTyped\");\r\n                }\r\n            });\r\n        }\r\n        jScrollPane = new JScrollPane(tablePr);\r\n        jScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n        jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n    }\r\n    return jScrollPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private JScrollPane getJScrollPane()",
                "comments": "Optional[/**\r\n * This method initializes jScrollPane.\r\n *\r\n * @return javax.swing.JScrollPane\r\n */\r\n]",
                "innerComments": "Optional[[// Name\r\n, // Description\r\n, // Location\r\n, // City\r\n, // State\r\n, // Number of Votes\r\n, // Average Ratings\r\n, // PosGeo\r\n]]"
            },
            {
                "body": "Optional[{\r\n    btnElimina.setEnabled(true);\r\n    btnModifica.setEnabled(true);\r\n    btnAttiva.setEnabled(true);\r\n    btnStorico.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void valueChanged(ListSelectionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    System.out.println(\"keyPressed\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void keyPressed(KeyEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    System.out.println(\"keyReleased\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void keyReleased(KeyEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    System.out.println(\"keyTyped\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void keyTyped(KeyEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (helpPanel == null) {\r\n        GridBagConstraints gridBagConstraints1 = new GridBagConstraints();\r\n        gridBagConstraints1.fill = GridBagConstraints.BOTH;\r\n        gridBagConstraints1.gridy = 0;\r\n        gridBagConstraints1.weightx = 1.0;\r\n        gridBagConstraints1.weighty = 1.0;\r\n        gridBagConstraints1.ipadx = 0;\r\n        gridBagConstraints1.gridwidth = 1;\r\n        gridBagConstraints1.ipady = 0;\r\n        gridBagConstraints1.gridx = 0;\r\n        helpPanel = new JPanel();\r\n        helpPanel.setLayout(new GridBagLayout());\r\n        helpPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 153, 255), 3), \"Help\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(51, 102, 255)));\r\n        helpPanel.setPreferredSize(new Dimension(100, 100));\r\n        helpPanel.add(getJTextPane(), gridBagConstraints1);\r\n    }\r\n    return helpPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getHelpPanel()",
                "comments": "Optional[/**\r\n * This method initializes helpPanel.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (jTextPane == null) {\r\n        jTextPane = new JTextPane();\r\n        jTextPane.setPreferredSize(new Dimension(6, 30));\r\n    }\r\n    return jTextPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextPane getJTextPane()",
                "comments": "Optional[/**\r\n * This method initializes jTextPane.\r\n *\r\n * @return javax.swing.JTextPane\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnRicerca2 == null) {\r\n        btnRicerca2 = new JButton();\r\n        btnRicerca2.setPreferredSize(new Dimension(98, 26));\r\n        btnRicerca2.setText(\"Search\");\r\n        btnRicerca2.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/Ricerca16.png\")));\r\n    }\r\n    return btnRicerca2;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnRicerca2()",
                "comments": "Optional[/**\r\n * This method initializes btnRicerca2.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnAzzera2 == null) {\r\n        btnAzzera2 = new JButton();\r\n        btnAzzera2.setPreferredSize(new Dimension(98, 26));\r\n        btnAzzera2.setIcon(new ImageIcon(getClass().getResource(\"/unisa/gps/etour/gui/operatoreagenzia/images/Azzera16.png\")));\r\n        btnAzzera2.setText(\"Clear\");\r\n        btnAzzera2.setHorizontalTextPosition(SwingConstants.LEADING);\r\n    }\r\n    return btnAzzera2;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnAzzera2()",
                "comments": "Optional[/**\r\n * This method initializes btnAzzera2.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (ricercaPanel == null) {\r\n        GridBagConstraints gridBagConstraints5 = new GridBagConstraints();\r\n        gridBagConstraints5.fill = GridBagConstraints.BOTH;\r\n        gridBagConstraints5.gridy = 4;\r\n        gridBagConstraints5.weightx = 1.0;\r\n        gridBagConstraints5.weighty = 1.0;\r\n        gridBagConstraints5.gridwidth = 2;\r\n        gridBagConstraints5.gridx = 0;\r\n        GridBagConstraints gridBagConstraints8 = new GridBagConstraints();\r\n        gridBagConstraints8.gridwidth = 2;\r\n        gridBagConstraints8.insets = new Insets(5, 5, 5, 5);\r\n        GridBagConstraints gridBagConstraints7 = new GridBagConstraints();\r\n        gridBagConstraints7.gridx = 0;\r\n        gridBagConstraints7.insets = new Insets(5, 5, 5, 5);\r\n        gridBagConstraints7.gridy = 6;\r\n        GridBagConstraints gridBagConstraints6 = new GridBagConstraints();\r\n        gridBagConstraints6.gridx = 1;\r\n        gridBagConstraints6.gridwidth = 2;\r\n        gridBagConstraints6.insets = new Insets(5, 5, 5, 5);\r\n        gridBagConstraints6.gridy = 6;\r\n        GridBagConstraints gridBagConstraints4 = new GridBagConstraints();\r\n        gridBagConstraints4.gridx = 0;\r\n        gridBagConstraints4.gridwidth = 2;\r\n        gridBagConstraints4.insets = new Insets(5, 5, 5, 5);\r\n        gridBagConstraints4.gridy = 3;\r\n        labelTag = new JLabel();\r\n        labelTag.setText(\"Select search tags:\");\r\n        GridBagConstraints gridBagConstraints3 = new GridBagConstraints();\r\n        gridBagConstraints3.fill = GridBagConstraints.VERTICAL;\r\n        gridBagConstraints3.gridx = 0;\r\n        gridBagConstraints3.gridy = 2;\r\n        gridBagConstraints3.gridwidth = 2;\r\n        gridBagConstraints3.insets = new Insets(5, 5, 5, 5);\r\n        gridBagConstraints3.weightx = 1.0;\r\n        labelPr = new JLabel();\r\n        labelPr.setText(\"Name Refreshments:\");\r\n        ricercaPanel = new JPanel();\r\n        ricercaPanel.setLayout(new GridBagLayout());\r\n        ricercaPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 153, 255), 3), \"Searching for refreshments:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(51, 102, 255)));\r\n        ricercaPanel.add(labelPr, gridBagConstraints8);\r\n        ricercaPanel.add(getNomePR(), gridBagConstraints3);\r\n        ricercaPanel.add(labelTag, gridBagConstraints4);\r\n        BeanTag[] test = new BeanTag[8];\r\n        test[0] = new BeanTag(0, \"castle\", \"really a castle\");\r\n        test[1] = new BeanTag(1, \"stronghold\", \"really a hostel\");\r\n        test[2] = new BeanTag(3, \"Pub\", \"really a basket\");\r\n        test[3] = new BeanTag(4, \"Restaurant\", \"really a basket\");\r\n        test[4] = new BeanTag(5, \"Pizza\", \"really a basket\");\r\n        test[5] = new BeanTag(6, \"Trattoria\", \"really a basket\");\r\n        test[6] = new BeanTag(7, \"range\", \"really a basket\");\r\n        test[7] = new BeanTag(8, \"Romantic\", \"really a basket\");\r\n        pannelloTag = new TagPanel(test);\r\n        pannelloTag.setPreferredSize(new Dimension(180, 40));\r\n        ricercaPanel.add(getBtnAzzera2(), gridBagConstraints6);\r\n        ricercaPanel.add(getBtnRicerca2(), gridBagConstraints7);\r\n        ricercaPanel.add(pannelloTag, gridBagConstraints5);\r\n    }\r\n    return ricercaPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getRicercaPanel()",
                "comments": "Optional[/**\r\n * This method initializes ricercaPanel.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (nomePR == null) {\r\n        nomePR = new JTextField();\r\n        nomePR.setColumns(12);\r\n    }\r\n    return nomePR;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextField getNomePR()",
                "comments": "Optional[/**\r\n * This method initializes nomePR.\r\n *\r\n * @return javax.swing.JTextField\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnAttiva == null) {\r\n        btnAttiva = new JButton();\r\n        btnAttiva.setText(\"Enable <html> <br> Convention </html>\");\r\n        btnAttiva.setPreferredSize(new Dimension(130, 42));\r\n        btnAttiva.setSize(new Dimension(130, 42));\r\n        btnAttiva.setLocation(new Point(280, 3));\r\n        btnAttiva.setMnemonic(KeyEvent.VK_UNDEFINED);\r\n        btnAttiva.setEnabled(false);\r\n        btnAttiva.setIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/immagini/wi0054-32x32.png\")));\r\n    }\r\n    return btnAttiva;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnAttiva()",
                "comments": "Optional[/**\r\n * This method initializes btnAttiva.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (btnStorico == null) {\r\n        btnStorico = new JButton();\r\n        btnStorico.setText(\"Historical <html> <br> Conventions </html>\");\r\n        btnStorico.setPreferredSize(new Dimension(130, 42));\r\n        btnStorico.setBounds(new Rectangle(148, 3, 130, 42));\r\n        btnStorico.setEnabled(false);\r\n        btnStorico.setIcon(new ImageIcon(getClass().getResource(\"/interfacceAgenzia/images/Browse1.png\")));\r\n        btnStorico.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent e) {\r\n                new StoricoConvenzioni();\r\n            }\r\n        });\r\n    }\r\n    return btnStorico;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnStorico()",
                "comments": "Optional[/**\r\n * This method initializes btnStorico.\r\n *\r\n * @return javax.swing.JButton\r\n */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    new StoricoConvenzioni();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super();\r\n    initialize();\r\n}",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "public PuntiDiRistoro()",
                "comments": "Optional[/**\r\n * This is the default constructor.\r\n */\r\n]",
                "innerComments": null
            }
        ],
        "signature": "PuntiDiRistoro",
        "variables": [
            "private Dimension SIZE",
            "private JPanel jContentPane",
            "private JPanel rightPanel",
            "private JToolBar toolbarPR",
            "private JLabel status",
            "private JPanel centrePanel",
            "private JButton btnSkeda",
            "private JButton btnModifica",
            "private JButton btnElimina",
            "private JScrollPane jScrollPane",
            "private JPanel helpPanel",
            "private JTextPane jTextPane",
            "private JScrollPane pannelloTag",
            "private JButton btnRicerca2",
            "private JButton btnAzzera2",
            "private JPanel ricercaPanel",
            "private JLabel labelPr",
            "private JTextField nomePR",
            "private JLabel labelTag",
            "private JTable tablePr",
            "private JDesktopPane jDesktopPane",
            "private PuntiDiRistoro internalFrame",
            "private JButton btnAttiva",
            "private JButton btnStorico"
        ]
    }
]