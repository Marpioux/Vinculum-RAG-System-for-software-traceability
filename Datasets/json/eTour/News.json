[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    JInternalFrame frame = pEvent.getInternalFrame();\r\n    jDesktopPane = frame.getDesktopPane();\r\n    desktopManager = (DeskManager) jDesktopPane.getDesktopManager();\r\n    // Setting up objects for remote asset management\r\n    try {\r\n        Registry reg = LocateRegistry.getRegistry(Home.HOST);\r\n        gestioneNews = (IGestioneAdvertisementAgenzia) reg.lookup(\"GestioneAdvertisementAgenzia\");\r\n        // Load data.\r\n        caricaTabella();\r\n    } catch (Exception ex) {\r\n        JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> The dialog management request is closed. </u> </h3>\" + \"<p> <b> Possible Causes: </b>\" + \"<ul> <li> No connection to the network. </li>\" + \"<li> Server inactive. </li>\" + \"<li> Server clogged. </li> </ul>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n        Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n        JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n        frame.dispose();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void internalFrameOpened(InternalFrameEvent)",
                "comments": null,
                "innerComments": "Optional[[// Setting up objects for remote asset management\r\n, // Load data.\r\n]]",
                "generated_comment": "/**\n * This method is called when an internal frame is opened. It sets up objects for remote asset management by establishing a connection with the server eTour and loading data into a table. If an exception occurs during the communication with the server, an error message is displayed to the user and the internal frame is disposed of.\n * \n * @param pEvent the InternalFrameEvent representing the event of the internal frame being opened\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == jContentPane) {\r\n        jContentPane = new JPanel();\r\n        jContentPane.setLayout(new BorderLayout());\r\n        jContentPane.add(getNewsToolbar(), BorderLayout.NORTH);\r\n        jContentPane.add(getRightPanel(), BorderLayout.EAST);\r\n        jContentPane.add(getTableNews(), BorderLayout.CENTER);\r\n    }\r\n    return jContentPane;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getJContentPane()",
                "comments": "Optional[/**\r\n * Initialize the content pane of the frame inside.\r\n *\r\n * @return javax.swing.JPanel - the content pane.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the content pane for the main application window. If the content pane has not been initialized yet, it creates a new JPanel with a BorderLayout layout and adds the news toolbar to the north, the right panel to the east, and the news table to the center. \n * \n * @return the content pane for the main application window\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == newsToolbar) {\r\n        newsToolbar = new JToolBar();\r\n        newsToolbar.setFloatable(false);\r\n        newsToolbar.add(getBtnModificaN());\r\n        newsToolbar.addSeparator();\r\n        newsToolbar.add(getBtnEliminaN());\r\n    }\r\n    return newsToolbar;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JToolBar getNewsToolbar()",
                "comments": "Optional[/**\r\n * This method initializes the toolbar to manage the news.\r\n *\r\n * @return javax.swing.JToolBar - the toolbar management news.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the news toolbar, creating it if it doesn't already exist.\n * This method initializes the news toolbar with specific buttons and settings.\n * \n * @return the news toolbar containing buttons for modifying and deleting news items\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == btnModificaN) {\r\n        btnModificaN = new JButton();\r\n        btnModificaN.setText(\"Edit News\");\r\n        btnModificaN.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"ModificaNews32.png\")));\r\n        btnModificaN.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\r\n        btnModificaN.setName(\"btnModifica\");\r\n        btnModificaN.addMouseListener(newsHelp);\r\n        btnModificaN.setEnabled(false);\r\n        btnModificaN.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent pActionEvent) {\r\n                int selectedRow = tableNews.getSelectedRow();\r\n                if (idNews == -1) {\r\n                    // In this way I know if she was edited\r\n                    btnInsertModify.setText(\"Change\");\r\n                    btnInsertModify.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Salva16.png\")));\r\n                    btnReset.setText(\"Cancel\");\r\n                    btnReset.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Annulla16.png\")));\r\n                    formNews.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 102, 255), 3), \"Edit News\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(0, 102, 204)));\r\n                }\r\n                String text = (String) tableModel.getValueAt(selectedRow, 0);\r\n                int numCaratteri = 200 - text.length() + 1;\r\n                labelCaratteri.setText(\"# Characters: \" + numCaratteri);\r\n                Document docTesto = testoNews.getDocument();\r\n                try {\r\n                    docTesto.remove(0, docTesto.getLength());\r\n                    docTesto.insertString(0, text, null);\r\n                } catch (BadLocationException s) {\r\n                    s.printStackTrace();\r\n                }\r\n                Date expires = (Date) tableModel.getValueAt(selectedRow, 3);\r\n                durataNews.setSelectedIndex(Data.getNumDays(expires));\r\n                idNews = tableModel.getID(selectedRow);\r\n                prSlider.setValue((Integer) tableModel.getValueAt(selectedRow, 1));\r\n            }\r\n        });\r\n    }\r\n    return btnModificaN;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private JButton getBtnModificaN()",
                "comments": "Optional[/**\r\n * This method initializes the button to edit a news.\r\n *\r\n * @return javax.swing.JButton - button to change.\r\n */\r\n]",
                "innerComments": "Optional[[// In this way I know if she was edited\r\n]]",
                "generated_comment": "/**\n * Returns a JButton used to edit news. If the button has not been initialized yet, it creates a new JButton with specific properties such as text, icon, cursor, name, mouse listener, and action listener. \n * When the button is clicked, it retrieves information from the selected row in a table and populates a form with the news details for editing. \n * If the news ID is -1, it updates the text and icons of other buttons and changes the border of the form to indicate editing mode. \n * The method also updates a character count label based on the length of the news text, sets the expiration date, and retrieves the news ID and priority level from the table model. \n * \n * @return the JButton used to edit news\n */"
            },
            {
                "body": "Optional[{\r\n    int selectedRow = tableNews.getSelectedRow();\r\n    if (idNews == -1) {\r\n        // In this way I know if she was edited\r\n        btnInsertModify.setText(\"Change\");\r\n        btnInsertModify.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Salva16.png\")));\r\n        btnReset.setText(\"Cancel\");\r\n        btnReset.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Annulla16.png\")));\r\n        formNews.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 102, 255), 3), \"Edit News\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(0, 102, 204)));\r\n    }\r\n    String text = (String) tableModel.getValueAt(selectedRow, 0);\r\n    int numCaratteri = 200 - text.length() + 1;\r\n    labelCaratteri.setText(\"# Characters: \" + numCaratteri);\r\n    Document docTesto = testoNews.getDocument();\r\n    try {\r\n        docTesto.remove(0, docTesto.getLength());\r\n        docTesto.insertString(0, text, null);\r\n    } catch (BadLocationException s) {\r\n        s.printStackTrace();\r\n    }\r\n    Date expires = (Date) tableModel.getValueAt(selectedRow, 3);\r\n    durataNews.setSelectedIndex(Data.getNumDays(expires));\r\n    idNews = tableModel.getID(selectedRow);\r\n    prSlider.setValue((Integer) tableModel.getValueAt(selectedRow, 1));\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": "Optional[[// In this way I know if she was edited\r\n]]",
                "generated_comment": "/**\n * This method is called when an action event is triggered. It retrieves the selected row from a table, \n * checks if the news item is being edited or inserted, updates the UI components accordingly, \n * retrieves the text and expiration date of the selected news item, \n * sets the character count label, populates the text field with the news text, \n * sets the expiration date in a dropdown list, and sets the slider value. \n * \n * @param e the ActionEvent that triggered the method\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == btnEliminaN) {\r\n        btnEliminaN = new JButton();\r\n        btnEliminaN.setText(\"Delete News\");\r\n        btnEliminaN.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"EliminaNews32.png\")));\r\n        btnEliminaN.setEnabled(false);\r\n        btnEliminaN.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\r\n        btnEliminaN.setName(\"btnElimina\");\r\n        btnEliminaN.addMouseListener(newsHelp);\r\n        btnEliminaN.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent pEvent) {\r\n                int selectedRow = tableNews.getSelectedRow();\r\n                // Construction of the dialog for confirmation of deletion\r\n                JPanel root = new JPanel(new BorderLayout());\r\n                JLabel message = new JLabel(\"Are you sure you want to delete the selected news?\");\r\n                message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n                JLabel alert = new JLabel(\"The deleted data cannot be filled again.\", SwingConstants.CENTER);\r\n                alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\r\n                root.add(message, BorderLayout.NORTH);\r\n                root.add(alert, BorderLayout.CENTER);\r\n                String[] options = { \"Delete\", \"Cancel\" };\r\n                // The dialog screen appears\r\n                int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm Delete News\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"EliminaNews48.png\")), options, options[1]);\r\n                // If you chose to confirm the deletion\r\n                if (choice == JOptionPane.YES_OPTION) {\r\n                    try {\r\n                        gestioneNews.cancellaNews(tableModel.getID(selectedRow));\r\n                        tableModel.removeNews(selectedRow);\r\n                        JOptionPane.showInternalMessageDialog(jContentPane, \"The news has been selected successfully deleted\", \"News out!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Ok48.png\")));\r\n                        azzeraForm();\r\n                    } catch (Exception ex) {\r\n                        JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Delete operation request cannot be completed. </u> </h3>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n                        Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n                        JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return btnEliminaN;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private JButton getBtnEliminaN()",
                "comments": "Optional[/**\r\n * This method initializes the button to delete a news.\r\n *\r\n * @return javax.swing.JButton - the button for deletion.\r\n */\r\n]",
                "innerComments": "Optional[[// Construction of the dialog for confirmation of deletion\r\n, // The dialog screen appears\r\n, // If you chose to confirm the deletion\r\n]]",
                "generated_comment": "/**\n * This method returns a JButton used for deleting news. If the button has not been initialized yet, it creates a new JButton with the text \"Delete News\", an icon, and sets it to be disabled. It also adds a mouse listener and an action listener to handle the deletion of news when clicked. \n * \n * @return The JButton used for deleting news\n */"
            },
            {
                "body": "Optional[{\r\n    int selectedRow = tableNews.getSelectedRow();\r\n    // Construction of the dialog for confirmation of deletion\r\n    JPanel root = new JPanel(new BorderLayout());\r\n    JLabel message = new JLabel(\"Are you sure you want to delete the selected news?\");\r\n    message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n    JLabel alert = new JLabel(\"The deleted data cannot be filled again.\", SwingConstants.CENTER);\r\n    alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\r\n    root.add(message, BorderLayout.NORTH);\r\n    root.add(alert, BorderLayout.CENTER);\r\n    String[] options = { \"Delete\", \"Cancel\" };\r\n    // The dialog screen appears\r\n    int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm Delete News\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"EliminaNews48.png\")), options, options[1]);\r\n    // If you chose to confirm the deletion\r\n    if (choice == JOptionPane.YES_OPTION) {\r\n        try {\r\n            gestioneNews.cancellaNews(tableModel.getID(selectedRow));\r\n            tableModel.removeNews(selectedRow);\r\n            JOptionPane.showInternalMessageDialog(jContentPane, \"The news has been selected successfully deleted\", \"News out!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Ok48.png\")));\r\n            azzeraForm();\r\n        } catch (Exception ex) {\r\n            JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Delete operation request cannot be completed. </u> </h3>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n            Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n            JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": "Optional[[// Construction of the dialog for confirmation of deletion\r\n, // The dialog screen appears\r\n, // If you chose to confirm the deletion\r\n]]",
                "generated_comment": "/**\n * This method handles the action performed when the user clicks on a button to delete a news item.\n * It displays a confirmation dialog asking the user if they are sure they want to delete the selected news.\n * If the user confirms the deletion, the news item is deleted from the table and the database.\n * If an error occurs during the deletion process, an error message is displayed to the user.\n * \n * @param e The ActionEvent triggered when the user clicks on the delete button\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == rightPanel) {\r\n        rightPanel = new JPanel();\r\n        rightPanel.setLayout(new GridBagLayout());\r\n        GridBagConstraints g = new GridBagConstraints();\r\n        g.fill = GridBagConstraints.BOTH;\r\n        g.gridx = 0;\r\n        g.gridy = 0;\r\n        g.weighty = 0.7;\r\n        rightPanel.add(getFormNews(), g);\r\n        g.weighty = 0.3;\r\n        g.gridy = 1;\r\n        rightPanel.add(getPanelHelp(), g);\r\n    }\r\n    return rightPanel;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getRightPanel()",
                "comments": "Optional[/**\r\n * This method initializes the panel that realizes the interface side\r\n * Right of news management.\r\n *\r\n * @return javax.swing.JPanel - the right panel.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns the right panel of the GUI, which contains two sub-panels: a form for adding news and a help panel.\n * If the right panel has not been initialized yet, it creates a new JPanel with a GridBagLayout and adds the form news panel\n * at the top with a weight of 0.7 and the help panel at the bottom with a weight of 0.3.\n * \n * @return the right panel of the GUI\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == formNews) {\r\n        formNews = new JPanel(new GridBagLayout());\r\n        formNews.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 102, 255), 3), \"New News\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(0, 102, 204)));\r\n        GridBagConstraints g = new GridBagConstraints();\r\n        g.anchor = GridBagConstraints.CENTER;\r\n        g.gridx = 0;\r\n        g.gridy = 0;\r\n        g.weighty = 0.1;\r\n        g.gridwidth = 1;\r\n        g.gridheight = 1;\r\n        g.insets = new Insets(5, 5, 5, 5);\r\n        formNews.add(new JLabel(\"Text of the news:\"), g);\r\n        labelCaratteri = new JLabel(\"# Characters: 200\");\r\n        g.gridx = 1;\r\n        formNews.add(labelCaratteri, g);\r\n        g.gridx = 0;\r\n        g.gridwidth = 2;\r\n        g.gridy = 1;\r\n        g.weighty = 0.3;\r\n        g.fill = GridBagConstraints.VERTICAL;\r\n        JScrollPane scrollTesto = new JScrollPane(getTestoNews());\r\n        scrollTesto.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n        formNews.add(scrollTesto, g);\r\n        g.weighty = 0.1;\r\n        g.gridy = 2;\r\n        g.fill = GridBagConstraints.NONE;\r\n        formNews.add(new JLabel(\"Priority:\"), g);\r\n        g.gridy = 3;\r\n        formNews.add(getPrSlider(), g);\r\n        JPanel nuovo = new JPanel(new FlowLayout());\r\n        nuovo.add(new JLabel(\"Length of news:\"));\r\n        durataNews = new JComboBox<>();\r\n        for (int i = 0; i <= 60; i++) {\r\n            durataNews.addItem(\"\" + i);\r\n        }\r\n        durataNews.setSelectedIndex(0);\r\n        durataNews.setEditable(false);\r\n        durataNews.setName(\"duration\");\r\n        durataNews.addMouseListener(newsHelp);\r\n        nuovo.add(durataNews);\r\n        nuovo.add(new JLabel(\"days\"));\r\n        g.gridy = 4;\r\n        g.fill = GridBagConstraints.HORIZONTAL;\r\n        formNews.add(nuovo, g);\r\n        g.gridwidth = 1;\r\n        g.gridy = 5;\r\n        formNews.add(getBtnInsertModify(), g);\r\n        g.gridx = 1;\r\n        formNews.add(getBtnReset(), g);\r\n    }\r\n    return formNews;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getFormNews()",
                "comments": "Optional[/**\r\n * This method initializes the form for entering and editing a news.\r\n *\r\n * @return javax.swing.JPanel - the format\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JPanel containing a form for creating or modifying news.\n * The form includes fields for entering the text of the news, setting the priority,\n * selecting the length of the news, and buttons for inserting or resetting the form.\n * \n * @return JPanel - a panel containing the form for news creation or modification\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == prSlider) {\r\n        prSlider = new JSlider(JSlider.HORIZONTAL, 1, 5);\r\n        prSlider.setMinimum(1);\r\n        prSlider.setMaximum(5);\r\n        prSlider.setMajorTickSpacing(1);\r\n        prSlider.setLabelTable(prSlider.createStandardLabels(1));\r\n        prSlider.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\r\n        prSlider.setName(\"priority\");\r\n        prSlider.addMouseListener(newsHelp);\r\n        prSlider.setPaintLabels(true);\r\n        prSlider.setPaintTicks(true);\r\n        prSlider.setSnapToTicks(true);\r\n    }\r\n    return prSlider;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JSlider getPrSlider()",
                "comments": "Optional[/**\r\n * This method initializes the slider to set the priority of a news.\r\n *\r\n * @return javax.swing.JSlider - the slider with ticks from 1 to 5.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns the priority slider for the application. If the slider has not been initialized yet,\n * it creates a new JSlider with a horizontal orientation and a range from 1 to 5. \n * The slider is configured with a minimum value of 1, a maximum value of 5, \n * major tick spacing of 1, and labels for each tick. \n * The cursor is set to a hand cursor, the name is set to \"priority\", \n * and a mouse listener is added for interaction. \n * The slider is set to paint labels, paint ticks, and snap to ticks. \n * \n * @return the priority slider for the application\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == btnInsertModify) {\r\n        btnInsertModify = new JButton();\r\n        btnInsertModify.setText(\"Insert\");\r\n        btnInsertModify.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"nuovaNews16.png\")));\r\n        btnInsertModify.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\r\n        btnInsertModify.setName(\"btnInserisci\");\r\n        btnInsertModify.addMouseListener(newsHelp);\r\n        btnInsertModify.setFont(new Font(\"Dialog\", Font.BOLD, 12));\r\n        btnInsertModify.setHorizontalTextPosition(SwingConstants.TRAILING);\r\n        btnInsertModify.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent pEvent) {\r\n                if (testoNews.getText().length() == 0) {\r\n                    JOptionPane.showInternalMessageDialog(jContentPane, \"The text of a news cannot be empty!\", \"Error New News\", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error32.png\")));\r\n                    return;\r\n                }\r\n                if (idNews != -1) {\r\n                    // We're making a change\r\n                    // Construction of the dialog for confirmation of edit\r\n                    JPanel root = new JPanel(new BorderLayout());\r\n                    JLabel message = new JLabel(\"Changing the selected news with new data?\");\r\n                    message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n                    JLabel alert = new JLabel(\"The previous data cannot be more recovered.\", SwingConstants.CENTER);\r\n                    alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\r\n                    root.add(message, BorderLayout.NORTH);\r\n                    root.add(alert, BorderLayout.CENTER);\r\n                    String[] options = { \"Edit\", \"Cancel\" };\r\n                    // The dialog screen appears\r\n                    int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirmation Change News\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"ModificaNews48.png\")), options, options[1]);\r\n                    // If you chose to confirm the change\r\n                    if (choice == JOptionPane.YES_OPTION) {\r\n                        try {\r\n                            Date expires = new Date();\r\n                            expires.setDate(expires.getDate() + durataNews.getSelectedIndex());\r\n                            BeanNews newNews = new BeanNews(testoNews.getText(), new Date(), expires, prSlider.getValue(), idNews);\r\n                            gestioneNews.modificaNews(newNews);\r\n                            tableModel.updateNews(newNews);\r\n                            JOptionPane.showInternalMessageDialog(jContentPane, \"The news has been changed successfully.\", \"News changed!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Ok48.png\")));\r\n                        } catch (Exception ex) {\r\n                            JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Change operation request cannot be completed. </u> </h3>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n                            Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n                            JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // We are posting\r\n                    Date expires = new Date();\r\n                    expires.setDate(expires.getDate() + durataNews.getSelectedIndex());\r\n                    BeanNews newNews = new BeanNews(testoNews.getText(), new Date(), expires, prSlider.getValue(), 33);\r\n                    try {\r\n                        boolean ok = gestioneNews.inserisciNews(newNews);\r\n                        if (ok) {\r\n                            caricaTabella();\r\n                            tableModel.insertNews(newNews);\r\n                            JOptionPane.showInternalMessageDialog(jContentPane, \"The news has been inserted correctly into the system.\", \"New news!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"NuovaNews48.png\")));\r\n                        }\r\n                    } catch (RemoteException e) {\r\n                        JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Insertion operation request cannot be completed. </u> </h3>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n                        Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n                        JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n                    }\r\n                    tableModel.fireTableDataChanged();\r\n                    azzeraForm();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return btnInsertModify;\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private JButton getBtnInsertModify()",
                "comments": "Optional[/**\r\n * This method initializes the button to submit the form.\r\n *\r\n * @return javax.swing.JButton - the button for submission of the form.\r\n */\r\n]",
                "innerComments": "Optional[[// We're making a change\r\n, // Construction of the dialog for confirmation of edit\r\n, // The dialog screen appears\r\n, // If you chose to confirm the change\r\n, // We are posting\r\n]]",
                "generated_comment": "/**\n * This method returns a JButton used for inserting or modifying news. If the JButton has not been initialized yet, it creates a new JButton with specific properties such as text, icon, cursor, name, font, and action listeners. \n * \n * When the button is clicked, it checks if the text of the news is empty. If it is not empty and an existing news is being modified, a confirmation dialog is displayed. If the user confirms the change, the news is modified and updated in the table. If an new news is being inserted, it is added to the system and displayed in the table.\n * \n * @return JButton - the JButton for inserting or modifying news\n */\nprivate JButton getBtnInsertModify() {\n    if (null == btnInsertModify) {\n        // Button initialization and properties setting\n    }\n    return btnInsertModify;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (testoNews.getText().length() == 0) {\r\n        JOptionPane.showInternalMessageDialog(jContentPane, \"The text of a news cannot be empty!\", \"Error New News\", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error32.png\")));\r\n        return;\r\n    }\r\n    if (idNews != -1) {\r\n        // We're making a change\r\n        // Construction of the dialog for confirmation of edit\r\n        JPanel root = new JPanel(new BorderLayout());\r\n        JLabel message = new JLabel(\"Changing the selected news with new data?\");\r\n        message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\r\n        JLabel alert = new JLabel(\"The previous data cannot be more recovered.\", SwingConstants.CENTER);\r\n        alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\r\n        root.add(message, BorderLayout.NORTH);\r\n        root.add(alert, BorderLayout.CENTER);\r\n        String[] options = { \"Edit\", \"Cancel\" };\r\n        // The dialog screen appears\r\n        int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirmation Change News\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"ModificaNews48.png\")), options, options[1]);\r\n        // If you chose to confirm the change\r\n        if (choice == JOptionPane.YES_OPTION) {\r\n            try {\r\n                Date expires = new Date();\r\n                expires.setDate(expires.getDate() + durataNews.getSelectedIndex());\r\n                BeanNews newNews = new BeanNews(testoNews.getText(), new Date(), expires, prSlider.getValue(), idNews);\r\n                gestioneNews.modificaNews(newNews);\r\n                tableModel.updateNews(newNews);\r\n                JOptionPane.showInternalMessageDialog(jContentPane, \"The news has been changed successfully.\", \"News changed!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Ok48.png\")));\r\n            } catch (Exception ex) {\r\n                JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Change operation request cannot be completed. </u> </h3>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n                Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n                JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n            }\r\n        }\r\n    } else {\r\n        // We are posting\r\n        Date expires = new Date();\r\n        expires.setDate(expires.getDate() + durataNews.getSelectedIndex());\r\n        BeanNews newNews = new BeanNews(testoNews.getText(), new Date(), expires, prSlider.getValue(), 33);\r\n        try {\r\n            boolean ok = gestioneNews.inserisciNews(newNews);\r\n            if (ok) {\r\n                caricaTabella();\r\n                tableModel.insertNews(newNews);\r\n                JOptionPane.showInternalMessageDialog(jContentPane, \"The news has been inserted correctly into the system.\", \"New news!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"NuovaNews48.png\")));\r\n            }\r\n        } catch (RemoteException e) {\r\n            JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Insertion operation request cannot be completed. </u> </h3>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n            Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n            JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n        }\r\n        tableModel.fireTableDataChanged();\r\n        azzeraForm();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": "Optional[[// We're making a change\r\n, // Construction of the dialog for confirmation of edit\r\n, // The dialog screen appears\r\n, // If you chose to confirm the change\r\n, // We are posting\r\n]]",
                "generated_comment": "/**\n * This method is called when an action event is triggered. It checks if the text of a news is empty, displays an error message if it is, and returns if it is. If the news is being edited, a confirmation dialog is displayed. If the user confirms the change, the news is modified and updated in the system. If the news is being posted, it is inserted into the system. If an error occurs during the operation, an error message is displayed. \n * \n * @param e The ActionEvent that triggered the method\n */\npublic void actionPerformed(ActionEvent e) {\n    if (testoNews.getText().length() == 0) {\n        JOptionPane.showInternalMessageDialog(jContentPane, \"The text of a news cannot be empty!\", \"Error New News\", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error32.png\")));\n        return;\n    }\n    if (idNews != -1) {\n        // We're making a change\n        // Construction of the dialog for confirmation of edit\n        JPanel root = new JPanel(new BorderLayout());\n        JLabel message = new JLabel(\"Changing the selected news with new data?\");\n        message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\n        JLabel alert = new JLabel(\"The previous data cannot be more recovered.\", SwingConstants.CENTER);\n        alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\n        root.add(message, BorderLayout.NORTH);\n        root.add(alert, BorderLayout.CENTER);\n        String[] options = { \"Edit\", \"Cancel\" };\n        // The dialog screen appears\n        int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirmation Change News\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"ModificaNews48.png\")), options, options[1]);\n        // If you chose to confirm the change\n        if (choice == JOptionPane.YES_OPTION) {\n            try {\n                Date expires = new Date();\n                expires.setDate(expires.getDate() + durataNews.getSelectedIndex());\n                BeanNews newNews = new BeanNews(testoNews.getText(), new Date(), expires, prSlider.getValue(), idNews);\n                gestioneNews.modificaNews(newNews);\n                tableModel.updateNews(newNews);\n                JOptionPane.showInternalMessageDialog(jContentPane, \"The news has been changed successfully.\", \"News changed!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"Ok48.png\")));\n            } catch (Exception ex) {\n                JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Change operation request cannot be completed. </u> </h3>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\n                Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\n                JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\n            }\n        }\n    } else {\n        // We are posting\n        Date expires = new Date();\n        expires.setDate(expires.getDate() + durataNews.getSelectedIndex());\n        BeanNews newNews = new BeanNews(testoNews.getText(), new Date(), expires, prSlider.getValue(), 33);\n        try {\n            boolean ok = gestioneNews.inserisciNews(newNews);\n            if (ok) {\n                caricaTabella();\n                tableModel.insertNews(newNews);\n                JOptionPane.showInternalMessageDialog(jContentPane, \"The news has been inserted correctly into the system.\", \"New news!\", JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"NuovaNews48.png\")));\n            }\n        } catch (RemoteException e) {\n            JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> Insertion operation request cannot be completed. </u> </h3>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\n            Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\n            JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\n        }\n        tableModel.fireTableDataChanged();\n        azzeraForm();\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    if (null == btnReset) {\r\n        btnReset = new JButton();\r\n        btnReset.setText(\"Clear\");\r\n        btnReset.setHorizontalTextPosition(SwingConstants.LEADING);\r\n        btnReset.setPreferredSize(new Dimension(103, 26));\r\n        btnReset.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"azzera16.png\")));\r\n        btnReset.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\r\n        btnReset.setName(\"btnAzzera\");\r\n        btnReset.addMouseListener(newsHelp);\r\n        btnReset.addActionListener(new ActionListener() {\r\n\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                azzeraForm();\r\n            }\r\n        });\r\n    }\r\n    return btnReset;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JButton getBtnReset()",
                "comments": "Optional[/**\r\n * This method initializes the button to clear the form or\r\n * Cancel editing actions on a selected news.\r\n *\r\n * @return javax.swing.JButton - the button above.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JButton used to reset the form fields.\n * If the button has not been initialized yet, it creates a new JButton with the text \"Clear\",\n * sets its text position to LEADING, sets its preferred size to 103x26, sets an icon,\n * sets the cursor to HAND_CURSOR, sets the name to \"btnAzzera\", adds a mouse listener, and adds an action listener\n * that calls the azzeraForm() method when clicked.\n * \n * @return the JButton used to reset the form fields\n */"
            },
            {
                "body": "Optional[{\r\n    azzeraForm();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It resets the form by calling the azzeraForm() method.\n * \n * @param e the ActionEvent that triggered the method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == panelHelp) {\r\n        panelHelp = new JPanel();\r\n        panelHelp.setLayout(new BorderLayout());\r\n        panelHelp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 102, 255), 3), \"Help\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(0, 102, 204)));\r\n        textGuida.setEditable(false);\r\n        textGuida.setContentType(\"text/html\");\r\n        textGuida.setOpaque(false);\r\n        textGuida.setText(\"<html> Move your mouse pointer over a control of interest to display the context-sensitive help. </html>\");\r\n        textGuida.setName(\"textGuida\");\r\n        textGuida.addMouseListener(newsHelp);\r\n        panelHelp.setPreferredSize(new Dimension(200, 100));\r\n        panelHelp.add(textGuida, BorderLayout.CENTER);\r\n    }\r\n    return panelHelp;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JPanel getPanelHelp()",
                "comments": "Optional[/**\r\n * This method initializes the panel's online help.\r\n *\r\n * @return javax.swing.JPanel\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Returns a JPanel containing a help text for the user interface.\n * If the panel has not been initialized yet, it creates a new JPanel with a titled border and a text area displaying the help message.\n * The help message instructs the user to move the mouse pointer over a control to display context-sensitive help.\n * The text area is set to be non-editable, display HTML content, and have a transparent background.\n * The panel has a preferred size of 200x100 pixels.\n * \n * @return the JPanel containing the help text\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == tableNews) {\r\n        tableModel = new NewsTableModel();\r\n        tableNews = new ScrollableTable(tableModel);\r\n        tableNews.setRowHeight(64);\r\n        tableNews.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n        tableNews.setSelectionBackground(new Color(0xe6, 0xe6, 0xFA));\r\n        tableNews.setColumnSelectionAllowed(false);\r\n        ListSelectionModel selectionModel = tableNews.getSelectionModel();\r\n        selectionModel.addListSelectionListener(new ListSelectionListener() {\r\n\r\n            public void valueChanged(ListSelectionEvent event) {\r\n                int selectedRow = tableNews.getSelectedRow();\r\n                btnModificaN.setEnabled((selectedRow != -1));\r\n                btnEliminaN.setEnabled((selectedRow != -1));\r\n            }\r\n        });\r\n        tableNews.addKeyListener(new KeyAdapter() {\r\n\r\n            public void keyPressed(KeyEvent pKey) {\r\n                int keyCode = pKey.getKeyCode();\r\n                if (keyCode == KeyEvent.VK_ENTER) {\r\n                    btnModificaN.doClick();\r\n                } else if ((keyCode == KeyEvent.VK_CANCEL) || (keyCode == KeyEvent.VK_BACK_SPACE)) {\r\n                    btnEliminaN.doClick();\r\n                }\r\n            }\r\n        });\r\n        scrollTableNews = new JScrollPane();\r\n        scrollTableNews.setViewportView(tableNews);\r\n        scrollTableNews.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n    }\r\n    return scrollTableNews;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JScrollPane getTableNews()",
                "comments": "Optional[/**\r\n * This method initializes the table with all the news in the system.\r\n *\r\n * @return javax.swing.JTable\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * This method returns a JScrollPane containing a table displaying news items. If the table has not been initialized yet, it creates a new NewsTableModel and ScrollableTable, sets various properties such as row height, selection mode, selection background, and column selection allowed. It also adds a ListSelectionListener to handle row selection events and enable/disable modification and deletion buttons accordingly. Additionally, it adds a KeyAdapter to handle keyboard events for modifying and deleting news items. Finally, it creates a JScrollPane to contain the table and sets the vertical scroll bar policy to always show. \n * \n * @return a JScrollPane containing the table displaying news items\n */"
            },
            {
                "body": "Optional[{\r\n    int selectedRow = tableNews.getSelectedRow();\r\n    btnModificaN.setEnabled((selectedRow != -1));\r\n    btnEliminaN.setEnabled((selectedRow != -1));\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void valueChanged(ListSelectionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when the selection in the news table is changed.\n * It updates the enabled status of the \"Modify\" and \"Delete\" buttons based on whether a row is selected or not.\n * \n * @param e The event that triggered the method call (ListSelectionEvent)\n */"
            },
            {
                "body": "Optional[{\r\n    int keyCode = pKey.getKeyCode();\r\n    if (keyCode == KeyEvent.VK_ENTER) {\r\n        btnModificaN.doClick();\r\n    } else if ((keyCode == KeyEvent.VK_CANCEL) || (keyCode == KeyEvent.VK_BACK_SPACE)) {\r\n        btnEliminaN.doClick();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void keyPressed(KeyEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Responds to a key press event by simulating button clicks based on the key code.\n * If the key code is equal to KeyEvent.VK_ENTER, the btnModificaN button is clicked.\n * If the key code is equal to KeyEvent.VK_CANCEL or KeyEvent.VK_BACK_SPACE, the btnEliminaN button is clicked.\n * \n * @param pKey the KeyEvent object representing the key press event\n */"
            },
            {
                "body": "Optional[{\r\n    if (null == testoNews) {\r\n        testoNews = new JTextArea();\r\n        testoNews.setWrapStyleWord(true);\r\n        testoNews.setLineWrap(true);\r\n        testoNews.setBorder(BorderFactory.createLoweredBevelBorder());\r\n        testoNews.setColumns(18);\r\n        testoNews.setLineWrap(true);\r\n        testoNews.setRows(4);\r\n        testoNews.setDocument(new LimitedDocument(200));\r\n        testoNews.setName(\"text\");\r\n        testoNews.addMouseListener(newsHelp);\r\n        testoNews.addKeyListener(new KeyAdapter() {\r\n\r\n            public void keyTyped(KeyEvent pKeyEvent) {\r\n                char keyChar = pKeyEvent.getKeyChar();\r\n                if (Character.isDigit(keyChar) || Character.isLetter(keyChar) || Character.isWhitespace(keyChar)) {\r\n                    int len = testoNews.getText().length();\r\n                    if (len != 200) {\r\n                        labelCaratteri.setText(\"# Characters: \" + (200 - (testoNews.getText().length() + 1)));\r\n                    }\r\n                }\r\n            }\r\n\r\n            public void keyPressed(KeyEvent pKeyEvent) {\r\n                int keyCode = pKeyEvent.getKeyCode();\r\n                if (keyCode == KeyEvent.VK_CANCEL || keyCode == KeyEvent.VK_BACK_SPACE) {\r\n                    int len = testoNews.getText().length();\r\n                    if (len != 0) {\r\n                        labelCaratteri.setText(\"# Characters: \" + (200 - len + 1));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return testoNews;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private JTextArea getTestoNews()",
                "comments": "Optional[/**\r\n * This method initializes the text area that contains the text of a news.\r\n *\r\n * @return javax.swing.JTextArea - the text area.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Retrieves the JTextArea component used for displaying news text.\n * If the JTextArea has not been initialized yet, it creates a new instance\n * with specific properties such as word wrapping, border style, character limit,\n * and event listeners for key and mouse input.\n * \n * @return the JTextArea component for displaying news text\n */"
            },
            {
                "body": "Optional[{\r\n    char keyChar = pKeyEvent.getKeyChar();\r\n    if (Character.isDigit(keyChar) || Character.isLetter(keyChar) || Character.isWhitespace(keyChar)) {\r\n        int len = testoNews.getText().length();\r\n        if (len != 200) {\r\n            labelCaratteri.setText(\"# Characters: \" + (200 - (testoNews.getText().length() + 1)));\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void keyTyped(KeyEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when a key is typed in a text field. It checks if the typed key is a digit, letter, or whitespace character.\n * If the character is valid, it updates a label displaying the remaining characters allowed in the text field.\n * \n * @param pKeyEvent the KeyEvent object representing the key typed event\n */"
            },
            {
                "body": "Optional[{\r\n    int keyCode = pKeyEvent.getKeyCode();\r\n    if (keyCode == KeyEvent.VK_CANCEL || keyCode == KeyEvent.VK_BACK_SPACE) {\r\n        int len = testoNews.getText().length();\r\n        if (len != 0) {\r\n            labelCaratteri.setText(\"# Characters: \" + (200 - len + 1));\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void keyPressed(KeyEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when a key is pressed in a text field. \n * It checks if the key pressed is either the cancel key or the backspace key. \n * If it is, it calculates the number of characters remaining to reach the maximum limit of 200 characters \n * and updates a label with this information. \n * \n * @param pKeyEvent the KeyEvent object representing the key that was pressed\n */"
            },
            {
                "body": "Optional[{\r\n    btnInsertModify.setText(\"Insert\");\r\n    btnReset.setText(\"Clear\");\r\n    btnReset.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"azzera16.png\")));\r\n    formNews.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(51, 102, 255), 3), \"New News\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Dialog\", Font.BOLD, 12), new Color(0, 102, 204)));\r\n    durataNews.setSelectedIndex(0);\r\n    testoNews.setText(\"\");\r\n    tableNews.clearSelection();\r\n    prSlider.setValue(1);\r\n    labelCaratteri.setText(\"# Characters: 200\");\r\n    idNews = -1;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": "private void azzeraForm()",
                "comments": "Optional[/**\r\n * This method resets the form fields.\r\n */\r\n]",
                "innerComments": null,
                "generated_comment": "/**\n * Resets the form by setting the text and icons of buttons, resetting the border of the form, \n * clearing text fields and selections, resetting slider value, and updating label text.\n * \n * @param none\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    ArrayList<BeanNews> news = null;\r\n    try {\r\n        news = gestioneNews.ottieniAllNews();\r\n    } catch (RemoteException e) {\r\n        JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"The list of <h3> <u> News is not loaded. </u> </h3>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n        Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n        JOptionPane.showInternalMessageDialog(this, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n    } finally {\r\n        tableModel = new NewsTableModel(news);\r\n        tableNews.setModel(tableModel);\r\n        // Text of news\r\n        tableNews.getColumnModel().getColumn(0).setPreferredWidth(320);\r\n        tableNews.getColumnModel().getColumn(0).setCellRenderer(new TestoNewsRenderer());\r\n        // Priority\r\n        tableNews.getColumnModel().getColumn(1).setPreferredWidth(100);\r\n        tableNews.getColumnModel().getColumn(1).setCellRenderer(new PrioritaRenderer());\r\n        // Date of entry\r\n        tableNews.getColumnModel().getColumn(2).setPreferredWidth(80);\r\n        // End Date\r\n        tableNews.getColumnModel().getColumn(3).setPreferredWidth(80);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "private void caricaTabella()",
                "comments": "Optional[/**\r\n * This method imports the news downloaded from the server in the table.\r\n */\r\n]",
                "innerComments": "Optional[[// Text of news\r\n, // Priority\r\n, // Date of entry\r\n, // End Date\r\n]]",
                "generated_comment": "/**\n * Loads the table of news by retrieving all news from the server and populating the table with the data.\n * If there is an error communicating with the server, an error message is displayed.\n * \n * @return void\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"News\");\r\n    setPreferredSize(Home.CHILD_SIZE);\r\n    setMinimumSize(new Dimension(600, 480));\r\n    setResizable(true);\r\n    setFrameIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"News32.png\")));\r\n    setIconifiable(true);\r\n    setMaximizable(true);\r\n    setClosable(true);\r\n    // Setting up the help manager to manage the news.\r\n    textGuida = new JTextPane();\r\n    try {\r\n        newsHelp = new HelpManager(Home.URL_HELP + \"news.txt\", textGuida);\r\n    } catch (FileNotFoundException e) {\r\n        textGuida.setText(\"<html> <b> Help not available </b> </html>\");\r\n    }\r\n    setContentPane(getJContentPane());\r\n    addInternalFrameListener(new InternalFrameAdapter() {\r\n\r\n        public void internalFrameOpened(InternalFrameEvent pEvent) {\r\n            JInternalFrame frame = pEvent.getInternalFrame();\r\n            jDesktopPane = frame.getDesktopPane();\r\n            desktopManager = (DeskManager) jDesktopPane.getDesktopManager();\r\n            // Setting up objects for remote asset management\r\n            try {\r\n                Registry reg = LocateRegistry.getRegistry(Home.HOST);\r\n                gestioneNews = (IGestioneAdvertisementAgenzia) reg.lookup(\"GestioneAdvertisementAgenzia\");\r\n                // Load data.\r\n                caricaTabella();\r\n            } catch (Exception ex) {\r\n                JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" + \"<h3> <u> The dialog management request is closed. </u> </h3>\" + \"<p> <b> Possible Causes: </b>\" + \"<ul> <li> No connection to the network. </li>\" + \"<li> Server inactive. </li>\" + \"<li> Server clogged. </li> </ul>\" + \"<p> Please try again later. </p>\" + \"<p> If the error persists, please contact technical support. </p>\" + \"<p> We apologize for the inconvenience. </html>\");\r\n                Icon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\r\n                JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\r\n                frame.dispose();\r\n            }\r\n        }\r\n    });\r\n}",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public News()",
                "comments": "Optional[/**\r\n * This is the default constructor.\r\n */\r\n]",
                "innerComments": "[// Setting up the help manager to manage the news.\r\n, // Setting up objects for remote asset management\r\n, // Load data.\r\n]",
                "generated_comment": "/**\n * Constructs a new News internal frame with the specified title and properties.\n * The constructor sets the title of the internal frame to \"News\", \n * sets the preferred size to the CHILD_SIZE constant from the Home class,\n * sets the minimum size to 600x480 pixels,\n * allows the frame to be resizable,\n * sets the frame icon to a News32.png image,\n * enables iconification, maximization, and closing of the internal frame.\n * Additionally, it initializes a JTextPane for displaying help information,\n * creates a HelpManager object to manage the news help content,\n * sets the content pane of the internal frame,\n * and adds an InternalFrameListener to handle events when the internal frame is opened.\n * When the internal frame is opened, it retrieves the desktop pane and desktop manager,\n * establishes a connection to a remote server for managing news advertisements,\n * and loads data into the internal frame's table.\n * If an exception occurs during server communication, an error message is displayed,\n * and the internal frame is disposed.\n * \n * @param None\n */"
            }
        ],
        "signature": "News",
        "variables": [
            "private JPanel jContentPane",
            "private JToolBar newsToolbar",
            "private JButton btnEliminaN",
            "private JPanel rightPanel",
            "private JPanel formNews",
            "private JSlider prSlider",
            "private JButton btnInsertModify",
            "private JButton btnReset",
            "private JPanel panelHelp",
            "private JTextPane textGuida",
            "private JScrollPane scrollTableNews",
            "private JTable tableNews",
            "private JTextArea testoNews",
            "private JComboBox<String> durataNews",
            "private JButton btnModificaN",
            "private JLabel labelCaratteri",
            "private int idNews",
            "private NewsTableModel tableModel",
            "private HelpManager newsHelp",
            "protected DeskManager desktopManager",
            "protected JDesktopPane jDesktopPane",
            "private IGestioneAdvertisementAgenzia gestioneNews"
        ],
        "generated_class_comment": "/**\n * The News class represents an internal frame for managing news items within an application. \n * It provides functionality for adding, editing, and deleting news items, as well as displaying a table of news data. \n * The class includes methods for setting up the user interface components, handling user interactions, \n * and communicating with a remote server to retrieve news data. \n * \n * The main functionalities of the News class include:\n * - Setting up objects for remote asset management by establishing a connection with the server eTour\n * - Loading news data into a table for display and management\n * - Allowing users to edit, delete, and add news items through buttons and form fields\n * - Providing context-sensitive help information for users through a help panel\n * \n * The class includes constructors for initializing the internal frame with specific properties, \n * such as title, icon, size, and event listeners. \n * It also contains methods for resetting form fields, loading news data into the table, \n * and handling user interactions such as button clicks and key presses. \n * \n * Overall, the News class serves as a central component for managing news items within the application, \n * providing a user-friendly interface for interacting with and managing news data.\n */\n */"
    }
]