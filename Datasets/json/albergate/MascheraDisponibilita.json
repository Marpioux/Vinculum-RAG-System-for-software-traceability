[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //Creo i pulsanti\r\n    Indietro = new Button(\" Indietro \");\r\n    //Annulla.setFont(new Font(\"Courier\", Font.PLAIN, 12));\r\n    Visualizza = new Button(\"Visualizza disponibilita\");\r\n    Visualizza.setEnabled(false);\r\n    //Conferma.setFont(new Font(\"Courier\", Font.PLAIN, 12));\r\n    //Creo le etichette\r\n    etichetta1 = new Label(\"Selezionare il tipo di ricerca che si desidera effettuare:\");\r\n    etichetta1.setFont(ConfigurazioneSistema.font_titolo);\r\n    etichetta2 = new Label(\"Risultato della ricerca:\");\r\n    etichetta2.setFont(ConfigurazioneSistema.font_titolo);\r\n    etichetta3 = new Label(\"Ricerca per stanza:\");\r\n    etichetta3.setFont(ConfigurazioneSistema.font_titolo);\r\n    label1 = new Label(\"Stanza numero\");\r\n    //Creo un Checkbox ad esclusione\r\n    checkbox_group = new CheckboxGroup();\r\n    checkboxes = new Checkbox[2];\r\n    checkboxes[0] = new Checkbox(\" Ricerca per stanza\", checkbox_group, false);\r\n    checkboxes[1] = new Checkbox(\" Ricerca su tutte le stanze\", checkbox_group, false);\r\n    //Creo il TextField e lo rendo non editabili\r\n    testo = new TextField(\"\", 4);\r\n    testo.setEditable(false);\r\n    //creo una Lista\r\n    lista_disp = new List(10, false);\r\n    panel = new Panel[5];\r\n    for (int i = 0; i < panel.length; ++i) {\r\n        panel[i] = new Panel();\r\n        panel[i].setLayout(gridbag);\r\n    }\r\n    //Creo il pannello in alto a sinistra\r\n    Utils.constrain(panel[1], etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\r\n    Utils.constrain(panel[1], checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    Utils.constrain(panel[1], checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    //Creo il pannello ricerca per stanza\r\n    Utils.constrain(panel[2], etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\r\n    Utils.constrain(panel[2], label1, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\r\n    Utils.constrain(panel[2], testo, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    //Creo il pannello dei pulsanti\r\n    Utils.constrain(panel[0], Indietro, 1, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.EAST, 0.3, 0.0, 10, 0, 10, 5);\r\n    Utils.constrain(panel[0], Visualizza, 3, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 0.3, 0.0, 10, 5, 10, 0);\r\n    //Creo il pannello contenente la list_soggiornanti\r\n    Utils.constrain(panel[4], etichetta2, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\r\n    Utils.constrain(panel[4], lista_disp, 0, 1, 1, 1, GridBagConstraints.BOTH, GridBagConstraints.NORTHWEST, 1.0, 1.0, 0, 5, 0, 20);\r\n    //Attacco i pannelli al frame\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, panel[1], 0, 0, 5, 4, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel[2], 0, 4, 5, 2, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel[0], 0, 6, 5, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.SOUTHEAST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel[4], 0, 7, 5, 7, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setupPanels()",
                "comments": null,
                "innerComments": "Optional[[//Conferma.setFont(new Font(\"Courier\", Font.PLAIN, 12));\r\n, //Creo i pulsanti\r\n, //Annulla.setFont(new Font(\"Courier\", Font.PLAIN, 12));\r\n, //Creo le etichette\r\n, //Creo un Checkbox ad esclusione\r\n, //Creo il TextField e lo rendo non editabili\r\n, //creo una Lista\r\n, //Creo il pannello in alto a sinistra\r\n, //Creo il pannello ricerca per stanza\r\n, //Creo il pannello dei pulsanti\r\n, //Creo il pannello contenente la list_soggiornanti\r\n, //Attacco i pannelli al frame\r\n]]",
                "generated_comment": "/**\n * Sets up the panels for the user interface by creating buttons, labels, checkboxes, text fields, and lists.\n * The method sets the font, creates buttons for navigation, labels for instructions, checkboxes for selection,\n * text fields for input, and a list for displaying search results. It also arranges these components within panels\n * using GridBagLayout and adds the panels to the main frame.\n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    cost = new Costanti();\r\n    anno_corr = cost.getAnnoCorr();\r\n    anno_prox = cost.getAnnoProx();\r\n    checkboxes[0].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            testo.setEditable(true);\r\n            Visualizza.setEnabled(true);\r\n            if (lista_disp.getItemCount() > 0)\r\n                lista_disp.removeAll();\r\n        }\r\n    });\r\n    checkboxes[1].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            testo.setEditable(false);\r\n            testo.setText(\"\");\r\n            Visualizza.setEnabled(true);\r\n            if (lista_disp.getItemCount() > 0)\r\n                lista_disp.removeAll();\r\n        }\r\n    });\r\n    Visualizza.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            Disponibilita disp = new Disponibilita();\r\n            String str = new String(\"\");\r\n            //Tramuto temporaneamente tutti i commissionamenti di una certa agenzia\r\n            //in disponibilita\r\n            ListaDisponibilita L_disp = (Principale.db).elencoDisponibilita();\r\n            if (!agenzia.equals(\"\")) {\r\n                ListaCommissionamenti L_comm = (Principale.db).foundCommissionamenti(agenzia);\r\n                Commissionamento comm;\r\n                for (int i = 1; i <= L_comm.length(); i++) {\r\n                    comm = L_comm.getCommissionamento(i);\r\n                    disp = Utils.getDispOfRoom(L_disp, comm.getNumStanza(), true);\r\n                    disp.setDisponibilita(comm.getInizioComm(), comm.getFineComm(), Flag.DISPONIBILE, Flag.COMMISSIONATA);\r\n                    L_disp.addDisponibilita(disp);\r\n                }\r\n                str = new String(\"  ---  commissioni \" + agenzia);\r\n            }\r\n            if (L_disp.length() > 0)\r\n                lista_disp.addItem(\"TABELLA DELLE DISPONIBILITA'\" + str);\r\n            if (checkboxes[0].getState())\r\n                showDispOfRoom(L_disp, testo.getText());\r\n            else\r\n                showDispOfHotel(L_disp);\r\n        }\r\n    });\r\n    Indietro.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            padre.setEnabled(true);\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void init()",
                "comments": null,
                "innerComments": "Optional[[//Tramuto temporaneamente tutti i commissionamenti di una certa agenzia\r\n, //in disponibilita\r\n]]",
                "generated_comment": "/**\n * Initializes the GUI components and event listeners for the current frame.\n * Sets up the necessary variables and objects for the frame.\n * \n * @param None\n * @return None\n * \n * This method initializes the GUI components, such as checkboxes, buttons, and text fields,\n * and adds event listeners to handle user interactions. It also retrieves the current year\n * and the next year from the 'Costanti' class. The 'Visualizza' button displays availability\n * information based on user input, while the 'Indietro' button closes the current frame\n * and enables the parent frame. The method also handles the logic for displaying availability\n * information based on user selections and agency filtering.\n */"
            },
            {
                "body": "Optional[{\r\n    testo.setEditable(true);\r\n    Visualizza.setEnabled(true);\r\n    if (lista_disp.getItemCount() > 0)\r\n        lista_disp.removeAll();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Enables editing of a text field and enables a button when an item state change event occurs.\n * If the list of available items is not empty, it clears the list.\n * \n * @param e the ItemEvent that triggered the method\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    testo.setEditable(false);\r\n    testo.setText(\"\");\r\n    Visualizza.setEnabled(true);\r\n    if (lista_disp.getItemCount() > 0)\r\n        lista_disp.removeAll();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Disables editing of a text field, clears its content, enables a button, and removes all items from a list if it has any.\n * \n * @param e the ItemEvent that triggered the method\n * \n * This method disables editing of a specified text field, clears its content, enables a specific button, and removes all items from a list if it contains any. \n * It is typically used in response to an item state change event. \n * \n * This method does not return a value.\n */"
            },
            {
                "body": "Optional[{\r\n    Disponibilita disp = new Disponibilita();\r\n    String str = new String(\"\");\r\n    //Tramuto temporaneamente tutti i commissionamenti di una certa agenzia\r\n    //in disponibilita\r\n    ListaDisponibilita L_disp = (Principale.db).elencoDisponibilita();\r\n    if (!agenzia.equals(\"\")) {\r\n        ListaCommissionamenti L_comm = (Principale.db).foundCommissionamenti(agenzia);\r\n        Commissionamento comm;\r\n        for (int i = 1; i <= L_comm.length(); i++) {\r\n            comm = L_comm.getCommissionamento(i);\r\n            disp = Utils.getDispOfRoom(L_disp, comm.getNumStanza(), true);\r\n            disp.setDisponibilita(comm.getInizioComm(), comm.getFineComm(), Flag.DISPONIBILE, Flag.COMMISSIONATA);\r\n            L_disp.addDisponibilita(disp);\r\n        }\r\n        str = new String(\"  ---  commissioni \" + agenzia);\r\n    }\r\n    if (L_disp.length() > 0)\r\n        lista_disp.addItem(\"TABELLA DELLE DISPONIBILITA'\" + str);\r\n    if (checkboxes[0].getState())\r\n        showDispOfRoom(L_disp, testo.getText());\r\n    else\r\n        showDispOfHotel(L_disp);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": "Optional[[//Tramuto temporaneamente tutti i commissionamenti di una certa agenzia\r\n, //in disponibilita\r\n]]",
                "generated_comment": "/**\n * This method is called when an action event is triggered. It converts all commissionings of a certain agency into availability.\n * \n * @param e the ActionEvent that triggered the method\n * \n * @return void\n * \n * The method retrieves a list of availability objects and a list of commissioning objects for a specific agency. It then iterates through the commissioning list, converts each commissioning into availability, and adds it to the availability list. \n * If the agency is not empty, a message indicating the conversion is created. \n * Finally, depending on the state of a checkbox, it either displays the availability of a specific room or the availability of the entire hotel.\n */"
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    padre.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Disposes of the current window and enables the parent window.\n * \n * @param e the ActionEvent that triggered the method\n * \n * This method disposes of the current window and enables the parent window. \n * It takes an ActionEvent as a parameter to handle the event that triggered the method. \n * There is no return value as the method does not return anything.\n */"
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    Disponibilita disp;\r\n    String aus;\r\n    if (room.equals(\"\"))\r\n        msg = new MessageDialog(this, \"Inserire il numero della stanza per la ricerca delle sue dispoibilita\");\r\n    else {\r\n        disp = Utils.getDispOfRoom(L, room, false);\r\n        if (disp == null) {\r\n            msg = new MessageDialog(this, \"La stanza inserita e' inesistente!\");\r\n            if (lista_disp.getItemCount() > 0)\r\n                lista_disp.removeAll();\r\n        } else {\r\n            lista_disp.addItem(\"\");\r\n            lista_disp.addItem(\"Disponibilita' stanza n. \" + room + \" per l'anno \" + anno_corr);\r\n            aus = new String(Utils.scanVectorForDisp(disp.getDispAnnoCorr(), anno_corr, (Principale.config).getStagAnnoCorr()));\r\n            if (aus.equals(\"\"))\r\n                lista_disp.addItem(\"NESSUNA DISPONIBILITA'\");\r\n            else\r\n                lista_disp.addItem(aus);\r\n            lista_disp.addItem(\"\");\r\n            lista_disp.addItem(\"Disponibilita' stanza n. \" + room + \" per l'anno \" + anno_prox);\r\n            aus = new String(Utils.scanVectorForDisp(disp.getDispAnnoProx(), anno_prox, (Principale.config).getStagAnnoProx()));\r\n            if (aus.equals(\"\"))\r\n                lista_disp.addItem(\"NESSUNA DISPONIBILITA'\");\r\n            else\r\n                lista_disp.addItem(aus);\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void showDispOfRoom(ListaDisponibilita, String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Displays the availability of a room for the current and next year.\n * If the room number is not provided, a message dialog prompts the user to enter the room number.\n * If the room number is invalid, a message dialog notifies the user and clears the list of availability.\n * Otherwise, the availability of the room for the current and next year is displayed in the list.\n * \n * @param L the list of availability data\n * @param room the room number for which availability is to be displayed\n */\nvoid showDispOfRoom(ListaDisponibilita L, String room) {\n    Frame msg;\n    Disponibilita disp;\n    String aus;\n    \n    if (room.equals(\"\")) {\n        msg = new MessageDialog(this, \"Inserire il numero della stanza per la ricerca delle sue disponibilità\");\n    } else {\n        disp = Utils.getDispOfRoom(L, room, false);\n        if (disp == null) {\n            msg = new MessageDialog(this, \"La stanza inserita è inesistente!\");\n            if (lista_disp.getItemCount() > 0) {\n                lista_disp.removeAll();\n            }\n        } else {\n            lista_disp.addItem(\"\");\n            lista_disp.addItem(\"Disponibilità stanza n. \" + room + \" per l'anno \" + anno_corr);\n            aus = new String(Utils.scanVectorForDisp(disp.getDispAnnoCorr(), anno_corr, (Principale.config).getStagAnnoCorr()));\n            if (aus.equals(\"\")) {\n                lista_disp.addItem(\"NESSUNA DISPONIBILITÀ\");\n            } else {\n                lista_disp.addItem(aus);\n            }\n            lista_disp.addItem(\"\");\n            lista_disp.addItem(\"Disponibilità stanza n. \" + room + \" per l'anno \" + anno_prox);\n            aus = new String(Utils.scanVectorForDisp(disp.getDispAnnoProx(), anno_prox, (Principale.config).getStagAnnoProx()));\n            if (aus.equals(\"\")) {\n                lista_disp.addItem(\"NESSUNA DISPONIBILITÀ\");\n            } else {\n                lista_disp.addItem(aus);\n            }\n        }\n    }\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (L.length() == 0)\r\n        msg = new AvvisoDialog(this, \"Nessuna stanza trovata!\");\r\n    else\r\n        for (int i = 1; i <= L.length(); i++) showDispOfRoom(L, (L.getDisponibilita(i)).getNumStanza());\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void showDispOfHotel(ListaDisponibilita)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Displays the availability of hotel rooms.\n * If the given list of availability is empty, a message dialog is shown indicating that no rooms were found.\n * Otherwise, it iterates through the list of availability and displays the availability of each room.\n * \n * @param ListaDisponibilita L - the list of availability of hotel rooms\n * @return void\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"Disponibilita delle stanze\");\r\n    padre = parent;\r\n    agenzia = new String(nome_ag);\r\n    padre.setEnabled(false);\r\n    setupPanels();\r\n    pack();\r\n    init();\r\n    this.setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public MascheraDisponibilita(Frame, String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new MascheraDisponibilita object with the specified parent Frame and name.\n * \n * @param parent the parent Frame for the MascheraDisponibilita object\n * @param nome_ag the name of the MascheraDisponibilita object\n * \n * This constructor initializes the MascheraDisponibilita object with the title \"Disponibilita delle stanze\",\n * sets the parent Frame, disables the parent Frame, initializes the agenzia String with the provided name,\n * sets up the panels, packs the components, initializes the object, and sets it to be visible.\n */"
            }
        ],
        "signature": "MascheraDisponibilita",
        "variables": [
            " Button Indietro",
            " Button Visualizza",
            " TextField testo",
            " Label etichetta1",
            " Label etichetta2",
            " Label etichetta3",
            " Label label3",
            " Label label5",
            " Label label1",
            " Panel panel",
            " CheckboxGroup checkbox_group",
            " Checkbox checkboxes",
            " GridBagLayout gridbag",
            " List lista_disp",
            " Frame padre",
            " Costanti cost",
            " int anno_corr",
            " int anno_prox",
            " String agenzia",
            " ListaDisponibilita L"
        ],
        "generated_class_comment": "/**\n * The MascheraDisponibilita class represents a user interface for displaying room availability information.\n * It contains methods for setting up panels, initializing GUI components and event listeners, and handling user interactions.\n * The class includes functionalities for creating buttons, labels, checkboxes, text fields, and lists, as well as arranging these components\n * within panels using GridBagLayout and adding the panels to the main frame.\n * \n * The class also provides methods for converting commissionings of a specific agency into availability, displaying availability information\n * based on user input, enabling editing of text fields and buttons, and disposing of the current window while enabling the parent window.\n * \n * Additionally, the class offers functionality for displaying availability of a specific room for the current and next year, as well as for\n * displaying availability of hotel rooms. It includes error handling for invalid room numbers and empty availability lists.\n * \n * Overall, the MascheraDisponibilita class serves as a user interface for managing and viewing room availability data, providing a\n * comprehensive set of functionalities for interacting with and displaying availability information to the user.\n */\n **/"
    }
]