[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    this.setFont(font_base);\r\n    //creo le etichette\r\n    cambio_L_E = new Label(\"Cambio Lira <-> EURO\");\r\n    etichetta = new Label(\"Licenza:\");\r\n    etichetta.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta1 = new Label(\"DATI DI CONFIGURAZIONE\");\r\n    etichetta1.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta2 = new Label(\"Supplementi dovuto alle stagionionalita'\");\r\n    etichetta2.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta3 = new Label(\"Riduzioni\");\r\n    etichetta3.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta4 = new Label(\"Ristorazione\");\r\n    etichetta4.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta5 = new Label(\"Valuta\");\r\n    etichetta5.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta6 = new Label(\"Cambio di password utente\");\r\n    etichetta6.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta7 = new Label(\"Definizione delle stagionalita'\");\r\n    etichetta7.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    licenza = new TextField(\"\", 35);\r\n    albergo = new TextField(\"\", 25);\r\n    comune_alb = new TextField(\"\", 35);\r\n    citta_alb = new TextField(\"\", 25);\r\n    indirizzo_alb = new TextField(\"\", 35);\r\n    rag_soc = new TextField(\"\", 35);\r\n    giorni_blocco = new TextField(\"\", 4);\r\n    sup_bassissima = new TextField(\"\", 9);\r\n    sup_bassa = new TextField(\"\", 9);\r\n    sup_media = new TextField(\"\", 9);\r\n    sup_alta = new TextField(\"\", 9);\r\n    sup_neonato = new TextField(\"\", 9);\r\n    sup_letto_agg = new TextField(\"\", 9);\r\n    rid_bambino = new TextField(\"\", 4);\r\n    rid_ragazzo = new TextField(\"\", 4);\r\n    rid_comitiva = new TextField(\"\", 4);\r\n    min_pers_comitiva = new TextField(\"\", 4);\r\n    num_max_stanze = new TextField(\"\", 4);\r\n    num_max_stanze.setEditable(false);\r\n    px_colazione = new TextField(\"\", 9);\r\n    px_mezza = new TextField(\"\", 9);\r\n    px_intera = new TextField(\"\", 9);\r\n    coperto = new TextField(\"\", 9);\r\n    costo_x_scatto = new TextField(\"\", 9);\r\n    password = new TextField(\"\", 20);\r\n    cambio = new TextField(\"\", 8);\r\n    //creo un Checkbox\r\n    checkbox = new CheckboxGroup();\r\n    checkboxes = new Checkbox[2];\r\n    checkboxes[0] = new Checkbox(\" Lire\", checkbox, true);\r\n    checkboxes[1] = new Checkbox(\" EURO\", checkbox, false);\r\n    writeDatiConf();\r\n    if (prima_volta)\r\n        licenza.setEditable(true);\r\n    else\r\n        licenza.setEditable(false);\r\n    licenza.setForeground(Color.red.darker());\r\n    albergo.setForeground(Color.blue);\r\n    comune_alb.setForeground(Color.blue);\r\n    citta_alb.setForeground(Color.blue);\r\n    rag_soc.setForeground(Color.blue);\r\n    password.setEchoChar('*');\r\n    etich1 = new Label(\"Dati dell'albergo\");\r\n    etich1.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etich2 = new Label(\"Nome dell'albergo:\");\r\n    etich3 = new Label(\"Indirizzo dell'albergo:\");\r\n    indirizzo_alb.setForeground(Color.blue);\r\n    etich4 = new Label(\"Comune dell'albergo:\");\r\n    etich5 = new Label(\"Citta' dell'albergo:\");\r\n    etich6 = new Label(\"Numero di giorni massimo di bloccaggio di una stanza\");\r\n    etich7 = new Label(\"Supplemento bassisima stagione\");\r\n    etich8 = new Label(\"Supplemento bassa stagione\");\r\n    etich9 = new Label(\"Supplemento media stagione\");\r\n    etich10 = new Label(\"Supplemento alta stagione\");\r\n    etich11 = new Label(\"Supplemento per neonati\");\r\n    etich11_1 = new Label(\"Supplemento letto aggiuntivo\");\r\n    etich12 = new Label(\"Riduzione per bambini %\");\r\n    etich13 = new Label(\"Riduzione per ragazzi %\");\r\n    etich14 = new Label(\"Riduzione per comitive %\");\r\n    etich15 = new Label(\"Numero minimo di persone per comitiva\");\r\n    etich16 = new Label(\"Numero di stanze\");\r\n    etich17 = new Label(\"Supplemento prima colazione\");\r\n    etich18 = new Label(\"Supplemento mezza pensione\");\r\n    etich19 = new Label(\"Supplemento pensione completa\");\r\n    etich20 = new Label(\"Coperto per la ristorazione\");\r\n    etich21 = new Label(\"Costo di uno scatto telefonico\");\r\n    etich22 = new Label(\"Password utente\");\r\n    etich23 = new Label(\"Lire\");\r\n    etich24 = new Label(\"Dollari\");\r\n    etich25 = new Label(\"Ragione sociale\");\r\n    //creo i pulsanti\r\n    Annulla = new Button(\"Annulla\");\r\n    Passwd = new Button(\"Cambio di password\");\r\n    Conferma = new Button(\"Conferma\");\r\n    Stagioni = new Button(\"Definisci Stagionalita'\");\r\n    panel0 = new Panel();\r\n    panel0.setLayout(gridbag);\r\n    Utils.constrain(panel0, etichetta, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, licenza, 1, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, etich1, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, etich2, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, albergo, 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich3, 2, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, indirizzo_alb, 3, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich4, 0, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, comune_alb, 1, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich5, 2, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, citta_alb, 3, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich25, 0, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, rag_soc, 1, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel1 = new Panel();\r\n    panel1.setLayout(gridbag);\r\n    Utils.constrain(panel1, etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etich6, 0, 1, 5, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, giorni_blocco, 5, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etich21, 7, 1, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, costo_x_scatto, 10, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta2, 0, 2, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta3, 5, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta4, 8, 2, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    // supplementi\r\n    Utils.constrain(panel1, etich7, 0, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_bassissima, 3, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich8, 0, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_bassa, 3, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich9, 0, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_media, 3, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich10, 0, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_alta, 3, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich11, 0, 7, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_neonato, 3, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich11_1, 0, 8, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_letto_agg, 3, 8, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    // riduzioni\r\n    Utils.constrain(panel1, etich12, 4, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_bambino, 7, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich13, 4, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_ragazzo, 7, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich14, 4, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_comitiva, 7, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich15, 4, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, min_pers_comitiva, 7, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    // ristorazione\r\n    Utils.constrain(panel1, etich17, 8, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_colazione, 11, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich18, 8, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_mezza, 11, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich19, 8, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_intera, 11, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich20, 8, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, coperto, 11, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, cambio_L_E, 5, 7, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, cambio, 7, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich16, 9, 7, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, num_max_stanze, 11, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel2 = new Panel();\r\n    panel2.setLayout(gridbag);\r\n    Utils.constrain(panel2, etichetta5, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    panel3 = new Panel();\r\n    panel3.setLayout(gridbag);\r\n    Utils.constrain(panel3, etichetta6, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, Passwd, 1, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, etichetta7, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, Stagioni, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel4 = new Panel();\r\n    panel4.setLayout(gridbag);\r\n    Utils.constrain(panel4, Annulla, 8, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel4, Conferma, 9, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, panel0, 0, 0, 12, 6, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel1, 0, 6, 12, 9, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel2, 0, 15, 1, 3, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel3, 1, 15, 11, 2, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel4, 0, 19, 12, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void setupPanels(boolean)",
                "comments": null,
                "innerComments": "Optional[[//creo le etichette\r\n, //creo un Checkbox\r\n, //creo i pulsanti\r\n, // supplementi\r\n, // riduzioni\r\n, // ristorazione\r\n]]",
                "generated_comment": "/**\n * Sets up the panels for configuring the hotel management system.\n * This method initializes all the necessary components such as labels, text fields, checkboxes, and buttons.\n * It also sets the initial font and visibility properties for certain components.\n * \n * @param prima_volta a boolean indicating whether it is the first time setting up the panels\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    Annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            if (!first_start)\r\n                padre.setEnabled(true);\r\n            else\r\n                System.exit(0);\r\n        }\r\n    });\r\n    Conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startConferma();\r\n        }\r\n    });\r\n    checkboxes[0].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[0].getState()) {\r\n                startAvviso(Const.LIRE);\r\n            }\r\n        }\r\n    });\r\n    checkboxes[1].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[1].getState()) {\r\n                startAvviso(Const.EURO);\r\n            }\r\n        }\r\n    });\r\n    Passwd.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startChangePwd();\r\n        }\r\n    });\r\n    Stagioni.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            setStagioni();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Initializes the GUI components and sets up the action listeners for the buttons and checkboxes.\n * The method sets up the action listeners for the \"Annulla\", \"Conferma\", \"Passwd\", and \"Stagioni\" buttons,\n * as well as for the checkboxes. When the \"Annulla\" button is clicked, it disposes of the current window,\n * enables the parent window if it's not the first start, or exits the application if it is the first start.\n * When the \"Conferma\" button is clicked, it calls the startConferma() method. \n * When the checkboxes are checked, it calls the startAvviso() method with the appropriate parameter.\n * When the \"Passwd\" button is clicked, it calls the startChangePwd() method.\n * When the \"Stagioni\" button is clicked, it calls the setStagioni() method.\n */\npublic void init() {}"
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    if (!first_start)\r\n        padre.setEnabled(true);\r\n    else\r\n        System.exit(0);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It disposes of the current window, enables the parent window if it is not the first start, and exits the program if it is the first start.\n * \n * @param e the ActionEvent that triggered the method\n */"
            },
            {
                "body": "Optional[{\r\n    startConferma();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It invokes the startConferma() method.\n * \n * @param e the ActionEvent that triggered this method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[0].getState()) {\r\n        startAvviso(Const.LIRE);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when the state of an item changes. It checks if the first checkbox is selected and if so, it starts an avviso with the constant value LIRE.\n * \n * @param e the ItemEvent that triggered the state change\n */"
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[1].getState()) {\r\n        startAvviso(Const.EURO);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an item's state is changed. It checks if the second checkbox is selected, and if so, it calls the startAvviso method with the parameter Const.EURO.\n * \n * @param e the ItemEvent that triggered the state change\n */"
            },
            {
                "body": "Optional[{\r\n    startChangePwd();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It starts the process of changing the password for the user.\n * \n * @param e the ActionEvent that triggered the method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    setStagioni();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Sets the seasons based on the action event triggered.\n * \n * @param e the ActionEvent triggered\n * \n * This method sets the seasons based on the action event triggered. It calls the setStagioni() method to update the seasons accordingly.\n * This method does not return any value.\n */"
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (nuova_valuta != this_config.getValuta() && !first_start) {\r\n        msg = new AvvisoDialog(this, \"Attenzione: il cambio LIRA<->EURO effettuato alla conferma modifichera' le cifre della finestra corrente!\");\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startAvviso(char)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Displays a warning message if the currency has been changed and it is not the first time the method is called.\n * \n * @param nuova_valuta the new currency value\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    this.setEnabled(false);\r\n    CambioPassword cambio = new CambioPassword();\r\n    cambio.setVisible(true);\r\n    cambio.conf = this;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startChangePwd()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Disables the current component, opens a new window for changing the password, and sets the current component as a reference for confirmation.\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    MessageDialog msg;\r\n    int j;\r\n    if (!errore()) {\r\n        char vecchia_valuta = this_config.getValuta();\r\n        readDatiConf();\r\n        this_config.setPassword(new_passwd);\r\n        this_config.setStagionalita(new_stag_anno_corr, new_stag_anno_prox);\r\n        if ((j = (db.writeConfigurazione(this_config))) != DataBase.OK) {\r\n            msg = new MessageDialog(this, \"Problemi con il database: \" + DataBase.strErrore(j));\r\n        } else {\r\n            if (vecchia_valuta != this_config.getValuta() && !first_start) {\r\n                j = (Principale.db).startCambioValuta();\r\n                if (j != DataBase.OK) {\r\n                    msg = new MessageDialog(this, \"Errore con il database: \" + DataBase.strErrore(j));\r\n                    return;\r\n                }\r\n                this_config = (Principale.db).readConfigurazione();\r\n                Principale.config = this_config;\r\n            }\r\n            if (!(first_start)) {\r\n                padre.pass.p.setTitle(this_config.getNomeAlbergo());\r\n                padre.setEnabled(true);\r\n            } else {\r\n                Frame p = new Principale(this_config, db);\r\n                p.setVisible(true);\r\n            }\r\n            dispose();\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startConferma()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Starts the confirmation process for updating the configuration settings.\n * If no errors are present, updates the configuration settings with new values,\n * writes the updated configuration to the database, and handles any potential errors.\n * If the currency value has changed and it is not the first start, initiates a currency exchange process.\n * Updates the title of the parent frame with the hotel name from the configuration.\n * If it is not the first start, enables the parent frame; otherwise, creates a new main frame with the updated configuration.\n * Finally, disposes of the current frame.\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    def_stag = new DefinizioneStagionalita(this);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void setStagioni()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Initializes the season definition for the current object.\n * This method creates a new instance of DefinizioneStagionalita using the current object as a parameter.\n * \n * @param none\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (!((licenza.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" La licenza deve essere composta da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((albergo.getText()).length() < 21)) {\r\n        msg = new MessageDialog(this, \" Il nome dell'albergo deve essere composto da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((comune_alb.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" Il comune deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((indirizzo_alb.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" L'indirizzo deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((citta_alb.getText()).length() < 21)) {\r\n        msg = new MessageDialog(this, \" La citta' deve essere composta da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((rag_soc.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" La ragione sociale deve essere composta da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(giorni_blocco.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di giorni di blocco deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(sup_bassissima.getText()) || !Utils.isFloatPos(sup_bassa.getText()) || !Utils.isFloatPos(sup_media.getText()) || !Utils.isFloatPos(sup_alta.getText()) || !Utils.isFloatPos(sup_neonato.getText()) || !Utils.isFloatPos(sup_letto_agg.getText()) || !Utils.isFloatPos(px_colazione.getText()) || !Utils.isFloatPos(px_mezza.getText()) || !Utils.isFloatPos(px_intera.getText())) {\r\n        msg = new MessageDialog(this, \" I supplementi devono essere numeri positivi! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(rid_bambino.getText()) || !Utils.isIntPos(rid_ragazzo.getText()) || !Utils.isIntPos(rid_comitiva.getText())) {\r\n        msg = new MessageDialog(this, \" deve essere un numero intero! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(min_pers_comitiva.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di persone comitiva deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(num_max_stanze.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di stanze deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(coperto.getText())) {\r\n        msg = new MessageDialog(this, \" Il coperto deve essere un numero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(costo_x_scatto.getText())) {\r\n        msg = new MessageDialog(this, \" Il costo dello scatto telefonico deve essere un numero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(cambio.getText())) {\r\n        msg = new MessageDialog(this, \" Il coefficiente di cambio LIRE<->EURO deve essere un numero positivo e diverso da zero! \");\r\n        return true;\r\n    } else if (!((Float.valueOf(cambio.getText())).floatValue() > 0)) {\r\n        msg = new MessageDialog(this, \" Il coefficiente di cambio LIRE<->EURO deve essere un numero positivo e diverso da zero! \");\r\n        return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " boolean errore()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method checks for errors in the input fields of a hotel registration form.\n * It validates the length of various text fields and ensures that numerical inputs are positive.\n * \n * @return true if there are errors in the input fields, false otherwise\n */\nboolean errore() {\n    Frame msg;\n    if (!((licenza.getText()).length() < 33)) {\n        msg = new MessageDialog(this, \" La licenza deve essere composta da al piu' 32 caratteri! \");\n        return true;\n    }\n    // More validation checks for other input fields...\n    return false;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    this_config.setLicenza(licenza.getText());\r\n    this_config.setNomeAlbergo(albergo.getText());\r\n    this_config.setComuneAlb(comune_alb.getText());\r\n    this_config.setIndirizzoAlb(indirizzo_alb.getText());\r\n    this_config.setCittaAlb(citta_alb.getText());\r\n    this_config.setRagSoc(rag_soc.getText());\r\n    this_config.setGiorniBlocco(Integer.parseInt(giorni_blocco.getText()));\r\n    this_config.setSupplemento((Float.valueOf(sup_bassissima.getText())).floatValue(), Flag.BASSISSIMA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_bassa.getText())).floatValue(), Flag.BASSA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_media.getText())).floatValue(), Flag.MEDIA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_alta.getText())).floatValue(), Flag.ALTA_STAGIONE);\r\n    this_config.setSupNeonato((Float.valueOf(sup_neonato.getText())).floatValue());\r\n    this_config.setSupLettoAgg((Float.valueOf(sup_letto_agg.getText())).floatValue());\r\n    this_config.setRiduzione(Integer.parseInt(rid_bambino.getText()), Flag.BAMBINO);\r\n    this_config.setRiduzione(Integer.parseInt(rid_ragazzo.getText()), Flag.RAGAZZO);\r\n    this_config.setRiduzione(Integer.parseInt(rid_comitiva.getText()), Flag.COMITIVA);\r\n    this_config.setMinPersComit(Integer.parseInt(min_pers_comitiva.getText()));\r\n    this_config.setNumStanze(Integer.parseInt(num_max_stanze.getText()));\r\n    this_config.setPxColazione((Float.valueOf(px_colazione.getText())).floatValue());\r\n    this_config.setPxMezza((Float.valueOf(px_mezza.getText())).floatValue());\r\n    this_config.setPxIntera((Float.valueOf(px_intera.getText())).floatValue());\r\n    this_config.setCoperto((Float.valueOf(coperto.getText())).floatValue());\r\n    this_config.setCostoXScatto((Float.valueOf(costo_x_scatto.getText())).floatValue());\r\n    this_config.setCoeffXCambio((Float.valueOf(cambio.getText())).floatValue());\r\n    if (checkboxes[0].getState())\r\n        this_config.setValuta(Const.LIRE);\r\n    else\r\n        this_config.setValuta(Const.EURO);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void readDatiConf()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Reads the configuration data from the input fields and sets the values in the Config object.\n * \n * This method reads the data entered in various text fields and checkboxes on the GUI, and sets the corresponding values in the Config object.\n * The method sets the license, hotel name, address, city, company name, block days, supplement rates for different seasons, infant supplement rate, additional bed supplement rate,\n * child, teenager, and group discounts, minimum number of people for a group, maximum number of rooms, breakfast, half board, full board prices, cover charge, cost per click, and exchange rate.\n * It also sets the currency based on the state of a checkbox.\n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    //String s = new String(Principale.simbol);\r\n    licenza.setText(\"\" + this_config.getLicenza());\r\n    albergo.setText(\"\" + this_config.getNomeAlbergo());\r\n    comune_alb.setText(\"\" + this_config.getComuneAlb());\r\n    indirizzo_alb.setText(\"\" + this_config.getIndirizzoAlb());\r\n    citta_alb.setText(\"\" + this_config.getCittaAlb());\r\n    rag_soc.setText(\"\" + this_config.getRagSoc());\r\n    giorni_blocco.setText(\"\" + this_config.getGiorniBlocco());\r\n    sup_bassissima.setText(\"\" + this_config.getSupplemento(Flag.BASSISSIMA_STAGIONE));\r\n    sup_bassa.setText(\"\" + this_config.getSupplemento(Flag.BASSA_STAGIONE));\r\n    sup_media.setText(\"\" + this_config.getSupplemento(Flag.MEDIA_STAGIONE));\r\n    sup_alta.setText(\"\" + this_config.getSupplemento(Flag.ALTA_STAGIONE));\r\n    sup_neonato.setText(\"\" + this_config.getSupNeonato());\r\n    sup_letto_agg.setText(\"\" + this_config.getSupLettoAgg());\r\n    rid_bambino.setText(\"\" + this_config.getRiduzione(Flag.BAMBINO));\r\n    rid_ragazzo.setText(\"\" + this_config.getRiduzione(Flag.RAGAZZO));\r\n    rid_comitiva.setText(\"\" + this_config.getRiduzione(Flag.COMITIVA));\r\n    min_pers_comitiva.setText(\"\" + this_config.getMinPersComit());\r\n    num_max_stanze.setText(\"\" + this_config.getNumStanze());\r\n    px_colazione.setText(\"\" + this_config.getPxColazione());\r\n    px_mezza.setText(\"\" + this_config.getPxMezza());\r\n    px_intera.setText(\"\" + this_config.getPxIntera());\r\n    coperto.setText(\"\" + this_config.getCoperto());\r\n    costo_x_scatto.setText(\"\" + this_config.getCostoXScatto());\r\n    cambio.setText(\"\" + this_config.getCoeffXCambio());\r\n    if (this_config.getValuta() == Const.LIRE)\r\n        checkbox.setSelectedCheckbox(checkboxes[0]);\r\n    else\r\n        checkbox.setSelectedCheckbox(checkboxes[1]);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void writeDatiConf()",
                "comments": null,
                "innerComments": "Optional[[//String s = new String(Principale.simbol);\r\n]]",
                "generated_comment": "/**\n * Writes the configuration data to the GUI components.\n * Sets the text of various text fields and checkboxes with the corresponding values from the current configuration.\n * \n * @param none\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //creo le etichette\r\n    label1 = new Label(\"Inserire vecchia password\");\r\n    label2 = new Label(\"Inserire nuova password\");\r\n    label3 = new Label(\"Reinserire la nuova password\");\r\n    //creo i textField\r\n    testo1 = new TextField(\"\", 20);\r\n    testo2 = new TextField(\"\", 20);\r\n    testo1.setEchoChar('*');\r\n    testo2.setEchoChar('*');\r\n    testo2.setEditable(false);\r\n    conferma = new Button(\"Conferma\");\r\n    cambio = new Button(\"Cambio di password\");\r\n    cambio.setEnabled(false);\r\n    annulla = new Button(\"Annulla\");\r\n    pannello = new Panel();\r\n    pannello.setLayout(grid);\r\n    Utils.constrain(pannello, label1, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo1, 2, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, label2, 0, 1, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo2, 2, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, conferma, 3, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, cambio, 3, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    pannello_x_annulla = new Panel();\r\n    pannello_x_annulla.setLayout(grid);\r\n    Utils.constrain(pannello_x_annulla, annulla, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(grid);\r\n    Utils.constrain(this, pannello, 0, 0, 4, 2, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, pannello_x_annulla, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setupPanels()",
                "comments": null,
                "innerComments": "Optional[[//creo le etichette\r\n, //creo i textField\r\n]]",
                "generated_comment": "/**\n * Sets up the panels for changing the password.\n * This method sets the font to the base font specified in the system configuration.\n * It creates labels and text fields for entering the old password, new password, and confirming the new password.\n * It also creates buttons for confirming the password change, enabling password change, and canceling the operation.\n * The method arranges the components in panels using a grid layout and adds them to the main panel.\n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            conf.setEnabled(true);\r\n        }\r\n    });\r\n    conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            g();\r\n        }\r\n    });\r\n    testo1.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            g();\r\n        }\r\n    });\r\n    cambio.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            i();\r\n        }\r\n    });\r\n    testo2.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            i();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void init()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Initializes the GUI components and sets up the action listeners for the buttons.\n * The 'annulla' button disposes of the current window and enables the 'conf' button.\n * The 'conferma' and 'testo1' buttons call the method 'g()'.\n * The 'cambio' and 'testo2' buttons call the method 'i()'.\n */"
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    conf.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Disposes of the current window and enables the specified component.\n * \n * @param e the ActionEvent that triggered the method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    g();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It calls the method g() to perform the necessary action in response to the event.\n * \n * @param e the ActionEvent that triggered this method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    g();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It calls the method g() to perform some action.\n * \n * @param e the ActionEvent that triggered this method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    i();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It invokes the method i().\n * \n * @param e the ActionEvent that triggered this method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    i();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It calls the method i() to perform the desired action.\n * \n * @param e the ActionEvent object that triggered the action\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    String tmp = testo1.getText();\r\n    if (tmp.equals(ConfigurazioneSistema.new_passwd)) {\r\n        testo2.setEditable(true);\r\n        testo1.setEditable(false);\r\n        cambio.setEnabled(true);\r\n        conferma.setEnabled(false);\r\n    } else {\r\n        dialog = new MessageDialog(this, \"La password non e' corretta\");\r\n        dialog.setVisible(true);\r\n        testo1.setText(\"\");\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void g()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks if the input password matches the new password set in the system configuration.\n * If the input password matches, it enables the editing of a new password field and disables the current password field.\n * It also enables a 'cambio' button and disables a 'conferma' button.\n * If the input password does not match, it displays an error message dialog and clears the current password field.\n * \n * @param none\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    String tmp = testo2.getText();\r\n    Messaggio messaggio1 = new Messaggio(tmp);\r\n    messaggio1.setVisible(true);\r\n    messaggio1.c = this;\r\n    this.setEnabled(false);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void i()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method initializes a new Messaggio object with the text retrieved from a JTextField, sets it as visible, \n * sets its parent component, and disables the current component. \n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //creo un pulsante\r\n    OK = new Button(\"OK\");\r\n    //creo un'etichetta\r\n    msg = new Label(\"Reinserire la nuova password\");\r\n    //creo un textField\r\n    testo3 = new TextField(\"\", 20);\r\n    testo3.setEchoChar('*');\r\n    pannello = new Panel();\r\n    pannello.setLayout(gridbag);\r\n    Utils.constrain(pannello, msg, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo3, 2, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, OK, 4, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, pannello, 0, 0, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setup()",
                "comments": null,
                "innerComments": "Optional[[//creo un pulsante\r\n, //creo un'etichetta\r\n, //creo un textField\r\n]]",
                "generated_comment": "/**\n * Sets up the GUI components for the password reset screen.\n * This method sets the font, creates a button, a label, and a text field for the user to re-enter a new password.\n * The password field is set to display '*' characters for security.\n * The components are added to a panel and laid out using a gridbag layout.\n * The panel is then added to the main container using the same gridbag layout.\n */"
            },
            {
                "body": "Optional[{\r\n    OK.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startOK();\r\n        }\r\n    });\r\n    testo3.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startOK();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Initializes the components and sets up action listeners for the OK button and testo3 button.\n * \n * This method adds action listeners to the OK button and testo3 button. When the OK button is clicked,\n * the startOK() method is called. Similarly, when the testo3 button is clicked, the startOK() method is called.\n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    startOK();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It invokes the startOK() method to perform necessary actions in response to the event.\n * \n * @param e the ActionEvent that triggered this method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    startOK();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event occurs. It calls the startOK() method to start the OK process.\n * \n * @param e the action event that triggered this method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if ((testo3.getText()).equals(pwd_passata)) {\r\n        ConfigurazioneSistema.new_passwd = testo3.getText();\r\n        dialog = new Avviso(this, \"La password verra' cambiata alla conferma\");\r\n    } else\r\n        dialog = new Avviso(this, \"La nuova password non e' stata accettata\");\r\n    dialog.setVisible(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startOK()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method checks if the entered password matches the stored password and updates the system configuration with the new password if successful.\n * If the entered password matches the stored password, the system configuration is updated with the new password and a confirmation message is displayed.\n * If the entered password does not match the stored password, an error message is displayed.\n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    OK.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            esci();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Initializes the component by adding an ActionListener to the OK button. \n * When the OK button is clicked, the actionPerformed method is called, which in turn \n * calls the esci() method. \n * \n * @param none\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    esci();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an action event is triggered. It calls the method 'esci()' to exit the current operation or window.\n * \n * @param e the ActionEvent that triggered the method\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    padre.dispose();\r\n    padre.c.dispose();\r\n    padre.c.conf.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void esci()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Closes the current window and its parent window, enabling a specific button in the parent window.\n * This method disposes of the current window and its parent window, as well as enabling a specific button in the parent window's configuration.\n */ \npublic void esci() {\n    dispose();\n    padre.dispose();\n    padre.c.dispose();\n    padre.c.conf.setEnabled(true);\n}"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"Configurazione di sistema\");\r\n    this_config = config;\r\n    db = archivio;\r\n    new_passwd = this_config.getPassword();\r\n    new_stag_anno_corr = this_config.getStagionalita(Const.ANNO_CORRENTE);\r\n    new_stag_anno_prox = this_config.getStagionalita(Const.ANNO_PROSSIMO);\r\n    first_start = prima_volta;\r\n    setupPanels(prima_volta);\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public ConfigurazioneSistema(Configurazione, boolean, DataBase)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new ConfigurazioneSistema object with the given configuration, database, and boolean value.\n * \n * @param config the configuration object to be used\n * @param prima_volta a boolean value indicating if it is the first time the system is being started\n * @param archivio the database object to be used\n * \n * This constructor initializes the ConfigurazioneSistema object with the specified configuration, database, and boolean value.\n * It sets the title of the window to \"Configurazione di sistema\", assigns the configuration object to this_config,\n * the database object to db, and retrieves the password, current seasonality, and next seasonality from the configuration object.\n * It also sets the first_start variable to the value of prima_volta, sets up the panels, initializes the window, and packs it.\n */"
            },
            {
                "body": "{\r\n    super(\"Cambio di password\");\r\n    setupPanels();\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public CambioPassword()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new CambioPassword object.\n * This constructor initializes the title of the window to \"Cambio di password\",\n * sets up the panels for the password change interface, initializes the components,\n * and packs the window to its preferred size.\n */"
            },
            {
                "body": "{\r\n    super(\"Messaggio per il cambio di password\");\r\n    setup();\r\n    pwd_passata = text;\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public Messaggio(String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new Messaggio object with the given message for password change.\n * \n * @param text the message for the password change\n * \n * This constructor initializes the Messaggio object with the specified message for password change,\n * sets up the necessary components, assigns the passed text to the pwd_passata variable,\n * initializes the object, and packs it for display.\n */"
            },
            {
                "body": "{\r\n    super(\"Attenzione\");\r\n    padre = parent;\r\n    padre.setEnabled(false);\r\n    this.setFont(ConfigurazioneSistema.font_titolo);\r\n    Panel textPanel = new Panel();\r\n    Panel buttonPanel = new Panel();\r\n    textPanel.add(new Label(testo));\r\n    OK = new Button(\"OK\");\r\n    buttonPanel.add(OK);\r\n    add(\"North\", textPanel);\r\n    add(\"Center\", buttonPanel);\r\n    init();\r\n    pack();\r\n    setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public Avviso(Messaggio, String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new Avviso (Alert) object with the given message and parent frame.\n * The constructor sets the title of the alert to \"Attenzione\", disables the parent frame,\n * sets the font to the system configuration font for titles, creates a text panel with the\n * given message, adds an \"OK\" button to a button panel, and displays the alert window.\n * \n * @param messaggio the message to be displayed in the alert window\n * @param parent the parent frame of the alert window\n */"
            }
        ],
        "signature": "ConfigurazioneSistema",
        "variables": [
            "public  static  final Font font_base",
            "public  static  final Font font_sub",
            "public  static  final Font font_titolo",
            "public  static  final Font font_allineato",
            " TextField giorni_blocco",
            " TextField sup_bassissima",
            " TextField sup_bassa",
            " TextField sup_media",
            " TextField sup_alta",
            " TextField sup_letto_agg",
            " TextField costo_x_scatto",
            " TextField sup_neonato",
            " TextField rid_bambino",
            " TextField rid_ragazzo",
            " TextField rid_comitiva",
            " TextField password",
            " TextField num_max_stanze",
            " TextField px_colazione",
            " TextField px_mezza",
            " TextField px_intera",
            " TextField coperto",
            " TextField min_pers_comitiva",
            " TextField cambio",
            " TextField albergo",
            " TextField indirizzo_alb",
            " TextField comune_alb",
            " TextField citta_alb",
            " TextField rag_soc",
            " TextField licenza",
            " Label cambio_L_E",
            " Label etichetta",
            " Label etich1",
            " Label etich2",
            " Label etich3",
            " Label etich4",
            " Label etich5",
            " Label etich6",
            " Label etich7",
            " Label etich8",
            " Label etich9",
            " Label etich10",
            " Label etich11",
            " Label etich11_1",
            " Label etich12",
            " Label etich13",
            " Label etich14",
            " Label etich15",
            " Label etich16",
            " Label etich17",
            " Label etich18",
            " Label etich19",
            " Label etich20",
            " Label etichetta1",
            " Label etichetta2",
            " Label etichetta3",
            " Label etichetta4",
            " Label etichetta5",
            " Label etich21",
            " Label etich22",
            " Label etichetta6",
            " Label etich23",
            " Label etich24",
            " Label etich25",
            " Label etichetta7",
            " Panel panel0",
            " Panel panel1",
            " Panel panel2",
            " Panel panel3",
            " Panel panel4",
            " GridBagLayout gridbag",
            " CheckboxGroup checkbox",
            " Checkbox checkboxes",
            " Button Annulla",
            " Button Passwd",
            " Button Conferma",
            " Button Stagioni",
            " DefinizioneStagionalita def_stag",
            "static String new_passwd",
            "static char new_stag_anno_corr",
            "static char new_stag_anno_prox",
            " SubGestione padre",
            "static Configurazione this_config",
            " DataBase db",
            " boolean first_start",
            " TextField testo1",
            " TextField testo2",
            " TextField testo3",
            " Label label1",
            " Label label2",
            " Label label3",
            " GridBagLayout grid",
            " Panel pannello",
            " Panel pannello_x_annulla",
            " Frame conf",
            " Button conferma",
            " Button cambio",
            " Button annulla",
            " MessageDialog dialog",
            " Label msg",
            " Button OK",
            " CambioPassword c",
            " Avviso dialog",
            " GridBagLayout gridbag",
            " TextField testo3",
            " Panel pannello",
            " String pwd_passata",
            " Button OK",
            " Messaggio padre"
        ],
        "generated_class_comment": "/**\n * This class represents a configuration window for a hotel management system.\n * It provides a user interface for setting up various configuration parameters such as currency exchange rates, seasonal supplements, discounts, and meal prices.\n * The main functionalities of this class include:\n * - Displaying labels and text fields for entering configuration data\n * - Setting up font styles for labels\n * - Initializing text fields with default values\n * - Restricting user input for certain text fields\n * \n * The overall behavior of this class is to allow the user to easily configure and customize the settings of the hotel management system according to their specific requirements.\n * The class also ensures a consistent and visually appealing user interface by using a specific font style for labels.\n */\npublic class HotelConfigurationWindow {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a form for entering and managing hotel data. It includes fields for entering information such as hotel name, address, city, room rates, supplements, discounts, and other details. The form also allows for selecting the currency (Lire or EURO) and setting a password for accessing the data.\n * \n * Main functionalities include:\n * - Setting and updating hotel information\n * - Managing room rates and supplements for different seasons\n * - Setting discounts for children, groups, and additional beds\n * - Configuring meal supplements and minimum group size\n * - Managing the number of rooms and additional charges for breakfast, half board, and full board\n * \n * The class also includes validation for the entered data and displays error messages if invalid information is provided. It provides options for editing the data and saving changes, as well as setting permissions for accessing the form.\n * \n * Overall behavior:\n * - Displays a form for entering and managing hotel data\n * - Allows for selecting currency and setting a password for access control\n * - Validates and saves the entered information\n * - Provides options for editing and updating the data\n * - Controls access permissions based on user settings\n */\n**/\n/**\n * This class represents a GUI for managing information related to a restaurant. \n * It allows the user to input and modify various details such as the restaurant's name, address, city, and other relevant information. \n * The class includes labels and text fields for entering data, as well as buttons for actions like confirming changes, canceling, changing passwords, and defining seasonalities. \n * The layout of the GUI is organized using a GridBagLayout. \n * Overall, this class provides a user-friendly interface for managing restaurant information efficiently.\n */\n/**\n * This class represents a panel with various components for managing settings related to a specific feature.\n * It contains text fields, labels, and other GUI components for inputting and displaying information.\n * The main functionalities of this class include setting up layout constraints using GridBagLayout,\n * adding components to the panel, and organizing them in a specific arrangement.\n * The class provides methods for adding components with specified constraints, such as alignment, weight, and insets.\n * Overall, this class serves as a customizable panel for configuring settings and displaying relevant information in a structured manner.\n */\n/**\n * This class contains the layout constraints for a panel in a Java Swing application.\n * It provides methods to set constraints for various components within the panel.\n * The main functionalities of this class include setting the position, size, and alignment of components within the panel using GridBagConstraints.\n * The overall behavior of this class is to help in creating a well-organized and visually appealing user interface by properly arranging components within the panel.\n * It allows for precise control over the layout of components and ensures that they are displayed correctly on the screen.\n */\n/**\n * This class represents a panel that contains various components for configuring a hotel reservation system.\n * It provides functionalities for setting breakfast prices, room rates, and maximum number of rooms available.\n * The class uses GridBagLayout to arrange the components in a grid-like fashion.\n * \n * The main functionalities of this class include:\n * - Setting breakfast prices for different meal options\n * - Setting room rates for half-board and full-board options\n * - Configuring the maximum number of rooms available for booking\n * - Displaying checkboxes for additional services\n * \n * The overall behavior of this class is to allow users to easily configure and customize the settings for a hotel reservation system.\n * It provides a user-friendly interface with organized components for efficient management of reservation options.\n */\npublic class HotelReservationPanel extends Panel {\n    // class implementation here\n}\n**/\n/**\n * Sets up the panels for configuring the hotel management system.\n * This method initializes all the necessary components such as labels, text fields, checkboxes, and buttons for configuring the hotel management system.\n * It creates panels for different sections like supplements, reductions, and catering options.\n * The method takes a boolean parameter to determine the setup configuration.\n * \n * Optional Inner Comments:\n * - //creo le etichette (create labels)\n * - //creo un Checkbox (create a Checkbox)\n * - //creo i pulsanti (create buttons)\n * - // supplementi (supplements)\n * - // riduzioni (reductions)\n * - // ristorazione (catering)\n */\npublic void setupPanels(boolean) {\n    panel3.setLayout(gridbag);\n    Utils.constrain(panel3, etichetta6, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n    Utils.constrain(panel3, Passwd, 1, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n    Utils.constrain(panel3, etichetta7, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n    Utils.constrain(panel3, Stagioni, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n    \n    panel4 = new Panel();\n    panel4.setLayout(gridbag);\n    Utils.constrain(panel4, Annulla, 8, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5);\n    Utils.constrain(panel4, Conferma, 9, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5);\n    \n    this.setLayout(gridbag);\n    Utils.constrain(this, panel0, 0, 0, 12, 6, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n    Utils.constrain(this, panel1, 0, 6, 12, 9, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n    Utils.constrain(this, panel2, 0, 15, 1, 3, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n    Utils.constrain(this, panel3, 1, 15, 11, 2, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n    Utils.constrain(this, panel4, 0, 19, 12, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n}\n*/\n/**\n * This class initializes the GUI components and sets up the action listeners for the buttons and checkboxes.\n * It includes the \"Annulla\", \"Conferma\", \"Passwd\", and \"Stagioni\" buttons, as well as checkboxes.\n * When the \"Annulla\" button is clicked, it disposes of the current window, enables the parent window if it's not the first start,\n * or exits the application if it is the first start.\n * When the \"Conferma\" button is clicked, it calls the startConferma() method.\n * The checkboxes trigger actions when checked, calling startAvviso() for specific checkboxes.\n * Additionally, the Passwd button calls startChangePwd() and the Stagioni button calls setStagioni().\n * \n * @param prima_volta a boolean indicating whether it is the first time setting up the panels\n * @return void\n */\npublic void init() {\n    Annulla.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n            dispose();\n            if (!first_start)\n                padre.setEnabled(true);\n            else\n                System.exit(0);\n        }\n    });\n    \n    Conferma.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n            startConferma();\n        }\n    });\n    \n    checkboxes[0].addItemListener(new ItemListener() {\n        public void itemStateChanged(ItemEvent e) {\n            if (checkboxes[0].getState()) {\n                startAvviso(Const.LIRE);\n            }\n        }\n    });\n    \n    checkboxes[1].addItemListener(new ItemListener() {\n        public void itemStateChanged(ItemEvent e) {\n            if (checkboxes[1].getState()) {\n                startAvviso(Const.EURO);\n            }\n        }\n    });\n    \n    Passwd.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n            startChangePwd();\n        }\n    });\n    \n    Stagioni.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n            setStagioni();\n        }\n    });\n}\n*/\n/**\n * This class represents a GUI window with various buttons and checkboxes for user interaction.\n * It contains methods for handling different actions such as changing passwords, setting seasons, and displaying alerts.\n * The class includes an init() method for initialization and several actionPerformed() methods for handling button clicks.\n * When the \"Passwd\" button is clicked, it calls the startChangePwd() method.\n * When the \"Stagioni\" button is clicked, it calls the setStagioni() method.\n * The actionPerformed() method disposes of the current window, enables the parent window if it is not the first start, and exits the program if it is the first start.\n * The actionPerformed() method also invokes the startConferma() method when an action event occurs.\n * The itemStateChanged() method checks the state of checkboxes and starts an avviso with a specific constant value based on the checkbox selection.\n * Overall, this class provides a user-friendly interface for performing various tasks and interacting with the application.\n */\npublic class GUIWindow {\n    // class implementation goes here\n}\n*/\n/**\n * This class represents a GUI component that handles various actions and events.\n * It contains methods to respond to item state changes, action events, and other user interactions.\n * The class provides functionality to change passwords, set seasons, display warning messages, and more.\n * \n * The main functionalities of this class include:\n * - Responding to item state changes by checking if a specific checkbox is selected and calling a method accordingly.\n * - Initiating the process of changing the password for the user when an action event occurs.\n * - Setting seasons based on the action event triggered and updating the seasons accordingly.\n * - Displaying a warning message if the currency has been changed and it is not the first time the method is called.\n * \n * Overall, this class serves as a controller for handling user interactions and performing relevant actions based on those interactions.\n */\n```\n/**\n * This class represents a component that allows users to change their password and update configuration settings.\n * It provides methods for starting the password change process and confirming the updated configuration.\n * \n * The startChangePwd method disables the current component, opens a new window for changing the password,\n * and sets the current component as a reference for confirmation.\n * \n * The startConferma method initiates the confirmation process for updating the configuration settings.\n * It checks for errors, updates the configuration settings with new values, writes the updated configuration to the database,\n * and handles any potential errors. If the currency value has changed and it is not the first start,\n * it initiates a currency exchange process. It also updates the title of the parent frame with the hotel name from the configuration.\n * If it is not the first start, it enables the parent frame; otherwise, it creates a new instance of the Principale class.\n */\n/**\n * This class represents a main frame with updated configuration settings.\n * It provides methods to initialize season definitions, set seasons, and perform validation checks on input fields.\n * The main functionalities include setting up the frame with updated configurations, initializing season definitions, and validating input fields.\n * The class behavior includes creating a new main frame with updated settings, initializing season definitions for the current object, and performing validation checks on input fields.\n * Finally, the class disposes of the current frame when necessary.\n * \n * @return void\n */\n*/\n/**\n * This class contains a method that checks for errors in the input fields of a hotel registration form.\n * It validates various input fields such as supplement values, discounts, number of people in a group, number of rooms, and other parameters.\n * If any input field does not meet the required criteria (e.g., being a positive number), an error message is displayed.\n * The method returns true if any errors are found, otherwise it returns false.\n * \n * Main functionalities:\n * - Validate input fields for a hotel registration form\n * - Display error messages for invalid input values\n * \n * Overall behavior:\n * The method 'errore()' checks each input field for validity and displays an error message if any field does not meet the required criteria.\n * It ensures that all input values are positive numbers or integers where necessary, and prompts the user to correct any errors before proceeding.\n */\npublic boolean errore() {\n    // Method implementation as described in the provided code snippet\n}\n*/\n/**\n * This class represents a configuration form for a hotel management system. It contains various text fields for inputting information such as license, hotel name, address, city, etc. It also includes fields for setting supplements, reductions, and other pricing details.\n * \n * The class includes methods for validating the length of various text fields and ensuring that numerical inputs are positive. The 'errore' method checks the length of the license field and returns true if it exceeds 32 characters. Additional validation checks are performed for other input fields.\n * \n * The class also includes a method for setting the configuration values based on the input provided by the user. It sets the values for license, hotel name, address, city, pricing details, and other parameters.\n * \n * Overall, this class serves as a comprehensive form for configuring the settings of a hotel in the management system. It provides validation checks and methods for setting the configuration values accurately.\n */\n**/\n/**\n * This class represents a configuration reader that reads data from input fields and sets the values in a Config object.\n * \n * The class contains methods for reading data entered in various text fields and checkboxes on the GUI, and setting the corresponding values in the Config object. It sets values such as license, hotel name, address, city, company name, block days, supplement rates for different seasons, infant supplement rate, additional bed supplement rate, discounts for child, teenager, and groups, minimum number of people for a group, maximum number of rooms, breakfast, half board, full board prices, cover charge, cost per click, and exchange rate. It also sets the currency based on the state of a checkbox.\n * \n * The readDatiConf() method reads the configuration data from the input fields and sets the values in the Config object. It reads values for half board, full board, cover charge, cost per click, and exchange rate. It also sets the currency based on the state of a checkbox.\n * \n * The updateFields() method updates the text fields with values from the Config object. It sets values for license, hotel name, address, city, company name, block days, supplement rates for different seasons, and other relevant information.\n * \n * @param None\n * @return None\n */\n*/\n/**\n * This class is responsible for writing the configuration data to the GUI components. It sets the text of various text fields and checkboxes with the corresponding values from the current configuration.\n * \n * Main functionalities include:\n * - Setting text for supplemento values for different seasons\n * - Setting text for supNeonato, supLettoAgg, riduzione values for different flags\n * - Setting text for minPersComitiva, numStanze, pxColazione, pxMezza, pxIntera, coperto, costoXScatto, cambio values\n * - Selecting checkbox based on valuta value\n * \n * Overall behavior:\n * - Sets the font to ConfigurazioneSistema.font_base\n * - Creates labels for old password, new password, and re-enter new password\n * - Creates text fields for entering old password, new password, and re-entering new password\n * \n * @param none\n * @return void\n */\nvoid writeDatiConf() {\n    this.setFont(ConfigurazioneSistema.font_base);\n    // Create labels for old password, new password, and re-enter new password\n    label1 = new Label(\"Inserire vecchia password\");\n    label2 = new Label(\"Inserire nuova password\");\n    label3 = new Label(\"Reinserire la nuova password\");\n    // Create text fields for entering old password, new password, and re-entering new password\n    testo1 = new TextField(\"\", 20);\n    testo2 = new\n */\n}\n/**\n * Sets up the panels for changing the password.\n * This method sets the font to the base font specified in the system configuration.\n * It creates labels and text fields for entering the password, with one text field displaying the password characters as '*' for security.\n * The 'Conferma' button allows the user to confirm the password change, while the 'Cambio di password' button enables the user to initiate the password change process.\n * The 'Annulla' button allows the user to cancel the password change operation.\n * The panels are arranged using GridBagLayout for proper alignment and spacing.\n * \n * Optional Inner Comments:\n * //creo le etichette\n * //creo i textField\n */\n/**\n * This class represents a GUI for changing passwords. It allows users to input their old password, new password, and confirm the new password.\n * The class includes buttons for confirming the password change, enabling password change, and canceling the operation.\n * The components are arranged in panels using a grid layout and added to the main panel.\n * \n * The 'annulla' button disposes of the current window and enables the 'conf' button.\n * The 'conferma' and 'testo1' buttons trigger the method 'g()'.\n * The 'cambio' and 'testo2' buttons trigger the method 'i()'.\n * \n * @param None\n * @return None\n */\n*/\n/**\n * This class represents a GUI component that handles password changes. It provides a user interface for entering and confirming a new password, and allows the user to change the password if it matches the system's configured password.\n * \n * The class contains an actionPerformed method that is called when an action event occurs, such as clicking a button. This method checks if the entered password matches the system's configured password, and enables the user to change the password if it does. If the password does not match, a message dialog is displayed to inform the user.\n * \n * The class also contains a method g() that is called to perform the necessary actions when the password change is initiated. This method retrieves the entered password, checks if it matches the configured password, and updates the user interface accordingly.\n * \n * Overall, this class provides a secure and user-friendly way for users to change their passwords within the system.\n */\n/**\n * This class represents a component that handles password verification and editing in the system configuration.\n * It provides methods for checking if the input password matches the new password set in the system configuration,\n * enabling the editing of a new password field, disabling the current password field, enabling a 'cambio' button,\n * and disabling a 'conferma' button. If the input password does not match, it displays an error message dialog and clears the current password field.\n * \n * The class contains methods for initializing a new Messaggio object with text retrieved from a JTextField, setting it as visible,\n * setting its parent component, and disabling the current component. It also includes methods for creating UI components such as buttons, labels, and text fields.\n * \n * Overall, this class provides functionality for password verification and editing in the system configuration, with the ability to display error messages\n * and handle user interactions with password fields and buttons.\n */\n/**\n * This class represents a GUI setup for a password reset screen. It contains methods to initialize components, set up action listeners for buttons, and handle action events.\n * \n * The setup() method sets up the GUI components by creating a button, a label, and a text field for the user to re-enter a new password. The password field displays '*' characters for security. The components are added to a panel and laid out using a gridbag layout. The panel is then added to the main container using the same gridbag layout.\n * \n * The init() method initializes the components and sets up action listeners for the OK button and testo3 button. When the OK button is clicked, the startOK() method is called. Similarly, when the testo3 button is clicked, the startOK() method is called.\n * \n * The actionPerformed(ActionEvent) method is called when an action event occurs. It invokes the startOK() method to perform necessary actions in response to the event.\n * \n * Overall, this class provides functionality for setting up a password reset screen with interactive buttons and text fields for user input.\n */\n**/\n/**\n * This class represents a GUI component that allows users to change their password in the system configuration.\n * It contains methods for handling user input, updating the system configuration with the new password, and displaying messages to the user.\n * \n * The actionPerformed(ActionEvent) method is called when an action event occurs, triggering the startOK() method to start the password change process.\n * \n * The startOK() method checks if the entered password matches the stored password and updates the system configuration with the new password if successful.\n * If the entered password matches the stored password, a confirmation message is displayed. If not, an error message is shown.\n * \n * The init() method initializes the component by adding an ActionListener to the OK button. When the OK button is clicked, the actionPerformed method is called,\n * which in turn calls the esci() method to exit the component.\n * \n * The actionPerformed(ActionEvent) method is called when the OK button is clicked, triggering the esci() method to exit the component.\n */\n/**\n * The ConfigurazioneSistema class represents a window for system configuration settings.\n * It allows the user to configure various system parameters and settings.\n * This class interacts with a Configuration object, a Database object, and a boolean value indicating if it is the first time the system is being started.\n * \n * The main functionalities of this class include:\n * - Displaying the system configuration settings window\n * - Allowing the user to modify and save system parameters\n * - Enabling specific buttons based on user actions\n * \n * The overall behavior of this class is to provide a user-friendly interface for system configuration.\n * It initializes the window with the specified configuration, database, and boolean value.\n * The class includes methods for setting up panels, initializing components, and handling user actions.\n * When an action event is triggered, the class calls the 'esci()' method to exit the current operation or window.\n */\npublic class ConfigurazioneSistema extends JFrame {\n    // Class implementation here\n}\n*/\n/**\n * The Can you generate a comprehensive JavaDoc comment that describes the purpose of the class, its main functionalities, and its overall behavior?\n * This class represents a system for changing passwords and displaying messages related to password changes.\n * It contains constructors for creating objects to change passwords, display messages, and show alerts.\n * The class initializes the necessary components for password change interfaces, message displays, and alerts.\n * It provides methods to set up panels, initialize components, and pack windows for display.\n * The class handles user interactions for password changes, message displays, and alerts.\n * It ensures proper formatting and visibility of messages and alerts to users.\n * Overall, this class serves as a user-friendly interface for managing password changes and displaying messages in a Java application.\n */\npublic class ConfigurazioneSistema {\n    // Class implementation here\n}\n*/\n/**\n * The ConfigurazioneSistema class represents a configuration system for a hotel management application.\n * It contains various static final Font objects for different font styles, as well as TextFields and Labels\n * for configuring various settings such as room rates, discounts, passwords, and hotel information.\n * \n * The class provides a user interface for setting and updating these configurations, with input fields for\n * numerical values and text fields for strings. It also includes labels to provide context and guidance\n * for each configuration option.\n * \n * Overall, the ConfigurazioneSistema class serves as a central hub for managing the system settings of the\n * hotel management application, allowing users to customize and adjust parameters to suit their specific needs.\n */\n/**\n * This class represents a GUI for managing configuration settings and user passwords.\n * It contains various components such as labels, panels, buttons, text fields, and checkboxes\n * for configuring seasonal supplements, reductions, currency exchange rates, and user passwords.\n * The class also provides functionality for changing user passwords, confirming changes, and handling messages.\n * \n * Main functionalities include:\n * - Displaying configuration settings for seasonal supplements, reductions, and currency exchange rates\n * - Allowing users to change their passwords\n * - Confirming changes made to configuration settings\n * - Handling messages and alerts for user interactions\n * \n * Overall behavior:\n * The class initializes GUI components and sets up the layout using GridBagLayout.\n * It provides methods for creating labels, panels, buttons, and text fields with appropriate fonts and styles.\n * Users can interact with the GUI to view and modify configuration settings, change passwords, and confirm changes.\n * The class also includes methods for displaying messages and handling user input.\n * \n * Note: This class may require additional methods for handling specific functionalities and user interactions.\n */\n**/\n/**\n * This class represents a form for entering and managing seasonal data for a hotel.\n * It provides fields for entering information such as hotel name, address, pricing, discounts, and other settings.\n * The class also includes functionality for saving and retrieving data, as well as setting up initial configurations.\n * \n * The main functionalities of this class include:\n * - Setting up seasonal rates for different room types\n * - Managing discounts for children, groups, and other special cases\n * - Configuring maximum number of rooms, pricing for meals, and other hotel settings\n * \n * The overall behavior of this class is to allow users to input and store seasonal data for a hotel, and to provide a user-friendly interface for managing and updating this information.\n * It also includes validation checks for input fields and ensures data consistency.\n * \n * Note: This class assumes that the user has basic knowledge of hotel management and seasonal pricing strategies.\n */\n \npublic class SeasonalDataForm {\n    // Class implementation goes here\n}\n**/\n/**\n * This class represents a GUI for managing hotel settings and configurations.\n * It allows the user to set various parameters such as the hotel's address, city, maximum room blocking days,\n * seasonal supplements, discounts for children and groups, meal supplements, phone call rates, and user password.\n * The class also provides buttons for canceling changes, changing the password, confirming settings, and defining seasonal rates.\n * \n * Main functionalities include:\n * - Setting and updating hotel information\n * - Defining seasonal supplements and rates\n * - Managing discounts and meal supplements\n * - Changing user password\n * \n * Overall behavior:\n * - The class initializes GUI components such as labels, buttons, and panels for organizing settings\n * - It allows the user to input and update various hotel parameters\n * - The user can save changes or cancel them using the provided buttons\n * - Seasonal rates can be defined and updated for different periods\n * - The class provides a user-friendly interface for managing hotel configurations efficiently\n */\n \npublic class HotelSettingsGUI {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a panel that displays information about a hotel, including its name, address, city, and company name.\n * It also allows the user to set the number of days for a booking block and the cost per booking block.\n * The panel uses GridBagLayout to organize the components in a grid-like fashion.\n * \n * The main functionalities of this class include:\n * - Displaying information about the hotel, such as name, address, city, and company name.\n * - Allowing the user to set the number of days for a booking block and the cost per booking block.\n * \n * The overall behavior of this class is to provide a user-friendly interface for managing hotel information and booking settings.\n * It uses GridBagConstraints to specify the layout constraints for each component within the panel.\n */\npublic class HotelPanel extends Panel {\n    // class implementation goes here\n}\n**/\n/**\n * This class is responsible for setting up the layout constraints for a panel in a Java Swing application.\n * It provides methods to easily add components to the panel with specific constraints, such as alignment, padding, and weight.\n * The main functionalities of this class include:\n * - Setting up constraints for various components within the panel\n * - Aligning components within the panel using GridBagConstraints\n * - Specifying padding and weight for components\n * \n * The overall behavior of this class is to streamline the process of adding components to a panel and ensuring they are displayed correctly within the layout.\n * It allows for easy customization of the layout constraints for each component added to the panel.\n * \n * Example usage:\n * Utils.constrain(panel1, component1, gridx, gridy, gridwidth, gridheight, fill, anchor, weightx, weighty, insetstop, insetsleft, insetsbottom, insetsright);\n * \n * Note: This class assumes the use of GridBagConstraints for layout management in a Java Swing application.\n */\npublic class PanelLayoutUtils {\n    // Class implementation here\n}\n*/\n/**\n * This class is responsible for setting up the layout constraints for a panel in a Java Swing application.\n * It provides methods to easily add components to the panel with specific constraints such as grid position, fill, anchor, weightx, weighty, insets, and ipadx/ipady.\n * \n * The main functionalities of this class include:\n * - Constrain a component to a specific grid position within the panel\n * - Specify the fill and anchor constraints for the component\n * - Set the weightx and weighty constraints for the component\n * - Define the insets for the component to create padding around it\n * - Adjust the ipadx and ipady constraints to control the component's size\n * \n * The overall behavior of this class is to simplify the process of laying out components within a panel by providing a convenient way to set up constraints.\n * By using the Utils.constrain() method, developers can easily add components to a panel and customize their layout without having to manually set each constraint.\n * \n * Note: This class assumes that the panel being used follows the GridBagLayout manager.\n */\n **/\n/**\n * This class represents a GUI panel for configuring a hotel reservation system.\n * It allows the user to set various parameters such as the number of rooms, maximum number of guests, password, and seasons.\n * The panel consists of multiple sub-panels for organizing different settings.\n * \n * Main functionalities include:\n * - Setting the number of rooms and maximum number of guests\n * - Configuring password and seasons for the reservation system\n * - Providing options for cancellation and confirmation of settings\n * \n * The class uses GridBagLayout for organizing components within the panel.\n * It contains multiple Panels (panel1, panel2, panel3, panel4) for grouping related settings.\n * Each panel is laid out using GridBagLayout and contains specific components for user input.\n * \n * The class also uses Utils.constrain() method to set constraints for each component within the panels.\n * \n * Overall behavior:\n * - The class provides a user-friendly interface for configuring hotel reservation system settings.\n * - Users can easily input and modify parameters such as number of rooms, password, and seasons.\n * - The panel layout is organized and visually appealing for better user experience.\n */\npublic class HotelReservationPanel extends Panel {\n    // class implementation here\n}\n**/\n/**\n * This class represents a GUI window for setting up panels and initializing various components.\n * It provides methods for setting up different panels with specific constraints and adding event listeners for buttons and checkboxes.\n * The main functionalities of this class include creating labels, checkboxes, buttons, and handling user interactions such as confirming actions, canceling operations, changing passwords, and setting seasons.\n * The class also includes methods for starting confirmation processes, displaying alerts, and changing passwords.\n * Overall, this class serves as a central hub for managing user interactions and configuring the GUI layout in a structured manner.\n */\n**/\n/**\n * This class represents a GUI component that handles various actions and events in the application.\n * It contains methods for handling button clicks, item selections, and password changes.\n * The class provides functionalities such as confirming actions, displaying alerts, and changing passwords.\n * \n * The actionPerformed(ActionEvent) method is called when a button is clicked. It disposes of the current window,\n * enables the parent window if it was disabled, or exits the application if it is the first start.\n * \n * The startConferma() method is called when a confirmation action is triggered.\n * \n * The itemStateChanged(ItemEvent) method is called when an item's state changes. It starts an alert for the selected item.\n * \n * The startChangePwd() method is called to initiate a password change process.\n * \n * The setStagioni() method is called to set the seasons in the application.\n * \n * The startAvviso(char) method is used to display a warning message if a currency change will affect the current window.\n * \n * Overall, this class provides essential functionalities for handling user interactions and managing application states.\n */\npublic class GUIComponent {\n    // class implementation\n}\n**/\n/**\n * The Configurazione class represents a configuration object that stores various settings for a hotel management system.\n * It contains methods for updating the configuration settings, handling database operations, and managing user input validation.\n * \n * This class includes the following functionalities:\n * - Updating password and seasonal settings\n * - Writing configuration data to the database\n * - Handling currency conversion and database errors\n * - Setting the title of the parent frame and enabling/disabling user interface elements\n * \n * The behavior of this class is as follows:\n * - Upon confirmation, the configuration settings are updated and written to the database\n * - If there are no errors, the parent frame is updated with the hotel name and enabled for user interaction\n * - If it is the first start, a new instance of the main frame is created and displayed\n * - Input validation is performed for license, hotel name, and address fields\n * \n * @author [Your Name]\n * @version 1.0\n */\n/**\n * This class is responsible for validating the input fields in a hotel management system GUI form.\n * It checks the length of various input fields and ensures that they meet specific criteria.\n * The class also validates if the input values are of the correct data type (integer, float) and are positive.\n * \n * Main functionalities include:\n * - Checking the length of input fields such as address, city, and company name\n * - Validating integer input fields for number of days blocked, discounts, number of people in a group, and maximum number of rooms\n * - Validating float input fields for various supplements, prices, and charges\n * \n * Overall behavior:\n * The class performs thorough validation checks on the input fields to ensure that the data entered by the user is valid and meets the system requirements.\n * If any validation fails, a message dialog is displayed to alert the user about the specific validation error.\n * The class returns true if any validation fails, indicating that the input data is invalid, and further action is required.\n */\npublic class InputValidator {\n    // Validation logic as described in the code snippet provided\n}\n```\n/**\n * This class represents a configuration manager for a hotel management system.\n * It allows the user to set various parameters related to the hotel, such as license, hotel name,\n * address, city, company name, block days, supplements for different seasons, and reductions for different categories.\n * \n * The class provides methods to set and retrieve these parameters, as well as to validate user input for certain fields.\n * \n * The main functionalities of this class include:\n * - Setting and getting the license, hotel name, address, city, and company name.\n * - Setting and getting the number of block days for reservations.\n * - Setting and getting supplements for different seasons (bassissima, bassa, media, alta).\n * - Setting and getting supplements for newborns and additional beds.\n * - Setting and getting reductions for children, teenagers, and groups.\n * \n * The class also includes a method to check for errors in user input, ensuring that certain fields are valid.\n * \n * Overall, this class provides a centralized way to manage and configure various aspects of a hotel, making it easier for the user to customize the system according to their needs.\n */\n**/\n/**\n * This class represents a configuration reader for a hotel management system.\n * It provides methods to read and set various configuration parameters for the system.\n * The main functionalities of this class include reading and setting minimum number of persons in a group, maximum number of rooms, prices for breakfast, half board, full board, cover charge, cost per shot, exchange rate, currency type, license information, hotel name, address, city, company name, block days, supplements for different seasons, infant supplement, additional bed supplement, reductions for children and teenagers.\n * The class also includes methods to display and update the configuration parameters.\n * Overall, this class facilitates the management of hotel configuration settings and ensures accurate pricing and availability information for the system.\n */\n */\n/**\n * This class represents a configuration system for managing hotel settings.\n * It provides methods to write and display configuration data, as well as to change passwords.\n * \n * Main functionalities include:\n * - Displaying and updating configuration settings such as room reduction, minimum persons for groups, number of rooms, meal prices, etc.\n * - Allowing users to change their password by entering old and new passwords.\n * \n * Overall behavior:\n * - The class initializes various GUI components such as labels, text fields, and buttons for password change.\n * - It provides a method to write configuration data to the GUI components.\n * - Users can input old and new passwords, confirm the change, or cancel the operation.\n * - The class handles password encryption and validation.\n * - It also allows users to select a currency for the configuration settings.\n * \n * Note: This class assumes the existence of a ConfigurazioneSistema class for font settings and a Principale class for symbols.\n */\n */\n/**\n * This class represents a panel setup for a specific functionality. \n * It contains methods to initialize the panel components and set up the layout.\n * The main functionalities include setting up buttons for confirmation, cancellation, and other actions.\n * The class also includes action listeners for these buttons to perform specific actions when clicked.\n * Overall, this class provides a structured layout for user interaction and handles user input effectively.\n */\n*/\n/**\n * This class represents a GUI component that allows users to change their password.\n * It contains various methods for handling user input and updating the password.\n * The class includes functionality for verifying the correctness of the entered password and enabling the user to enter a new password.\n * \n * The main functionalities of this class include:\n * - Checking if the entered password matches the system's new password\n * - Enabling the user to enter a new password if the verification is successful\n * - Displaying error messages if the entered password is incorrect\n * - Providing a button for confirming the new password\n * \n * The overall behavior of this class is to facilitate the password change process for users in a user-friendly manner.\n * It includes methods for handling user interactions, displaying messages, and updating the password field.\n * \n * Note: This class assumes the existence of other classes and components such as ConfigurazioneSistema, MessageDialog, and Messaggio.\n */\n**/\n/**\n * This class represents a GUI component for setting up a password change feature.\n * It contains methods for initializing the component, handling user actions, and updating the password.\n * The class includes a setup method for configuring the layout and components, an init method for setting up action listeners,\n * and actionPerformed methods for handling user interactions.\n * The startOK method is responsible for validating the new password input and displaying a confirmation message.\n * Overall, this class provides a user-friendly interface for changing passwords securely.\n */\n**/\n/**\n * This class represents a GUI application for system configuration. It includes functionalities for changing passwords, displaying messages, and exiting the application.\n * \n * The class includes constructors for initializing the system configuration, changing passwords, and displaying messages. It also includes methods for setting up panels, initializing the application, and exiting the application.\n * \n * The main functionalities of this class include:\n * - Changing system configuration settings\n * - Changing passwords\n * - Displaying messages for password changes\n * - Exiting the application\n * \n * The behavior of the class is as follows:\n * - Upon initialization, the system configuration settings are loaded and panels are set up accordingly\n * - Password change functionality allows users to change their passwords\n * - Message display functionality shows messages for password changes\n * - Exiting the application closes the current window and enables the parent window\n * \n * Overall, this class provides a user-friendly interface for system configuration and password management.\n */\n**/\n/**\n * The CambioPassword class represents a Java GUI application for changing passwords.\n * It contains various text fields for entering different password settings and configurations.\n * The class also includes labels and panels for organizing the layout of the GUI components.\n * \n * Main Functionalities:\n * - Allows users to change passwords for different settings.\n * - Provides text fields for entering password configurations such as block days, discounts, prices, etc.\n * - Includes labels for displaying information related to password settings.\n * \n * Overall Behavior:\n * - Upon initialization, the class sets up the GUI components including text fields, labels, and panels.\n * - Users can input password settings and configurations using the text fields provided.\n * - The class organizes the layout of the GUI components using panels and gridbag layout.\n * - Users can interact with the GUI to change and update password settings as needed.\n */\npublic class CambioPassword {\n    // Variables declaration\n    public static final Font font_base;\n    public static final Font font_sub;\n    public static final Font font_titolo;\n    public static final Font font_allineato;\n    TextField giorni_blocco;\n    TextField sup_bassissima;\n    TextField sup_bassa;\n    TextField sup_media;\n    TextField sup_alta;\n    TextField sup_letto_agg;\n    TextField costo_x_scatto;\n    TextField sup_neonato;\n    TextField rid_bambino;\n    TextField rid_ragazzo;\n    TextField rid_comitiva;\n    TextField password;\n    TextField num_max_stanze;\n    TextField px_colazione;\n    TextField px_mezza;\n    TextField px_intera;\n    TextField coperto;\n    TextField min_pers_comitiva;\n    TextField cambio;\n    TextField albergo;\n    TextField indirizzo_alb;\n    TextField comune_alb;\n    TextField citta_alb;\n    TextField rag_soc;\n    TextField licenza;\n    Label cambio_L_E;\n    Label etichetta;\n    Label etich1;\n    Label etich2;\n    Label etich3;\n    Label etich4;\n    Label etich5;\n    Label etich6;\n    Label etich7;\n    Label etich8;\n    Label etich9;\n    Label etich10;\n    Label etich11;\n    Label etich11_1;\n    Label etich12;\n    Label etich13;\n    Label etich14;\n    Label etich15;\n    Label etich16;\n    Label etich17;\n    Label etich18;\n    Label etich19;\n    Label etich20;\n    Label etichetta1;\n    Label etichetta2;\n    Label etichetta3;\n    Label etichetta4;\n    Label etichetta5;\n    Label etich21;\n    Label etich22;\n    Label etichetta6;\n    Label etich23;\n    Label etich24;\n    Label etich25;\n    Label etichetta7;\n    Panel panel0;\n    Panel panel1;\n    Panel panel2;\n    Panel panel3;\n    Panel panel4;\n    GridBagLayout gridbag;\n    CheckboxGroup checkbox;\n    Checkbox checkboxes;\n    \n    // Constructor\n    public CambioPassword() {\n        // Initialize and set up the GUI components\n        // Add functionality for changing passwords and configurations\n    }\n}\n*/\n/**\n * The Button class represents a GUI interface for managing various functionalities such as changing passwords, confirming actions, and defining seasonal settings.\n * It contains buttons for actions like \"Annulla\", \"Passwd\", \"Conferma\", and \"Stagioni\", along with text fields and labels for input and display purposes.\n * This class also includes methods for handling user input, displaying messages, and interacting with the database.\n * The main functionalities of this class include managing user passwords, configuring seasonal settings, and handling user interactions within the application.\n * Overall, the Button class provides a user-friendly interface for performing various tasks within the application.\n */\n \npublic class Button {\n    // Class variables\n    private SubGestione padre;\n    private DataBase db;\n    private boolean first_start;\n    private TextField testo1;\n    private TextField testo2;\n    private TextField testo3;\n    private Label label1;\n    private Label label2;\n    private Label label3;\n    private GridBagLayout grid;\n    private Panel pannello;\n    private Panel pannello_x_annulla;\n    private Frame conf;\n    private Button conferma;\n    private Button cambio;\n    private Button annulla;\n    private MessageDialog dialog;\n    private Label msg;\n    private Button OK;\n    private CambioPassword c;\n    private Avviso dialog;\n    private GridBagLayout gridbag;\n    private String pwd_passata;\n    private Button OK;\n    private Messaggio padre;\n    \n    // Constructor\n    public Button(SubGestione padre, DataBase db) {\n        this.padre = padre;\n        this.db = db;\n    }\n    \n    // Other methods\n    public void initializeUI() {\n        // Initialize UI components\n        this.setFont(font_base);\n        // Create labels\n        cambio_L_E = new Label(\"Cambio Lira <-> EURO\");\n        etichetta = new Label(\"Licenza:\");\n        etichetta.setFont(new Font(\"Courier\", Font.BOLD, 12));\n        // Create other UI components\n        // ...\n    }\n    \n    // Other methods\n    // ...\n}\n*/\n/**\n * This class represents a form for entering and editing hotel data.\n * It contains text fields for entering various information about the hotel, such as name, address, pricing, and room details.\n * The class also includes checkboxes for selecting currency type and a password field for security purposes.\n * \n * Main functionalities include:\n * - Setting and displaying hotel information\n * - Managing room availability and pricing\n * - Handling currency selection and password input\n * \n * Overall behavior:\n * The class initializes text fields and checkboxes for entering and editing hotel data.\n * It provides a user-friendly interface for managing hotel details and ensures data security with password protection.\n * The class also includes methods for writing and reading configuration data.\n * \n * Note: The class assumes that the user is familiar with hotel management concepts and terminology.\n */\n **/\n/**\n * This class represents a GUI for managing hotel information. It allows users to input and modify various details about a hotel, such as its name, license number, seasonal supplements, discounts, room availability, meal options, and other related information. Users can also change their password and define seasonal rates.\n * \n * The main functionalities of this class include:\n * - Displaying labels and input fields for entering hotel information\n * - Providing buttons for cancelling, confirming changes, changing password, and defining seasonal rates\n * - Setting up layout using GridBagLayout\n * - Handling constraints for positioning components within the layout\n * \n * The overall behavior of this class is to provide a user-friendly interface for managing hotel details efficiently. Users can easily input and update information, view different options, and make necessary changes as needed. The class ensures proper organization of data and allows for smooth navigation through the interface.\n */\n/**\n * This class represents a GUI panel that displays information about a company's address and billing details.\n * It contains text fields for the company name, address, city, and other relevant information.\n * The panel also includes fields for setting the number of days for blocking, and the cost per call.\n * \n * The main functionalities of this class include:\n * - Displaying and editing the company's address information\n * - Setting the number of days for blocking and the cost per call\n * \n * The class uses GridBagLayout to arrange the components within the panel.\n * The Utils class is used to set constraints for each component in the layout.\n * \n * Overall, this class provides a user-friendly interface for managing and updating the company's address and billing details.\n */\n \nclass CompanyDetailsPanel extends Panel {\n    // class implementation here\n}\n**/\n/**\n * This class defines a set of constraints for positioning components within a panel using the GridBagConstraints layout manager.\n * It provides methods to easily set constraints for various components such as labels and text fields.\n * The main functionalities of this class include setting the grid position, anchor, weightx, weighty, insets, and fill constraints for components.\n * Components can be positioned in various locations within the panel using the GridBagConstraints constants such as NONE and NORTHWEST.\n * The overall behavior of this class is to simplify the process of laying out components within a panel by providing a convenient way to set constraints.\n */\n/**\n * This class contains a series of utility methods for setting up GridBagLayout constraints in Java Swing applications.\n * It provides a convenient way to add components to a panel with specific layout constraints.\n * \n * The main functionalities of this class include:\n * - Setting up GridBagLayout constraints for various components on a panel\n * - Configuring the position, size, alignment, and padding of components within the layout\n * \n * The overall behavior of this class is to simplify the process of adding components to a panel using GridBagLayout.\n * By using the Utils class, developers can easily specify the layout constraints for each component without having to manually configure them.\n * This helps in creating more organized and visually appealing GUIs in Java Swing applications.\n */\n/**\n * This class represents a GUI panel for configuring room settings.\n * It allows users to input the number of rooms, maximum number of rooms, \n * select room features, set passwords, and choose seasons.\n * \n * The main functionalities of this class include:\n * - Displaying labels and input fields for user input\n * - Providing checkboxes for selecting room features\n * - Allowing users to set passwords and choose seasons\n * - Providing buttons for canceling or confirming room settings\n * \n * The overall behavior of this class is to create a user-friendly interface \n * for configuring room settings and capturing user preferences. It uses \n * GridBagLayout to organize components within the panel and provides \n * constraints for positioning components effectively. Users can interact \n * with the panel to input their desired room settings and make selections \n * based on the available options.\n */\n/**\n * This class represents a GUI component that sets up panels for displaying various options and functionalities.\n * It provides methods to initialize the panels, handle user actions, and manage the overall behavior of the component.\n * \n * The setupPanels method initializes different panels with specific constraints and components such as labels, checkboxes, and buttons.\n * \n * The init method sets up action listeners for buttons like Annulla, Conferma, Passwd, and Stagioni to handle user interactions.\n * \n * The actionPerformed method is triggered when a user interacts with the component, and it disposes the component and enables the parent frame if it's not the first start, otherwise it exits the application.\n * \n * Overall, this class manages the setup and interaction of panels within the GUI component, providing a user-friendly interface for users to navigate and perform actions.\n */\n **/\n/**\n * This class represents a GUI component for managing user configurations in a financial application.\n * It contains various methods for handling user actions such as changing passwords, selecting currencies, and displaying alerts.\n * \n * Main functionalities include:\n * - Handling user actions for confirming changes\n * - Displaying alerts for currency conversions\n * - Changing user passwords\n * - Setting seasonal configurations\n * \n * Overall behavior:\n * The class provides a user-friendly interface for users to manage their financial settings. It allows users to confirm changes, receive alerts for currency conversions, change passwords, and set seasonal configurations. The class ensures a smooth user experience by handling user actions effectively and providing necessary feedback through alerts and dialog messages.\n */\npublic class UserConfigurationManager {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a configuration manager for a hotel management system.\n * It provides methods to set seasonal information, handle database operations, and manage user interface interactions.\n * \n * Main functionalities include:\n * - Setting seasonal information for the hotel\n * - Writing configuration data to the database\n * - Handling currency exchange operations\n * - Updating the user interface based on configuration changes\n * \n * Overall behavior:\n * - The class allows users to set seasonal information for the hotel and write it to the database.\n * - It handles database errors and displays appropriate messages to the user.\n * - It manages currency exchange operations and updates the configuration accordingly.\n * - It controls the user interface based on configuration changes, enabling or disabling certain features.\n * - It provides a method to start the confirmation process for the configuration changes.\n * - It includes a method to set seasonal definitions for the hotel.\n * - It validates user input for license, hotel name, address, and city fields.\n * \n * Note: This class is part of a larger hotel management system and works in conjunction with other classes.\n */\n*/\n/**\n * This class is responsible for validating the input fields in a form for a hotel management system.\n * It checks various criteria such as the length of the input, whether it is a positive integer or float, and other specific requirements.\n * The main functionalities of this class include validating the input fields for the hotel settings such as number of days for blocking, supplement prices, discounts, maximum number of rooms, etc.\n * The overall behavior of this class is to ensure that the input provided by the user meets the necessary criteria for the hotel management system to function correctly.\n * If any input does not meet the required criteria, a message dialog is displayed to inform the user about the specific validation error.\n */\npublic class InputValidator {\n    // Validation methods for different input fields are implemented in this class\n}\n```\n/**\n * This class represents a configuration form for a hotel management system.\n * It allows the user to input various settings and parameters related to the hotel.\n * The class includes methods for validating user input and setting the configuration values.\n * \n * The main functionalities of this class include:\n * - Setting the license information for the hotel\n * - Setting the name, address, and city of the hotel\n * - Configuring supplement rates for different seasons\n * - Configuring additional charges for infants and extra beds\n * - Setting reduction rates for children, teenagers, and groups\n * - Configuring minimum number of persons for group bookings\n * - Setting the maximum number of rooms available\n * - Configuring the price for breakfast\n * \n * The class also includes a method to check for errors in user input and display error messages.\n * \n * Overall, this class provides a comprehensive form for configuring various aspects of a hotel's operations.\n */\npublic class HotelConfigurationForm {\n    // Class implementation here\n}\n*/\n/**\n * This class represents a configuration reader for a hotel management system.\n * It provides methods to read and set various configuration parameters for the system.\n * \n * The main functionalities of this class include:\n * - Reading and setting parameters such as prices, currency, and supplements for the hotel\n * - Displaying the configured values in the user interface\n * \n * The class has methods like readDatiConf() to read and set the configuration values from the UI components.\n * \n * Overall behavior:\n * - The class reads and sets configuration values based on user input from the UI components.\n * - It handles conversion of input values to appropriate data types and updates the configuration object accordingly.\n * - It also provides methods to display the configured values in the UI for user reference.\n * \n * Note: This class assumes the existence of a Configuration object (this_config) to store the configuration values.\n */\n*/\n/**\n * This class represents a GUI component for changing user passwords.\n * It provides fields for entering the old password, new password, and confirming the new password.\n * Users can click on the \"Conferma\" button to confirm the password change, or the \"Annulla\" button to cancel the operation.\n * The \"Cambio di password\" button is disabled until the user enters the old password correctly.\n * The class also includes labels and text fields for user input, as well as layout constraints for organizing the components.\n * \n * @author [Author Name]\n * @version 1.0\n */\n/**\n * This class represents a GUI panel setup for managing user input and actions.\n * It contains methods for setting up panels, initializing components, and handling user actions.\n * The main functionalities include creating labels, text fields, buttons, and setting up layout constraints.\n * The class also includes action listeners for buttons to perform specific actions such as confirming or canceling.\n * Overall, this class provides a user-friendly interface for interacting with the application.\n */\n \npublic class GUIPanel {\n    // Class implementation here\n}\n*/\n/**\n * This class represents a GUI component for changing passwords in a system.\n * It provides functionality for users to enter their current password, verify it, and set a new password.\n * The class includes methods for handling user input, displaying messages, and updating the GUI accordingly.\n * \n * The main functionalities of this class include:\n * - Verifying the current password entered by the user\n * - Enabling the user to set a new password\n * - Displaying messages to the user based on the password verification result\n * \n * Overall behavior:\n * - When the user enters their current password and clicks a button, the system verifies the password.\n * - If the password is correct, the user can enter a new password and confirm it.\n * - If the password is incorrect, an error message is displayed to the user.\n * \n * Note: This class uses components such as buttons, labels, text fields, and panels to create the GUI interface.\n */\npublic class PasswordChangeComponent {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a GUI component that allows users to change their password.\n * It contains various components such as labels, text fields, and buttons for user interaction.\n * The class provides methods for setting up the layout, initializing components, handling user actions,\n * and changing the password based on user input.\n * \n * The main functionalities of this class include:\n * - Setting up the layout of the password change interface\n * - Initializing components such as buttons, labels, and text fields\n * - Handling user actions when buttons are clicked\n * - Verifying user input and changing the password accordingly\n * \n * Overall, this class facilitates the process of changing passwords for users in a graphical user interface.\n */\n**/\n/**\n * The ConfigurazioneSistema class represents a GUI application for system configuration. \n * It provides functionalities for setting up system configurations, changing passwords, and displaying messages.\n * \n * This class contains constructors for initializing the application with the necessary parameters. \n * It also includes methods for setting up panels, initializing components, and handling user actions.\n * \n * The main functionalities of this class include:\n * - Setting up system configurations with the Configurazione object\n * - Changing passwords with the CambioPassword constructor\n * - Displaying messages with the Messaggio constructor\n * \n * Overall, the ConfigurazioneSistema class provides a user-friendly interface for managing system configurations and passwords.\n */\n/**\n * The Messaggio class represents a GUI window for displaying messages and alerts.\n * It contains various text fields, labels, buttons, and panels for user interaction.\n * The class provides methods for setting visibility, handling password changes, and managing seasonal definitions.\n * It also includes static variables for password and current year for reference.\n * Overall, the Messaggio class serves as a versatile tool for displaying messages and handling user input.\n */\n*/\n/**\n * The \"new_stag_anno_prox\" class represents a sub-management system that handles configuration settings and data related to seasonal supplements, reductions, and currency exchange rates. It provides functionalities for managing licenses, hotel information, password changes, and defining seasonal periods.\n * \n * Main functionalities include:\n * - Setting and displaying configuration data such as license information, hotel details, and blocking days\n * - Managing seasonal supplements and reductions\n * - Handling currency exchange rates and password changes for users\n * - Defining seasonal periods for the system\n * \n * The class contains various components such as text fields, labels, buttons, and panels for user interaction. It utilizes GridBagLayout for organizing the components on the interface.\n * \n * Overall behavior:\n * - Upon initialization, the class sets the font style and creates labels for different sections of configuration data\n * - It provides text fields for entering and displaying various information such as license details, hotel information, and seasonal rates\n * - Users can interact with buttons for confirming changes, switching between functionalities, and canceling operations\n * - The class ensures a user-friendly interface for managing configuration settings and seasonal data effectively\n */\npublic class new_stag_anno_prox {\n    // Class variables and methods implementation here\n}\n*/\n/**\n * This class represents a configuration window for a hotel management system.\n * It contains various text fields and checkboxes for setting up hotel-specific parameters.\n * The main functionalities of this class include:\n * - Setting up hotel details such as name, address, and contact information\n * - Configuring room booking settings like maximum number of days for room blocking\n * - Defining supplements for different seasons (low, medium, high)\n * - Managing pricing information for services like breakfast, half board, and full board\n * - Setting up password for accessing the configuration window\n * - Providing options to switch between currency formats (Lire or Euro)\n * \n * The class also handles the initial setup of the configuration window by populating fields with default values\n * and enabling/disabling certain fields based on whether it is the first time the configuration window is opened.\n * \n * Overall, this class serves as a user-friendly interface for hotel administrators to customize and manage their hotel settings.\n */\n \npublic class HotelConfigurationWindow {\n    // Class variables and components\n    private TextField sup_bassa;\n    private TextField sup_media;\n    private TextField sup_alta;\n    private TextField sup_neonato;\n    private TextField sup_letto_agg;\n    private TextField rid_bambino;\n    private TextField rid_ragazzo;\n    private TextField rid_comitiva;\n    private TextField min_pers_comitiva;\n    private TextField num_max_stanze;\n    private TextField px_colazione;\n    private TextField px_mezza;\n    private TextField px_intera;\n    private TextField coperto;\n    private TextField costo_x_scatto;\n    private TextField password;\n    private TextField cambio;\n    private CheckboxGroup checkbox;\n    private Checkbox[] checkboxes;\n    private Label etich1;\n    private Label etich2;\n    private Label etich3;\n    private Label indirizzo_alb;\n    private Label etich4;\n    private Label etich5;\n    private Label etich6;\n    private Label etich7;\n    private Label etich8;\n    private Label etich9;\n    private Label etich10;\n    private Label etich11;\n    \n    // Constructor and methods\n    public HotelConfigurationWindow() {\n        // Initialize components and set up default values\n        // Write data to configuration file\n        // Enable/disable certain fields based on first time setup\n    }\n    \n    // Additional methods for handling user interactions and data validation\n    \n}\n```\n/**\n * This class represents a GUI for managing hotel information and settings.\n * It includes various labels and buttons for inputting and updating data related to the hotel.\n * The main functionalities of this class include:\n * - Setting up additional charges for infants, extra beds, children discounts, group discounts, etc.\n * - Defining minimum number of people for group bookings and number of rooms available.\n * - Adding supplements for breakfast, half board, full board, and restaurant cover charge.\n * - Setting up cost for a phone call and user password.\n * - Displaying currency options in Lire and Dollars.\n * - Managing hotel name and address information.\n * - Allowing users to change password, confirm changes, and define seasonal rates.\n * \n * The class layout is organized using a GridBagLayout and includes various components such as labels, buttons, and panels.\n * The behavior of the class involves user interaction through input fields and buttons to update hotel settings and information.\n */\n \npublic class HotelSettingsGUI {\n    // Class variables declaration and initialization\n    private Label etich11_1;\n    private Label etich12;\n    private Label etich13;\n    private Label etich14;\n    private Label etich15;\n    private Label etich16;\n    private Label etich17;\n    private Label etich18;\n    private Label etich19;\n    private Label etich20;\n    private Label etich21;\n    private Label etich22;\n    private Label etich23;\n    private Label etich24;\n    private Label etich25;\n    private Button Annulla;\n    private Button Passwd;\n    private Button Conferma;\n    private Button Stagioni;\n    private Panel panel0;\n    \n    /**\n     * Constructor for HotelSettingsGUI class\n     * Initializes all the labels, buttons, and panels required for hotel settings management.\n     */\n    public HotelSettingsGUI() {\n        // Initialization of all components\n        etich11_1 = new Label(\"Supplemento letto aggiuntivo\");\n        etich12 = new Label(\"Riduzione per bambini %\");\n        etich13 = new Label(\"Riduzione per ragazzi %\");\n        etich14 = new Label(\"Riduzione per comitive %\");\n        etich15 = new Label(\"Numero minimo di persone per comitiva\");\n        etich16 = new Label(\"Numero di stanze\");\n        etich17 = new Label(\"Supplemento prima colazione\");\n        etich18 = new Label(\"Supplemento mezza pensione\");\n        etich19 = new Label(\"Supplemento pensione completa\");\n        etich20 = new Label(\"Coperto per la ristorazione\");\n        etich21 = new Label(\"Costo di uno scatto telefonico\");\n        etich22 = new Label(\"Password utente\");\n        etich23 = new Label(\"Lire\");\n        etich24 = new Label(\"Dollari\");\n        etich25 = new Label(\"Ragione sociale\");\n        \n        Annulla = new Button(\"Annulla\");\n        Passwd = new Button(\"Cambio di password\");\n        Conferma = new Button(\"Conferma\");\n        Stagioni = new Button(\"Definisci Stagionalita'\");\n        \n        panel0 = new Panel();\n        panel0.setLayout(gridbag);\n        \n        // Adding components to the panel using GridBagLayout constraints\n        Utils.constrain(panel0, etichetta, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n        Utils.constrain(panel0, licenza, 1, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n        Utils.constrain(panel0, etich1, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n        Utils.constrain(panel0, etich2, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n        Utils.constrain(panel0, albergo, 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n        Utils.constrain(panel0, etich3, 2, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\n        Utils.constrain(panel0, indirizzo_alb, 3, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n    }\n}\n```\n/**\n * This class is responsible for setting up the layout of a panel by using the Utils class to constrain various components within the panel. It sets up the layout for different components such as labels, text fields, and panels using GridBagLayout.\n * \n * The main functionalities of this class include:\n * - Constrain components within a panel using the Utils class\n * - Set up the layout of the panel using GridBagLayout\n * \n * The overall behavior of this class is to create a visually appealing and organized layout for the components within a panel. It ensures that the components are arranged properly and have the desired spacing and alignment.\n * \n * Note: This class assumes that the Utils class is available and contains the necessary methods for constraining components within a panel.\n */\npublic class PanelLayoutUtils {\n    // Class implementation goes here\n}\n**/\n/**\n * This class represents a panel that displays various types of supplies and reductions.\n * It provides functionalities to add different types of supplies and reductions to the panel.\n * The supplies include bassissima, bassa, media, alta, neonato, and letto aggiuntivo.\n * The reductions include bambino and ragazzo.\n * The panel layout is configured using GridBagConstraints to properly display the supplies and reductions.\n * \n * The main functionalities of this class include:\n * - Adding supplies such as bassissima, bassa, media, alta, neonato, and letto aggiuntivo to the panel\n * - Adding reductions such as bambino and ragazzo to the panel\n * - Configuring the layout of the panel using GridBagConstraints for proper alignment\n * \n * Overall behavior:\n * This class provides a user interface for displaying and managing supplies and reductions in a hotel booking system.\n * It allows users to view and update the availability of different types of supplies and reductions for booking purposes.\n */\npublic class SuppliesPanel {\n    // class implementation goes here\n}\n*/\n/**\n * This class represents a utility for constraining components within a panel using GridBagLayout.\n * It provides methods to easily add components to a panel with specific constraints such as grid position, fill, anchor, weightx, weighty, insets, and ipadx/ipady.\n * The main functionalities of this class include adding components to a panel with custom constraints, making it easier to create complex layouts.\n * \n * The class uses static methods to add components to a panel with the specified constraints, allowing for a more flexible and organized layout design.\n * It also simplifies the process of setting up components within a panel by providing a convenient way to specify their position and alignment.\n * \n * Overall, this class enhances the usability of GridBagLayout by providing a more intuitive and efficient way to arrange components within a panel.\n * It helps developers create visually appealing and well-structured GUIs by simplifying the layout process and improving the overall design experience.\n */\n/**\n * This class represents a GUI layout for a specific application.\n * It contains panels with various components such as labels, text fields, checkboxes, and buttons.\n * The layout is organized using GridBagLayout with GridBagConstraints to specify the position and size of each component.\n * \n * Main functionalities include:\n * - Displaying labels, text fields, checkboxes, and buttons in a structured layout\n * - Allowing users to input data and interact with the application through the GUI components\n * - Providing a user-friendly interface for performing actions such as confirming or canceling operations\n * \n * Overall behavior:\n * - The class creates and configures panels with different components using GridBagLayout\n * - Components are positioned and sized according to the specified GridBagConstraints\n * - The layout is organized in a visually appealing and functional way to enhance user experience\n * - Users can interact with the GUI components to input data, make selections, and trigger actions as needed\n */\npublic class GUIPanelLayout extends Panel {\n    // Class implementation goes here\n}\n**/\n/**\n * This class represents a GUI panel setup for a specific application. It contains methods to initialize the panels, handle user actions, and manage various functionalities.\n * The setupPanels method is used to create labels, checkboxes, and buttons with specific layout constraints.\n * The init method initializes the panel by adding action listeners to buttons and checkboxes for user interaction.\n * The actionPerformed method handles user actions such as closing the panel, enabling/disabling the parent frame, and exiting the application.\n * The startConferma method is called when the user confirms an action and triggers specific functionality.\n * Overall, this class provides a user-friendly interface for the application, allowing users to interact with various elements and perform necessary actions.\n */\n/**\n * This class represents a Java program that handles various actions based on user input events.\n * It contains methods for handling item state changes and action events, as well as displaying messages and dialogs.\n * The main functionalities of this class include:\n * - Handling item state changes for checkboxes to trigger specific actions\n * - Performing actions such as changing passwords and setting seasons based on user input\n * - Displaying warning messages and confirmation dialogs for certain actions\n * \n * Overall Behavior:\n * - The class listens for item state changes and action events triggered by user interactions.\n * - When a checkbox state changes, specific actions are performed based on the checkbox selected.\n * - Actions such as changing passwords, setting seasons, and displaying messages are executed accordingly.\n * - Warning messages are displayed when necessary, and confirmation dialogs are shown for certain actions.\n * \n * Note: This class contains multiple methods for handling different types of events and actions, providing a comprehensive functionality for user interactions.\n */\npublic class UserInteractionHandler {\n    // Class implementation goes here\n}\n*/\n/**\n * This class represents a GUI window for configuring a hotel management system.\n * It provides functionality for setting up initial configurations, such as defining seasonal periods and entering basic information about the hotel.\n * The class also handles database interactions for storing and retrieving configuration data.\n * \n * Main functionalities include:\n * - Setting up seasonal periods using the setStagioni method.\n * - Validating and saving basic hotel information, such as name, address, and license details.\n * - Handling database operations for storing and retrieving configuration data.\n * - Displaying error messages for invalid input or database errors.\n * \n * Overall behavior:\n * - Upon initialization, the class prompts the user to set up seasonal periods using the setStagioni method.\n * - It then allows the user to enter basic hotel information and validates the input.\n * - If the input is valid, the class saves the configuration data to the database and closes the configuration window.\n * - If there are any errors during database operations, error messages are displayed to the user.\n */\n*/\n/**\n * This class is responsible for validating input fields in a hotel management system GUI.\n * It checks if the input values are valid and displays error messages if they are not.\n * The main functionalities of this class include validating the number of days for a block, \n * the prices for different supplements, discounts for children and groups, \n * the maximum number of rooms, and various other parameters related to hotel management.\n * \n * The overall behavior of this class is to ensure that the user enters valid input values \n * for the hotel management system, and to provide informative error messages if any input is incorrect.\n * It uses utility methods from the Utils class to perform the validation checks.\n */\n/**\n * This class represents a configuration object for a hotel management system.\n * It stores various settings and parameters related to the hotel, such as license information, hotel name, address, pricing details, and more.\n * The main functionalities of this class include setting and retrieving configuration values for the hotel, such as license, hotel name, address, pricing, and other parameters.\n * The class also provides methods to validate and update the configuration values based on user input.\n * Overall, this class serves as a central data structure for storing and managing hotel configuration settings.\n */\n/**\n * This class represents a configuration reader for a hotel management system.\n * It provides methods to read and set various configuration parameters for the system.\n * The main functionalities of this class include reading and setting parameters such as license information, hotel name, address, city, pricing details, and other configuration settings.\n * The class also allows for the conversion of currency values between Lire and Euro based on user input.\n * Overall, this class serves as a utility for managing and updating configuration settings for the hotel management system.\n * \n * @author [Your Name]\n * @version 1.0\n */\n*/\n/**\n * This class represents a GUI component for changing passwords.\n * It provides a form for users to input their old password, new password, and confirm the new password.\n * Users can then confirm the password change or cancel the operation.\n * The class also handles the display of the password change form and the logic for changing passwords.\n * \n * Main functionalities include:\n * - Creating labels and text fields for old password, new password, and confirm new password\n * - Setting up buttons for confirming password change, canceling the operation, and enabling password change\n * - Handling user input and validation for password change\n * \n * Overall behavior:\n * - Displays a password change form with input fields and buttons\n * - Allows users to input their old password, new password, and confirm new password\n * - Validates user input and enables password change button when all fields are filled correctly\n * - Handles password change operation when confirmed by the user\n */\n*/\nSure! Here is a sample JavaDoc comment for the class:\n\n/**\n * This class represents a GUI panel setup for a specific application. It contains methods for initializing the panel components, setting up the layout using GridBagConstraints, and handling various action events.\n * \n * The setupPanels method initializes the panel layout with specific constraints using GridBagConstraints. It creates labels and text fields and adds them to the panel.\n * \n * The init method sets up action listeners for buttons and text fields. The 'annulla' button disposes of the panel and enables another component. The 'conferma' button and text fields 'testo1' and 'testo2' trigger the 'g()' method when clicked. The 'cambio' button triggers the 'i()' method.\n * \n * The actionPerformed methods handle specific actions triggered by buttons and text fields. The 'dispose()' method disposes of the panel and enables another component.\n * \n * Overall, this class provides functionality for setting up a GUI panel with specific components and handling user interactions through action events.\n */\n \nI hope this helps! Let me know if you need any further assistance.\n/**\n * This class represents a password change dialog window.\n * It allows the user to change their password by entering the current password,\n * verifying it, and then entering a new password.\n * \n * The main functionalities of this class include:\n * - Verifying the current password entered by the user\n * - Allowing the user to enter a new password\n * - Displaying error messages if the password entered is incorrect\n * - Providing a confirmation message after successfully changing the password\n * \n * The behavior of this class is as follows:\n * - When the user enters the correct current password, the text field for the new password becomes editable\n * - The user can then enter a new password and confirm the change by clicking the \"OK\" button\n * - If the current password entered is incorrect, an error message is displayed\n * - After successfully changing the password, a confirmation message is displayed\n * \n * This class uses various components such as labels, text fields, buttons, and panels to create the dialog window.\n * It also utilizes a custom MessageDialog class for displaying messages to the user.\n */\n**/\n/**\n * This class represents a GUI component for changing passwords in a system.\n * It contains buttons, labels, and text fields for user interaction.\n * The class provides methods for initializing the GUI, handling user actions,\n * and updating the password based on user input.\n * \n * The main functionalities of this class include:\n * - Creating a password change interface with buttons and text fields\n * - Validating user input for password change\n * - Displaying messages to the user based on the outcome of the password change\n * \n * The class defines methods for setting up the GUI components, initializing the \n * interface, handling user actions such as clicking buttons, and updating the \n * password based on user input. It also includes methods for exiting the interface \n * and displaying messages to the user.\n * \n * Overall, this class provides a user-friendly interface for changing passwords \n * in a system and ensures proper validation and feedback to the user.\n */\n **/\n/**\n * The Avviso class represents a dialog window that displays a warning message to the user.\n * It provides a simple interface for displaying alerts and blocking user interaction with the parent window.\n * \n * This class includes constructors for creating different types of warning messages, such as password change alerts.\n * It also contains a method to handle user interaction by disabling the parent window and displaying the warning message.\n * \n * The Avviso class is designed to be used in conjunction with other GUI components to provide informative alerts to the user.\n * It includes functionality for setting custom fonts and displaying buttons for user interaction.\n * \n * Overall, the Avviso class serves as a useful tool for displaying important messages and warnings to the user in a clear and concise manner.\n */\n/**\n * This class represents a configuration manager for a hotel management system.\n * It provides functionality for setting and managing various parameters and settings for the hotel.\n * The class includes fields for different types of fonts, text fields for inputting various parameters such as room rates, discounts, and passwords,\n * labels for displaying information, panels for organizing the layout, and buttons for performing actions such as saving changes and managing seasons.\n * The class also includes functionality for handling database operations and managing user authentication.\n * \n * The main functionalities of this class include:\n * - Setting and managing various parameters and settings for the hotel\n * - Handling user authentication and password management\n * - Managing room rates, discounts, and seasonal pricing\n * - Organizing the layout of the configuration interface using panels and labels\n * - Performing database operations for storing and retrieving configuration data\n * \n * The overall behavior of this class is to provide a user-friendly interface for configuring and managing the settings of the hotel management system.\n * It allows users to input and save various parameters, view information through labels, and perform actions using buttons.\n * The class ensures that the configuration data is stored securely and can be accessed and modified as needed.\n */\npublic class ConfigurationManager {\n    // Class implementation goes here\n}\n*/\n/**\n * The FrameConf class represents a graphical user interface for changing a password.\n * It contains buttons for confirming, changing, and canceling the password change process.\n * The class also includes a message dialog for displaying messages to the user.\n * Users can input their current password and a new password in the text fields provided.\n * The class utilizes a GridBagLayout to arrange the components in the frame.\n * \n * The main functionalities of the FrameConf class include:\n * - Allowing users to change their password by entering their current password and a new password\n * - Providing options for confirming, changing, or canceling the password change process\n * - Displaying messages to the user using a message dialog\n * \n * The overall behavior of the class is to provide a user-friendly interface for changing passwords.\n * It ensures that users can easily navigate the password change process and receive feedback through message dialogs.\n * The class also handles user input validation to ensure the security and integrity of the password change process.\n */\npublic class FrameConf {\n    // class implementation goes here\n}\n```"
    },
    {
        "methods": [
            {
                "body": "Optional[{\r\n    this.setFont(font_base);\r\n    //creo le etichette\r\n    cambio_L_E = new Label(\"Cambio Lira <-> EURO\");\r\n    etichetta = new Label(\"Licenza:\");\r\n    etichetta.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta1 = new Label(\"DATI DI CONFIGURAZIONE\");\r\n    etichetta1.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta2 = new Label(\"Supplementi dovuto alle stagionionalita'\");\r\n    etichetta2.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta3 = new Label(\"Riduzioni\");\r\n    etichetta3.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta4 = new Label(\"Ristorazione\");\r\n    etichetta4.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta5 = new Label(\"Valuta\");\r\n    etichetta5.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta6 = new Label(\"Cambio di password utente\");\r\n    etichetta6.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta7 = new Label(\"Definizione delle stagionalita'\");\r\n    etichetta7.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    licenza = new TextField(\"\", 35);\r\n    albergo = new TextField(\"\", 25);\r\n    comune_alb = new TextField(\"\", 35);\r\n    citta_alb = new TextField(\"\", 25);\r\n    indirizzo_alb = new TextField(\"\", 35);\r\n    rag_soc = new TextField(\"\", 35);\r\n    giorni_blocco = new TextField(\"\", 4);\r\n    sup_bassissima = new TextField(\"\", 9);\r\n    sup_bassa = new TextField(\"\", 9);\r\n    sup_media = new TextField(\"\", 9);\r\n    sup_alta = new TextField(\"\", 9);\r\n    sup_neonato = new TextField(\"\", 9);\r\n    sup_letto_agg = new TextField(\"\", 9);\r\n    rid_bambino = new TextField(\"\", 4);\r\n    rid_ragazzo = new TextField(\"\", 4);\r\n    rid_comitiva = new TextField(\"\", 4);\r\n    min_pers_comitiva = new TextField(\"\", 4);\r\n    num_max_stanze = new TextField(\"\", 4);\r\n    num_max_stanze.setEditable(false);\r\n    px_colazione = new TextField(\"\", 9);\r\n    px_mezza = new TextField(\"\", 9);\r\n    px_intera = new TextField(\"\", 9);\r\n    coperto = new TextField(\"\", 9);\r\n    costo_x_scatto = new TextField(\"\", 9);\r\n    password = new TextField(\"\", 20);\r\n    cambio = new TextField(\"\", 8);\r\n    //creo un Checkbox\r\n    checkbox = new CheckboxGroup();\r\n    checkboxes = new Checkbox[2];\r\n    checkboxes[0] = new Checkbox(\" Lire\", checkbox, true);\r\n    checkboxes[1] = new Checkbox(\" EURO\", checkbox, false);\r\n    writeDatiConf();\r\n    if (prima_volta)\r\n        licenza.setEditable(true);\r\n    else\r\n        licenza.setEditable(false);\r\n    licenza.setForeground(Color.red.darker());\r\n    albergo.setForeground(Color.blue);\r\n    comune_alb.setForeground(Color.blue);\r\n    citta_alb.setForeground(Color.blue);\r\n    rag_soc.setForeground(Color.blue);\r\n    password.setEchoChar('*');\r\n    etich1 = new Label(\"Dati dell'albergo\");\r\n    etich1.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etich2 = new Label(\"Nome dell'albergo:\");\r\n    etich3 = new Label(\"Indirizzo dell'albergo:\");\r\n    indirizzo_alb.setForeground(Color.blue);\r\n    etich4 = new Label(\"Comune dell'albergo:\");\r\n    etich5 = new Label(\"Citta' dell'albergo:\");\r\n    etich6 = new Label(\"Numero di giorni massimo di bloccaggio di una stanza\");\r\n    etich7 = new Label(\"Supplemento bassisima stagione\");\r\n    etich8 = new Label(\"Supplemento bassa stagione\");\r\n    etich9 = new Label(\"Supplemento media stagione\");\r\n    etich10 = new Label(\"Supplemento alta stagione\");\r\n    etich11 = new Label(\"Supplemento per neonati\");\r\n    etich11_1 = new Label(\"Supplemento letto aggiuntivo\");\r\n    etich12 = new Label(\"Riduzione per bambini %\");\r\n    etich13 = new Label(\"Riduzione per ragazzi %\");\r\n    etich14 = new Label(\"Riduzione per comitive %\");\r\n    etich15 = new Label(\"Numero minimo di persone per comitiva\");\r\n    etich16 = new Label(\"Numero di stanze\");\r\n    etich17 = new Label(\"Supplemento prima colazione\");\r\n    etich18 = new Label(\"Supplemento mezza pensione\");\r\n    etich19 = new Label(\"Supplemento pensione completa\");\r\n    etich20 = new Label(\"Coperto per la ristorazione\");\r\n    etich21 = new Label(\"Costo di uno scatto telefonico\");\r\n    etich22 = new Label(\"Password utente\");\r\n    etich23 = new Label(\"Lire\");\r\n    etich24 = new Label(\"Dollari\");\r\n    etich25 = new Label(\"Ragione sociale\");\r\n    //creo i pulsanti\r\n    Annulla = new Button(\"Annulla\");\r\n    Passwd = new Button(\"Cambio di password\");\r\n    Conferma = new Button(\"Conferma\");\r\n    Stagioni = new Button(\"Definisci Stagionalita'\");\r\n    panel0 = new Panel();\r\n    panel0.setLayout(gridbag);\r\n    Utils.constrain(panel0, etichetta, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, licenza, 1, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, etich1, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, etich2, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, albergo, 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich3, 2, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, indirizzo_alb, 3, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich4, 0, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, comune_alb, 1, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich5, 2, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, citta_alb, 3, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich25, 0, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, rag_soc, 1, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel1 = new Panel();\r\n    panel1.setLayout(gridbag);\r\n    Utils.constrain(panel1, etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etich6, 0, 1, 5, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, giorni_blocco, 5, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etich21, 7, 1, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, costo_x_scatto, 10, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta2, 0, 2, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta3, 5, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta4, 8, 2, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    // supplementi\r\n    Utils.constrain(panel1, etich7, 0, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_bassissima, 3, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich8, 0, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_bassa, 3, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich9, 0, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_media, 3, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich10, 0, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_alta, 3, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich11, 0, 7, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_neonato, 3, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich11_1, 0, 8, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_letto_agg, 3, 8, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    // riduzioni\r\n    Utils.constrain(panel1, etich12, 4, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_bambino, 7, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich13, 4, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_ragazzo, 7, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich14, 4, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_comitiva, 7, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich15, 4, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, min_pers_comitiva, 7, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    // ristorazione\r\n    Utils.constrain(panel1, etich17, 8, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_colazione, 11, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich18, 8, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_mezza, 11, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich19, 8, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_intera, 11, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich20, 8, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, coperto, 11, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, cambio_L_E, 5, 7, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, cambio, 7, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich16, 9, 7, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, num_max_stanze, 11, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel2 = new Panel();\r\n    panel2.setLayout(gridbag);\r\n    Utils.constrain(panel2, etichetta5, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    panel3 = new Panel();\r\n    panel3.setLayout(gridbag);\r\n    Utils.constrain(panel3, etichetta6, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, Passwd, 1, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, etichetta7, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, Stagioni, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel4 = new Panel();\r\n    panel4.setLayout(gridbag);\r\n    Utils.constrain(panel4, Annulla, 8, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel4, Conferma, 9, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, panel0, 0, 0, 12, 6, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel1, 0, 6, 12, 9, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel2, 0, 15, 1, 3, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel3, 1, 15, 11, 2, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel4, 0, 19, 12, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void setupPanels(boolean)",
                "comments": null,
                "innerComments": "Optional[[//creo le etichette\r\n, //creo un Checkbox\r\n, //creo i pulsanti\r\n, // supplementi\r\n, // riduzioni\r\n, // ristorazione\r\n]]"
            },
            {
                "body": "Optional[{\r\n    Annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            if (!first_start)\r\n                padre.setEnabled(true);\r\n            else\r\n                System.exit(0);\r\n        }\r\n    });\r\n    Conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startConferma();\r\n        }\r\n    });\r\n    checkboxes[0].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[0].getState()) {\r\n                startAvviso(Const.LIRE);\r\n            }\r\n        }\r\n    });\r\n    checkboxes[1].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[1].getState()) {\r\n                startAvviso(Const.EURO);\r\n            }\r\n        }\r\n    });\r\n    Passwd.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startChangePwd();\r\n        }\r\n    });\r\n    Stagioni.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            setStagioni();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    if (!first_start)\r\n        padre.setEnabled(true);\r\n    else\r\n        System.exit(0);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startConferma();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[0].getState()) {\r\n        startAvviso(Const.LIRE);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[1].getState()) {\r\n        startAvviso(Const.EURO);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startChangePwd();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    setStagioni();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (nuova_valuta != this_config.getValuta() && !first_start) {\r\n        msg = new AvvisoDialog(this, \"Attenzione: il cambio LIRA<->EURO effettuato alla conferma modifichera' le cifre della finestra corrente!\");\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startAvviso(char)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    this.setEnabled(false);\r\n    CambioPassword cambio = new CambioPassword();\r\n    cambio.setVisible(true);\r\n    cambio.conf = this;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startChangePwd()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    MessageDialog msg;\r\n    int j;\r\n    if (!errore()) {\r\n        char vecchia_valuta = this_config.getValuta();\r\n        readDatiConf();\r\n        this_config.setPassword(new_passwd);\r\n        this_config.setStagionalita(new_stag_anno_corr, new_stag_anno_prox);\r\n        if ((j = (db.writeConfigurazione(this_config))) != DataBase.OK) {\r\n            msg = new MessageDialog(this, \"Problemi con il database: \" + DataBase.strErrore(j));\r\n        } else {\r\n            if (vecchia_valuta != this_config.getValuta() && !first_start) {\r\n                j = (Principale.db).startCambioValuta();\r\n                if (j != DataBase.OK) {\r\n                    msg = new MessageDialog(this, \"Errore con il database: \" + DataBase.strErrore(j));\r\n                    return;\r\n                }\r\n                this_config = (Principale.db).readConfigurazione();\r\n                Principale.config = this_config;\r\n            }\r\n            if (!(first_start)) {\r\n                padre.pass.p.setTitle(this_config.getNomeAlbergo());\r\n                padre.setEnabled(true);\r\n            } else {\r\n                Frame p = new Principale(this_config, db);\r\n                p.setVisible(true);\r\n            }\r\n            dispose();\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startConferma()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    def_stag = new DefinizioneStagionalita(this);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void setStagioni()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (!((licenza.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" La licenza deve essere composta da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((albergo.getText()).length() < 21)) {\r\n        msg = new MessageDialog(this, \" Il nome dell'albergo deve essere composto da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((comune_alb.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" Il comune deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((indirizzo_alb.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" L'indirizzo deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((citta_alb.getText()).length() < 21)) {\r\n        msg = new MessageDialog(this, \" La citta' deve essere composta da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((rag_soc.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" La ragione sociale deve essere composta da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(giorni_blocco.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di giorni di blocco deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(sup_bassissima.getText()) || !Utils.isFloatPos(sup_bassa.getText()) || !Utils.isFloatPos(sup_media.getText()) || !Utils.isFloatPos(sup_alta.getText()) || !Utils.isFloatPos(sup_neonato.getText()) || !Utils.isFloatPos(sup_letto_agg.getText()) || !Utils.isFloatPos(px_colazione.getText()) || !Utils.isFloatPos(px_mezza.getText()) || !Utils.isFloatPos(px_intera.getText())) {\r\n        msg = new MessageDialog(this, \" I supplementi devono essere numeri positivi! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(rid_bambino.getText()) || !Utils.isIntPos(rid_ragazzo.getText()) || !Utils.isIntPos(rid_comitiva.getText())) {\r\n        msg = new MessageDialog(this, \" deve essere un numero intero! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(min_pers_comitiva.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di persone comitiva deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(num_max_stanze.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di stanze deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(coperto.getText())) {\r\n        msg = new MessageDialog(this, \" Il coperto deve essere un numero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(costo_x_scatto.getText())) {\r\n        msg = new MessageDialog(this, \" Il costo dello scatto telefonico deve essere un numero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(cambio.getText())) {\r\n        msg = new MessageDialog(this, \" Il coefficiente di cambio LIRE<->EURO deve essere un numero positivo e diverso da zero! \");\r\n        return true;\r\n    } else if (!((Float.valueOf(cambio.getText())).floatValue() > 0)) {\r\n        msg = new MessageDialog(this, \" Il coefficiente di cambio LIRE<->EURO deve essere un numero positivo e diverso da zero! \");\r\n        return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " boolean errore()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    this_config.setLicenza(licenza.getText());\r\n    this_config.setNomeAlbergo(albergo.getText());\r\n    this_config.setComuneAlb(comune_alb.getText());\r\n    this_config.setIndirizzoAlb(indirizzo_alb.getText());\r\n    this_config.setCittaAlb(citta_alb.getText());\r\n    this_config.setRagSoc(rag_soc.getText());\r\n    this_config.setGiorniBlocco(Integer.parseInt(giorni_blocco.getText()));\r\n    this_config.setSupplemento((Float.valueOf(sup_bassissima.getText())).floatValue(), Flag.BASSISSIMA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_bassa.getText())).floatValue(), Flag.BASSA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_media.getText())).floatValue(), Flag.MEDIA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_alta.getText())).floatValue(), Flag.ALTA_STAGIONE);\r\n    this_config.setSupNeonato((Float.valueOf(sup_neonato.getText())).floatValue());\r\n    this_config.setSupLettoAgg((Float.valueOf(sup_letto_agg.getText())).floatValue());\r\n    this_config.setRiduzione(Integer.parseInt(rid_bambino.getText()), Flag.BAMBINO);\r\n    this_config.setRiduzione(Integer.parseInt(rid_ragazzo.getText()), Flag.RAGAZZO);\r\n    this_config.setRiduzione(Integer.parseInt(rid_comitiva.getText()), Flag.COMITIVA);\r\n    this_config.setMinPersComit(Integer.parseInt(min_pers_comitiva.getText()));\r\n    this_config.setNumStanze(Integer.parseInt(num_max_stanze.getText()));\r\n    this_config.setPxColazione((Float.valueOf(px_colazione.getText())).floatValue());\r\n    this_config.setPxMezza((Float.valueOf(px_mezza.getText())).floatValue());\r\n    this_config.setPxIntera((Float.valueOf(px_intera.getText())).floatValue());\r\n    this_config.setCoperto((Float.valueOf(coperto.getText())).floatValue());\r\n    this_config.setCostoXScatto((Float.valueOf(costo_x_scatto.getText())).floatValue());\r\n    this_config.setCoeffXCambio((Float.valueOf(cambio.getText())).floatValue());\r\n    if (checkboxes[0].getState())\r\n        this_config.setValuta(Const.LIRE);\r\n    else\r\n        this_config.setValuta(Const.EURO);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void readDatiConf()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    //String s = new String(Principale.simbol);\r\n    licenza.setText(\"\" + this_config.getLicenza());\r\n    albergo.setText(\"\" + this_config.getNomeAlbergo());\r\n    comune_alb.setText(\"\" + this_config.getComuneAlb());\r\n    indirizzo_alb.setText(\"\" + this_config.getIndirizzoAlb());\r\n    citta_alb.setText(\"\" + this_config.getCittaAlb());\r\n    rag_soc.setText(\"\" + this_config.getRagSoc());\r\n    giorni_blocco.setText(\"\" + this_config.getGiorniBlocco());\r\n    sup_bassissima.setText(\"\" + this_config.getSupplemento(Flag.BASSISSIMA_STAGIONE));\r\n    sup_bassa.setText(\"\" + this_config.getSupplemento(Flag.BASSA_STAGIONE));\r\n    sup_media.setText(\"\" + this_config.getSupplemento(Flag.MEDIA_STAGIONE));\r\n    sup_alta.setText(\"\" + this_config.getSupplemento(Flag.ALTA_STAGIONE));\r\n    sup_neonato.setText(\"\" + this_config.getSupNeonato());\r\n    sup_letto_agg.setText(\"\" + this_config.getSupLettoAgg());\r\n    rid_bambino.setText(\"\" + this_config.getRiduzione(Flag.BAMBINO));\r\n    rid_ragazzo.setText(\"\" + this_config.getRiduzione(Flag.RAGAZZO));\r\n    rid_comitiva.setText(\"\" + this_config.getRiduzione(Flag.COMITIVA));\r\n    min_pers_comitiva.setText(\"\" + this_config.getMinPersComit());\r\n    num_max_stanze.setText(\"\" + this_config.getNumStanze());\r\n    px_colazione.setText(\"\" + this_config.getPxColazione());\r\n    px_mezza.setText(\"\" + this_config.getPxMezza());\r\n    px_intera.setText(\"\" + this_config.getPxIntera());\r\n    coperto.setText(\"\" + this_config.getCoperto());\r\n    costo_x_scatto.setText(\"\" + this_config.getCostoXScatto());\r\n    cambio.setText(\"\" + this_config.getCoeffXCambio());\r\n    if (this_config.getValuta() == Const.LIRE)\r\n        checkbox.setSelectedCheckbox(checkboxes[0]);\r\n    else\r\n        checkbox.setSelectedCheckbox(checkboxes[1]);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void writeDatiConf()",
                "comments": null,
                "innerComments": "Optional[[//String s = new String(Principale.simbol);\r\n]]"
            },
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //creo le etichette\r\n    label1 = new Label(\"Inserire vecchia password\");\r\n    label2 = new Label(\"Inserire nuova password\");\r\n    label3 = new Label(\"Reinserire la nuova password\");\r\n    //creo i textField\r\n    testo1 = new TextField(\"\", 20);\r\n    testo2 = new TextField(\"\", 20);\r\n    testo1.setEchoChar('*');\r\n    testo2.setEchoChar('*');\r\n    testo2.setEditable(false);\r\n    conferma = new Button(\"Conferma\");\r\n    cambio = new Button(\"Cambio di password\");\r\n    cambio.setEnabled(false);\r\n    annulla = new Button(\"Annulla\");\r\n    pannello = new Panel();\r\n    pannello.setLayout(grid);\r\n    Utils.constrain(pannello, label1, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo1, 2, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, label2, 0, 1, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo2, 2, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, conferma, 3, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, cambio, 3, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    pannello_x_annulla = new Panel();\r\n    pannello_x_annulla.setLayout(grid);\r\n    Utils.constrain(pannello_x_annulla, annulla, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(grid);\r\n    Utils.constrain(this, pannello, 0, 0, 4, 2, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, pannello_x_annulla, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setupPanels()",
                "comments": null,
                "innerComments": "Optional[[//creo le etichette\r\n, //creo i textField\r\n]]"
            },
            {
                "body": "Optional[{\r\n    annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            conf.setEnabled(true);\r\n        }\r\n    });\r\n    conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            g();\r\n        }\r\n    });\r\n    testo1.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            g();\r\n        }\r\n    });\r\n    cambio.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            i();\r\n        }\r\n    });\r\n    testo2.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            i();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    conf.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    g();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    g();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    i();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    i();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String tmp = testo1.getText();\r\n    if (tmp.equals(ConfigurazioneSistema.new_passwd)) {\r\n        testo2.setEditable(true);\r\n        testo1.setEditable(false);\r\n        cambio.setEnabled(true);\r\n        conferma.setEnabled(false);\r\n    } else {\r\n        dialog = new MessageDialog(this, \"La password non e' corretta\");\r\n        dialog.setVisible(true);\r\n        testo1.setText(\"\");\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void g()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String tmp = testo2.getText();\r\n    Messaggio messaggio1 = new Messaggio(tmp);\r\n    messaggio1.setVisible(true);\r\n    messaggio1.c = this;\r\n    this.setEnabled(false);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void i()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //creo un pulsante\r\n    OK = new Button(\"OK\");\r\n    //creo un'etichetta\r\n    msg = new Label(\"Reinserire la nuova password\");\r\n    //creo un textField\r\n    testo3 = new TextField(\"\", 20);\r\n    testo3.setEchoChar('*');\r\n    pannello = new Panel();\r\n    pannello.setLayout(gridbag);\r\n    Utils.constrain(pannello, msg, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo3, 2, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, OK, 4, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, pannello, 0, 0, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setup()",
                "comments": null,
                "innerComments": "Optional[[//creo un pulsante\r\n, //creo un'etichetta\r\n, //creo un textField\r\n]]"
            },
            {
                "body": "Optional[{\r\n    OK.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startOK();\r\n        }\r\n    });\r\n    testo3.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startOK();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startOK();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startOK();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if ((testo3.getText()).equals(pwd_passata)) {\r\n        ConfigurazioneSistema.new_passwd = testo3.getText();\r\n        dialog = new Avviso(this, \"La password verra' cambiata alla conferma\");\r\n    } else\r\n        dialog = new Avviso(this, \"La nuova password non e' stata accettata\");\r\n    dialog.setVisible(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startOK()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    OK.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            esci();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    esci();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    padre.dispose();\r\n    padre.c.dispose();\r\n    padre.c.conf.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void esci()",
                "comments": null,
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"Configurazione di sistema\");\r\n    this_config = config;\r\n    db = archivio;\r\n    new_passwd = this_config.getPassword();\r\n    new_stag_anno_corr = this_config.getStagionalita(Const.ANNO_CORRENTE);\r\n    new_stag_anno_prox = this_config.getStagionalita(Const.ANNO_PROSSIMO);\r\n    first_start = prima_volta;\r\n    setupPanels(prima_volta);\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public ConfigurazioneSistema(Configurazione, boolean, DataBase)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(\"Cambio di password\");\r\n    setupPanels();\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public CambioPassword()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(\"Messaggio per il cambio di password\");\r\n    setup();\r\n    pwd_passata = text;\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public Messaggio(String)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(\"Attenzione\");\r\n    padre = parent;\r\n    padre.setEnabled(false);\r\n    this.setFont(ConfigurazioneSistema.font_titolo);\r\n    Panel textPanel = new Panel();\r\n    Panel buttonPanel = new Panel();\r\n    textPanel.add(new Label(testo));\r\n    OK = new Button(\"OK\");\r\n    buttonPanel.add(OK);\r\n    add(\"North\", textPanel);\r\n    add(\"Center\", buttonPanel);\r\n    init();\r\n    pack();\r\n    setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public Avviso(Messaggio, String)",
                "comments": null,
                "innerComments": null
            }
        ],
        "signature": "CambioPassword",
        "variables": [
            "public  static  final Font font_base",
            "public  static  final Font font_sub",
            "public  static  final Font font_titolo",
            "public  static  final Font font_allineato",
            " TextField giorni_blocco",
            " TextField sup_bassissima",
            " TextField sup_bassa",
            " TextField sup_media",
            " TextField sup_alta",
            " TextField sup_letto_agg",
            " TextField costo_x_scatto",
            " TextField sup_neonato",
            " TextField rid_bambino",
            " TextField rid_ragazzo",
            " TextField rid_comitiva",
            " TextField password",
            " TextField num_max_stanze",
            " TextField px_colazione",
            " TextField px_mezza",
            " TextField px_intera",
            " TextField coperto",
            " TextField min_pers_comitiva",
            " TextField cambio",
            " TextField albergo",
            " TextField indirizzo_alb",
            " TextField comune_alb",
            " TextField citta_alb",
            " TextField rag_soc",
            " TextField licenza",
            " Label cambio_L_E",
            " Label etichetta",
            " Label etich1",
            " Label etich2",
            " Label etich3",
            " Label etich4",
            " Label etich5",
            " Label etich6",
            " Label etich7",
            " Label etich8",
            " Label etich9",
            " Label etich10",
            " Label etich11",
            " Label etich11_1",
            " Label etich12",
            " Label etich13",
            " Label etich14",
            " Label etich15",
            " Label etich16",
            " Label etich17",
            " Label etich18",
            " Label etich19",
            " Label etich20",
            " Label etichetta1",
            " Label etichetta2",
            " Label etichetta3",
            " Label etichetta4",
            " Label etichetta5",
            " Label etich21",
            " Label etich22",
            " Label etichetta6",
            " Label etich23",
            " Label etich24",
            " Label etich25",
            " Label etichetta7",
            " Panel panel0",
            " Panel panel1",
            " Panel panel2",
            " Panel panel3",
            " Panel panel4",
            " GridBagLayout gridbag",
            " CheckboxGroup checkbox",
            " Checkbox checkboxes",
            " Button Annulla",
            " Button Passwd",
            " Button Conferma",
            " Button Stagioni",
            " DefinizioneStagionalita def_stag",
            "static String new_passwd",
            "static char new_stag_anno_corr",
            "static char new_stag_anno_prox",
            " SubGestione padre",
            "static Configurazione this_config",
            " DataBase db",
            " boolean first_start",
            " TextField testo1",
            " TextField testo2",
            " TextField testo3",
            " Label label1",
            " Label label2",
            " Label label3",
            " GridBagLayout grid",
            " Panel pannello",
            " Panel pannello_x_annulla",
            " Frame conf",
            " Button conferma",
            " Button cambio",
            " Button annulla",
            " MessageDialog dialog",
            " Label msg",
            " Button OK",
            " CambioPassword c",
            " Avviso dialog",
            " GridBagLayout gridbag",
            " TextField testo3",
            " Panel pannello",
            " String pwd_passata",
            " Button OK",
            " Messaggio padre"
        ]
    },
    {
        "methods": [
            {
                "body": "Optional[{\r\n    this.setFont(font_base);\r\n    //creo le etichette\r\n    cambio_L_E = new Label(\"Cambio Lira <-> EURO\");\r\n    etichetta = new Label(\"Licenza:\");\r\n    etichetta.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta1 = new Label(\"DATI DI CONFIGURAZIONE\");\r\n    etichetta1.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta2 = new Label(\"Supplementi dovuto alle stagionionalita'\");\r\n    etichetta2.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta3 = new Label(\"Riduzioni\");\r\n    etichetta3.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta4 = new Label(\"Ristorazione\");\r\n    etichetta4.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta5 = new Label(\"Valuta\");\r\n    etichetta5.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta6 = new Label(\"Cambio di password utente\");\r\n    etichetta6.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta7 = new Label(\"Definizione delle stagionalita'\");\r\n    etichetta7.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    licenza = new TextField(\"\", 35);\r\n    albergo = new TextField(\"\", 25);\r\n    comune_alb = new TextField(\"\", 35);\r\n    citta_alb = new TextField(\"\", 25);\r\n    indirizzo_alb = new TextField(\"\", 35);\r\n    rag_soc = new TextField(\"\", 35);\r\n    giorni_blocco = new TextField(\"\", 4);\r\n    sup_bassissima = new TextField(\"\", 9);\r\n    sup_bassa = new TextField(\"\", 9);\r\n    sup_media = new TextField(\"\", 9);\r\n    sup_alta = new TextField(\"\", 9);\r\n    sup_neonato = new TextField(\"\", 9);\r\n    sup_letto_agg = new TextField(\"\", 9);\r\n    rid_bambino = new TextField(\"\", 4);\r\n    rid_ragazzo = new TextField(\"\", 4);\r\n    rid_comitiva = new TextField(\"\", 4);\r\n    min_pers_comitiva = new TextField(\"\", 4);\r\n    num_max_stanze = new TextField(\"\", 4);\r\n    num_max_stanze.setEditable(false);\r\n    px_colazione = new TextField(\"\", 9);\r\n    px_mezza = new TextField(\"\", 9);\r\n    px_intera = new TextField(\"\", 9);\r\n    coperto = new TextField(\"\", 9);\r\n    costo_x_scatto = new TextField(\"\", 9);\r\n    password = new TextField(\"\", 20);\r\n    cambio = new TextField(\"\", 8);\r\n    //creo un Checkbox\r\n    checkbox = new CheckboxGroup();\r\n    checkboxes = new Checkbox[2];\r\n    checkboxes[0] = new Checkbox(\" Lire\", checkbox, true);\r\n    checkboxes[1] = new Checkbox(\" EURO\", checkbox, false);\r\n    writeDatiConf();\r\n    if (prima_volta)\r\n        licenza.setEditable(true);\r\n    else\r\n        licenza.setEditable(false);\r\n    licenza.setForeground(Color.red.darker());\r\n    albergo.setForeground(Color.blue);\r\n    comune_alb.setForeground(Color.blue);\r\n    citta_alb.setForeground(Color.blue);\r\n    rag_soc.setForeground(Color.blue);\r\n    password.setEchoChar('*');\r\n    etich1 = new Label(\"Dati dell'albergo\");\r\n    etich1.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etich2 = new Label(\"Nome dell'albergo:\");\r\n    etich3 = new Label(\"Indirizzo dell'albergo:\");\r\n    indirizzo_alb.setForeground(Color.blue);\r\n    etich4 = new Label(\"Comune dell'albergo:\");\r\n    etich5 = new Label(\"Citta' dell'albergo:\");\r\n    etich6 = new Label(\"Numero di giorni massimo di bloccaggio di una stanza\");\r\n    etich7 = new Label(\"Supplemento bassisima stagione\");\r\n    etich8 = new Label(\"Supplemento bassa stagione\");\r\n    etich9 = new Label(\"Supplemento media stagione\");\r\n    etich10 = new Label(\"Supplemento alta stagione\");\r\n    etich11 = new Label(\"Supplemento per neonati\");\r\n    etich11_1 = new Label(\"Supplemento letto aggiuntivo\");\r\n    etich12 = new Label(\"Riduzione per bambini %\");\r\n    etich13 = new Label(\"Riduzione per ragazzi %\");\r\n    etich14 = new Label(\"Riduzione per comitive %\");\r\n    etich15 = new Label(\"Numero minimo di persone per comitiva\");\r\n    etich16 = new Label(\"Numero di stanze\");\r\n    etich17 = new Label(\"Supplemento prima colazione\");\r\n    etich18 = new Label(\"Supplemento mezza pensione\");\r\n    etich19 = new Label(\"Supplemento pensione completa\");\r\n    etich20 = new Label(\"Coperto per la ristorazione\");\r\n    etich21 = new Label(\"Costo di uno scatto telefonico\");\r\n    etich22 = new Label(\"Password utente\");\r\n    etich23 = new Label(\"Lire\");\r\n    etich24 = new Label(\"Dollari\");\r\n    etich25 = new Label(\"Ragione sociale\");\r\n    //creo i pulsanti\r\n    Annulla = new Button(\"Annulla\");\r\n    Passwd = new Button(\"Cambio di password\");\r\n    Conferma = new Button(\"Conferma\");\r\n    Stagioni = new Button(\"Definisci Stagionalita'\");\r\n    panel0 = new Panel();\r\n    panel0.setLayout(gridbag);\r\n    Utils.constrain(panel0, etichetta, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, licenza, 1, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, etich1, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, etich2, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, albergo, 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich3, 2, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, indirizzo_alb, 3, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich4, 0, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, comune_alb, 1, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich5, 2, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, citta_alb, 3, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich25, 0, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, rag_soc, 1, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel1 = new Panel();\r\n    panel1.setLayout(gridbag);\r\n    Utils.constrain(panel1, etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etich6, 0, 1, 5, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, giorni_blocco, 5, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etich21, 7, 1, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, costo_x_scatto, 10, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta2, 0, 2, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta3, 5, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta4, 8, 2, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    // supplementi\r\n    Utils.constrain(panel1, etich7, 0, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_bassissima, 3, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich8, 0, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_bassa, 3, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich9, 0, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_media, 3, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich10, 0, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_alta, 3, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich11, 0, 7, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_neonato, 3, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich11_1, 0, 8, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_letto_agg, 3, 8, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    // riduzioni\r\n    Utils.constrain(panel1, etich12, 4, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_bambino, 7, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich13, 4, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_ragazzo, 7, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich14, 4, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_comitiva, 7, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich15, 4, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, min_pers_comitiva, 7, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    // ristorazione\r\n    Utils.constrain(panel1, etich17, 8, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_colazione, 11, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich18, 8, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_mezza, 11, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich19, 8, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_intera, 11, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich20, 8, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, coperto, 11, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, cambio_L_E, 5, 7, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, cambio, 7, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich16, 9, 7, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, num_max_stanze, 11, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel2 = new Panel();\r\n    panel2.setLayout(gridbag);\r\n    Utils.constrain(panel2, etichetta5, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    panel3 = new Panel();\r\n    panel3.setLayout(gridbag);\r\n    Utils.constrain(panel3, etichetta6, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, Passwd, 1, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, etichetta7, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, Stagioni, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel4 = new Panel();\r\n    panel4.setLayout(gridbag);\r\n    Utils.constrain(panel4, Annulla, 8, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel4, Conferma, 9, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, panel0, 0, 0, 12, 6, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel1, 0, 6, 12, 9, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel2, 0, 15, 1, 3, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel3, 1, 15, 11, 2, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel4, 0, 19, 12, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void setupPanels(boolean)",
                "comments": null,
                "innerComments": "Optional[[//creo le etichette\r\n, //creo un Checkbox\r\n, //creo i pulsanti\r\n, // supplementi\r\n, // riduzioni\r\n, // ristorazione\r\n]]"
            },
            {
                "body": "Optional[{\r\n    Annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            if (!first_start)\r\n                padre.setEnabled(true);\r\n            else\r\n                System.exit(0);\r\n        }\r\n    });\r\n    Conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startConferma();\r\n        }\r\n    });\r\n    checkboxes[0].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[0].getState()) {\r\n                startAvviso(Const.LIRE);\r\n            }\r\n        }\r\n    });\r\n    checkboxes[1].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[1].getState()) {\r\n                startAvviso(Const.EURO);\r\n            }\r\n        }\r\n    });\r\n    Passwd.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startChangePwd();\r\n        }\r\n    });\r\n    Stagioni.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            setStagioni();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    if (!first_start)\r\n        padre.setEnabled(true);\r\n    else\r\n        System.exit(0);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startConferma();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[0].getState()) {\r\n        startAvviso(Const.LIRE);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[1].getState()) {\r\n        startAvviso(Const.EURO);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startChangePwd();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    setStagioni();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (nuova_valuta != this_config.getValuta() && !first_start) {\r\n        msg = new AvvisoDialog(this, \"Attenzione: il cambio LIRA<->EURO effettuato alla conferma modifichera' le cifre della finestra corrente!\");\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startAvviso(char)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    this.setEnabled(false);\r\n    CambioPassword cambio = new CambioPassword();\r\n    cambio.setVisible(true);\r\n    cambio.conf = this;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startChangePwd()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    MessageDialog msg;\r\n    int j;\r\n    if (!errore()) {\r\n        char vecchia_valuta = this_config.getValuta();\r\n        readDatiConf();\r\n        this_config.setPassword(new_passwd);\r\n        this_config.setStagionalita(new_stag_anno_corr, new_stag_anno_prox);\r\n        if ((j = (db.writeConfigurazione(this_config))) != DataBase.OK) {\r\n            msg = new MessageDialog(this, \"Problemi con il database: \" + DataBase.strErrore(j));\r\n        } else {\r\n            if (vecchia_valuta != this_config.getValuta() && !first_start) {\r\n                j = (Principale.db).startCambioValuta();\r\n                if (j != DataBase.OK) {\r\n                    msg = new MessageDialog(this, \"Errore con il database: \" + DataBase.strErrore(j));\r\n                    return;\r\n                }\r\n                this_config = (Principale.db).readConfigurazione();\r\n                Principale.config = this_config;\r\n            }\r\n            if (!(first_start)) {\r\n                padre.pass.p.setTitle(this_config.getNomeAlbergo());\r\n                padre.setEnabled(true);\r\n            } else {\r\n                Frame p = new Principale(this_config, db);\r\n                p.setVisible(true);\r\n            }\r\n            dispose();\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startConferma()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    def_stag = new DefinizioneStagionalita(this);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void setStagioni()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (!((licenza.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" La licenza deve essere composta da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((albergo.getText()).length() < 21)) {\r\n        msg = new MessageDialog(this, \" Il nome dell'albergo deve essere composto da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((comune_alb.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" Il comune deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((indirizzo_alb.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" L'indirizzo deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((citta_alb.getText()).length() < 21)) {\r\n        msg = new MessageDialog(this, \" La citta' deve essere composta da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((rag_soc.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" La ragione sociale deve essere composta da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(giorni_blocco.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di giorni di blocco deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(sup_bassissima.getText()) || !Utils.isFloatPos(sup_bassa.getText()) || !Utils.isFloatPos(sup_media.getText()) || !Utils.isFloatPos(sup_alta.getText()) || !Utils.isFloatPos(sup_neonato.getText()) || !Utils.isFloatPos(sup_letto_agg.getText()) || !Utils.isFloatPos(px_colazione.getText()) || !Utils.isFloatPos(px_mezza.getText()) || !Utils.isFloatPos(px_intera.getText())) {\r\n        msg = new MessageDialog(this, \" I supplementi devono essere numeri positivi! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(rid_bambino.getText()) || !Utils.isIntPos(rid_ragazzo.getText()) || !Utils.isIntPos(rid_comitiva.getText())) {\r\n        msg = new MessageDialog(this, \" deve essere un numero intero! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(min_pers_comitiva.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di persone comitiva deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(num_max_stanze.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di stanze deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(coperto.getText())) {\r\n        msg = new MessageDialog(this, \" Il coperto deve essere un numero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(costo_x_scatto.getText())) {\r\n        msg = new MessageDialog(this, \" Il costo dello scatto telefonico deve essere un numero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(cambio.getText())) {\r\n        msg = new MessageDialog(this, \" Il coefficiente di cambio LIRE<->EURO deve essere un numero positivo e diverso da zero! \");\r\n        return true;\r\n    } else if (!((Float.valueOf(cambio.getText())).floatValue() > 0)) {\r\n        msg = new MessageDialog(this, \" Il coefficiente di cambio LIRE<->EURO deve essere un numero positivo e diverso da zero! \");\r\n        return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " boolean errore()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    this_config.setLicenza(licenza.getText());\r\n    this_config.setNomeAlbergo(albergo.getText());\r\n    this_config.setComuneAlb(comune_alb.getText());\r\n    this_config.setIndirizzoAlb(indirizzo_alb.getText());\r\n    this_config.setCittaAlb(citta_alb.getText());\r\n    this_config.setRagSoc(rag_soc.getText());\r\n    this_config.setGiorniBlocco(Integer.parseInt(giorni_blocco.getText()));\r\n    this_config.setSupplemento((Float.valueOf(sup_bassissima.getText())).floatValue(), Flag.BASSISSIMA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_bassa.getText())).floatValue(), Flag.BASSA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_media.getText())).floatValue(), Flag.MEDIA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_alta.getText())).floatValue(), Flag.ALTA_STAGIONE);\r\n    this_config.setSupNeonato((Float.valueOf(sup_neonato.getText())).floatValue());\r\n    this_config.setSupLettoAgg((Float.valueOf(sup_letto_agg.getText())).floatValue());\r\n    this_config.setRiduzione(Integer.parseInt(rid_bambino.getText()), Flag.BAMBINO);\r\n    this_config.setRiduzione(Integer.parseInt(rid_ragazzo.getText()), Flag.RAGAZZO);\r\n    this_config.setRiduzione(Integer.parseInt(rid_comitiva.getText()), Flag.COMITIVA);\r\n    this_config.setMinPersComit(Integer.parseInt(min_pers_comitiva.getText()));\r\n    this_config.setNumStanze(Integer.parseInt(num_max_stanze.getText()));\r\n    this_config.setPxColazione((Float.valueOf(px_colazione.getText())).floatValue());\r\n    this_config.setPxMezza((Float.valueOf(px_mezza.getText())).floatValue());\r\n    this_config.setPxIntera((Float.valueOf(px_intera.getText())).floatValue());\r\n    this_config.setCoperto((Float.valueOf(coperto.getText())).floatValue());\r\n    this_config.setCostoXScatto((Float.valueOf(costo_x_scatto.getText())).floatValue());\r\n    this_config.setCoeffXCambio((Float.valueOf(cambio.getText())).floatValue());\r\n    if (checkboxes[0].getState())\r\n        this_config.setValuta(Const.LIRE);\r\n    else\r\n        this_config.setValuta(Const.EURO);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void readDatiConf()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    //String s = new String(Principale.simbol);\r\n    licenza.setText(\"\" + this_config.getLicenza());\r\n    albergo.setText(\"\" + this_config.getNomeAlbergo());\r\n    comune_alb.setText(\"\" + this_config.getComuneAlb());\r\n    indirizzo_alb.setText(\"\" + this_config.getIndirizzoAlb());\r\n    citta_alb.setText(\"\" + this_config.getCittaAlb());\r\n    rag_soc.setText(\"\" + this_config.getRagSoc());\r\n    giorni_blocco.setText(\"\" + this_config.getGiorniBlocco());\r\n    sup_bassissima.setText(\"\" + this_config.getSupplemento(Flag.BASSISSIMA_STAGIONE));\r\n    sup_bassa.setText(\"\" + this_config.getSupplemento(Flag.BASSA_STAGIONE));\r\n    sup_media.setText(\"\" + this_config.getSupplemento(Flag.MEDIA_STAGIONE));\r\n    sup_alta.setText(\"\" + this_config.getSupplemento(Flag.ALTA_STAGIONE));\r\n    sup_neonato.setText(\"\" + this_config.getSupNeonato());\r\n    sup_letto_agg.setText(\"\" + this_config.getSupLettoAgg());\r\n    rid_bambino.setText(\"\" + this_config.getRiduzione(Flag.BAMBINO));\r\n    rid_ragazzo.setText(\"\" + this_config.getRiduzione(Flag.RAGAZZO));\r\n    rid_comitiva.setText(\"\" + this_config.getRiduzione(Flag.COMITIVA));\r\n    min_pers_comitiva.setText(\"\" + this_config.getMinPersComit());\r\n    num_max_stanze.setText(\"\" + this_config.getNumStanze());\r\n    px_colazione.setText(\"\" + this_config.getPxColazione());\r\n    px_mezza.setText(\"\" + this_config.getPxMezza());\r\n    px_intera.setText(\"\" + this_config.getPxIntera());\r\n    coperto.setText(\"\" + this_config.getCoperto());\r\n    costo_x_scatto.setText(\"\" + this_config.getCostoXScatto());\r\n    cambio.setText(\"\" + this_config.getCoeffXCambio());\r\n    if (this_config.getValuta() == Const.LIRE)\r\n        checkbox.setSelectedCheckbox(checkboxes[0]);\r\n    else\r\n        checkbox.setSelectedCheckbox(checkboxes[1]);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void writeDatiConf()",
                "comments": null,
                "innerComments": "Optional[[//String s = new String(Principale.simbol);\r\n]]"
            },
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //creo le etichette\r\n    label1 = new Label(\"Inserire vecchia password\");\r\n    label2 = new Label(\"Inserire nuova password\");\r\n    label3 = new Label(\"Reinserire la nuova password\");\r\n    //creo i textField\r\n    testo1 = new TextField(\"\", 20);\r\n    testo2 = new TextField(\"\", 20);\r\n    testo1.setEchoChar('*');\r\n    testo2.setEchoChar('*');\r\n    testo2.setEditable(false);\r\n    conferma = new Button(\"Conferma\");\r\n    cambio = new Button(\"Cambio di password\");\r\n    cambio.setEnabled(false);\r\n    annulla = new Button(\"Annulla\");\r\n    pannello = new Panel();\r\n    pannello.setLayout(grid);\r\n    Utils.constrain(pannello, label1, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo1, 2, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, label2, 0, 1, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo2, 2, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, conferma, 3, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, cambio, 3, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    pannello_x_annulla = new Panel();\r\n    pannello_x_annulla.setLayout(grid);\r\n    Utils.constrain(pannello_x_annulla, annulla, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(grid);\r\n    Utils.constrain(this, pannello, 0, 0, 4, 2, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, pannello_x_annulla, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setupPanels()",
                "comments": null,
                "innerComments": "Optional[[//creo le etichette\r\n, //creo i textField\r\n]]"
            },
            {
                "body": "Optional[{\r\n    annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            conf.setEnabled(true);\r\n        }\r\n    });\r\n    conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            g();\r\n        }\r\n    });\r\n    testo1.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            g();\r\n        }\r\n    });\r\n    cambio.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            i();\r\n        }\r\n    });\r\n    testo2.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            i();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    conf.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    g();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    g();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    i();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    i();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String tmp = testo1.getText();\r\n    if (tmp.equals(ConfigurazioneSistema.new_passwd)) {\r\n        testo2.setEditable(true);\r\n        testo1.setEditable(false);\r\n        cambio.setEnabled(true);\r\n        conferma.setEnabled(false);\r\n    } else {\r\n        dialog = new MessageDialog(this, \"La password non e' corretta\");\r\n        dialog.setVisible(true);\r\n        testo1.setText(\"\");\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void g()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String tmp = testo2.getText();\r\n    Messaggio messaggio1 = new Messaggio(tmp);\r\n    messaggio1.setVisible(true);\r\n    messaggio1.c = this;\r\n    this.setEnabled(false);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void i()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //creo un pulsante\r\n    OK = new Button(\"OK\");\r\n    //creo un'etichetta\r\n    msg = new Label(\"Reinserire la nuova password\");\r\n    //creo un textField\r\n    testo3 = new TextField(\"\", 20);\r\n    testo3.setEchoChar('*');\r\n    pannello = new Panel();\r\n    pannello.setLayout(gridbag);\r\n    Utils.constrain(pannello, msg, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo3, 2, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, OK, 4, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, pannello, 0, 0, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setup()",
                "comments": null,
                "innerComments": "Optional[[//creo un pulsante\r\n, //creo un'etichetta\r\n, //creo un textField\r\n]]"
            },
            {
                "body": "Optional[{\r\n    OK.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startOK();\r\n        }\r\n    });\r\n    testo3.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startOK();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startOK();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startOK();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if ((testo3.getText()).equals(pwd_passata)) {\r\n        ConfigurazioneSistema.new_passwd = testo3.getText();\r\n        dialog = new Avviso(this, \"La password verra' cambiata alla conferma\");\r\n    } else\r\n        dialog = new Avviso(this, \"La nuova password non e' stata accettata\");\r\n    dialog.setVisible(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startOK()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    OK.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            esci();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    esci();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    padre.dispose();\r\n    padre.c.dispose();\r\n    padre.c.conf.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void esci()",
                "comments": null,
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"Configurazione di sistema\");\r\n    this_config = config;\r\n    db = archivio;\r\n    new_passwd = this_config.getPassword();\r\n    new_stag_anno_corr = this_config.getStagionalita(Const.ANNO_CORRENTE);\r\n    new_stag_anno_prox = this_config.getStagionalita(Const.ANNO_PROSSIMO);\r\n    first_start = prima_volta;\r\n    setupPanels(prima_volta);\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public ConfigurazioneSistema(Configurazione, boolean, DataBase)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(\"Cambio di password\");\r\n    setupPanels();\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public CambioPassword()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(\"Messaggio per il cambio di password\");\r\n    setup();\r\n    pwd_passata = text;\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public Messaggio(String)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(\"Attenzione\");\r\n    padre = parent;\r\n    padre.setEnabled(false);\r\n    this.setFont(ConfigurazioneSistema.font_titolo);\r\n    Panel textPanel = new Panel();\r\n    Panel buttonPanel = new Panel();\r\n    textPanel.add(new Label(testo));\r\n    OK = new Button(\"OK\");\r\n    buttonPanel.add(OK);\r\n    add(\"North\", textPanel);\r\n    add(\"Center\", buttonPanel);\r\n    init();\r\n    pack();\r\n    setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public Avviso(Messaggio, String)",
                "comments": null,
                "innerComments": null
            }
        ],
        "signature": "Messaggio",
        "variables": [
            "public  static  final Font font_base",
            "public  static  final Font font_sub",
            "public  static  final Font font_titolo",
            "public  static  final Font font_allineato",
            " TextField giorni_blocco",
            " TextField sup_bassissima",
            " TextField sup_bassa",
            " TextField sup_media",
            " TextField sup_alta",
            " TextField sup_letto_agg",
            " TextField costo_x_scatto",
            " TextField sup_neonato",
            " TextField rid_bambino",
            " TextField rid_ragazzo",
            " TextField rid_comitiva",
            " TextField password",
            " TextField num_max_stanze",
            " TextField px_colazione",
            " TextField px_mezza",
            " TextField px_intera",
            " TextField coperto",
            " TextField min_pers_comitiva",
            " TextField cambio",
            " TextField albergo",
            " TextField indirizzo_alb",
            " TextField comune_alb",
            " TextField citta_alb",
            " TextField rag_soc",
            " TextField licenza",
            " Label cambio_L_E",
            " Label etichetta",
            " Label etich1",
            " Label etich2",
            " Label etich3",
            " Label etich4",
            " Label etich5",
            " Label etich6",
            " Label etich7",
            " Label etich8",
            " Label etich9",
            " Label etich10",
            " Label etich11",
            " Label etich11_1",
            " Label etich12",
            " Label etich13",
            " Label etich14",
            " Label etich15",
            " Label etich16",
            " Label etich17",
            " Label etich18",
            " Label etich19",
            " Label etich20",
            " Label etichetta1",
            " Label etichetta2",
            " Label etichetta3",
            " Label etichetta4",
            " Label etichetta5",
            " Label etich21",
            " Label etich22",
            " Label etichetta6",
            " Label etich23",
            " Label etich24",
            " Label etich25",
            " Label etichetta7",
            " Panel panel0",
            " Panel panel1",
            " Panel panel2",
            " Panel panel3",
            " Panel panel4",
            " GridBagLayout gridbag",
            " CheckboxGroup checkbox",
            " Checkbox checkboxes",
            " Button Annulla",
            " Button Passwd",
            " Button Conferma",
            " Button Stagioni",
            " DefinizioneStagionalita def_stag",
            "static String new_passwd",
            "static char new_stag_anno_corr",
            "static char new_stag_anno_prox",
            " SubGestione padre",
            "static Configurazione this_config",
            " DataBase db",
            " boolean first_start",
            " TextField testo1",
            " TextField testo2",
            " TextField testo3",
            " Label label1",
            " Label label2",
            " Label label3",
            " GridBagLayout grid",
            " Panel pannello",
            " Panel pannello_x_annulla",
            " Frame conf",
            " Button conferma",
            " Button cambio",
            " Button annulla",
            " MessageDialog dialog",
            " Label msg",
            " Button OK",
            " CambioPassword c",
            " Avviso dialog",
            " GridBagLayout gridbag",
            " TextField testo3",
            " Panel pannello",
            " String pwd_passata",
            " Button OK",
            " Messaggio padre"
        ]
    },
    {
        "methods": [
            {
                "body": "Optional[{\r\n    this.setFont(font_base);\r\n    //creo le etichette\r\n    cambio_L_E = new Label(\"Cambio Lira <-> EURO\");\r\n    etichetta = new Label(\"Licenza:\");\r\n    etichetta.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta1 = new Label(\"DATI DI CONFIGURAZIONE\");\r\n    etichetta1.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta2 = new Label(\"Supplementi dovuto alle stagionionalita'\");\r\n    etichetta2.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta3 = new Label(\"Riduzioni\");\r\n    etichetta3.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta4 = new Label(\"Ristorazione\");\r\n    etichetta4.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta5 = new Label(\"Valuta\");\r\n    etichetta5.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta6 = new Label(\"Cambio di password utente\");\r\n    etichetta6.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etichetta7 = new Label(\"Definizione delle stagionalita'\");\r\n    etichetta7.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    licenza = new TextField(\"\", 35);\r\n    albergo = new TextField(\"\", 25);\r\n    comune_alb = new TextField(\"\", 35);\r\n    citta_alb = new TextField(\"\", 25);\r\n    indirizzo_alb = new TextField(\"\", 35);\r\n    rag_soc = new TextField(\"\", 35);\r\n    giorni_blocco = new TextField(\"\", 4);\r\n    sup_bassissima = new TextField(\"\", 9);\r\n    sup_bassa = new TextField(\"\", 9);\r\n    sup_media = new TextField(\"\", 9);\r\n    sup_alta = new TextField(\"\", 9);\r\n    sup_neonato = new TextField(\"\", 9);\r\n    sup_letto_agg = new TextField(\"\", 9);\r\n    rid_bambino = new TextField(\"\", 4);\r\n    rid_ragazzo = new TextField(\"\", 4);\r\n    rid_comitiva = new TextField(\"\", 4);\r\n    min_pers_comitiva = new TextField(\"\", 4);\r\n    num_max_stanze = new TextField(\"\", 4);\r\n    num_max_stanze.setEditable(false);\r\n    px_colazione = new TextField(\"\", 9);\r\n    px_mezza = new TextField(\"\", 9);\r\n    px_intera = new TextField(\"\", 9);\r\n    coperto = new TextField(\"\", 9);\r\n    costo_x_scatto = new TextField(\"\", 9);\r\n    password = new TextField(\"\", 20);\r\n    cambio = new TextField(\"\", 8);\r\n    //creo un Checkbox\r\n    checkbox = new CheckboxGroup();\r\n    checkboxes = new Checkbox[2];\r\n    checkboxes[0] = new Checkbox(\" Lire\", checkbox, true);\r\n    checkboxes[1] = new Checkbox(\" EURO\", checkbox, false);\r\n    writeDatiConf();\r\n    if (prima_volta)\r\n        licenza.setEditable(true);\r\n    else\r\n        licenza.setEditable(false);\r\n    licenza.setForeground(Color.red.darker());\r\n    albergo.setForeground(Color.blue);\r\n    comune_alb.setForeground(Color.blue);\r\n    citta_alb.setForeground(Color.blue);\r\n    rag_soc.setForeground(Color.blue);\r\n    password.setEchoChar('*');\r\n    etich1 = new Label(\"Dati dell'albergo\");\r\n    etich1.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    etich2 = new Label(\"Nome dell'albergo:\");\r\n    etich3 = new Label(\"Indirizzo dell'albergo:\");\r\n    indirizzo_alb.setForeground(Color.blue);\r\n    etich4 = new Label(\"Comune dell'albergo:\");\r\n    etich5 = new Label(\"Citta' dell'albergo:\");\r\n    etich6 = new Label(\"Numero di giorni massimo di bloccaggio di una stanza\");\r\n    etich7 = new Label(\"Supplemento bassisima stagione\");\r\n    etich8 = new Label(\"Supplemento bassa stagione\");\r\n    etich9 = new Label(\"Supplemento media stagione\");\r\n    etich10 = new Label(\"Supplemento alta stagione\");\r\n    etich11 = new Label(\"Supplemento per neonati\");\r\n    etich11_1 = new Label(\"Supplemento letto aggiuntivo\");\r\n    etich12 = new Label(\"Riduzione per bambini %\");\r\n    etich13 = new Label(\"Riduzione per ragazzi %\");\r\n    etich14 = new Label(\"Riduzione per comitive %\");\r\n    etich15 = new Label(\"Numero minimo di persone per comitiva\");\r\n    etich16 = new Label(\"Numero di stanze\");\r\n    etich17 = new Label(\"Supplemento prima colazione\");\r\n    etich18 = new Label(\"Supplemento mezza pensione\");\r\n    etich19 = new Label(\"Supplemento pensione completa\");\r\n    etich20 = new Label(\"Coperto per la ristorazione\");\r\n    etich21 = new Label(\"Costo di uno scatto telefonico\");\r\n    etich22 = new Label(\"Password utente\");\r\n    etich23 = new Label(\"Lire\");\r\n    etich24 = new Label(\"Dollari\");\r\n    etich25 = new Label(\"Ragione sociale\");\r\n    //creo i pulsanti\r\n    Annulla = new Button(\"Annulla\");\r\n    Passwd = new Button(\"Cambio di password\");\r\n    Conferma = new Button(\"Conferma\");\r\n    Stagioni = new Button(\"Definisci Stagionalita'\");\r\n    panel0 = new Panel();\r\n    panel0.setLayout(gridbag);\r\n    Utils.constrain(panel0, etichetta, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, licenza, 1, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, etich1, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel0, etich2, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, albergo, 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich3, 2, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, indirizzo_alb, 3, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich4, 0, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, comune_alb, 1, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich5, 2, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, citta_alb, 3, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, etich25, 0, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel0, rag_soc, 1, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel1 = new Panel();\r\n    panel1.setLayout(gridbag);\r\n    Utils.constrain(panel1, etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etich6, 0, 1, 5, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, giorni_blocco, 5, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etich21, 7, 1, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, costo_x_scatto, 10, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta2, 0, 2, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta3, 5, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etichetta4, 8, 2, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    // supplementi\r\n    Utils.constrain(panel1, etich7, 0, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_bassissima, 3, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich8, 0, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_bassa, 3, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich9, 0, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_media, 3, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich10, 0, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_alta, 3, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich11, 0, 7, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_neonato, 3, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich11_1, 0, 8, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, sup_letto_agg, 3, 8, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    // riduzioni\r\n    Utils.constrain(panel1, etich12, 4, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_bambino, 7, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich13, 4, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_ragazzo, 7, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich14, 4, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, rid_comitiva, 7, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich15, 4, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, min_pers_comitiva, 7, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    // ristorazione\r\n    Utils.constrain(panel1, etich17, 8, 3, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_colazione, 11, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich18, 8, 4, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_mezza, 11, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich19, 8, 5, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, px_intera, 11, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich20, 8, 6, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, coperto, 11, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, cambio_L_E, 5, 7, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, cambio, 7, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, etich16, 9, 7, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, num_max_stanze, 11, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel2 = new Panel();\r\n    panel2.setLayout(gridbag);\r\n    Utils.constrain(panel2, etichetta5, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    panel3 = new Panel();\r\n    panel3.setLayout(gridbag);\r\n    Utils.constrain(panel3, etichetta6, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, Passwd, 1, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, etichetta7, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, Stagioni, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    panel4 = new Panel();\r\n    panel4.setLayout(gridbag);\r\n    Utils.constrain(panel4, Annulla, 8, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel4, Conferma, 9, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTH, 0.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, panel0, 0, 0, 12, 6, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel1, 0, 6, 12, 9, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel2, 0, 15, 1, 3, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel3, 1, 15, 11, 2, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel4, 0, 19, 12, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": "public void setupPanels(boolean)",
                "comments": null,
                "innerComments": "Optional[[//creo le etichette\r\n, //creo un Checkbox\r\n, //creo i pulsanti\r\n, // supplementi\r\n, // riduzioni\r\n, // ristorazione\r\n]]"
            },
            {
                "body": "Optional[{\r\n    Annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            if (!first_start)\r\n                padre.setEnabled(true);\r\n            else\r\n                System.exit(0);\r\n        }\r\n    });\r\n    Conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startConferma();\r\n        }\r\n    });\r\n    checkboxes[0].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[0].getState()) {\r\n                startAvviso(Const.LIRE);\r\n            }\r\n        }\r\n    });\r\n    checkboxes[1].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[1].getState()) {\r\n                startAvviso(Const.EURO);\r\n            }\r\n        }\r\n    });\r\n    Passwd.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startChangePwd();\r\n        }\r\n    });\r\n    Stagioni.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            setStagioni();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    if (!first_start)\r\n        padre.setEnabled(true);\r\n    else\r\n        System.exit(0);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startConferma();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[0].getState()) {\r\n        startAvviso(Const.LIRE);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[1].getState()) {\r\n        startAvviso(Const.EURO);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startChangePwd();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    setStagioni();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (nuova_valuta != this_config.getValuta() && !first_start) {\r\n        msg = new AvvisoDialog(this, \"Attenzione: il cambio LIRA<->EURO effettuato alla conferma modifichera' le cifre della finestra corrente!\");\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startAvviso(char)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    this.setEnabled(false);\r\n    CambioPassword cambio = new CambioPassword();\r\n    cambio.setVisible(true);\r\n    cambio.conf = this;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startChangePwd()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    MessageDialog msg;\r\n    int j;\r\n    if (!errore()) {\r\n        char vecchia_valuta = this_config.getValuta();\r\n        readDatiConf();\r\n        this_config.setPassword(new_passwd);\r\n        this_config.setStagionalita(new_stag_anno_corr, new_stag_anno_prox);\r\n        if ((j = (db.writeConfigurazione(this_config))) != DataBase.OK) {\r\n            msg = new MessageDialog(this, \"Problemi con il database: \" + DataBase.strErrore(j));\r\n        } else {\r\n            if (vecchia_valuta != this_config.getValuta() && !first_start) {\r\n                j = (Principale.db).startCambioValuta();\r\n                if (j != DataBase.OK) {\r\n                    msg = new MessageDialog(this, \"Errore con il database: \" + DataBase.strErrore(j));\r\n                    return;\r\n                }\r\n                this_config = (Principale.db).readConfigurazione();\r\n                Principale.config = this_config;\r\n            }\r\n            if (!(first_start)) {\r\n                padre.pass.p.setTitle(this_config.getNomeAlbergo());\r\n                padre.setEnabled(true);\r\n            } else {\r\n                Frame p = new Principale(this_config, db);\r\n                p.setVisible(true);\r\n            }\r\n            dispose();\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startConferma()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    def_stag = new DefinizioneStagionalita(this);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void setStagioni()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (!((licenza.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" La licenza deve essere composta da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((albergo.getText()).length() < 21)) {\r\n        msg = new MessageDialog(this, \" Il nome dell'albergo deve essere composto da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((comune_alb.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" Il comune deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((indirizzo_alb.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" L'indirizzo deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((citta_alb.getText()).length() < 21)) {\r\n        msg = new MessageDialog(this, \" La citta' deve essere composta da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((rag_soc.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" La ragione sociale deve essere composta da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(giorni_blocco.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di giorni di blocco deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(sup_bassissima.getText()) || !Utils.isFloatPos(sup_bassa.getText()) || !Utils.isFloatPos(sup_media.getText()) || !Utils.isFloatPos(sup_alta.getText()) || !Utils.isFloatPos(sup_neonato.getText()) || !Utils.isFloatPos(sup_letto_agg.getText()) || !Utils.isFloatPos(px_colazione.getText()) || !Utils.isFloatPos(px_mezza.getText()) || !Utils.isFloatPos(px_intera.getText())) {\r\n        msg = new MessageDialog(this, \" I supplementi devono essere numeri positivi! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(rid_bambino.getText()) || !Utils.isIntPos(rid_ragazzo.getText()) || !Utils.isIntPos(rid_comitiva.getText())) {\r\n        msg = new MessageDialog(this, \" deve essere un numero intero! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(min_pers_comitiva.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di persone comitiva deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isIntPos(num_max_stanze.getText())) {\r\n        msg = new MessageDialog(this, \" Il numero di stanze deve essere un numero intero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(coperto.getText())) {\r\n        msg = new MessageDialog(this, \" Il coperto deve essere un numero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(costo_x_scatto.getText())) {\r\n        msg = new MessageDialog(this, \" Il costo dello scatto telefonico deve essere un numero positivo! \");\r\n        return true;\r\n    }\r\n    if (!Utils.isFloatPos(cambio.getText())) {\r\n        msg = new MessageDialog(this, \" Il coefficiente di cambio LIRE<->EURO deve essere un numero positivo e diverso da zero! \");\r\n        return true;\r\n    } else if (!((Float.valueOf(cambio.getText())).floatValue() > 0)) {\r\n        msg = new MessageDialog(this, \" Il coefficiente di cambio LIRE<->EURO deve essere un numero positivo e diverso da zero! \");\r\n        return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " boolean errore()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    this_config.setLicenza(licenza.getText());\r\n    this_config.setNomeAlbergo(albergo.getText());\r\n    this_config.setComuneAlb(comune_alb.getText());\r\n    this_config.setIndirizzoAlb(indirizzo_alb.getText());\r\n    this_config.setCittaAlb(citta_alb.getText());\r\n    this_config.setRagSoc(rag_soc.getText());\r\n    this_config.setGiorniBlocco(Integer.parseInt(giorni_blocco.getText()));\r\n    this_config.setSupplemento((Float.valueOf(sup_bassissima.getText())).floatValue(), Flag.BASSISSIMA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_bassa.getText())).floatValue(), Flag.BASSA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_media.getText())).floatValue(), Flag.MEDIA_STAGIONE);\r\n    this_config.setSupplemento((Float.valueOf(sup_alta.getText())).floatValue(), Flag.ALTA_STAGIONE);\r\n    this_config.setSupNeonato((Float.valueOf(sup_neonato.getText())).floatValue());\r\n    this_config.setSupLettoAgg((Float.valueOf(sup_letto_agg.getText())).floatValue());\r\n    this_config.setRiduzione(Integer.parseInt(rid_bambino.getText()), Flag.BAMBINO);\r\n    this_config.setRiduzione(Integer.parseInt(rid_ragazzo.getText()), Flag.RAGAZZO);\r\n    this_config.setRiduzione(Integer.parseInt(rid_comitiva.getText()), Flag.COMITIVA);\r\n    this_config.setMinPersComit(Integer.parseInt(min_pers_comitiva.getText()));\r\n    this_config.setNumStanze(Integer.parseInt(num_max_stanze.getText()));\r\n    this_config.setPxColazione((Float.valueOf(px_colazione.getText())).floatValue());\r\n    this_config.setPxMezza((Float.valueOf(px_mezza.getText())).floatValue());\r\n    this_config.setPxIntera((Float.valueOf(px_intera.getText())).floatValue());\r\n    this_config.setCoperto((Float.valueOf(coperto.getText())).floatValue());\r\n    this_config.setCostoXScatto((Float.valueOf(costo_x_scatto.getText())).floatValue());\r\n    this_config.setCoeffXCambio((Float.valueOf(cambio.getText())).floatValue());\r\n    if (checkboxes[0].getState())\r\n        this_config.setValuta(Const.LIRE);\r\n    else\r\n        this_config.setValuta(Const.EURO);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void readDatiConf()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    //String s = new String(Principale.simbol);\r\n    licenza.setText(\"\" + this_config.getLicenza());\r\n    albergo.setText(\"\" + this_config.getNomeAlbergo());\r\n    comune_alb.setText(\"\" + this_config.getComuneAlb());\r\n    indirizzo_alb.setText(\"\" + this_config.getIndirizzoAlb());\r\n    citta_alb.setText(\"\" + this_config.getCittaAlb());\r\n    rag_soc.setText(\"\" + this_config.getRagSoc());\r\n    giorni_blocco.setText(\"\" + this_config.getGiorniBlocco());\r\n    sup_bassissima.setText(\"\" + this_config.getSupplemento(Flag.BASSISSIMA_STAGIONE));\r\n    sup_bassa.setText(\"\" + this_config.getSupplemento(Flag.BASSA_STAGIONE));\r\n    sup_media.setText(\"\" + this_config.getSupplemento(Flag.MEDIA_STAGIONE));\r\n    sup_alta.setText(\"\" + this_config.getSupplemento(Flag.ALTA_STAGIONE));\r\n    sup_neonato.setText(\"\" + this_config.getSupNeonato());\r\n    sup_letto_agg.setText(\"\" + this_config.getSupLettoAgg());\r\n    rid_bambino.setText(\"\" + this_config.getRiduzione(Flag.BAMBINO));\r\n    rid_ragazzo.setText(\"\" + this_config.getRiduzione(Flag.RAGAZZO));\r\n    rid_comitiva.setText(\"\" + this_config.getRiduzione(Flag.COMITIVA));\r\n    min_pers_comitiva.setText(\"\" + this_config.getMinPersComit());\r\n    num_max_stanze.setText(\"\" + this_config.getNumStanze());\r\n    px_colazione.setText(\"\" + this_config.getPxColazione());\r\n    px_mezza.setText(\"\" + this_config.getPxMezza());\r\n    px_intera.setText(\"\" + this_config.getPxIntera());\r\n    coperto.setText(\"\" + this_config.getCoperto());\r\n    costo_x_scatto.setText(\"\" + this_config.getCostoXScatto());\r\n    cambio.setText(\"\" + this_config.getCoeffXCambio());\r\n    if (this_config.getValuta() == Const.LIRE)\r\n        checkbox.setSelectedCheckbox(checkboxes[0]);\r\n    else\r\n        checkbox.setSelectedCheckbox(checkboxes[1]);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void writeDatiConf()",
                "comments": null,
                "innerComments": "Optional[[//String s = new String(Principale.simbol);\r\n]]"
            },
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //creo le etichette\r\n    label1 = new Label(\"Inserire vecchia password\");\r\n    label2 = new Label(\"Inserire nuova password\");\r\n    label3 = new Label(\"Reinserire la nuova password\");\r\n    //creo i textField\r\n    testo1 = new TextField(\"\", 20);\r\n    testo2 = new TextField(\"\", 20);\r\n    testo1.setEchoChar('*');\r\n    testo2.setEchoChar('*');\r\n    testo2.setEditable(false);\r\n    conferma = new Button(\"Conferma\");\r\n    cambio = new Button(\"Cambio di password\");\r\n    cambio.setEnabled(false);\r\n    annulla = new Button(\"Annulla\");\r\n    pannello = new Panel();\r\n    pannello.setLayout(grid);\r\n    Utils.constrain(pannello, label1, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo1, 2, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, label2, 0, 1, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo2, 2, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, conferma, 3, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, cambio, 3, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    pannello_x_annulla = new Panel();\r\n    pannello_x_annulla.setLayout(grid);\r\n    Utils.constrain(pannello_x_annulla, annulla, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(grid);\r\n    Utils.constrain(this, pannello, 0, 0, 4, 2, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, pannello_x_annulla, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setupPanels()",
                "comments": null,
                "innerComments": "Optional[[//creo le etichette\r\n, //creo i textField\r\n]]"
            },
            {
                "body": "Optional[{\r\n    annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            conf.setEnabled(true);\r\n        }\r\n    });\r\n    conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            g();\r\n        }\r\n    });\r\n    testo1.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            g();\r\n        }\r\n    });\r\n    cambio.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            i();\r\n        }\r\n    });\r\n    testo2.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            i();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    conf.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    g();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    g();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    i();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    i();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String tmp = testo1.getText();\r\n    if (tmp.equals(ConfigurazioneSistema.new_passwd)) {\r\n        testo2.setEditable(true);\r\n        testo1.setEditable(false);\r\n        cambio.setEnabled(true);\r\n        conferma.setEnabled(false);\r\n    } else {\r\n        dialog = new MessageDialog(this, \"La password non e' corretta\");\r\n        dialog.setVisible(true);\r\n        testo1.setText(\"\");\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void g()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String tmp = testo2.getText();\r\n    Messaggio messaggio1 = new Messaggio(tmp);\r\n    messaggio1.setVisible(true);\r\n    messaggio1.c = this;\r\n    this.setEnabled(false);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void i()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //creo un pulsante\r\n    OK = new Button(\"OK\");\r\n    //creo un'etichetta\r\n    msg = new Label(\"Reinserire la nuova password\");\r\n    //creo un textField\r\n    testo3 = new TextField(\"\", 20);\r\n    testo3.setEchoChar('*');\r\n    pannello = new Panel();\r\n    pannello.setLayout(gridbag);\r\n    Utils.constrain(pannello, msg, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, testo3, 2, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(pannello, OK, 4, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, pannello, 0, 0, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setup()",
                "comments": null,
                "innerComments": "Optional[[//creo un pulsante\r\n, //creo un'etichetta\r\n, //creo un textField\r\n]]"
            },
            {
                "body": "Optional[{\r\n    OK.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startOK();\r\n        }\r\n    });\r\n    testo3.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startOK();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startOK();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startOK();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if ((testo3.getText()).equals(pwd_passata)) {\r\n        ConfigurazioneSistema.new_passwd = testo3.getText();\r\n        dialog = new Avviso(this, \"La password verra' cambiata alla conferma\");\r\n    } else\r\n        dialog = new Avviso(this, \"La nuova password non e' stata accettata\");\r\n    dialog.setVisible(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startOK()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    OK.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            esci();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    esci();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    padre.dispose();\r\n    padre.c.dispose();\r\n    padre.c.conf.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void esci()",
                "comments": null,
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"Configurazione di sistema\");\r\n    this_config = config;\r\n    db = archivio;\r\n    new_passwd = this_config.getPassword();\r\n    new_stag_anno_corr = this_config.getStagionalita(Const.ANNO_CORRENTE);\r\n    new_stag_anno_prox = this_config.getStagionalita(Const.ANNO_PROSSIMO);\r\n    first_start = prima_volta;\r\n    setupPanels(prima_volta);\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public ConfigurazioneSistema(Configurazione, boolean, DataBase)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(\"Cambio di password\");\r\n    setupPanels();\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public CambioPassword()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(\"Messaggio per il cambio di password\");\r\n    setup();\r\n    pwd_passata = text;\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public Messaggio(String)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(\"Attenzione\");\r\n    padre = parent;\r\n    padre.setEnabled(false);\r\n    this.setFont(ConfigurazioneSistema.font_titolo);\r\n    Panel textPanel = new Panel();\r\n    Panel buttonPanel = new Panel();\r\n    textPanel.add(new Label(testo));\r\n    OK = new Button(\"OK\");\r\n    buttonPanel.add(OK);\r\n    add(\"North\", textPanel);\r\n    add(\"Center\", buttonPanel);\r\n    init();\r\n    pack();\r\n    setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public Avviso(Messaggio, String)",
                "comments": null,
                "innerComments": null
            }
        ],
        "signature": "Avviso",
        "variables": [
            "public  static  final Font font_base",
            "public  static  final Font font_sub",
            "public  static  final Font font_titolo",
            "public  static  final Font font_allineato",
            " TextField giorni_blocco",
            " TextField sup_bassissima",
            " TextField sup_bassa",
            " TextField sup_media",
            " TextField sup_alta",
            " TextField sup_letto_agg",
            " TextField costo_x_scatto",
            " TextField sup_neonato",
            " TextField rid_bambino",
            " TextField rid_ragazzo",
            " TextField rid_comitiva",
            " TextField password",
            " TextField num_max_stanze",
            " TextField px_colazione",
            " TextField px_mezza",
            " TextField px_intera",
            " TextField coperto",
            " TextField min_pers_comitiva",
            " TextField cambio",
            " TextField albergo",
            " TextField indirizzo_alb",
            " TextField comune_alb",
            " TextField citta_alb",
            " TextField rag_soc",
            " TextField licenza",
            " Label cambio_L_E",
            " Label etichetta",
            " Label etich1",
            " Label etich2",
            " Label etich3",
            " Label etich4",
            " Label etich5",
            " Label etich6",
            " Label etich7",
            " Label etich8",
            " Label etich9",
            " Label etich10",
            " Label etich11",
            " Label etich11_1",
            " Label etich12",
            " Label etich13",
            " Label etich14",
            " Label etich15",
            " Label etich16",
            " Label etich17",
            " Label etich18",
            " Label etich19",
            " Label etich20",
            " Label etichetta1",
            " Label etichetta2",
            " Label etichetta3",
            " Label etichetta4",
            " Label etichetta5",
            " Label etich21",
            " Label etich22",
            " Label etichetta6",
            " Label etich23",
            " Label etich24",
            " Label etich25",
            " Label etichetta7",
            " Panel panel0",
            " Panel panel1",
            " Panel panel2",
            " Panel panel3",
            " Panel panel4",
            " GridBagLayout gridbag",
            " CheckboxGroup checkbox",
            " Checkbox checkboxes",
            " Button Annulla",
            " Button Passwd",
            " Button Conferma",
            " Button Stagioni",
            " DefinizioneStagionalita def_stag",
            "static String new_passwd",
            "static char new_stag_anno_corr",
            "static char new_stag_anno_prox",
            " SubGestione padre",
            "static Configurazione this_config",
            " DataBase db",
            " boolean first_start",
            " TextField testo1",
            " TextField testo2",
            " TextField testo3",
            " Label label1",
            " Label label2",
            " Label label3",
            " GridBagLayout grid",
            " Panel pannello",
            " Panel pannello_x_annulla",
            " Frame conf",
            " Button conferma",
            " Button cambio",
            " Button annulla",
            " MessageDialog dialog",
            " Label msg",
            " Button OK",
            " CambioPassword c",
            " Avviso dialog",
            " GridBagLayout gridbag",
            " TextField testo3",
            " Panel pannello",
            " String pwd_passata",
            " Button OK",
            " Messaggio padre"
        ]
    }
]