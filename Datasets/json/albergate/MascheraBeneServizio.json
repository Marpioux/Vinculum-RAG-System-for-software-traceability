[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    elenco.setFont(ConfigurazioneSistema.font_allineato);\r\n    //Creo i pannelli\r\n    panel = new Panel[13];\r\n    for (int i = 0; i < 10; ++i) {\r\n        panel[i] = new Panel();\r\n        panel[i].setLayout(grid1);\r\n        panel[i].setVisible(false);\r\n    }\r\n    for (int i = 10; i < 13; ++i) {\r\n        panel[i] = new Panel();\r\n        panel[i].setVisible(false);\r\n    }\r\n    //Creo il pannello in alto\r\n    label = new Label(\"Tipi\");\r\n    label.setFont(ConfigurazioneSistema.font_titolo);\r\n    tipi = new CheckboxGroup();\r\n    // mi serve piu' lungo per l'aggiungi\r\n    prima_scelta = new Checkbox[5];\r\n    prima_scelta[0] = new Checkbox(\"BAR\", tipi, false);\r\n    prima_scelta[1] = new Checkbox(\"RISTORANTE\", tipi, false);\r\n    prima_scelta[2] = new Checkbox(\"SERVIZI\", tipi, false);\r\n    prima_scelta[3] = new Checkbox(\"SUPPLEMENTI\", tipi, false);\r\n    prima_scelta[4] = new Checkbox(\"RIDUZIONI\", tipi, false);\r\n    panel[0].add(label);\r\n    panel[0].add(prima_scelta[0]);\r\n    panel[0].add(prima_scelta[1]);\r\n    panel[0].add(prima_scelta[2]);\r\n    panel[0].setVisible(true);\r\n    //Attacco il pannello in alto al frame\r\n    this.setLayout(grid);\r\n    this.add(panel[0]);\r\n    //Creo il pannello del bar\r\n    label1 = new Label(\"Bar\");\r\n    label1.setFont(ConfigurazioneSistema.font_titolo);\r\n    bar = new CheckboxGroup();\r\n    scelta_bar = new Checkbox[2];\r\n    scelta_bar[0] = new Checkbox(\"Bevande\", bar, false);\r\n    scelta_bar[1] = new Checkbox(\"Cibi\", bar, false);\r\n    panel[1].add(label1);\r\n    panel[1].add(scelta_bar[0]);\r\n    panel[1].add(scelta_bar[1]);\r\n    //Creo il pannello dal ristorante\r\n    label2 = new Label(\"Ristorante\");\r\n    label2.setFont(ConfigurazioneSistema.font_titolo);\r\n    ristorante = new CheckboxGroup();\r\n    scelta_piatto = new Checkbox[6];\r\n    scelta_piatto[0] = new Checkbox(\"Antipasti\", ristorante, false);\r\n    scelta_piatto[1] = new Checkbox(\"Primi\", ristorante, false);\r\n    scelta_piatto[2] = new Checkbox(\"Secondi\", ristorante, false);\r\n    scelta_piatto[3] = new Checkbox(\"Contorni\", ristorante, false);\r\n    scelta_piatto[4] = new Checkbox(\"Dessert\", ristorante, false);\r\n    scelta_piatto[5] = new Checkbox(\"Frutta\", ristorante, false);\r\n    panel[2].add(label2);\r\n    panel[2].add(scelta_piatto[0]);\r\n    panel[2].add(scelta_piatto[1]);\r\n    panel[2].add(scelta_piatto[2]);\r\n    panel[2].add(scelta_piatto[3]);\r\n    panel[2].add(scelta_piatto[4]);\r\n    panel[2].add(scelta_piatto[5]);\r\n    label3 = new Label(\"Servizi\");\r\n    label3.setFont(ConfigurazioneSistema.font_titolo);\r\n    servizi = new CheckboxGroup();\r\n    scelta_servizio = new Checkbox[2];\r\n    scelta_servizio[0] = new Checkbox(\"Ricreativi\", servizi, false);\r\n    scelta_servizio[1] = new Checkbox(\"Altro\", servizi, false);\r\n    panel[3].add(label3);\r\n    panel[3].add(scelta_servizio[0]);\r\n    panel[3].add(scelta_servizio[1]);\r\n    label4 = new Label(\"Bevande\");\r\n    label4.setFont(ConfigurazioneSistema.font_titolo);\r\n    bevande = new CheckboxGroup();\r\n    scelta_bevanda = new Checkbox[3];\r\n    scelta_bevanda[0] = new Checkbox(\"Caffetteria\", bevande, false);\r\n    scelta_bevanda[1] = new Checkbox(\"Analcolici\", bevande, false);\r\n    scelta_bevanda[2] = new Checkbox(\"Alcolici\", bevande, false);\r\n    panel[4].add(label4);\r\n    panel[4].add(scelta_bevanda[0]);\r\n    panel[4].add(scelta_bevanda[1]);\r\n    panel[4].add(scelta_bevanda[2]);\r\n    //Creo il pannello dei cibi\r\n    label5 = new Label(\"Cibi\");\r\n    label5.setFont(ConfigurazioneSistema.font_titolo);\r\n    cibi = new CheckboxGroup();\r\n    scelta_cibo = new Checkbox[3];\r\n    scelta_cibo[0] = new Checkbox(\"Dolci\", cibi, false);\r\n    scelta_cibo[1] = new Checkbox(\"Salati\", cibi, false);\r\n    panel[5].add(label5);\r\n    panel[5].add(scelta_cibo[0]);\r\n    panel[5].add(scelta_cibo[1]);\r\n    //Creo il pannello degli antipasti\r\n    label6 = new Label(\"Antipasti\");\r\n    label6.setFont(ConfigurazioneSistema.font_titolo);\r\n    antipasti = new CheckboxGroup();\r\n    scelta_antipasto = new Checkbox[3];\r\n    scelta_antipasto[0] = new Checkbox(\"Freddi\", antipasti, false);\r\n    scelta_antipasto[1] = new Checkbox(\"Caldi\", antipasti, false);\r\n    panel[6].add(label6);\r\n    panel[6].add(scelta_antipasto[0]);\r\n    panel[6].add(scelta_antipasto[1]);\r\n    //Creo il pannello dei primi\r\n    label7 = new Label(\"Primi\");\r\n    label7.setFont(ConfigurazioneSistema.font_titolo);\r\n    primi = new CheckboxGroup();\r\n    scelta_primo = new Checkbox[3];\r\n    scelta_primo[0] = new Checkbox(\"Solidi\", primi, false);\r\n    scelta_primo[1] = new Checkbox(\"Liquidi\", primi, false);\r\n    panel[7].add(label7);\r\n    panel[7].add(scelta_primo[0]);\r\n    panel[7].add(scelta_primo[1]);\r\n    //Creo il pannello dei secondi\r\n    label8 = new Label(\"Secondi\");\r\n    label8.setFont(ConfigurazioneSistema.font_titolo);\r\n    secondi = new CheckboxGroup();\r\n    scelta_secondo = new Checkbox[3];\r\n    scelta_secondo[0] = new Checkbox(\"Carne\", secondi, false);\r\n    scelta_secondo[1] = new Checkbox(\"Pesce\", secondi, false);\r\n    panel[8].add(label8);\r\n    panel[8].add(scelta_secondo[0]);\r\n    panel[8].add(scelta_secondo[1]);\r\n    //Creo il pannello dei contorni\r\n    label9 = new Label(\"Contorni\");\r\n    label9.setFont(ConfigurazioneSistema.font_titolo);\r\n    contorni = new CheckboxGroup();\r\n    scelta_contorno = new Checkbox[3];\r\n    scelta_contorno[0] = new Checkbox(\"Verdura cotta\", contorni, false);\r\n    scelta_contorno[1] = new Checkbox(\"Verdura cruda\", contorni, false);\r\n    scelta_contorno[2] = new Checkbox(\"Formaggio\", contorni, false);\r\n    panel[9].add(label9);\r\n    panel[9].add(scelta_contorno[0]);\r\n    panel[9].add(scelta_contorno[1]);\r\n    panel[9].add(scelta_contorno[2]);\r\n    //Creo il pannello BAR-Bevande\r\n    panel[10].setLayout(gridbag);\r\n    label12 = new Label(\"Nome del bene\");\r\n    label13 = new Label(\"Prezzo del bene \" + (Principale.config).getValuta() + \".\");\r\n    testo3 = new TextField(\"\", 40);\r\n    testo4 = new TextField(\"\", 10);\r\n    annulla = new Button(\"Annulla\");\r\n    conferma = new Button(\"Conferma\");\r\n    Utils.constrain(panel[10], label12, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 0.0, 0.0, 0, 5, 5, 0);\r\n    Utils.constrain(panel[10], testo3, 1, 0, 4, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 1.0, 0.0, 0, 5, 5, 0);\r\n    Utils.constrain(panel[10], label13, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 0.0, 0.0, 5, 5, 5, 0);\r\n    Utils.constrain(panel[10], testo4, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 0);\r\n    Utils.constrain(panel[10], annulla, 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.EAST, 1.0, 0.0, 5, 5, 0, 5);\r\n    Utils.constrain(panel[10], conferma, 2, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 0, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setup()",
                "comments": null,
                "innerComments": "Optional[[//Creo i pannelli\r\n, //Creo il pannello in alto\r\n, // mi serve piu' lungo per l'aggiungi\r\n, //Attacco il pannello in alto al frame\r\n, //Creo il pannello del bar\r\n, //Creo il pannello dal ristorante\r\n, //Creo il pannello dei cibi\r\n, //Creo il pannello degli antipasti\r\n, //Creo il pannello dei primi\r\n, //Creo il pannello dei secondi\r\n, //Creo il pannello dei contorni\r\n, //Creo il pannello BAR-Bevande\r\n]]",
                "generated_comment": "/**\n * Sets up the graphical user interface for the application.\n * This method initializes the fonts, creates panels for different categories, \n * and adds checkboxes and labels for selecting options within each category.\n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    prima_scelta[0].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (prima_scelta[0].getState()) {\r\n                inComuneABC(scelta_bar, 1, BeneServizio.BAR);\r\n            }\r\n        }\r\n    });\r\n    prima_scelta[1].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (prima_scelta[1].getState()) {\r\n                inComuneABC(scelta_piatto, 2, BeneServizio.RISTORANTE);\r\n            }\r\n        }\r\n    });\r\n    prima_scelta[2].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (prima_scelta[2].getState()) {\r\n                inComuneABC(scelta_servizio, 3, BeneServizio.SERVIZI);\r\n            }\r\n        }\r\n    });\r\n    scelta_bar[0].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (scelta_bar[0].getState()) {\r\n                inComuneGH(scelta_bevanda, 4, BeneServizio.BEVANDE);\r\n            }\r\n        }\r\n    });\r\n    scelta_bar[1].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (scelta_bar[1].getState()) {\r\n                inComuneGH(scelta_cibo, 5, BeneServizio.CIBI);\r\n            }\r\n        }\r\n    });\r\n    scelta_piatto[0].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (scelta_piatto[0].getState()) {\r\n                inComuneILMN(scelta_antipasto, 6, BeneServizio.ANTIPASTI);\r\n            }\r\n        }\r\n    });\r\n    scelta_piatto[1].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (scelta_piatto[1].getState()) {\r\n                inComuneILMN(scelta_primo, 7, BeneServizio.PRIMI);\r\n            }\r\n        }\r\n    });\r\n    scelta_piatto[2].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (scelta_piatto[2].getState()) {\r\n                inComuneILMN(scelta_secondo, 8, BeneServizio.SECONDI);\r\n            }\r\n        }\r\n    });\r\n    scelta_piatto[3].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (scelta_piatto[3].getState()) {\r\n                inComuneILMN(scelta_contorno, 9, BeneServizio.CONTORNI);\r\n            }\r\n        }\r\n    });\r\n    annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            padre.setEnabled(true);\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Initializes the user interface by adding item listeners to various choice components.\n * \n * This method adds item listeners to the choice components prima_scelta, scelta_bar, scelta_piatto, and their respective sub-components.\n * When an item in a choice component is selected, the corresponding inComuneABC, inComuneGH, or inComuneILMN method is called with the appropriate parameters.\n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    if (prima_scelta[0].getState()) {\r\n        inComuneABC(scelta_bar, 1, BeneServizio.BAR);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an item's state has changed. \n * If the first choice is selected, it calls the inComuneABC method with the specified parameters.\n * \n * @param e the ItemEvent that triggered the state change\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (prima_scelta[1].getState()) {\r\n        inComuneABC(scelta_piatto, 2, BeneServizio.RISTORANTE);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an item's state is changed. It checks if the second choice is selected and if so, it calls the inComuneABC method with the selected dish, a quantity of 2, and the type of service as a restaurant.\n * \n * @param e the ItemEvent that triggered the state change\n */"
            },
            {
                "body": "Optional[{\r\n    if (prima_scelta[2].getState()) {\r\n        inComuneABC(scelta_servizio, 3, BeneServizio.SERVIZI);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an item's state changes in a GUI component.\n * It checks if the third choice in the prima_scelta array is selected, and if so,\n * it calls the inComuneABC method with the specified parameters.\n * \n * @param e The ItemEvent that triggered the state change\n * \n * @return void This method does not return any value\n */"
            },
            {
                "body": "Optional[{\r\n    if (scelta_bar[0].getState()) {\r\n        inComuneGH(scelta_bevanda, 4, BeneServizio.BEVANDE);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an item's state is changed. It checks if the first item in the scelta_bar array is selected,\n * and if so, it calls the inComuneGH method with the selected beverage, quantity 4, and type BEVANDE.\n * \n * @param e the ItemEvent that triggered the state change\n */"
            },
            {
                "body": "Optional[{\r\n    if (scelta_bar[1].getState()) {\r\n        inComuneGH(scelta_cibo, 5, BeneServizio.CIBI);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an item's state has changed. \n * If the second item in the scelta_bar array is selected, it calls the inComuneGH method with the specified parameters.\n * \n * @param e the ItemEvent that triggered the state change\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (scelta_piatto[0].getState()) {\r\n        inComuneILMN(scelta_antipasto, 6, BeneServizio.ANTIPASTI);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an item's state has changed. It checks if the first item in the array of choices is selected, \n * and if so, it calls the inComuneILMN method with the selected antipasto choice, a quantity of 6, and the type of service as ANTIPASTI.\n * \n * @param e the ItemEvent that triggered the state change\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    if (scelta_piatto[1].getState()) {\r\n        inComuneILMN(scelta_primo, 7, BeneServizio.PRIMI);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an item's state has changed. If the second item in the scelta_piatto array is selected,\n * it calls the inComuneILMN method with the scelta_primo array, 7 as the quantity, and BeneServizio.PRIMI as the type.\n * \n * @param e The ItemEvent that triggered the state change\n */"
            },
            {
                "body": "Optional[{\r\n    if (scelta_piatto[2].getState()) {\r\n        inComuneILMN(scelta_secondo, 8, BeneServizio.SECONDI);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an item's state is changed. If the third item in the scelta_piatto array is selected,\n * it calls the inComuneILMN method with the selected second item, a quantity of 8, and the type of service as SECONDI.\n * \n * @param e The ItemEvent that triggered the state change\n */"
            },
            {
                "body": "Optional[{\r\n    if (scelta_piatto[3].getState()) {\r\n        inComuneILMN(scelta_contorno, 9, BeneServizio.CONTORNI);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is called when an item's state is changed in the GUI. \n * It checks if the fourth item in the scelta_piatto array is selected, \n * and if so, it calls the inComuneILMN method with the scelta_contorno array, \n * the value 9, and the BeneServizio.CONTORNI enum as parameters.\n * \n * @param e the ItemEvent object representing the event that occurred\n */"
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    padre.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Disposes of the current window and enables the parent window.\n * \n * @param e the ActionEvent that triggered the method\n * \n * This method disposes of the current window and enables the parent window. \n * It takes an ActionEvent as a parameter to handle the event that triggered the method. \n * There is no return value as the method is void.\n */"
            },
            {
                "body": "Optional[{\r\n    level = 0;\r\n    for (int i = 1; i < 13; ++i) {\r\n        if (panel[i].isVisible())\r\n            remove(panel[i]);\r\n    }\r\n    this.add(panel[numero_pannello]);\r\n    panel[numero_pannello].setVisible(true);\r\n    setVisible(true);\r\n    codice = composeCode(level, c);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void inComuneABC(Checkbox[], int, char)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Removes all panels except the one specified by the given number and sets it as visible.\n * \n * @param panels an array of Checkbox objects representing the panels to be manipulated\n * @param numero_pannello the number of the panel to be set as visible\n * @param c a character used to compose a code\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    level = 1;\r\n    for (int i = 2; i < 13; ++i) {\r\n        if (panel[i].isVisible())\r\n            remove(panel[i]);\r\n    }\r\n    this.add(panel[numero_pannello]);\r\n    panel[numero_pannello].setVisible(true);\r\n    setVisible(true);\r\n    codice = composeCode(level, c);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void inComuneGH(Checkbox[], int, char)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Sets the level to 1, hides panels from index 2 to 12 if they are visible, \n * adds and shows the panel at the specified index, sets it to visible, \n * sets the overall visibility of the panel to true, and composes a code based on the level and character provided.\n * \n * @param checkboxes an array of Checkbox objects\n * @param numero_pannello the index of the panel to be added and shown\n * @param c the character used to compose the code\n */\nvoid inComuneGH(Checkbox[] checkboxes, int numero_pannello, char c) {\n    level = 1;\n    for (int i = 2; i < 13; ++i) {\n        if (panel[i].isVisible()) {\n            remove(panel[i]);\n        }\n    }\n    this.add(panel[numero_pannello]);\n    panel[numero_pannello].setVisible(true);\n    setVisible(true);\n    codice = composeCode(level, c);\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    level = 1;\r\n    if (panel[1].isVisible())\r\n        remove(panel[1]);\r\n    for (int i = 3; i < 13; i++) if (panel[i].isVisible())\r\n        remove(panel[i]);\r\n    this.add(panel[numero_pannello]);\r\n    panel[numero_pannello].setVisible(true);\r\n    setVisible(true);\r\n    codice = composeCode(level, c);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void inComuneILMN(Checkbox[], int, char)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method is used to display a specific panel based on the input parameters.\n * It sets the visibility of certain panels based on the input parameters and composes a code.\n * \n * @param checkboxes an array of Checkbox objects representing the panels\n * @param numero_pannello an integer representing the panel number to be displayed\n * @param c a character used in composing the code\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (!((testo3.getText()).length() < 33)) {\r\n        msg = new MessageDialog(this, \" La descrizione del bene o servizio deve essere di al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if ((testo3.getText()).equals(\"\")) {\r\n        msg = new MessageDialog(this, \" Manca la descrizione del bene o servizio! \");\r\n        return true;\r\n    }\r\n    if ((testo4.getText()).equals(\"\")) {\r\n        msg = new MessageDialog(this, \" Manca il prezzo del bene o servizio! \");\r\n        return true;\r\n    }\r\n    if (!(Utils.isFloatPos(testo4.getText()))) {\r\n        msg = new MessageDialog(this, \" Il prezzo deve essere un numero positivo! \");\r\n        return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " boolean errore()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Checks for errors in the input fields for a product or service.\n * \n * @return true if there are errors in the input fields, false otherwise\n */\nboolean errore() {\n    Frame msg;\n    \n    // Check if the description is longer than 32 characters\n    if (!((testo3.getText()).length() < 33)) {\n        msg = new MessageDialog(this, \" La descrizione del bene o servizio deve essere di al piu' 32 caratteri! \");\n        return true;\n    }\n    \n    // Check if the description field is empty\n    if ((testo3.getText()).equals(\"\")) {\n        msg = new MessageDialog(this, \" Manca la descrizione del bene o servizio! \");\n        return true;\n    }\n    \n    // Check if the price field is empty\n    if ((testo4.getText()).equals(\"\")) {\n        msg = new MessageDialog(this, \" Manca il prezzo del bene o servizio! \");\n        return true;\n    }\n    \n    // Check if the price is a positive number\n    if (!(Utils.isFloatPos(testo4.getText()))) {\n        msg = new MessageDialog(this, \" Il prezzo deve essere un numero positivo! \");\n        return true;\n    }\n    \n    return false;\n}"
            },
            {
                "body": "Optional[{\r\n    codice[index] = tipo;\r\n    for (int i = index + 1; i < 3; ++i) codice[i] = ' ';\r\n    return codice;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " char[] composeCode(int, char)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Composes a code by inserting a given character at a specified index and padding the rest of the code with spaces.\n * \n * @param index the index at which the character should be inserted\n * @param tipo the character to be inserted at the specified index\n * @return the composed code as a character array with the character inserted at the specified index and padded with spaces\n */"
            },
            {
                "body": "Optional[{\r\n    if (codice[1] == ' ')\r\n        codice[1] = '0';\r\n    if (codice[2] == ' ')\r\n        codice[2] = '0';\r\n    return codice;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " char[] completeCode()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method completes a code by adding '0' in place of any space character found at index 1 or 2.\n * \n * @return a char array representing the completed code\n */"
            },
            {
                "body": "Optional[{\r\n    if (// necessario nella finestra di modifica\r\n    panel[10].isVisible())\r\n        remove(panel[10]);\r\n    if (// necessario nella finestra di cancellazione\r\n    panel[12].isVisible())\r\n        remove(panel[12]);\r\n    inComuneOP();\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void o()",
                "comments": null,
                "innerComments": "Optional[[// necessario nella finestra di modifica\r\n, // necessario nella finestra di cancellazione\r\n]]",
                "generated_comment": "/**\n * This method removes specific panels from the user interface based on their visibility status.\n * If panel[10] is visible, it will be removed. If panel[12] is visible, it will also be removed.\n * Additionally, the method calls the inComuneOP() method after removing the panels.\n */"
            },
            {
                "body": "Optional[{\r\n    if (panel[1].isVisible())\r\n        remove(panel[1]);\r\n    for (int i = 3; i < 13; ++i) {\r\n        if (panel[i].isVisible())\r\n            remove(panel[i]);\r\n    }\r\n    inComuneOP();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void p()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method removes specific panels from the current panel based on their visibility status.\n * It first checks if panel[1] is visible and removes it if true. Then, it iterates through panels 3 to 12,\n * checking if each panel is visible and removing it if true. Finally, it calls the inComuneOP() method.\n */"
            },
            {
                "body": "Optional[{\r\n    completeCode();\r\n    if (//per evitare warning\r\n    elenco.getItemCount() > 0)\r\n        elenco.removeAll();\r\n    creaLista();\r\n    this.add(panel[11]);\r\n    panel[11].setVisible(true);\r\n    setVisible(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void inComuneOP()",
                "comments": null,
                "innerComments": "Optional[[//per evitare warning\r\n]]",
                "generated_comment": "/**\n * This method performs a series of operations to update a list of items in a panel.\n * It first clears any existing items in the list to avoid warnings, then creates a new list of items.\n * Finally, it adds the new list to a specified panel and makes the panel visible.\n * \n * @param None\n * @return None\n */"
            },
            {
                "body": "Optional[{\r\n    int i = 1;\r\n    BeneServizio b;\r\n    L = (Principale.db).elencoBeniServizi(new String(codice));\r\n    if (L != null) {\r\n        while (i <= L.length()) {\r\n            b = L.getBeneServizio(i);\r\n            elenco.addItem(b.toString());\r\n            i++;\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void creaLista()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Creates a list of items to be displayed in a GUI component.\n * Retrieves a list of BeneServizio objects from the database based on a given code,\n * and adds their string representations to the GUI component.\n * \n * @param codice the code used to retrieve the list of BeneServizio objects\n * @return void\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(title);\r\n    setup();\r\n    init();\r\n    setSize(350, 600);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public MascheraBeneServizio(String)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new MascheraBeneServizio object with the specified title.\n * \n * @param title the title of the MascheraBeneServizio object\n * \n * This constructor initializes the MascheraBeneServizio object with the given title,\n * sets up the necessary components, and initializes the object. The size of the object\n * is set to 350x600 pixels.\n */"
            }
        ],
        "signature": "MascheraBeneServizio",
        "variables": [
            "protected Label label",
            "protected Label label1",
            "protected Label label2",
            "protected Label label3",
            "protected Label label4",
            "protected Label label5",
            "protected Label label6",
            "protected Label label7",
            "protected Label label8",
            "protected Label label9",
            "protected Label label12",
            "protected Label label13",
            "protected TextField testo3",
            "protected TextField testo4",
            "protected Panel panel",
            "protected Panel buttons",
            "protected Button annulla",
            "protected Button conferma",
            "protected CheckboxGroup tipi",
            "protected CheckboxGroup bar",
            "protected CheckboxGroup ristorante",
            "protected CheckboxGroup servizi",
            "protected CheckboxGroup bevande",
            "protected CheckboxGroup cibi",
            "protected CheckboxGroup antipasti",
            "protected CheckboxGroup primi",
            "protected CheckboxGroup secondi",
            "protected CheckboxGroup contorni",
            "protected Checkbox prima_scelta",
            "protected Checkbox scelta_bar",
            "protected Checkbox scelta_piatto",
            "protected Checkbox scelta_servizio",
            "protected Checkbox scelta_bevanda",
            "protected Checkbox scelta_cibo",
            "protected Checkbox scelta_antipasto",
            "protected Checkbox scelta_primo",
            "protected Checkbox scelta_secondo",
            "protected Checkbox scelta_contorno",
            "protected GridLayout grid",
            "protected GridLayout grid1",
            "protected GridBagLayout gridbag",
            "protected List elenco",
            "protected ListaBeniServizi L",
            " Frame padre",
            " int level",
            " char codice"
        ],
        "generated_class_comment": "/**\n * The MascheraBeneServizio class represents a graphical user interface for managing goods and services.\n * This class provides methods for setting up the GUI components, initializing the user interface, and handling user interactions.\n * It includes functionalities for creating panels, adding checkboxes and labels for selecting options, and displaying lists of items.\n * The class also contains methods for composing codes, checking for errors in input fields, and updating the list of items based on a code.\n * \n * @author [Author Name]\n * @version 1.0\n * \n * Constructor:\n * - public MascheraBeneServizio(String title): Constructs a new MascheraBeneServizio object with the specified title.\n * \n * Methods:\n * - public void setup(): Sets up the graphical user interface for the application by initializing fonts, creating panels, and adding checkboxes and labels.\n * - public void init(): Initializes the user interface by adding item listeners to various choice components.\n * - public void itemStateChanged(ItemEvent e): Handles item state changes in the GUI components.\n * - public boolean errore(): Checks for errors in the input fields for a product or service.\n * - public char[] composeCode(int index, char tipo): Composes a code by inserting a given character at a specified index and padding the rest of the code with spaces.\n * - public char[] completeCode(): Completes a code by adding '0' in place of any space character found at index 1 or 2.\n * - public void inComuneABC(Checkbox[] checkboxes, int numero_pannello, char c): Removes all panels except the one specified by the given number and sets it as visible.\n * - public void inComuneGH(Checkbox[] checkboxes, int numero_pannello, char c): Sets the level to 1, hides panels from index 2 to 12 if they are visible, adds and shows the panel at the specified index, sets it to visible, and composes a code based on the level and character provided.\n * - public void inComuneILMN(Checkbox[] checkboxes, int numero_pannello, char c): Displays a specific panel based on the input parameters by setting the visibility of certain panels and composing a code.\n * - public void actionPerformed(ActionEvent e): Disposes of the current window and enables the parent window.\n * - public void o(): Removes specific panels from the user interface based on their visibility status and calls the inComuneOP() method.\n * - public void p(): Removes specific panels from the current panel based on their visibility status and calls the inComuneOP() method.\n * - public void inComuneOP(): Performs a series of operations to update a list of items in a panel.\n * - public void creaLista(): Creates a list of items to be displayed in a GUI component.\n * \n * Variables:\n * - protected Label label: Represents a label component in the GUI.\n * - protected Label label1: Represents a label component in the GUI.\n * - ...\n * - Frame padre: Represents the parent frame of the GUI.\n * - int level: Represents the level of the operation.\n * - char codice: Represents a code used in the GUI operations.\n */\n */"
    }
]