[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //Creo i TextField\r\n    data_inizio = new TextField(\"\", 12);\r\n    data_fine = new TextField(\"\", 12);\r\n    //Creo i pulsanti e ne disabilito due\r\n    Annulla = new Button(\"Annulla\");\r\n    Conferma = new Button(\"Conferma\");\r\n    Aggiungi = new Button(\"Aggiungi\");\r\n    Aggiungi.setEnabled(false);\r\n    //Creo le etichette\r\n    etichetta = new Label(\"Periodo di soggiorno\");\r\n    etichetta.setFont(ConfigurazioneSistema.font_titolo);\r\n    etichetta1 = new Label(\"Data inizio:\");\r\n    etichetta2 = new Label(\"    Data fine:\");\r\n    etichetta3 = new Label(\"Prospetto della distriduzione delle staginalita':\");\r\n    etichetta3.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    Label space = new Label(\"               \");\r\n    //Creo la lista\r\n    list = new List(15, false);\r\n    //Creo il pannello in alto\r\n    panel1 = new Panel();\r\n    panel1.setLayout(gridbag);\r\n    Utils.constrain(panel1, etichetta, 0, 0, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\r\n    Utils.constrain(panel1, etichetta1, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel1, data_inizio, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    //Utils.constrain(panel1, space, 2, 1, 1, 1, GridBagConstraints.NONE,\r\n    //GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel1, etichetta2, 3, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel1, data_fine, 4, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel1, space, 5, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n    //Creo un pannello con due pulsanti\r\n    panel2 = new Panel();\r\n    panel2.setLayout(gridbag);\r\n    Utils.constrain(panel2, Aggiungi, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 0.3, 0.0, 0, 0, 0, 10);\r\n    //Creo un Checkbox ad esclusione\r\n    checkbox_group = new CheckboxGroup();\r\n    checkboxes = new Checkbox[5];\r\n    checkboxes[0] = new Checkbox(\" Alta stagione\", checkbox_group, false);\r\n    checkboxes[1] = new Checkbox(\" Media stagione\", checkbox_group, false);\r\n    checkboxes[2] = new Checkbox(\" Bassa stagione\", checkbox_group, false);\r\n    checkboxes[3] = new Checkbox(\" Bassissima stagione\", checkbox_group, false);\r\n    checkboxes[4] = new Checkbox(\" Chiusura\", checkbox_group, false);\r\n    etichetta4 = new Label(\"Stagionalita' disponibili\");\r\n    etichetta4.setFont(new Font(\"Courier\", Font.BOLD, 12));\r\n    //Creo il pannello\r\n    panel3 = new Panel();\r\n    panel3.setLayout(gridbag);\r\n    Utils.constrain(panel3, etichetta4, 0, 1, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\r\n    Utils.constrain(panel3, checkboxes[0], 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    Utils.constrain(panel3, checkboxes[1], 0, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    Utils.constrain(panel3, checkboxes[2], 0, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    Utils.constrain(panel3, checkboxes[3], 0, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    Utils.constrain(panel3, checkboxes[4], 0, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    //Creo il pannello contenente la TextArea\r\n    panel4 = new Panel();\r\n    panel4.setLayout(gridbag);\r\n    Utils.constrain(panel4, etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel4, list, 0, 1, 4, 3, GridBagConstraints.BOTH, GridBagConstraints.CENTER, 3.0, 3.0, 0, 0, 0, 0);\r\n    //Creo il pannello in basso con due pulsanti\r\n    panel5 = new Panel();\r\n    panel5.setLayout(gridbag);\r\n    Utils.constrain(panel5, Annulla, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.SOUTHEAST, 0.3, 0.0, 0, 0, 0, 10);\r\n    Utils.constrain(panel5, Conferma, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.SOUTHWEST, 0.3, 0.0, 0, 0, 0, 0);\r\n    //Attacco i pannelli al frame\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, panel1, 0, 0, 4, 2, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 15, 10, 10, 10);\r\n    Utils.constrain(this, panel3, 0, 2, 4, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHEAST, 1.0, 0.0, 10, 10, 0, 10);\r\n    Utils.constrain(this, panel2, 0, 5, 4, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHEAST, 1.0, 0.0, 10, 10, 0, 10);\r\n    Utils.constrain(this, panel4, 0, 6, 4, 3, GridBagConstraints.BOTH, GridBagConstraints.CENTER, 2.0, 2.0, 10, 10, 10, 10);\r\n    Utils.constrain(this, panel5, 0, 10, 4, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.SOUTHWEST, 1.0, 1.0, 10, 10, 15, 10);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setupPanels()",
                "comments": null,
                "innerComments": "Optional[[//Utils.constrain(panel1, space, 2, 1, 1, 1, GridBagConstraints.NONE,\r\n, //Creo i TextField\r\n, //Creo i pulsanti e ne disabilito due\r\n, //Creo le etichette\r\n, //Creo la lista\r\n, //Creo il pannello in alto\r\n, //GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\r\n, //Creo un pannello con due pulsanti\r\n, //Creo un Checkbox ad esclusione\r\n, //Creo il pannello\r\n, //Creo il pannello contenente la TextArea\r\n, //Creo il pannello in basso con due pulsanti\r\n, //Attacco i pannelli al frame\r\n]]"
            },
            {
                "body": "Optional[{\r\n    //Ascoltatore degli eventi della finestra\r\n    checkboxes[0].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if ((checkboxes[0].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\"))) {\r\n                Aggiungi.setEnabled(true);\r\n            }\r\n        }\r\n    });\r\n    checkboxes[1].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if ((checkboxes[1].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\"))) {\r\n                Aggiungi.setEnabled(true);\r\n            }\r\n        }\r\n    });\r\n    checkboxes[2].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if ((checkboxes[2].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\"))) {\r\n                Aggiungi.setEnabled(true);\r\n            }\r\n        }\r\n    });\r\n    checkboxes[3].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if ((checkboxes[3].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\"))) {\r\n                Aggiungi.setEnabled(true);\r\n            }\r\n        }\r\n    });\r\n    checkboxes[4].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if ((checkboxes[4].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\"))) {\r\n                Aggiungi.setEnabled(true);\r\n            }\r\n        }\r\n    });\r\n    /* Nel caso di annullamento dell'operazione ripristino i vettori\r\n\t\t * originali della Configurazione\r\n\t\t */\r\n    Annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            config.setEnabled(true);\r\n        }\r\n    });\r\n    //Ascoltatore del pulsante Conferma, se il pulsante viene premuto si apre\r\n    //la finestra riguardante l'inserimento della prenotazione\r\n    Aggiungi.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startAggiungi();\r\n        }\r\n    });\r\n    Conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            ConfigurazioneSistema.new_stag_anno_corr = (config_locale.getStagAnnoCorr());\r\n            ConfigurazioneSistema.new_stag_anno_prox = (config_locale.getStagAnnoProx());\r\n            dispose();\r\n            config.setEnabled(true);\r\n        }\r\n    });\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": "public void init()",
                "comments": "Optional[//Gestione degli eventi\r\n]",
                "innerComments": "Optional[[/* Nel caso di annullamento dell'operazione ripristino i vettori\r\n\t\t * originali della Configurazione\r\n\t\t */\r\n, //Ascoltatore del pulsante Conferma, se il pulsante viene premuto si apre\r\n, //Ascoltatore degli eventi della finestra\r\n, //la finestra riguardante l'inserimento della prenotazione\r\n]]"
            },
            {
                "body": "Optional[{\r\n    if ((checkboxes[0].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\"))) {\r\n        Aggiungi.setEnabled(true);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if ((checkboxes[1].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\"))) {\r\n        Aggiungi.setEnabled(true);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if ((checkboxes[2].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\"))) {\r\n        Aggiungi.setEnabled(true);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if ((checkboxes[3].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\"))) {\r\n        Aggiungi.setEnabled(true);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if ((checkboxes[4].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\"))) {\r\n        Aggiungi.setEnabled(true);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    config.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startAggiungi();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    ConfigurazioneSistema.new_stag_anno_corr = (config_locale.getStagAnnoCorr());\r\n    ConfigurazioneSistema.new_stag_anno_prox = (config_locale.getStagAnnoProx());\r\n    dispose();\r\n    config.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    char flag;\r\n    String[] lista;\r\n    if (Utils.dateEPeriodoCorretti(this, data_inizio.getText(), data_fine.getText())) {\r\n        if (checkboxes[0].getState() == true)\r\n            flag = Flag.ALTA_STAGIONE;\r\n        else if (checkboxes[1].getState() == true)\r\n            flag = Flag.MEDIA_STAGIONE;\r\n        else if (checkboxes[2].getState() == true)\r\n            flag = Flag.BASSA_STAGIONE;\r\n        else if (checkboxes[3].getState() == true)\r\n            flag = Flag.BASSISSIMA_STAGIONE;\r\n        else\r\n            flag = Flag.CHIUSO;\r\n        config_locale.setStagione(new Date(DateUtils.invertDate(DateUtils.parseDate(data_inizio.getText()))), new Date(DateUtils.invertDate(DateUtils.parseDate(data_fine.getText()))), flag);\r\n        conf_stag_corr = config_locale.getStagionalita(Const.ANNO_CORRENTE);\r\n        conf_stag_prox = config_locale.getStagionalita(Const.ANNO_PROSSIMO);\r\n        visStagionalita();\r\n        data_inizio.setText(\"\");\r\n        data_fine.setText(\"\");\r\n        for (int i = 0; i < checkboxes.length; i++) checkboxes[i].setState(false);\r\n        Aggiungi.setEnabled(false);\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startAggiungi()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    config_locale = new Configurazione();\r\n    config_locale.setStagAnnoCorr(ConfigurazioneSistema.new_stag_anno_corr);\r\n    config_locale.setStagAnnoProx(ConfigurazioneSistema.new_stag_anno_prox);\r\n    conf_stag_corr = config_locale.getStagionalita(Const.ANNO_CORRENTE);\r\n    conf_stag_prox = config_locale.getStagionalita(Const.ANNO_PROSSIMO);\r\n    Costanti cost = new Costanti();\r\n    anno_corr = cost.getAnnoCorr();\r\n    anno_prox = cost.getAnnoProx();\r\n    visStagionalita();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " void initVectors()",
                "comments": "Optional[/* \tCreo un duplicato dei vettori delle stagionalita per permettere\r\n     *\tl'annullamento delle operazioni\r\n     */\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String[] lista = reportStagionalita();\r\n    if (list.getItemCount() > 0)\r\n        list.removeAll();\r\n    for (int k = 0; k < lista.length; k++) list.addItem(lista[k]);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void visStagionalita()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    String[] lista_loc = new String[30];\r\n    int index = 0;\r\n    String str_aus;\r\n    initLista(lista_loc);\r\n    //Scansione dei 5 tipi di stagionalita per l'anno corrente\r\n    str_aus = Utils.scanVector(Flag.ALTA_STAGIONE, conf_stag_corr, anno_corr);\r\n    if (!(str_aus.equals(\"\"))) {\r\n        lista_loc[index] = new String(\"Periodi di alta stagione per l'anno \" + anno_corr);\r\n        lista_loc[index + 1] = new String(str_aus);\r\n        index = index + 3;\r\n    }\r\n    str_aus = Utils.scanVector(Flag.MEDIA_STAGIONE, conf_stag_corr, anno_corr);\r\n    if (!(str_aus.equals(\"\"))) {\r\n        lista_loc[index] = new String(\"Periodi di media stagione per l'anno \" + anno_corr);\r\n        lista_loc[index + 1] = new String(str_aus);\r\n        index = index + 3;\r\n    }\r\n    str_aus = Utils.scanVector(Flag.BASSA_STAGIONE, conf_stag_corr, anno_corr);\r\n    if (!(str_aus.equals(\"\"))) {\r\n        lista_loc[index] = new String(\"Periodi di bassa stagione per l'anno \" + anno_corr);\r\n        lista_loc[index + 1] = new String(str_aus);\r\n        index = index + 3;\r\n    }\r\n    str_aus = Utils.scanVector(Flag.BASSISSIMA_STAGIONE, conf_stag_corr, anno_corr);\r\n    if (!(str_aus.equals(\"\"))) {\r\n        lista_loc[index] = new String(\"Periodi di bassissima stagione per l'anno \" + anno_corr);\r\n        lista_loc[index + 1] = new String(str_aus);\r\n        index = index + 3;\r\n    }\r\n    str_aus = Utils.scanVector(Flag.CHIUSO, conf_stag_corr, anno_corr);\r\n    if (!(str_aus.equals(\"\"))) {\r\n        lista_loc[index] = new String(\"Periodi di chiusura per l'anno \" + anno_corr);\r\n        lista_loc[index + 1] = new String(str_aus);\r\n        index = index + 3;\r\n    }\r\n    //\tScansione dei 5 tipi di stagionalita per l'anno seguente\r\n    str_aus = Utils.scanVector(Flag.ALTA_STAGIONE, conf_stag_prox, anno_prox);\r\n    if (!(str_aus.equals(\"\"))) {\r\n        lista_loc[index] = new String(\"Periodi di alta stagione per l'anno \" + anno_prox);\r\n        lista_loc[index + 1] = new String(str_aus);\r\n        index = index + 3;\r\n    }\r\n    str_aus = Utils.scanVector(Flag.MEDIA_STAGIONE, conf_stag_prox, anno_prox);\r\n    if (!(str_aus.equals(\"\"))) {\r\n        lista_loc[index] = new String(\"Periodi di media stagione per l'anno \" + anno_prox);\r\n        lista_loc[index + 1] = new String(str_aus);\r\n        index = index + 3;\r\n    }\r\n    str_aus = Utils.scanVector(Flag.BASSA_STAGIONE, conf_stag_prox, anno_prox);\r\n    if (!(str_aus.equals(\"\"))) {\r\n        lista_loc[index] = new String(\"Periodi di bassa stagione per l'anno \" + anno_prox);\r\n        lista_loc[index + 1] = new String(str_aus);\r\n        index = index + 3;\r\n    }\r\n    str_aus = Utils.scanVector(Flag.BASSISSIMA_STAGIONE, conf_stag_prox, anno_prox);\r\n    if (!(str_aus.equals(\"\"))) {\r\n        lista_loc[index] = new String(\"Periodi di bassissima stagione per l'anno \" + anno_prox);\r\n        lista_loc[index + 1] = new String(str_aus);\r\n        index = index + 3;\r\n    }\r\n    str_aus = Utils.scanVector(Flag.CHIUSO, conf_stag_prox, anno_prox);\r\n    if (!(str_aus.equals(\"\"))) {\r\n        lista_loc[index] = new String(\"Periodi di chiusura per l'anno \" + anno_prox);\r\n        lista_loc[index + 1] = new String(str_aus);\r\n        index = index + 3;\r\n    }\r\n    return lista_loc;\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " String[] reportStagionalita()",
                "comments": null,
                "innerComments": "Optional[[//Scansione dei 5 tipi di stagionalita per l'anno corrente\r\n, //\tScansione dei 5 tipi di stagionalita per l'anno seguente\r\n]]"
            },
            {
                "body": "Optional[{\r\n    for (int k = 0; k < lista.length; k++) lista[k] = new String(\"\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void initLista(String[])",
                "comments": null,
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"Definisione delle stagionalita'\");\r\n    config = parent;\r\n    config.setEnabled(false);\r\n    setupPanels();\r\n    initVectors();\r\n    init();\r\n    pack();\r\n    setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public DefinizioneStagionalita(Frame)",
                "comments": null,
                "innerComments": null
            }
        ],
        "signature": "DefinizioneStagionalita",
        "variables": [
            " Panel panel1",
            " Panel panel2",
            " Panel panel3",
            " Panel panel4",
            " Panel panel5",
            " Label etichetta1",
            " Label etichetta2",
            " Label etichetta3",
            " Label etichetta",
            " Label etichetta4",
            " Button Annulla",
            " Button Conferma",
            " Button Aggiungi",
            " TextField data_inizio",
            " TextField data_fine",
            " List list",
            " GridBagLayout gridbag",
            " CheckboxGroup checkbox_group",
            " Checkbox checkboxes",
            " char conf_stag_corr",
            " char conf_stag_prox",
            " Configurazione config_locale",
            " int anno_corr",
            " int anno_prox",
            " Frame config"
        ]
    }
]