[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //Creo  le etichette\r\n    etichetta = new Label(\"Dati del cliente\");\r\n    etichetta.setFont(ConfigurazioneSistema.font_titolo);\r\n    label1 = new Label(\"Stanza numero\");\r\n    label2 = new Label(\"Cognome\");\r\n    label3 = new Label(\"Nome\");\r\n    label4 = new Label(\"Luogo di nascita\");\r\n    label5 = new Label(\"Data di nascita\");\r\n    label6 = new Label(\"Documento di identita'\");\r\n    label7 = new Label(\"Numero telefonico\");\r\n    label8 = new Label(\"Indirizzo\");\r\n    label9 = new Label(\"C.A.P\");\r\n    label10 = new Label(\"Comune di residenza\");\r\n    label11 = new Label(\"Citta'\");\r\n    label12 = new Label(\"Nazione\");\r\n    etichetta1 = new Label(\"Dati del soggiorno\");\r\n    etichetta1.setFont(ConfigurazioneSistema.font_titolo);\r\n    label13 = new Label(\"Data inizio soggiorno\");\r\n    label14 = new Label(\"Data fine soggiorno\");\r\n    label15 = new Label(\"Tipo di pensionamento\");\r\n    label15.setFont(ConfigurazioneSistema.font_titolo);\r\n    label16 = new Label(\"Status cliente\");\r\n    label16.setFont(ConfigurazioneSistema.font_titolo);\r\n    //Creo i TextField\r\n    testo1 = new TextField(\"\", 4);\r\n    testo2 = new TextField(\"\", 20);\r\n    testo3 = new TextField(\"\", 20);\r\n    testo4 = new TextField(\"\", 32);\r\n    testo5 = new TextField(\"\", 10);\r\n    testo6 = new TextField(\"\", 16);\r\n    testo7 = new TextField(\"\", 16);\r\n    testo8 = new TextField(\"\", 52);\r\n    testo9 = new TextField(\"\", 8);\r\n    testo10 = new TextField(\"\", 32);\r\n    testo11 = new TextField(\"\", 20);\r\n    testo12 = new TextField(\"\", 20);\r\n    testo13 = new TextField(\"\", 10);\r\n    testo14 = new TextField(\"\", 10);\r\n    //Creo i bottoni\r\n    Annulla = new Button(\"Annulla\");\r\n    Conferma = new Button(caption);\r\n    //Creo i Checkbox ad esclusione\r\n    pensione = new CheckboxGroup();\r\n    checkboxes = new Checkbox[4];\r\n    checkboxes[0] = new Checkbox(\" Solo pernottamento\", pensione, false);\r\n    checkboxes[1] = new Checkbox(\" Prima colazione\", pensione, false);\r\n    checkboxes[2] = new Checkbox(\" Mezza pensione\", pensione, false);\r\n    checkboxes[3] = new Checkbox(\" Pensione completa\", pensione, false);\r\n    switch(pens) {\r\n        case Flag.SOLO_PERNOTTAMENTO:\r\n            checkboxes[0] = new Checkbox(\" Solo pernottamento\", pensione, true);\r\n            break;\r\n        case Flag.SOLO_COLAZIONE:\r\n            checkboxes[1] = new Checkbox(\" Prima colazione\", pensione, true);\r\n            break;\r\n        case Flag.MEZZA_PENSIONE:\r\n            checkboxes[2] = new Checkbox(\" Mezza pensione\", pensione, true);\r\n            break;\r\n        case Flag.PENSIONE_COMPLETA:\r\n            checkboxes[3] = new Checkbox(\" Pensione completa\", pensione, true);\r\n            break;\r\n    }\r\n    cliente = new CheckboxGroup();\r\n    checkboxes1 = new Checkbox[4];\r\n    checkboxes1[0] = new Checkbox(\" Neonato (0-2 anni)\", cliente, false);\r\n    checkboxes1[1] = new Checkbox(\" Bambino (3-12 anni)\", cliente, false);\r\n    checkboxes1[2] = new Checkbox(\" Ragazzo (12-17 anni)\", cliente, false);\r\n    checkboxes1[3] = new Checkbox(\" Adulto  (>=18 anni)\", cliente, false);\r\n    switch(status) {\r\n        case Flag.NEONATO:\r\n            checkboxes1[0] = new Checkbox(\" Neonato (0-2 anni)\", cliente, true);\r\n            break;\r\n        case Flag.BAMBINO:\r\n            checkboxes1[1] = new Checkbox(\" Bambino (3-12 anni)\", cliente, true);\r\n            break;\r\n        case Flag.RAGAZZO:\r\n            checkboxes1[2] = new Checkbox(\" Ragazzo (12-17 anni)\", cliente, true);\r\n            break;\r\n        case Flag.ADULTO:\r\n            checkboxes1[3] = new Checkbox(\" Adulto  (>=18 anni)\", cliente, true);\r\n            break;\r\n    }\r\n    //Creo il pannello in alto contenente i dati del cliente\r\n    panel1 = new Panel();\r\n    panel1.setLayout(gridbag);\r\n    Utils.constrain(panel1, etichetta, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label1, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo1, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label2, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo2, 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label3, 2, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo3, 3, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label4, 0, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo4, 1, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label5, 2, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo5, 3, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label6, 0, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo6, 1, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label7, 2, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo7, 3, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label8, 0, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo8, 1, 5, 4, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label9, 0, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo9, 1, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label10, 2, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo10, 3, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label11, 0, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo11, 1, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, label12, 2, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel1, testo12, 3, 7, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    //Creo il pannello centrale con i dati del soggiorno\r\n    panel2 = new Panel();\r\n    panel2.setLayout(gridbag);\r\n    Utils.constrain(panel2, etichetta1, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, label13, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHEAST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, testo13, 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, label14, 2, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHEAST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, testo14, 3, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, label15, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[0], 0, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[1], 0, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[2], 0, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes[3], 0, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, label16, 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes1[0], 1, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes1[1], 1, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes1[2], 1, 5, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel2, checkboxes1[3], 1, 6, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    //Creo il pannello in basso con due pulsanti\r\n    panel3 = new Panel();\r\n    panel3.setLayout(gridbag);\r\n    Utils.constrain(panel3, Annulla, 0, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.EAST, 0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(panel3, Conferma, 1, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 0, 0.0, 5, 5, 5, 5);\r\n    //Attacco i pannelli al frame\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, panel1, 0, 0, 4, 8, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTH, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel2, 0, 8, 4, 7, GridBagConstraints.HORIZONTAL, GridBagConstraints.CENTER, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel3, 0, 15, 4, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.SOUTH, 1.0, 0.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setupPanels(String, char, char)",
                "comments": null,
                "innerComments": "Optional[[//Creo  le etichette\r\n, //Creo i TextField\r\n, //Creo i bottoni\r\n, //Creo i Checkbox ad esclusione\r\n, //Creo il pannello in alto contenente i dati del cliente\r\n, //Creo il pannello centrale con i dati del soggiorno\r\n, //Creo il pannello in basso con due pulsanti\r\n, //Attacco i pannelli al frame\r\n]]",
                "generated_comment": "/**\n * Sets up the panels for displaying customer and stay information.\n * This method initializes labels, text fields, buttons, and checkboxes for capturing customer and stay details.\n * \n * @param caption the caption for the \"Conferma\" button\n * @param pens the type of pension (SOLO_PERNOTTAMENTO, SOLO_COLAZIONE, MEZZA_PENSIONE, PENSIONE_COMPLETA)\n * @param status the status of the customer (NEONATO, BAMBINO, RAGAZZO, ADULTO)\n */\nvoid setupPanels(String caption, char pens, char status) {\n    // Method body as described above\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    Annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            padre.setEnabled(true);\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Initializes the method by adding an ActionListener to the Annulla button. \n * When the Annulla button is clicked, it disposes of the current window and enables the parent window.\n * \n * @param e the ActionEvent triggered by clicking the Annulla button\n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    padre.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Disposes of the current window and enables the parent window.\n * \n * @param e the ActionEvent that triggered the method\n * \n * This method disposes of the current window and enables the parent window. \n * It takes an ActionEvent as a parameter to handle the event that triggered the method. \n * There is no return value as the method does not return anything.\n */"
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    String data_inizio, data_fine;\r\n    Date data1, data2;\r\n    Soggiornante sogg = new Soggiornante();\r\n    sogg.setNumStanza(pren.getNumStanza());\r\n    sogg.setCognome(testo2.getText());\r\n    sogg.setNome(testo3.getText());\r\n    sogg.setLuogoNasc(testo4.getText());\r\n    sogg.setDataNasc(DateUtils.convertDate(testo5.getText()));\r\n    sogg.setNumDoc(testo6.getText());\r\n    sogg.setNumTel(testo7.getText());\r\n    sogg.setIndirizzo(testo8.getText());\r\n    sogg.setCap(testo9.getText());\r\n    sogg.setComune(testo10.getText());\r\n    sogg.setCitta(testo11.getText());\r\n    sogg.setNazione(testo12.getText());\r\n    sogg.setInizioSogg(pren.getInizioSogg());\r\n    sogg.setFineSogg(pren.getFineSogg());\r\n    sogg.setIdPrenotazione(pren.getIdPrenotazione());\r\n    sogg.setIdSoggiornante(cont);\r\n    if (checkboxes[0].getState() == true)\r\n        sogg.setPensionamento(Flag.SOLO_PERNOTTAMENTO);\r\n    else if (checkboxes[1].getState() == true)\r\n        sogg.setPensionamento(Flag.SOLO_COLAZIONE);\r\n    else if (checkboxes[2].getState() == true)\r\n        sogg.setPensionamento(Flag.MEZZA_PENSIONE);\r\n    else if (checkboxes[3].getState() == true)\r\n        sogg.setPensionamento(Flag.PENSIONE_COMPLETA);\r\n    if (checkboxes1[0].getState() == true)\r\n        sogg.setStatus(Flag.NEONATO);\r\n    else if (checkboxes1[1].getState() == true)\r\n        sogg.setStatus(Flag.BAMBINO);\r\n    else if (checkboxes1[2].getState() == true)\r\n        sogg.setStatus(Flag.RAGAZZO);\r\n    else\r\n        sogg.setStatus(Flag.ADULTO);\r\n    return sogg;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public Soggiornante readDatiSogg(Prenotazione, int)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Reads the data of a guest from a reservation and user input fields and creates a new Soggiornante object with the provided information.\n * \n * @param prenotazione the reservation from which to retrieve the room number and dates of stay\n * @param cont the unique identifier for the guest\n * @return a Soggiornante object with all the guest information set\n */\npublic Soggiornante readDatiSogg(Prenotazione prenotazione, int cont) {\n    Frame msg;\n    String data_inizio, data_fine;\n    Date data1, data2;\n    Soggiornante sogg = new Soggiornante();\n    sogg.setNumStanza(pren.getNumStanza());\n    sogg.setCognome(testo2.getText());\n    sogg.setNome(testo3.getText());\n    sogg.setLuogoNasc(testo4.getText());\n    sogg.setDataNasc(DateUtils.convertDate(testo5.getText()));\n    sogg.setNumDoc(testo6.getText());\n    sogg.setNumTel(testo7.getText());\n    sogg.setIndirizzo(testo8.getText());\n    sogg.setCap(testo9.getText());\n    sogg.setComune(testo10.getText());\n    sogg.setCitta(testo11.getText());\n    sogg.setNazione(testo12.getText());\n    sogg.setInizioSogg(pren.getInizioSogg());\n    sogg.setFineSogg(pren.getFineSogg());\n    sogg.setIdPrenotazione(pren.getIdPrenotazione());\n    sogg.setIdSoggiornante(cont);\n    if (checkboxes[0.getState() == true)\n        sogg.setPensionamento(Flag.SOLO_PERNOTTAMENTO);\n    else if (checkboxes[1.getState() == true)\n        sogg.setPensionamento(Flag.SOLO_COLAZIONE);\n    else if (checkboxes[2.getState() == true)\n        sogg.setPensionamento(Flag.MEZZA_PENSIONE);\n    else if (checkboxes[3.getState() == true)\n        sogg.setPensionamento(Flag.PENSIONE_COMPLETA);\n    if (checkboxes1[0.getState() == true)\n        sogg.setStatus(Flag.NEONATO);\n    else if (checkboxes1[1.getState() == true)\n        sogg.setStatus(Flag.BAMBINO);\n    else if (checkboxes1[2.getState() == true)\n        sogg.setStatus(Flag.RAGAZZO);\n    else\n        sogg.setStatus(Flag.ADULTO);\n    return sogg;\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    testo1.setText(sogg.getNumStanza());\r\n    testo2.setText(sogg.getCognome());\r\n    testo3.setText(sogg.getNome());\r\n    testo4.setText(sogg.getLuogoNasc());\r\n    testo5.setText(DateUtils.parseDate(DateUtils.giveStringOfDate(sogg.getDataNasc())));\r\n    testo6.setText(sogg.getNumDoc());\r\n    testo7.setText(sogg.getNumTel());\r\n    testo8.setText(sogg.getIndirizzo());\r\n    testo9.setText(sogg.getCap());\r\n    testo10.setText(sogg.getComune());\r\n    testo11.setText(sogg.getCitta());\r\n    testo12.setText(sogg.getNazione());\r\n    testo13.setText(DateUtils.parseDate(DateUtils.giveStringOfDate(sogg.getInizioSogg())));\r\n    testo14.setText(DateUtils.parseDate(DateUtils.giveStringOfDate(sogg.getFineSogg())));\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void writeDatiSogg(Soggiornante)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Writes the data of a \"Soggiornante\" object to a set of text fields.\n * \n * @param sogg the Soggiornante object whose data will be displayed\n * \n * This method sets the text of multiple text fields to display the various attributes of the provided Soggiornante object.\n * The text fields are updated with the Soggiornante's room number, last name, first name, place of birth, date of birth, document number, phone number, address, postal code, city, country, start date of stay, and end date of stay.\n * The date values are formatted using the DateUtils class to display them in a user-friendly format.\n */"
            },
            {
                "body": "Optional[{\r\n    this.setTitle(\"Inserimento dei dati del soggiornante  (\" + parz + \"/\" + tot + \")\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void changeTitle(int, int)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Changes the title of the window to display the progress of data entry for a guest.\n * The title will show the current progress out of the total number of entries.\n * \n * @param parz the current progress of data entry\n * @param tot the total number of entries to be completed\n */\nvoid changeTitle(int parz, int tot) {\n    this.setTitle(\"Inserimento dei dati del soggiornante  (\" + parz + \"/\" + tot + \")\");\n}\n*/"
            },
            {
                "body": "Optional[{\r\n    testo2.setText(\"\");\r\n    testo3.setText(\"\");\r\n    testo4.setText(\"\");\r\n    testo5.setText(\"\");\r\n    testo6.setText(\"\");\r\n    testo7.setText(\"\");\r\n    testo8.setText(\"\");\r\n    testo9.setText(\"\");\r\n    testo10.setText(\"\");\r\n    testo11.setText(\"\");\r\n    testo12.setText(\"\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void cleanFields()",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * This method clears all the text fields in the user interface.\n * \n * @param None\n * @return None\n * \n * This method sets the text of multiple text fields (testo2, testo3, ..., testo12) to an empty string, effectively clearing their contents.\n * This is useful for resetting the input fields after a form submission or any other action that requires clearing the user input.\n */"
            },
            {
                "body": "Optional[{\r\n    Disponibilita disp_da_cambiare = new Disponibilita();\r\n    ListaDisponibilita elenco_disp = (Principale.db).elencoDisponibilita();\r\n    if (elenco_disp == null) {\r\n        Frame msg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\r\n        return;\r\n    }\r\n    disp_da_cambiare = Utils.getDispOfRoom(elenco_disp, sogg.getNumStanza(), true);\r\n    disp_da_cambiare.setDisponibilita(sogg.getInizioSogg(), sogg.getFineSogg(), tipo, Flag.ASSEGNATA);\r\n    (Principale.db).changeDisponibilita(disp_da_cambiare.getNumStanza(), disp_da_cambiare.getDispAnnoCorr(), disp_da_cambiare.getDispAnnoProx());\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void aggiornaDisp(Soggiornante, char)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Updates the availability of a room for a given guest.\n * \n * @param sogg the guest for whom the availability needs to be updated\n * @param tipo the type of availability to set (e.g. 'S' for reserved)\n * \n * This method retrieves the availability of the room assigned to the guest, sets the availability\n * for the specified period and type, and updates the availability in the database.\n * \n * @return void\n */"
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    String data_nasc = new String();\r\n    //Controllo data di nascita\r\n    if ((testo5.getText().equals(\"\"))) {\r\n        msg = new AvvisoDialog(this, \" Inserire la data di nascita! \");\r\n        return true;\r\n    } else\r\n        data_nasc = DateUtils.parseDate(testo5.getText());\r\n    if (data_nasc.equals(Errore.DATA_NON_CORRETTA)) {\r\n        msg = new MessageDialog(this, \" Data Nascita Errata! \");\r\n        return true;\r\n    } else {\r\n        if (!(DateUtils.isDataRight(data_nasc))) {\r\n            msg = new MessageDialog(this, \"Data Nascita Insensata\");\r\n            return true;\r\n        }\r\n    }\r\n    if (!((testo2.getText()).length() <= 20)) {\r\n        msg = new MessageDialog(this, \" Il cognome deve essere composto da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((testo3.getText()).length() <= 20)) {\r\n        msg = new MessageDialog(this, \" Il nome deve essere composto da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((testo4.getText()).length() <= 32)) {\r\n        msg = new MessageDialog(this, \" Il luogo di nascita deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((testo6.getText()).length() <= 16)) {\r\n        msg = new MessageDialog(this, \" Il documento di identita' deve essere composto da al piu' 16 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((testo7.getText()).length() <= 16)) {\r\n        msg = new MessageDialog(this, \" Il numero telefonico deve essere composto da al piu' 16 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((testo8.getText()).length() <= 32)) {\r\n        msg = new MessageDialog(this, \" L'indirizzo deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((testo9.getText()).length() <= 5)) {\r\n        msg = new MessageDialog(this, \" Il C.A.P. deve essere composto da al piu' 5 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((testo10.getText()).length() <= 32)) {\r\n        msg = new MessageDialog(this, \" Il comune deve essere composto da al piu' 32 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((testo11.getText()).length() <= 20)) {\r\n        msg = new MessageDialog(this, \" La citta deve essere composto da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    if (!((testo12.getText()).length() <= 20)) {\r\n        msg = new MessageDialog(this, \" La nazione deve essere composto da al piu' 20 caratteri! \");\r\n        return true;\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " boolean errori()",
                "comments": null,
                "innerComments": "Optional[[//Controllo data di nascita\r\n]]",
                "generated_comment": "/**\n * This method checks for errors in the input fields of a form.\n * It validates the date of birth, length of name, surname, birthplace, ID document, phone number,\n * address, postal code, city, and country fields.\n * If any error is found, a message dialog is displayed and the method returns true.\n * \n * @return true if any error is found in the input fields, false otherwise\n */"
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(title);\r\n    padre.setEnabled(false);\r\n    setupPanels(caption, pens, status);\r\n    init();\r\n    pack();\r\n    this.setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public MascheraSoggiorno(String, String, char, char)",
                "comments": null,
                "innerComments": null,
                "generated_comment": "/**\n * Constructs a new MascheraSoggiorno object with the specified title, caption, pens, and status.\n * \n * @param title the title of the MascheraSoggiorno object\n * @param caption the caption of the MascheraSoggiorno object\n * @param pens the pens of the MascheraSoggiorno object\n * @param status the status of the MascheraSoggiorno object\n */\npublic MascheraSoggiorno(String title, String caption, char pens, char status) {\n    super(title);\n    padre.setEnabled(false);\n    setupPanels(caption, pens, status);\n    init();\n    pack();\n    this.setVisible(true);\n}\n*/"
            }
        ],
        "signature": "MascheraSoggiorno",
        "variables": [
            " Label etichetta",
            " Label etichetta1",
            " Label label1",
            " Label label2",
            " Label label3",
            " Label label4",
            " Label label5",
            " Label label6",
            " Label label7",
            " Label label8",
            " Label label9",
            " Label label10",
            " Label label11",
            " Label label12",
            " Label label13",
            " Label label14",
            " Label label15",
            " Label label16",
            " TextField testo1",
            " TextField testo2",
            " TextField testo3",
            " TextField testo4",
            " TextField testo5",
            " TextField testo6",
            " TextField testo7",
            " TextField testo8",
            " TextField testo9",
            " TextField testo10",
            " TextField testo11",
            " TextField testo12",
            " TextField testo13",
            " TextField testo14",
            " Button Annulla",
            " Button Conferma",
            " CheckboxGroup pensione",
            " CheckboxGroup cliente",
            " Checkbox checkboxes",
            " Checkbox checkboxes1",
            " Panel panel1",
            " Panel panel2",
            " Panel panel3",
            " GridBagLayout gridbag",
            " RicercaPrenotazione padre"
        ],
        "generated_class_comment": "/**\n * The MascheraSoggiorno class represents a user interface for entering and displaying guest and stay information.\n * It provides methods for setting up panels with labels, text fields, buttons, and checkboxes to capture customer and stay details.\n * The class includes functionality to initialize the UI, handle button actions, read and write guest data, update room availability, and check for input errors.\n * \n * The class contains constructors to create a new MascheraSoggiorno object with a specified title, caption, pens, and status.\n * It also defines variables for labels, text fields, buttons, checkboxes, panels, layout, and a parent window.\n * \n * Main functionalities include:\n * - Setting up panels for displaying customer and stay information\n * - Initializing UI components and handling button actions\n * - Reading and writing guest data to text fields\n * - Updating room availability based on guest information\n * - Checking for errors in input fields and displaying error messages\n * \n * Overall, the MascheraSoggiorno class provides a user-friendly interface for managing guest and stay information in a hotel reservation system.\n */\n**/"
    }
]