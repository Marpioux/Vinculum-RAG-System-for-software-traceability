[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    MessageDialog msg;\r\n    elenco_extra = (Principale.db).elencoSenzaSuppRid();\r\n    if (elenco_extra != null) {\r\n        if (extra.getItemCount() > 0)\r\n            extra.removeAll();\r\n        int i = 1;\r\n        while (i <= elenco_extra.length()) {\r\n            extra.addItem((elenco_extra.getBeneServizio(i)).toString());\r\n            i++;\r\n        }\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " void inizExtra()",
                "comments": "Optional[// Travaso dati degli extra nelle strutture dati apposite\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    num_stanza = new TextField(\"\", 4);\r\n    num_stanza.setEditable(true);\r\n    // creo le label\r\n    etich1 = new Label(\"Gestione degli addebiti              \");\r\n    etich1.setFont(ConfigurazioneSistema.font_titolo);\r\n    etich2 = new Label(\"Scegliere l'extra da addebitare \");\r\n    etich3 = new Label(\"Addebitare alla stanza numero \");\r\n    // creo pannello di sinistra\r\n    this.remove(panel1);\r\n    panel1 = new Panel();\r\n    panel1.setLayout(gridbag);\r\n    Utils.constrain(panel1, etich1, 0, 0, 6, 1);\r\n    Utils.constrain(panel1, etich2, 0, 1, 6, 1, 10, 0, 0, 0);\r\n    Utils.constrain(panel1, extra, 0, 2, 6, 4, GridBagConstraints.BOTH, GridBagConstraints.WEST, 1.0, 1.0, 0, 20, 0, 20);\r\n    this.remove(panel4);\r\n    panel4 = new Panel();\r\n    panel4.setLayout(gridbag);\r\n    Utils.constrain(panel4, etich3, 0, 0, 1, 1, 5, 5, 5, 5);\r\n    Utils.constrain(panel4, num_stanza, 1, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    // aggiungo i pannelli appena creati al resto\r\n    Utils.constrain(this, panel1, 0, 0, 1, 1, GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 0.5, 0.5, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel4, 0, 2, 1, 1, GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 0.5, 0.5, 5, 5, 5, 5);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": " void setupPanello()",
                "comments": "Optional[// Creazione della finestra\r\n]",
                "innerComments": "Optional[[// creo le label\r\n, // creo pannello di sinistra\r\n, // aggiungo i pannelli appena creati al resto\r\n]]"
            },
            {
                "body": "Optional[{\r\n    conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            scriviSuDB(num_stanza.getText());\r\n            dispose();\r\n            padre.setEnabled(true);\r\n        }\r\n    });\r\n    addebita.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (!errore()) {\r\n                addebito = true;\r\n                aggiornaAddebiti();\r\n            }\r\n        }\r\n    });\r\n    deaddebita.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (!errore()) {\r\n                addebito = false;\r\n                aggiornaAddebiti();\r\n            }\r\n        }\r\n    });\r\n    num_stanza.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (!errore()) {\r\n                addebito = true;\r\n                aggiornaAddebiti();\r\n            }\r\n        }\r\n    });\r\n    extra.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (!errore()) {\r\n                addebito = true;\r\n                aggiornaAddebiti();\r\n            }\r\n        }\r\n    });\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " void inizializza()",
                "comments": "Optional[// Per la gestione degli eventi della finestra\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    scriviSuDB(num_stanza.getText());\r\n    dispose();\r\n    padre.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!errore()) {\r\n        addebito = true;\r\n        aggiornaAddebiti();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!errore()) {\r\n        addebito = false;\r\n        aggiornaAddebiti();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!errore()) {\r\n        addebito = true;\r\n        aggiornaAddebiti();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!errore()) {\r\n        addebito = true;\r\n        aggiornaAddebiti();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if ((num_stanza.getText()).equals(\"\") && (extra.getSelectedIndex() == -1)) {\r\n        MessageDialog p = new MessageDialog(this, \"Manca stanza e selezione!\");\r\n        return true;\r\n    } else if ((num_stanza.getText()).equals(\"\")) {\r\n        MessageDialog p = new MessageDialog(this, \"Manca stanza!\");\r\n        return true;\r\n    } else if (extra.getSelectedIndex() == -1) {\r\n        MessageDialog p = new MessageDialog(this, \"Manca selezione!\");\r\n        return true;\r\n    } else if ((num_stanza.getText()).length() > 4) {\r\n        MessageDialog p = new MessageDialog(this, \"Errore nel numero di stanza!\");\r\n        return true;\r\n    } else\r\n        return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " boolean errore()",
                "comments": "Optional[// mancanza dei dati necessari per l'addebito: num_stanza e extra.\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    stanza_prec = new String(num_stanza.getText());\r\n    aggiornaAvideo();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void annullaAddebitiStanzaPrec()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!(stanza_prec.equals(num_stanza.getText())))\r\n        AltraStanza();\r\n    else\r\n        aggiornaAvideo();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " void aggiornaAddebiti()",
                "comments": "Optional[// aggiornate sugli addebiti.\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    boolean modifiche = false;\r\n    for (int i = 0; i < quantita_mod.length; i++) modifiche = modifiche || (quantita_mod[i] != 0);\r\n    return modifiche;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " boolean thereIsModifiche()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    FinModifiche p;\r\n    if ((Principale.db).readStanza(num_stanza.getText()) != null) {\r\n        ListaSoggiornanti L;\r\n        if ((L = (Principale.db).foundSoggiornanti(num_stanza.getText(), false)) != null) {\r\n            if (!L.isEmpty()) {\r\n                if (!stanza_prec.equals(\"\") && thereIsModifiche()) {\r\n                    p = new FinModifiche(this, \"Attenzione: cambio di stanza!\");\r\n                } else {\r\n                    riscriviElencoAddebiti();\r\n                    annullaAddebitiStanzaPrec();\r\n                }\r\n            } else {\r\n                msg = new AvvisoDialog(this, \"Nessun soggiornante occupa la stanza!\");\r\n                num_stanza.setText(stanza_prec);\r\n            }\r\n        } else {\r\n            msg = new MessageDialog(this, \"Problemi con il database: errore.\");\r\n        }\r\n    } else {\r\n        msg = new MessageDialog(this, \"Stanza inesistente!\");\r\n        num_stanza.setText(stanza_prec);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " void AltraStanza()",
                "comments": "Optional[// confermati o meno.\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    MessageDialog msg;\r\n    elenco_addebiti = (Principale.db).foundAddebiti(num_stanza.getText());\r\n    elenco_extra_addebitati = new ListaBeniServizi();\r\n    if (elenco_addebiti != null) {\r\n        // inizializzo l'array delle modifiche e degli extra addebitati\r\n        quantita_mod = new int[elenco_addebiti.length()];\r\n        BeneServizio extra;\r\n        for (int i = 0; i < quantita_mod.length; i++) {\r\n            quantita_mod[i] = 0;\r\n            extra = (Principale.db).readBeneServizio((elenco_addebiti.getAddebito(i + 1)).getCodExtra());\r\n            if (extra == null) {\r\n                msg = new MessageDialog(this, \"Uno degli extra addebitati non e' stato trovato!\");\r\n                extra = new BeneServizio((elenco_addebiti.getAddebito(i + 1)).getCodExtra(), \"Sconosciuto\", 0);\r\n            }\r\n            elenco_extra_addebitati.addBeneServizio(extra);\r\n        }\r\n    } else\r\n        msg = new MessageDialog(this, \"Errore nel database!\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void riscriviElencoAddebiti()",
                "comments": null,
                "innerComments": "Optional[[// inizializzo l'array delle modifiche e degli extra addebitati\r\n]]"
            },
            {
                "body": "Optional[{\r\n    for (int i = 1; i <= elenco_addebiti.length(); i++) if (((elenco_addebiti.getAddebito(i)).getCodExtra()).equals(b.getCodExtra()))\r\n        return i;\r\n    return -1;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " int posExtraInAddebiti(BeneServizio)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    int[] supp;\r\n    BeneServizio extra_scelto = elenco_extra.getBeneServizio(extra.getSelectedIndex() + 1);\r\n    int pos;\r\n    if ((pos = posExtraInAddebiti(extra_scelto)) < 0 && addebito) {\r\n        Addebito a = new Addebito(num_stanza.getText(), extra_scelto.getCodExtra(), 0, 0);\r\n        elenco_addebiti.addAddebito(a);\r\n        elenco_extra_addebitati.addBeneServizio(extra_scelto);\r\n        // allungo l'array delle quantita' modificate\r\n        supp = new int[elenco_addebiti.length()];\r\n        for (int i = 0; i < quantita_mod.length; i++) supp[i] = quantita_mod[i];\r\n        supp[supp.length - 1] = 1;\r\n        quantita_mod = supp;\r\n        pos = quantita_mod.length;\r\n        extra_add.setText(extra.getSelectedItem());\r\n        continuaAggiornamento();\r\n    } else {\r\n        if (pos < 0) {\r\n            // sto cercando di togliere da un addebito inesistente\r\n            msg = new AvvisoDialog(this, \"Stai cercando di togliere da un addebito ormai inesistente!\");\r\n        } else {\r\n            // aggiorno tale array per contenere l'addebito appena effettuato\r\n            if (addebito) {\r\n                quantita_mod[pos - 1]++;\r\n                extra_add.setText(extra.getSelectedItem());\r\n                continuaAggiornamento();\r\n            } else if ((quantita_mod[pos - 1] + (elenco_addebiti.getAddebito(pos)).getQuantita()) > 0) {\r\n                quantita_mod[pos - 1]--;\r\n                extra_add.setText(extra.getSelectedItem());\r\n                continuaAggiornamento();\r\n            } else\r\n                msg = new AvvisoDialog(this, \"Stai cercando di togliere da un addebito ormai inesistente!\");\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void aggiornaAvideo()",
                "comments": null,
                "innerComments": "Optional[[// allungo l'array delle quantita' modificate\r\n, // sto cercando di togliere da un addebito inesistente\r\n, // aggiorno tale array per contenere l'addebito appena effettuato\r\n]]"
            },
            {
                "body": "Optional[{\r\n    int i = 1;\r\n    BeneServizio e;\r\n    float conto = 0;\r\n    if (addebiti.getItemCount() > 0)\r\n        addebiti.removeAll();\r\n    while (i <= elenco_addebiti.length()) {\r\n        if (((elenco_addebiti.getAddebito(i)).getQuantita() + quantita_mod[i - 1]) > 0) {\r\n            e = elenco_extra_addebitati.getBeneServizio(i);\r\n            if (Integer.parseInt(e.getCodExtra()) >= 40000000 && Integer.parseInt(e.getCodExtra()) < 50000000)\r\n                addebiti.addItem(\"S \" + Utils.completaStringa(e.getDescrizione(), 32) + \" \" + (Principale.config).getValuta() + \".\" + (elenco_addebiti.getAddebito(i)).getTotAddebito());\r\n            else if (Integer.parseInt(e.getCodExtra()) >= 50000000)\r\n                addebiti.addItem(\"R \" + Utils.completaStringa(e.getDescrizione(), 32) + \" \" + (Principale.config).getValuta() + \".\" + (elenco_addebiti.getAddebito(i)).getTotAddebito());\r\n            else\r\n                addebiti.addItem(Utils.completaStringa(e.getDescrizione(), 10) + Utils.completaStringa(\" x \" + (elenco_addebiti.getAddebito(i)).getQuantita(), 5) + \" +(\" + quantita_mod[i - 1] + \")\");\r\n            conto = conto + (elenco_addebiti.getAddebito(i)).getTotAddebito() + quantita_mod[i - 1] * e.getPxUnitario();\r\n        }\r\n        i++;\r\n    }\r\n    totale.setText((Principale.config).getValuta() + \".\" + conto);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void continuaAggiornamento()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    for (int i = 1; i <= elenco_addebiti.length(); i++) {\r\n        if (quantita_mod[i - 1] != 0) {\r\n            if ((quantita_mod[i - 1] + (elenco_addebiti.getAddebito(i)).getQuantita()) > 0) {\r\n                int j = (Principale.db).addAddebito(stanza, (elenco_addebiti.getAddebito(i)).getCodExtra(), quantita_mod[i - 1]);\r\n                if (j < 0)\r\n                    DataBase.visErrore(j);\r\n            } else {\r\n                int j = (Principale.db).delAddebito(stanza, (elenco_addebiti.getAddebito(i)).getCodExtra());\r\n                if (j < 0)\r\n                    DataBase.visErrore(j);\r\n            }\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void scriviSuDB(String)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    ok.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            padre.scriviSuDB(padre.stanza_prec);\r\n            inComune();\r\n        }\r\n    });\r\n    annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            inComune();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    padre.scriviSuDB(padre.stanza_prec);\r\n    inComune();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    inComune();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    padre.riscriviElencoAddebiti();\r\n    padre.annullaAddebitiStanzaPrec();\r\n    padre.setEnabled(true);\r\n    dispose();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void inComune()",
                "comments": null,
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"Addebito spese e servizi extra\", \"Conferma l'addebito\");\r\n    padre = parent;\r\n    padre.setEnabled(false);\r\n    inizExtra();\r\n    setupPanello();\r\n    inizializza();\r\n    pack();\r\n    setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public MascheraAddebiti(Frame)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(title);\r\n    padre = parent;\r\n    padre.setEnabled(false);\r\n    titolo = new String(title);\r\n    this.setLayout(gridbag);\r\n    ok = new Button(\"Salva le modifiche\");\r\n    annulla = new Button(\"Annulla le modifiche\");\r\n    Utils.constrain(this, msg, 0, 0, 5, 2, GridBagConstraints.BOTH, GridBagConstraints.CENTER, 1.0, 1.0, 20, 20, 20, 20);\r\n    Utils.constrain(this, annulla, 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 1.0, 20, 20, 20, 20);\r\n    Utils.constrain(this, ok, 3, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 1.0, 20, 20, 20, 20);\r\n    this.pack();\r\n    init();\r\n    setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public FinModifiche(MascheraAddebiti, String)",
                "comments": null,
                "innerComments": null
            }
        ],
        "signature": "MascheraAddebiti",
        "variables": [
            " String stanza_prec",
            " Label etich1",
            " Label etich2",
            " Label etich3",
            " TextField num_stanza",
            " Button ok",
            " Button annulla",
            " Label msg",
            " GridBagLayout gridbag",
            " String titolo",
            " MascheraAddebiti padre"
        ]
    },
    {
        "methods": [
            {
                "body": "Optional[{\r\n    MessageDialog msg;\r\n    elenco_extra = (Principale.db).elencoSenzaSuppRid();\r\n    if (elenco_extra != null) {\r\n        if (extra.getItemCount() > 0)\r\n            extra.removeAll();\r\n        int i = 1;\r\n        while (i <= elenco_extra.length()) {\r\n            extra.addItem((elenco_extra.getBeneServizio(i)).toString());\r\n            i++;\r\n        }\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " void inizExtra()",
                "comments": "Optional[// Travaso dati degli extra nelle strutture dati apposite\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    num_stanza = new TextField(\"\", 4);\r\n    num_stanza.setEditable(true);\r\n    // creo le label\r\n    etich1 = new Label(\"Gestione degli addebiti              \");\r\n    etich1.setFont(ConfigurazioneSistema.font_titolo);\r\n    etich2 = new Label(\"Scegliere l'extra da addebitare \");\r\n    etich3 = new Label(\"Addebitare alla stanza numero \");\r\n    // creo pannello di sinistra\r\n    this.remove(panel1);\r\n    panel1 = new Panel();\r\n    panel1.setLayout(gridbag);\r\n    Utils.constrain(panel1, etich1, 0, 0, 6, 1);\r\n    Utils.constrain(panel1, etich2, 0, 1, 6, 1, 10, 0, 0, 0);\r\n    Utils.constrain(panel1, extra, 0, 2, 6, 4, GridBagConstraints.BOTH, GridBagConstraints.WEST, 1.0, 1.0, 0, 20, 0, 20);\r\n    this.remove(panel4);\r\n    panel4 = new Panel();\r\n    panel4.setLayout(gridbag);\r\n    Utils.constrain(panel4, etich3, 0, 0, 1, 1, 5, 5, 5, 5);\r\n    Utils.constrain(panel4, num_stanza, 1, 0, 1, 1, GridBagConstraints.NONE, GridBagConstraints.WEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    // aggiungo i pannelli appena creati al resto\r\n    Utils.constrain(this, panel1, 0, 0, 1, 1, GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 0.5, 0.5, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel4, 0, 2, 1, 1, GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 0.5, 0.5, 5, 5, 5, 5);\r\n}]",
                "hasComment": true,
                "hasInnerComment": true,
                "signature": " void setupPanello()",
                "comments": "Optional[// Creazione della finestra\r\n]",
                "innerComments": "Optional[[// creo le label\r\n, // creo pannello di sinistra\r\n, // aggiungo i pannelli appena creati al resto\r\n]]"
            },
            {
                "body": "Optional[{\r\n    conferma.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            scriviSuDB(num_stanza.getText());\r\n            dispose();\r\n            padre.setEnabled(true);\r\n        }\r\n    });\r\n    addebita.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (!errore()) {\r\n                addebito = true;\r\n                aggiornaAddebiti();\r\n            }\r\n        }\r\n    });\r\n    deaddebita.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (!errore()) {\r\n                addebito = false;\r\n                aggiornaAddebiti();\r\n            }\r\n        }\r\n    });\r\n    num_stanza.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (!errore()) {\r\n                addebito = true;\r\n                aggiornaAddebiti();\r\n            }\r\n        }\r\n    });\r\n    extra.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            if (!errore()) {\r\n                addebito = true;\r\n                aggiornaAddebiti();\r\n            }\r\n        }\r\n    });\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " void inizializza()",
                "comments": "Optional[// Per la gestione degli eventi della finestra\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    scriviSuDB(num_stanza.getText());\r\n    dispose();\r\n    padre.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!errore()) {\r\n        addebito = true;\r\n        aggiornaAddebiti();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!errore()) {\r\n        addebito = false;\r\n        aggiornaAddebiti();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!errore()) {\r\n        addebito = true;\r\n        aggiornaAddebiti();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!errore()) {\r\n        addebito = true;\r\n        aggiornaAddebiti();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if ((num_stanza.getText()).equals(\"\") && (extra.getSelectedIndex() == -1)) {\r\n        MessageDialog p = new MessageDialog(this, \"Manca stanza e selezione!\");\r\n        return true;\r\n    } else if ((num_stanza.getText()).equals(\"\")) {\r\n        MessageDialog p = new MessageDialog(this, \"Manca stanza!\");\r\n        return true;\r\n    } else if (extra.getSelectedIndex() == -1) {\r\n        MessageDialog p = new MessageDialog(this, \"Manca selezione!\");\r\n        return true;\r\n    } else if ((num_stanza.getText()).length() > 4) {\r\n        MessageDialog p = new MessageDialog(this, \"Errore nel numero di stanza!\");\r\n        return true;\r\n    } else\r\n        return false;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " boolean errore()",
                "comments": "Optional[// mancanza dei dati necessari per l'addebito: num_stanza e extra.\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    stanza_prec = new String(num_stanza.getText());\r\n    aggiornaAvideo();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void annullaAddebitiStanzaPrec()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!(stanza_prec.equals(num_stanza.getText())))\r\n        AltraStanza();\r\n    else\r\n        aggiornaAvideo();\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " void aggiornaAddebiti()",
                "comments": "Optional[// aggiornate sugli addebiti.\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    boolean modifiche = false;\r\n    for (int i = 0; i < quantita_mod.length; i++) modifiche = modifiche || (quantita_mod[i] != 0);\r\n    return modifiche;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " boolean thereIsModifiche()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    FinModifiche p;\r\n    if ((Principale.db).readStanza(num_stanza.getText()) != null) {\r\n        ListaSoggiornanti L;\r\n        if ((L = (Principale.db).foundSoggiornanti(num_stanza.getText(), false)) != null) {\r\n            if (!L.isEmpty()) {\r\n                if (!stanza_prec.equals(\"\") && thereIsModifiche()) {\r\n                    p = new FinModifiche(this, \"Attenzione: cambio di stanza!\");\r\n                } else {\r\n                    riscriviElencoAddebiti();\r\n                    annullaAddebitiStanzaPrec();\r\n                }\r\n            } else {\r\n                msg = new AvvisoDialog(this, \"Nessun soggiornante occupa la stanza!\");\r\n                num_stanza.setText(stanza_prec);\r\n            }\r\n        } else {\r\n            msg = new MessageDialog(this, \"Problemi con il database: errore.\");\r\n        }\r\n    } else {\r\n        msg = new MessageDialog(this, \"Stanza inesistente!\");\r\n        num_stanza.setText(stanza_prec);\r\n    }\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " void AltraStanza()",
                "comments": "Optional[// confermati o meno.\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    MessageDialog msg;\r\n    elenco_addebiti = (Principale.db).foundAddebiti(num_stanza.getText());\r\n    elenco_extra_addebitati = new ListaBeniServizi();\r\n    if (elenco_addebiti != null) {\r\n        // inizializzo l'array delle modifiche e degli extra addebitati\r\n        quantita_mod = new int[elenco_addebiti.length()];\r\n        BeneServizio extra;\r\n        for (int i = 0; i < quantita_mod.length; i++) {\r\n            quantita_mod[i] = 0;\r\n            extra = (Principale.db).readBeneServizio((elenco_addebiti.getAddebito(i + 1)).getCodExtra());\r\n            if (extra == null) {\r\n                msg = new MessageDialog(this, \"Uno degli extra addebitati non e' stato trovato!\");\r\n                extra = new BeneServizio((elenco_addebiti.getAddebito(i + 1)).getCodExtra(), \"Sconosciuto\", 0);\r\n            }\r\n            elenco_extra_addebitati.addBeneServizio(extra);\r\n        }\r\n    } else\r\n        msg = new MessageDialog(this, \"Errore nel database!\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void riscriviElencoAddebiti()",
                "comments": null,
                "innerComments": "Optional[[// inizializzo l'array delle modifiche e degli extra addebitati\r\n]]"
            },
            {
                "body": "Optional[{\r\n    for (int i = 1; i <= elenco_addebiti.length(); i++) if (((elenco_addebiti.getAddebito(i)).getCodExtra()).equals(b.getCodExtra()))\r\n        return i;\r\n    return -1;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " int posExtraInAddebiti(BeneServizio)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    int[] supp;\r\n    BeneServizio extra_scelto = elenco_extra.getBeneServizio(extra.getSelectedIndex() + 1);\r\n    int pos;\r\n    if ((pos = posExtraInAddebiti(extra_scelto)) < 0 && addebito) {\r\n        Addebito a = new Addebito(num_stanza.getText(), extra_scelto.getCodExtra(), 0, 0);\r\n        elenco_addebiti.addAddebito(a);\r\n        elenco_extra_addebitati.addBeneServizio(extra_scelto);\r\n        // allungo l'array delle quantita' modificate\r\n        supp = new int[elenco_addebiti.length()];\r\n        for (int i = 0; i < quantita_mod.length; i++) supp[i] = quantita_mod[i];\r\n        supp[supp.length - 1] = 1;\r\n        quantita_mod = supp;\r\n        pos = quantita_mod.length;\r\n        extra_add.setText(extra.getSelectedItem());\r\n        continuaAggiornamento();\r\n    } else {\r\n        if (pos < 0) {\r\n            // sto cercando di togliere da un addebito inesistente\r\n            msg = new AvvisoDialog(this, \"Stai cercando di togliere da un addebito ormai inesistente!\");\r\n        } else {\r\n            // aggiorno tale array per contenere l'addebito appena effettuato\r\n            if (addebito) {\r\n                quantita_mod[pos - 1]++;\r\n                extra_add.setText(extra.getSelectedItem());\r\n                continuaAggiornamento();\r\n            } else if ((quantita_mod[pos - 1] + (elenco_addebiti.getAddebito(pos)).getQuantita()) > 0) {\r\n                quantita_mod[pos - 1]--;\r\n                extra_add.setText(extra.getSelectedItem());\r\n                continuaAggiornamento();\r\n            } else\r\n                msg = new AvvisoDialog(this, \"Stai cercando di togliere da un addebito ormai inesistente!\");\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void aggiornaAvideo()",
                "comments": null,
                "innerComments": "Optional[[// allungo l'array delle quantita' modificate\r\n, // sto cercando di togliere da un addebito inesistente\r\n, // aggiorno tale array per contenere l'addebito appena effettuato\r\n]]"
            },
            {
                "body": "Optional[{\r\n    int i = 1;\r\n    BeneServizio e;\r\n    float conto = 0;\r\n    if (addebiti.getItemCount() > 0)\r\n        addebiti.removeAll();\r\n    while (i <= elenco_addebiti.length()) {\r\n        if (((elenco_addebiti.getAddebito(i)).getQuantita() + quantita_mod[i - 1]) > 0) {\r\n            e = elenco_extra_addebitati.getBeneServizio(i);\r\n            if (Integer.parseInt(e.getCodExtra()) >= 40000000 && Integer.parseInt(e.getCodExtra()) < 50000000)\r\n                addebiti.addItem(\"S \" + Utils.completaStringa(e.getDescrizione(), 32) + \" \" + (Principale.config).getValuta() + \".\" + (elenco_addebiti.getAddebito(i)).getTotAddebito());\r\n            else if (Integer.parseInt(e.getCodExtra()) >= 50000000)\r\n                addebiti.addItem(\"R \" + Utils.completaStringa(e.getDescrizione(), 32) + \" \" + (Principale.config).getValuta() + \".\" + (elenco_addebiti.getAddebito(i)).getTotAddebito());\r\n            else\r\n                addebiti.addItem(Utils.completaStringa(e.getDescrizione(), 10) + Utils.completaStringa(\" x \" + (elenco_addebiti.getAddebito(i)).getQuantita(), 5) + \" +(\" + quantita_mod[i - 1] + \")\");\r\n            conto = conto + (elenco_addebiti.getAddebito(i)).getTotAddebito() + quantita_mod[i - 1] * e.getPxUnitario();\r\n        }\r\n        i++;\r\n    }\r\n    totale.setText((Principale.config).getValuta() + \".\" + conto);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void continuaAggiornamento()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    for (int i = 1; i <= elenco_addebiti.length(); i++) {\r\n        if (quantita_mod[i - 1] != 0) {\r\n            if ((quantita_mod[i - 1] + (elenco_addebiti.getAddebito(i)).getQuantita()) > 0) {\r\n                int j = (Principale.db).addAddebito(stanza, (elenco_addebiti.getAddebito(i)).getCodExtra(), quantita_mod[i - 1]);\r\n                if (j < 0)\r\n                    DataBase.visErrore(j);\r\n            } else {\r\n                int j = (Principale.db).delAddebito(stanza, (elenco_addebiti.getAddebito(i)).getCodExtra());\r\n                if (j < 0)\r\n                    DataBase.visErrore(j);\r\n            }\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void scriviSuDB(String)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    ok.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            padre.scriviSuDB(padre.stanza_prec);\r\n            inComune();\r\n        }\r\n    });\r\n    annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            inComune();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    padre.scriviSuDB(padre.stanza_prec);\r\n    inComune();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    inComune();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    padre.riscriviElencoAddebiti();\r\n    padre.annullaAddebitiStanzaPrec();\r\n    padre.setEnabled(true);\r\n    dispose();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void inComune()",
                "comments": null,
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"Addebito spese e servizi extra\", \"Conferma l'addebito\");\r\n    padre = parent;\r\n    padre.setEnabled(false);\r\n    inizExtra();\r\n    setupPanello();\r\n    inizializza();\r\n    pack();\r\n    setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public MascheraAddebiti(Frame)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "{\r\n    super(title);\r\n    padre = parent;\r\n    padre.setEnabled(false);\r\n    titolo = new String(title);\r\n    this.setLayout(gridbag);\r\n    ok = new Button(\"Salva le modifiche\");\r\n    annulla = new Button(\"Annulla le modifiche\");\r\n    Utils.constrain(this, msg, 0, 0, 5, 2, GridBagConstraints.BOTH, GridBagConstraints.CENTER, 1.0, 1.0, 20, 20, 20, 20);\r\n    Utils.constrain(this, annulla, 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 1.0, 20, 20, 20, 20);\r\n    Utils.constrain(this, ok, 3, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1.0, 1.0, 20, 20, 20, 20);\r\n    this.pack();\r\n    init();\r\n    setVisible(true);\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public FinModifiche(MascheraAddebiti, String)",
                "comments": null,
                "innerComments": null
            }
        ],
        "signature": "FinModifiche",
        "variables": [
            " String stanza_prec",
            " Label etich1",
            " Label etich2",
            " Label etich3",
            " TextField num_stanza",
            " Button ok",
            " Button annulla",
            " Label msg",
            " GridBagLayout gridbag",
            " String titolo",
            " MascheraAddebiti padre"
        ]
    }
]