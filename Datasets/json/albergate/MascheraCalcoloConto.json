[
    {
        "methods": [
            {
                "body": "Optional[{\r\n    this.setFont(ConfigurazioneSistema.font_base);\r\n    //Creo i pulsanti\r\n    Annulla = new Button(\"   Annulla   \");\r\n    //Annulla.setFont(new Font(\"Courier\", Font.PLAIN, 12));\r\n    Visualizza = new Button(\"   Calcola   \");\r\n    //Visualizza.setFont(new Font(\"Courier\", Font.PLAIN, 12));\r\n    Visualizza.setEnabled(false);\r\n    //Creo le etichette\r\n    etichetta1 = new Label(\"Selezionare il tipo di conto che si desidera calcolare:\");\r\n    etichetta1.setFont(ConfigurazioneSistema.font_titolo);\r\n    etichetta2 = new Label(\"Conto su una stanza:\");\r\n    etichetta2.setFont(ConfigurazioneSistema.font_titolo);\r\n    etichetta3 = new Label(\"Conto su un cliente:\");\r\n    etichetta3.setFont(ConfigurazioneSistema.font_titolo);\r\n    etichetta4 = new Label(\"Conto su piu' stanze:\");\r\n    etichetta4.setFont(ConfigurazioneSistema.font_titolo);\r\n    stanza = new Label(\"Stanza numero\");\r\n    cognome = new Label(\"Cognome\");\r\n    nome = new Label(\"Nome\");\r\n    stanza1 = new Label(\"Stanza\");\r\n    stanza2 = new Label(\"Stanze Numero\");\r\n    //Creo i TextField e li rendo non editabili\r\n    testo = new TextField[6];\r\n    testo[0] = new TextField(\"\", 4);\r\n    testo[1] = new TextField(\"\", 20);\r\n    testo[2] = new TextField(\"\", 20);\r\n    testo[3] = new TextField(\"\", 4);\r\n    testo[4] = new TextField(\"\", 30);\r\n    testo[5] = new TextField(\"\", 10);\r\n    for (int i = 0; i < 6; ++i) testo[i].setEditable(false);\r\n    //Creo un Checkbox ad esclusione\r\n    checkbox_group = new CheckboxGroup();\r\n    checkboxes = new Checkbox[4];\r\n    checkboxes[0] = new Checkbox(\" Conto su una stanza\", checkbox_group, false);\r\n    checkboxes[1] = new Checkbox(\" Conto su un cliente\", checkbox_group, false);\r\n    checkboxes[2] = new Checkbox(\" Conto su piu'stanze\", checkbox_group, false);\r\n    checkboxes[3] = new Checkbox(\" Partenza anticipata\", false);\r\n    panel = new Panel[5];\r\n    for (int i = 0; i < 5; ++i) {\r\n        panel[i] = new Panel();\r\n        panel[i].setLayout(gridbag);\r\n    }\r\n    //Creo il pannello in alto a sinistra\r\n    Utils.constrain(panel[1], etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\r\n    Utils.constrain(panel[1], checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    Utils.constrain(panel[1], checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    Utils.constrain(panel[1], checkboxes[2], 0, 3, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    Utils.constrain(panel[1], checkboxes[3], 0, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    Utils.constrain(panel[1], testo[5], 1, 4, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\r\n    //Creo il pannello in alto a destra\r\n    Utils.constrain(panel[0], Annulla, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.3, 0.0, 20, 0, 5, 20);\r\n    Utils.constrain(panel[0], Visualizza, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.3, 0.0, 5, 0, 0, 20);\r\n    //Creo il pannello conto su una stanza\r\n    Utils.constrain(panel[2], etichetta2, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\r\n    Utils.constrain(panel[2], stanza, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\r\n    Utils.constrain(panel[2], testo[0], 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    //Creo il pannello conto su un cliente\r\n    Utils.constrain(panel[3], etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\r\n    Utils.constrain(panel[3], cognome, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\r\n    Utils.constrain(panel[3], testo[1], 1, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    Utils.constrain(panel[3], nome, 0, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.SOUTHWEST, 0.0, 0.0, 20, 5, 0, 20);\r\n    Utils.constrain(panel[3], testo[2], 1, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.SOUTHWEST, 1.0, 0.0, 20, 0, 0, 0);\r\n    Utils.constrain(panel[3], stanza1, 4, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\r\n    Utils.constrain(panel[3], testo[3], 5, 2, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\r\n    //Creo il pannello conto su piu' stanze\r\n    Utils.constrain(panel[4], etichetta4, 0, 0, 2, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\r\n    Utils.constrain(panel[4], stanza2, 0, 1, 1, 1, GridBagConstraints.NONE, GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\r\n    Utils.constrain(panel[4], testo[4], 1, 1, 1, 1, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 5);\r\n    //Attacco i pannelli al frame\r\n    this.setLayout(gridbag);\r\n    Utils.constrain(this, panel[1], 0, 0, 6, 4, GridBagConstraints.HORIZONTAL, GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel[0], 6, 0, 1, 4, GridBagConstraints.BOTH, GridBagConstraints.SOUTHEAST, 1.0, 0.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel[2], 0, 4, 7, 2, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel[3], 0, 6, 7, 3, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\r\n    Utils.constrain(this, panel[4], 0, 9, 7, 2, GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " void setupPanels()",
                "comments": null,
                "innerComments": "Optional[[//Creo i pulsanti\r\n, //Annulla.setFont(new Font(\"Courier\", Font.PLAIN, 12));\r\n, //Visualizza.setFont(new Font(\"Courier\", Font.PLAIN, 12));\r\n, //Creo le etichette\r\n, //Creo i TextField e li rendo non editabili\r\n, //Creo un Checkbox ad esclusione\r\n, //Creo il pannello in alto a sinistra\r\n, //Creo il pannello in alto a destra\r\n, //Creo il pannello conto su una stanza\r\n, //Creo il pannello conto su un cliente\r\n, //Creo il pannello conto su piu' stanze\r\n, //Attacco i pannelli al frame\r\n]]"
            },
            {
                "body": "Optional[{\r\n    checkboxes[0].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[0].getState()) {\r\n                tipo_conto = 1;\r\n                testo[0].setEditable(true);\r\n                Visualizza.setEnabled(true);\r\n                for (int i = 1; i < 5; ++i) {\r\n                    testo[i].setEditable(false);\r\n                    testo[i].setText(\"\");\r\n                }\r\n            }\r\n        }\r\n    });\r\n    checkboxes[1].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[1].getState()) {\r\n                tipo_conto = 2;\r\n                Visualizza.setEnabled(true);\r\n                for (int i = 1; i < 4; ++i) testo[i].setEditable(true);\r\n                testo[0].setEditable(false);\r\n                testo[0].setText(\"\");\r\n                testo[4].setEditable(false);\r\n                testo[4].setText(\"\");\r\n            }\r\n        }\r\n    });\r\n    checkboxes[2].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (checkboxes[2].getState()) {\r\n                tipo_conto = 3;\r\n                Visualizza.setEnabled(true);\r\n                testo[4].setEditable(true);\r\n                for (int i = 0; i < 4; ++i) {\r\n                    testo[i].setEditable(false);\r\n                    testo[i].setText(\"\");\r\n                }\r\n            }\r\n        }\r\n    });\r\n    checkboxes[3].addItemListener(new ItemListener() {\r\n\r\n        public void itemStateChanged(ItemEvent e) {\r\n            if (!checkboxes[3].getState()) {\r\n                testo[5].setEditable(false);\r\n                testo[5].setText(\"\");\r\n            } else {\r\n                testo[5].setEditable(true);\r\n                testo[5].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(new Date())));\r\n            }\r\n        }\r\n    });\r\n    Annulla.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            dispose();\r\n            padre.setEnabled(true);\r\n        }\r\n    });\r\n    Visualizza.addActionListener(new ActionListener() {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            startVisualizza();\r\n        }\r\n    });\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void init()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[0].getState()) {\r\n        tipo_conto = 1;\r\n        testo[0].setEditable(true);\r\n        Visualizza.setEnabled(true);\r\n        for (int i = 1; i < 5; ++i) {\r\n            testo[i].setEditable(false);\r\n            testo[i].setText(\"\");\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[1].getState()) {\r\n        tipo_conto = 2;\r\n        Visualizza.setEnabled(true);\r\n        for (int i = 1; i < 4; ++i) testo[i].setEditable(true);\r\n        testo[0].setEditable(false);\r\n        testo[0].setText(\"\");\r\n        testo[4].setEditable(false);\r\n        testo[4].setText(\"\");\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[2].getState()) {\r\n        tipo_conto = 3;\r\n        Visualizza.setEnabled(true);\r\n        testo[4].setEditable(true);\r\n        for (int i = 0; i < 4; ++i) {\r\n            testo[i].setEditable(false);\r\n            testo[i].setText(\"\");\r\n        }\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!checkboxes[3].getState()) {\r\n        testo[5].setEditable(false);\r\n        testo[5].setText(\"\");\r\n    } else {\r\n        testo[5].setEditable(true);\r\n        testo[5].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(new Date())));\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void itemStateChanged(ItemEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    dispose();\r\n    padre.setEnabled(true);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    startVisualizza();\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public void actionPerformed(ActionEvent)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (!errori()) {\r\n        this.setEnabled(false);\r\n        if (checkboxes[0].getState())\r\n            startContoStanza();\r\n        else {\r\n            if (checkboxes[1].getState()) {\r\n                startContoSingolo();\r\n            } else\r\n                startContoComitiva();\r\n        }\r\n        displayConto();\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startVisualizza()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    visual = new MascheraVisualizzazioneConto(testo[0].getText(), testo[1].getText(), testo[2].getText(), testo[3].getText(), testo[4].getText(), tipo_conto);\r\n    visual.setVisible(true);\r\n    visual.conto = this;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void displayConto()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    ListaSoggiornanti L_sogg;\r\n    if ((stanza).equals(\"\")) {\r\n        msg = new AvvisoDialog(this, \" Inserire il numero di stanza \");\r\n        return true;\r\n    } else if ((Principale.db).readStanza(stanza) == null) {\r\n        msg = new MessageDialog(this, \" La stanza \" + stanza + \" e' inesistente! \");\r\n        return true;\r\n    } else {\r\n        L_sogg = (Principale.db).foundSoggiornanti(stanza, false);\r\n        if (L_sogg == null) {\r\n            msg = new MessageDialog(this, \" Problemi con il database! \");\r\n            return true;\r\n        } else if (L_sogg.length() == 0) {\r\n            msg = new MessageDialog(this, \" La stanza \" + stanza + \" non e' attualmente occupata \");\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " boolean problemiStanza(String)",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    for (int i = 0; i < L_st.length; i++) for (int j = 0; j < L_st.length; j++) if ((!L_st[i].equals(\"\")) && (!L_st[j].equals(\"\")) && (i != j) && (L_st[i].equals(L_st[j])))\r\n        return j;\r\n    return -1;\r\n}]",
                "hasComment": true,
                "hasInnerComment": false,
                "signature": " int chkDouble()",
                "comments": "Optional[//\tcontrolla che nella lista non vi siano stanze ripetute piu' volte\r\n]",
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Date data_fine_stanza = null;\r\n    Date fine_sogg = null;\r\n    Date[] date_fine_loc = new Date[elenco.length];\r\n    for (int i = 0; i < elenco.length; i++) {\r\n        ListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(elenco[i], false);\r\n        if (L_sogg != null) {\r\n            data_fine_stanza = new Date(0, 0, 1);\r\n            for (int j = 1; j <= L_sogg.length(); j++) {\r\n                fine_sogg = L_sogg.getSoggiornante(j).getFineSogg();\r\n                if (Utils.data1MaggioreData2(fine_sogg, data_fine_stanza))\r\n                    data_fine_stanza = new Date(fine_sogg.getYear(), fine_sogg.getMonth(), fine_sogg.getDate());\r\n            }\r\n            date_fine_loc[i] = data_fine_stanza;\r\n        } else\r\n            return null;\r\n    }\r\n    return date_fine_loc;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " Date[] tornaDateFineMagg(String[])",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Date data_inizio_stanza = null;\r\n    Date inizio_sogg = null;\r\n    Date[] date_inizio_loc = new Date[elenco.length];\r\n    for (int i = 0; i < elenco.length; i++) {\r\n        ListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(elenco[i], false);\r\n        if (L_sogg != null) {\r\n            data_inizio_stanza = new Date(3000, 0, 1);\r\n            for (int j = 1; j <= L_sogg.length(); j++) {\r\n                inizio_sogg = L_sogg.getSoggiornante(j).getInizioSogg();\r\n                if (Utils.data1MinoreData2(inizio_sogg, data_inizio_stanza))\r\n                    data_inizio_stanza = new Date(inizio_sogg.getYear(), inizio_sogg.getMonth(), inizio_sogg.getDate());\r\n            }\r\n            date_inizio_loc[i] = data_inizio_stanza;\r\n        } else\r\n            return null;\r\n    }\r\n    return date_inizio_loc;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " Date[] tornaDateInizioMin(String[])",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    qualcuno_tramite_agenzia = false;\r\n    qualcuno_senza_agenzia = false;\r\n    Prenotazione pren;\r\n    for (int i = 0; i < elenco.length; i++) {\r\n        ListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(elenco[i], false);\r\n        if (L_sogg != null) {\r\n            for (int j = 1; j <= L_sogg.length(); j++) {\r\n                pren = (Principale.db).readPrenotazione((L_sogg.getSoggiornante(j)).getIdPrenotazione());\r\n                if (pren == null)\r\n                    return false;\r\n                else {\r\n                    if (pren.getTramiteAgenzia() == Const.SI)\r\n                        qualcuno_tramite_agenzia = qualcuno_tramite_agenzia || true;\r\n                    else\r\n                        qualcuno_senza_agenzia = qualcuno_tramite_agenzia || true;\r\n                }\r\n            }\r\n        } else\r\n            return false;\r\n    }\r\n    return true;\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " boolean aggiornamentoFlagsEffettuato(String[])",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    Soggiornante sogg = new Soggiornante();\r\n    if (checkboxes[0].getState()) {\r\n        if (problemiStanza(testo[0].getText()))\r\n            return true;\r\n        L_st = new String[1];\r\n        L_st[0] = new String(testo[0].getText());\r\n    } else if (checkboxes[1].getState()) {\r\n        L_st = new String[1];\r\n        L_st[0] = new String(testo[3].getText());\r\n        sogg = (Principale.db).foundSoggiornante(testo[3].getText(), testo[2].getText(), testo[1].getText());\r\n        if (sogg == null) {\r\n            msg = new AvvisoDialog(this, \" Nessun soggiornante presente nella stanza \" + testo[3].getText() + \" risponde al nominativo inserito! \");\r\n            return true;\r\n        }\r\n        ListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(testo[3].getText(), false);\r\n        if (L_sogg == null) {\r\n            msg = new MessageDialog(this, \" Problemi con il database! \");\r\n            return true;\r\n        }\r\n        if (sogg.getPagato() == Const.SI) {\r\n            msg = new AvvisoDialog(this, \" Il soggiornante selezionato o ha gia' pagato o se ne e' gia' andato! \");\r\n            return true;\r\n        } else {\r\n            // procedo con il verificare se il cliente e' l'ultimo rimasto\r\n            ListaSoggiornanti sogg_no_pagato = new ListaSoggiornanti();\r\n            for (int i = 1; i <= L_sogg.length(); i++) if (L_sogg.getSoggiornante(i).getPagato() == Const.NO)\r\n                sogg_no_pagato.addSoggiornante(L_sogg.getSoggiornante(i));\r\n            if (sogg_no_pagato.length() == 1) {\r\n                msg = new AvvisoDialog(this, \" Il soggiornante e' l'ultimo rimasto. Scegliere 'conto per stanza'! \");\r\n                return true;\r\n            }\r\n            sogg_x_conto_sing = sogg;\r\n        }\r\n    } else if (checkboxes[2].getState()) {\r\n        L_st = Utils.parseStanze(testo[4].getText());\r\n        if (L_st == null) {\r\n            msg = new MessageDialog(this, \" Errore nell'elenco delle stanze. Inserire le stanze nell'elenco nel modo seguente: 101,102,103,...\");\r\n            return true;\r\n        } else {\r\n            Stanza room;\r\n            for (int i = 0; i < L_st.length; i++) if (problemiStanza(L_st[i]))\r\n                return true;\r\n            int res = chkDouble();\r\n            if (res != -1) {\r\n                msg = new MessageDialog(this, \" Errore nell'elenco delle stanze. La stanza \" + L_st[res] + \" e presente piu' volte nell'elenco! \");\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    if (checkboxes[0].getState() || checkboxes[2].getState()) {\r\n        date_fine = tornaDateFineMagg(L_st);\r\n        date_inizio = tornaDateInizioMin(L_st);\r\n    } else {\r\n        Prenotazione pren = (Principale.db).readPrenotazione(sogg.getIdPrenotazione());\r\n        if (pren != null) {\r\n            date_fine = new Date[1];\r\n            date_inizio = new Date[1];\r\n            date_fine[0] = sogg.getFineSogg();\r\n            date_inizio[0] = sogg.getInizioSogg();\r\n        } else\r\n            date_fine = null;\r\n    }\r\n    if (date_fine == null || date_inizio == null) {\r\n        msg = new MessageDialog(this, \" Problemi con il database! \");\r\n        return true;\r\n    }\r\n    // la variabile data_fine contiene le date di fine corrette\r\n    data_fine_magg = new Date(0, 0, 1);\r\n    for (int i = 0; i < date_fine.length; i++) if (Utils.data1MaggioreData2(date_fine[i], data_fine_magg))\r\n        data_fine_magg = date_fine[i];\r\n    // ora la variabile data_fine_magg contiene la data di fine maggiore\r\n    if (!aggiornamentoFlagsEffettuato(L_st)) {\r\n        msg = new MessageDialog(this, \" Problemi con il database! \");\r\n        return true;\r\n    }\r\n    // da ora in poi le flags per l'agenzia contengono valori significativi\r\n    // questo if deve essere messo prima di quello che segue\r\n    if (qualcuno_tramite_agenzia && qualcuno_senza_agenzia) {\r\n        msg = new MessageDialog(this, \" L'elenco delle stanze include stanze commissionate e non! Procedere al calcolo separato. \");\r\n        return true;\r\n    }\r\n    // L'if che segue deve essere posto dopo a quello che precede\r\n    if (checkboxes[2].getState() && qualcuno_tramite_agenzia) {\r\n        msg = new MessageDialog(this, \" Il conto comitiva non e' possibile per le agenzie! \");\r\n        return true;\r\n    }\r\n    // se arrivo qui significa che si puo' fare il conto normale,\r\n    // rimane da verificare se si desidera fare una partenza anticipata\r\n    // e in tal caso verificare che la data inserita sia corretta!\r\n    if ((checkboxes[3].getState()) && (DateUtils.dataCorretta(testo[5].getText()))) {\r\n        Date data = DateUtils.convertDate(testo[5].getText());\r\n        Date data_oggi = new Date();\r\n        // controllo che la data di partenza anticipata abbia senso:\r\n        // 1) controllo che il cliente abbia soggiornato almento un giorno\r\n        for (int i = 0; i < date_inizio.length; i++) if (Utils.data1MaggioreData2(date_inizio[i], DateUtils.giornoPrimaDi(data))) {\r\n            msg = new MessageDialog(this, \" I clienti devono soggiornare almeno un giorno prima di partire! \");\r\n            return true;\r\n        }\r\n        // 2) controllo che la partenza anticipata non sia prima di oggi\r\n        if (Utils.data1MinoreData2(data, data_oggi)) {\r\n            msg = new AvvisoDialog(this, \" La data non puo' essere precedente a quella odierna! \");\r\n            testo[5].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(data_oggi)));\r\n            return true;\r\n        } else\r\n            // 3)  controllo che il fine soggiorno anticipato (ossia il giorno prima della\r\n            //     partenza anticipata) non sia dopo il fine soggiorno effettivo\r\n            for (int i = 0; i < date_fine.length; i++) if (Utils.data1MaggioreData2(data, date_fine[i])) {\r\n                msg = new AvvisoDialog(this, \" Non si tratta di una partenza anticipata per la stanza \" + L_st[i] + \" con tale data! \");\r\n                testo[5].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(data_oggi)));\r\n                return true;\r\n            }\r\n        fine_sogg_anticipato = DateUtils.giornoPrimaDi(data);\r\n    } else {\r\n        if ((checkboxes[3].getState()) && !DateUtils.dataCorretta(testo[5].getText())) {\r\n            msg = new MessageDialog(this, \" La data di partenza anticipata e' errata! \");\r\n            return true;\r\n        } else {\r\n            // il checkboxes[3] non e' attivo\r\n            fine_sogg_anticipato = data_fine_magg;\r\n            if (qualcuno_tramite_agenzia && checkboxes[1].getState()) {\r\n                msg = new MessageDialog(this, \" Il cliente e' in una stanza di agenzia! Se deve andarsene scegliere 'partenza anticipata'. \");\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}]",
                "hasComment": false,
                "hasInnerComment": true,
                "signature": " boolean errori()",
                "comments": null,
                "innerComments": "Optional[[// la variabile data_fine contiene le date di fine corrette\r\n, // ora la variabile data_fine_magg contiene la data di fine maggiore\r\n, // da ora in poi le flags per l'agenzia contengono valori significativi\r\n, // se arrivo qui significa che si puo' fare il conto normale,\r\n, // rimane da verificare se si desidera fare una partenza anticipata\r\n, // procedo con il verificare se il cliente e' l'ultimo rimasto\r\n, // questo if deve essere messo prima di quello che segue\r\n, // L'if che segue deve essere posto dopo a quello che precede\r\n, // e in tal caso verificare che la data inserita sia corretta!\r\n, // controllo che la data di partenza anticipata abbia senso:\r\n, // 1) controllo che il cliente abbia soggiornato almento un giorno\r\n, // 2) controllo che la partenza anticipata non sia prima di oggi\r\n, // 3)  controllo che il fine soggiorno anticipato (ossia il giorno prima della\r\n, //     partenza anticipata) non sia dopo il fine soggiorno effettivo\r\n, // il checkboxes[3] non e' attivo\r\n]]"
            },
            {
                "body": "Optional[{\r\n    Frame msg;\r\n    if (!qualcuno_tramite_agenzia) {\r\n        if (checkboxes[3].getState())\r\n            CalcoloConto.calcolaContoStanza(testo[0].getText(), 1, false, fine_sogg_anticipato);\r\n        else\r\n            CalcoloConto.calcolaContoStanza(testo[0].getText(), 1, false, null);\r\n    } else {\r\n        CalcoloConto.calcolaContoStanzaAgenzia(testo[0].getText());\r\n    }\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startContoStanza()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (qualcuno_tramite_agenzia) {\r\n        Frame msg;\r\n        Date fine_effettiva;\r\n        if (checkboxes[3].getState())\r\n            fine_effettiva = fine_sogg_anticipato;\r\n        else\r\n            fine_effettiva = data_fine_magg;\r\n        if (Utils.data1MinoreData2(fine_effettiva, new Date()))\r\n            msg = new AskChiudiSingoloConAgenzia(this);\r\n        else\r\n            msg = new MessageDialog(this, \" La data e' posteriore ad oggi: non e' possibile chiudere! \");\r\n        return;\r\n    } else if ((checkboxes[3].getState()))\r\n        CalcoloConto.calcolaContoSingolo(sogg_x_conto_sing, fine_sogg_anticipato);\r\n    else\r\n        CalcoloConto.calcolaContoSingolo(sogg_x_conto_sing, null);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startContoSingolo()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if ((checkboxes[3].getState()))\r\n        CalcoloConto.calcolaContoComitiva(L_st, fine_sogg_anticipato);\r\n    else\r\n        CalcoloConto.calcolaContoComitiva(L_st, null);\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startContoComitiva()",
                "comments": null,
                "innerComments": null
            },
            {
                "body": "Optional[{\r\n    if (checkboxes[3].getState()) {\r\n        Date new_data = DateUtils.convertDate(testo[5].getText());\r\n        new_data = DateUtils.giornoPrimaDi(new_data);\r\n        (Principale.db).anticipaFineSogg(sogg_x_conto_sing.getNumStanza(), sogg_x_conto_sing.getIdSoggiornante(), new_data);\r\n    }\r\n    (Principale.db).reversePagato(sogg_x_conto_sing.getNumStanza(), sogg_x_conto_sing.getIdSoggiornante());\r\n    for (int i = 0; i < testo.length - 1; i++) testo[i].setText(\"\");\r\n}]",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": " void startChiudiSingoloConAgenzia()",
                "comments": null,
                "innerComments": null
            }
        ],
        "constructors": [
            {
                "body": "{\r\n    super(\"Calcolo del Conto\");\r\n    padre = parent;\r\n    padre.setEnabled(false);\r\n    setupPanels();\r\n    init();\r\n    pack();\r\n}",
                "hasComment": false,
                "hasInnerComment": false,
                "signature": "public MascheraCalcoloConto(Frame)",
                "comments": null,
                "innerComments": null
            }
        ],
        "signature": "MascheraCalcoloConto",
        "variables": [
            " Button Annulla",
            " Button Visualizza",
            " TextField testo",
            " Label etichetta1",
            " Label etichetta2",
            " Label etichetta3",
            " Label etichetta4",
            " Label etichetta5",
            " Label stanza",
            " Label stanza1",
            " Label nome",
            " Label cognome",
            " Label stanza2",
            " Panel panel",
            " CheckboxGroup checkbox_group",
            " Checkbox checkboxes",
            " GridBagLayout gridbag",
            " Frame padre",
            " MascheraVisualizzazioneConto visual",
            " Soggiornante sogg_x_conto_sing",
            " String L_st",
            " Date date_fine",
            " Date date_inizio",
            " Date data_fine_magg",
            " Date fine_sogg_anticipato",
            " int tipo_conto",
            " boolean qualcuno_tramite_agenzia",
            " boolean qualcuno_senza_agenzia"
        ]
    }
]