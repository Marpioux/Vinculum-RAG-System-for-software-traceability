{
  "JInternalFrame": [
    {
      "parentClass": "Banner",
      "name": "<init>",
      "sourceCode": "public JInternalFrame() {\n        super(\"Banner\");\n        resizable = true;\n        closable = true;\n        iconable = true;\n        maximizable = true;\n        setPreferredSize(Home.CHILD_SIZE);\n        frameIcon = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"banner2.png\"));\n\n        textGuida = new JTextPane();\n\n        try {\n            bannerHelp = new HelpManager(Home.URL_HELP + \"Banner.txt\", textGuida);\n        } catch (FileNotFoundException e) {\n            textGuida.setText(\"<html> <b> Help not available </b> </html>\");\n        }\n\n        setContentPane(getJContentPane());\n        addInternalFrameListener(new InternalFrameAdapter() {\n            public void internalFrameOpened(InternalFrameEvent pEvent) {\n                JInternalFrame frame = (JInternalFrame) pEvent.getInternalFrame();\n                jDesktopPane = frame.getDesktopPane();\n                desktopManager = (DeskManager) jDesktopPane.getDesktopManager();\n\n                try {\n                    Registry reg = LocateRegistry.getRegistry(Home.HOST);\n                    gestioneBanner = (IGestioneAdvertisementAgenzia) reg.lookup(\"GestioneBeniCulturaliAgenzia\");\n                    tags = (IGestioneTagComune) reg.lookup(\"GestioneTagComune\");\n                    gestionePuntiRistoro = (IGestionePuntiDiRistoroAgenzia) reg.lookup(\"GestionePuntiDiRistoroAgenzia\");\n                    createTree();\n                    caricaTags();\n                } catch (Exception ex) {\n                    JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" +\n                            \"<h3> <u> The dialog management request is closed. </u> </h3>\" +\n                            \"<p> <b> Possible Causes: </b>\" +\n                            \"<ul> <li> No connection to the network. </li>\" +\n                            \"<li> Server inactive. </li>\" +\n                            \"<li> Server clogged. </li> </ul>\" +\n                            \"<p> Please try again later. </p>\" +\n                            \"<p> If the error persists, please contact technical support. </p>\" +\n                            \"<p> We apologize for the inconvenience. </html>\");\n                    ImageIcon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\n                    JOptionPane.showMessageDialog(jDesktopPane, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\n                    frame.dispose();\n                }\n            }\n        });\n    }"
    },
    {
      "parentClass": "Banner",
      "name": "getJContentPane",
      "sourceCode": "private JPanel getJContentPane() {\n        if (jContentPane == null) {\n            jContentPane = new JPanel();\n            jContentPane.setLayout(new BorderLayout());\n            jContentPane.add(getRightPanel(), BorderLayout.EAST);\n            jContentPane.add(getBannerToolbar(), BorderLayout.NORTH);\n            jContentPane.add(getTreeBanner(), BorderLayout.CENTER);\n        }\n        return jContentPane;\n    }"
    },
    {
      "parentClass": "Banner",
      "name": "getBannerToolbar",
      "sourceCode": "private JToolBar getBannerToolbar() {\n        if (bannerToolbar == null) {\n            bannerToolbar = new JToolBar();\n            bannerToolbar.setLayout(null);\n            bannerToolbar.setPreferredSize(new Dimension(1, 50));\n            bannerToolbar.setFloatable(false);\n            bannerToolbar.add(getBtnInserisci());\n            bannerToolbar.add(getBtnSostituisci());\n            bannerToolbar.add(getBtnElimina());\n        }\n        return bannerToolbar;\n    }"
    },
    {
      "parentClass": "Banner",
      "name": "getBtnInserisci",
      "sourceCode": "private JButton getBtnInserisci() {\n        if (btnInserisci == null) {\n            btnInserisci = new JButton();\n            btnInserisci.setBounds(5, 5, 140, 40);\n            btnInserisci.setText(\"<html> <br> Show Banner </html>\");\n            btnInserisci.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"NuovoBanner32.png\")));\n            btnInserisci.setEnabled(false);\n            btnInserisci.setName(\"btnInserisci\");\n            btnInserisci.addMouseListener(bannerHelp);\n            btnInserisci.addActionListener(new ActionListener() {\n                public void actionPerformed(ActionEvent arg0) {\n                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) treeBanner.getSelectionPath().getLastPathComponent();\n                    openDialog(selectedNode);\n                }\n            });\n        }\n        return btnInserisci;\n    }"
    },
    {
      "parentClass": "Banner",
      "name": "getBtnSostituisci",
      "sourceCode": "private JButton getBtnSostituisci() {\n        if (btnSostituisci == null) {\n            btnSostituisci = new JButton();\n            btnSostituisci.setBounds(155, 5, 140, 40);\n            btnSostituisci.setText(\"<html> Replace <br> Banner </html>\");\n            btnSostituisci.setEnabled(false);\n            btnSostituisci.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"SostituisciBanner32.png\")));\n            btnSostituisci.setName(\"btnSostituisci\");\n            btnSostituisci.addMouseListener(bannerHelp);\n            btnSostituisci.addActionListener(new ActionListener() {\n                public void actionPerformed(ActionEvent arg0) {\n                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) treeBanner.getSelectionPath().getLastPathComponent();\n                    openDialog(selectedNode);\n                }\n            });\n        }\n        return btnSostituisci;\n    }"
    },
    {
      "parentClass": "Banner",
      "name": "getBtnElimina",
      "sourceCode": "private JButton getBtnElimina() {\n        if (btnElimina == null) {\n            btnElimina = new JButton();\n            btnElimina.setBounds(305, 5, 140, 40);\n            btnElimina.setText(\"<html> Delete <br> Banner </html>\");\n            btnElimina.setEnabled(false);\n            btnElimina.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"EliminaBanner32.png\")));\n            btnElimina.setName(\"btnElimina\");\n            btnElimina.addMouseListener(bannerHelp);\n            btnElimina.addActionListener(new ActionListener() {\n                public void actionPerformed(ActionEvent arg0) {\n                    JPanel root = new JPanel(new BorderLayout());\n                    JLabel message = new JLabel(\"Are you sure you want to delete the banner selected?\");\n                    message.setFont(new Font(\"Dialog\", Font.BOLD, 14));\n                    JLabel alert = new JLabel(\"The banner cannot be more recovered.\", SwingConstants.CENTER);\n                    alert.setIcon(new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"warning16.png\")));\n                    root.add(message, BorderLayout.NORTH);\n                    root.add(alert, BorderLayout.CENTER);\n                    String[] options = {\"Delete\", \"Cancel\"};\n                    int choice = JOptionPane.showInternalOptionDialog(jContentPane, root, \"Confirm Delete\",\n                            JOptionPane.YES_NO_OPTION,\n                            JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"EliminaBanner48.png\")),\n                            options, options[1]);\n                    if (choice == JOptionPane.YES_OPTION) {\n                        DefaultTreeModel model = (DefaultTreeModel) treeBanner.getModel();\n                        model.removeNodeFromParent((DefaultMutableTreeNode) treeBanner.getSelectionPath().getLastPathComponent());\n                        JLabel confirm = new JLabel(\"The banner selected was deleted.\");\n                        confirm.setFont(new Font(\"Dialog\", Font.BOLD, 14));\n                        JOptionPane.showInternalMessageDialog(jContentPane, confirm, \"Banner out!\",\n                                JOptionPane.OK_OPTION, new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"ok32.png\"))); \n                    }\n                }\n            });\n        }\n        return btnElimina;\n    }"
    },
    {
      "parentClass": "Banner",
      "name": "createTree",
      "sourceCode": "private void createTree() {\n        DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"eTour\");\n\n        try {\n            ArrayList<BeanPuntoDiRistoro> pPR = gestionePuntiRistoro.ottieniPuntiDiRistoro();\n            for (int i = 0; i < pPR.size(); i++) {\n                BeanPuntoDiRistoro current = pPR.get(i);\n                int id = current.getId();\n                PRNode puntoDiRistoro = new PRNode(current.getNome(), id);\n                HashMap<BeanBanner, ImageIcon> banner = gestioneBanner.ottieniBannersDaID(id);\n                Iterator<BeanBanner> iteraBanner = banner.keySet().iterator();\n                while (iteraBanner.hasNext()) {\n                    BeanBanner currentBanner = iteraBanner.next();\n                    BannerNode newBanner = new BannerNode(banner.get(currentBanner), currentBanner.getId());\n                    puntoDiRistoro.add(newBanner);\n                }\n                root.add(puntoDiRistoro);\n            }\n        } catch (RemoteException ex) {\n            JLabel error = new JLabel(\"<html> <h2> Unable to communicate with the server eTour. </h2>\" +\n                    \"<h3> <u> The list of banners was not loaded. </u> </h3>\" +\n                    \"<p> Please try again later. </p>\" +\n                    \"<p> If the error persists, please contact technical support. </p>\" +\n                    \"<p> We apologize for the inconvenience. </html>\");\n            ImageIcon err = new ImageIcon(getClass().getResource(Home.URL_IMAGES + \"error48.png\"));\n            JOptionPane.showInternalMessageDialog(this, error, \"Error!\", JOptionPane.ERROR_MESSAGE, err);\n        } finally {\n            treeBanner.setModel(new DefaultTreeModel(root));\n        }\n    }"
    },
    {
      "parentClass": "Banner",
      "name": "getTreeBanner",
      "sourceCode": "private JScrollPane getTreeBanner() {\n        if (treeBanner == null) {\n            treeBanner = new JTree(new DefaultTreeModel(new DefaultMutableTreeNode(\"eTour\")));\n            treeBanner.setScrollsOnExpand(true);\n            treeBanner.setAutoscrolls(true);\n            treeBanner.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n            treeBanner.setName(\"treeBanner\");\n            treeBanner.addMouseListener(bannerHelp);\n            treeBanner.setRootVisible(false);\n            treeBanner.setCellRenderer(new BannerRenderer());\n            treeBanner.addTreeSelectionListener(new TreeSelectionListener() {\n                public void valueChanged(TreeSelectionEvent s) {\n                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeBanner.getLastSelectedPathComponent();\n                    if (node instanceof PRNode) {\n                        btnInserisci.setEnabled(true);\n                        btnElimina.setEnabled(false);\n                        btnSostituisci.setEnabled(false);\n                    } else if (node instanceof BannerNode) {\n                        btnInserisci.setEnabled(false);\n                        btnSostituisci.setEnabled(true);\n                        btnElimina.setEnabled(true);\n                    } else {\n                        btnInserisci.setEnabled(false);\n                        btnSostituisci.setEnabled(false);\n                        btnElimina.setEnabled(false);\n                    }\n                }\n            });\n        }\n        jScrollPane = new JScrollPane(treeBanner);\n