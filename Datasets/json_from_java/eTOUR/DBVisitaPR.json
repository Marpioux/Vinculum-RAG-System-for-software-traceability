{
    "DBVisitaPR": [
        {
            "parentClass": "DBVisitaPR",
            "name": "DBVisitaPR",
            "sourceCode": "public DBVisitaPR() {\r\n    }"
        },
        {
            "parentClass": "DBVisitaPR",
            "name": "inserisciVisitaPR",
            "sourceCode": "public boolean inserisciVisitaPR(BeanVisitaPR pVisita) throws SQLException {\r\n        // Variable for the connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Create the date of visit\r\n            java.sql.Date dataVisita = new Date(pVisita.getDataVisita().getTime());\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query to get the average rating of a property\r\n            String queryMediaVoti = \"SELECT MediaVoti, NumeroVoti FROM puntodiristoro WHERE Id = \"\r\n                    + pVisita.getIdPuntoDiRistoro();\r\n            result = stat.executeQuery(queryMediaVoti);\r\n            // Variable for the average rating\r\n            double average = 0;\r\n            // Variable for the number of votes\r\n            int numeroVoti = 0;\r\n            if (result.next()) {\r\n                average = result.getDouble(\"MediaVoti\");\r\n                numeroVoti = result.getInt(\"NumeroVoti\");\r\n                average = ((average * numeroVoti) + pVisita.getVoto()) / (++numeroVoti);\r\n            }\r\n            // Query for the insertion\r\n            String query = \"INSERT INTO visitapr (IdTurista, IdPuntoDiRistoro, DataVisita, Vote, Comment) VALUES (\"\r\n                    + pVisita.getIdTurista() + \", \"\r\n                    + pVisita.getIdPuntoDiRistoro() + \", '\"\r\n                    + dataVisita + \"', \"\r\n                    + pVisita.getVoto() + \", '\" + pVisita.getCommento() + \"')\";\r\n            String query2 = \"UPDATE puntodiristoro SET MediaVoti = \" + average\r\n                    + \", NumeroVoti = \" + numeroVoti + \" WHERE Id = \"\r\n                    + pVisita.getIdPuntoDiRistoro();\r\n            // Execute the insert query\r\n            stat.executeQuery(\"BEGIN\");\r\n            int i = stat.executeUpdate(query);\r\n            i = i * stat.executeUpdate(query2);\r\n            stat.executeQuery(\"COMMIT\");\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement\r\n            // And Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBVisitaPR",
            "name": "modificaVisitaPR",
            "sourceCode": "public boolean modificaVisitaPR(BeanVisitaPR pVisita) throws SQLException {\r\n        // Variable for the connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Create the date of visit\r\n            java.sql.Date dataVisita = new Date(pVisita.getDataVisita().getTime());\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for amendment\r\n            String query = \"UPDATE visitapr SET DataVisita = '\"\r\n                    + dataVisita + \"', Comment = '\" + pVisita.getCommento()\r\n                    + \"' WHERE IdPuntoDiRistoro = \"\r\n                    + pVisita.getIdPuntoDiRistoro() + \" AND IdTurista = \"\r\n                    + pVisita.getIdTurista();\r\n            // Execute the query for Change\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement\r\n            // And Connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBVisitaPR",
            "name": "ottieniListaVisitaPR",
            "sourceCode": "public ArrayList<BeanVisitaPR> ottieniListaVisitaPR(int pIdPuntoDiRistoro) throws SQLException {\r\n        // Variable for the connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query to extract the list of requests for a Refreshment\r\n            String query = \"SELECT * FROM visitapr WHERE IdPuntoDiRistoro = \" + pIdPuntoDiRistoro;\r\n            // The query is executed\r\n            result = stat.executeQuery(query);\r\n            ArrayList<BeanVisitaPR> list = new ArrayList<BeanVisitaPR>();\r\n            // Extract the results from the result set and move to List\r\n            while (result.next()) {\r\n                java.util.Date dataVisita = new java.util.Date(result.getDate(\"DataVisita\").getTime());\r\n                list.add(new BeanVisitaPR(result.getInt(\"IdTurista\"), result.getInt(\"IdPuntoDiRistoro\"),\r\n                        result.getString(\"Comment\"), result.getInt(\"IdTurista\"), dataVisita));\r\n            }\r\n            return list;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement\r\n            // And Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBVisitaPR",
            "name": "ottieniListaVisitaPRTurista",
            "sourceCode": "public ArrayList<BeanVisitaPR> ottieniListaVisitaPRTurista(int pIdTurista) throws SQLException {\r\n        // Variable for the connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query to extract the list of requests for a Eating place for tourists\r\n            String query = \"SELECT * FROM visitapr WHERE IdTurista = \" + pIdTurista;\r\n            // The query is executed\r\n            result = stat.executeQuery(query);\r\n            // List that will contain the BeanVisitaPR\r\n            ArrayList<BeanVisitaPR> list = new ArrayList<BeanVisitaPR>();\r\n            // Extract the results from the result set and move to List\r\n            while (result.next()) {\r\n                // Add to the list BeanVisitaPR\r\n                java.util.Date dataVisita = new java.util.Date(result.getDate(\"DataVisita\").getTime());\r\n                list.add(new BeanVisitaPR(result.getInt(\"IdTurista\"), result.getInt(\"IdPuntoDiRistoro\"),\r\n                        result.getString(\"Comment\"), result.getInt(\"IdTurista\"), dataVisita));\r\n            }\r\n            // Return the list\r\n            return list;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement\r\n            // And Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBVisitaPR",
            "name": "ottieniVisitaPR",
            "sourceCode": "public BeanVisitaPR ottieniVisitaPR(int pIdPuntoDiRistoro, int pIdTurista) throws SQLException {\r\n        // Variable for the connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for the extraction of the visit made by a tourist to A given point of comfort\r\n            String query = \"SELECT * FROM visitapr WHERE IdPuntoDiRistoro = \" + pIdPuntoDiRistoro + \" AND IdTurista = \" + pIdTurista;\r\n            // The query is executed\r\n            result = stat.executeQuery(query);\r\n            // Get the bean's visit sought based on the ID of the tourist and Of refreshment\r\n            BeanVisitaPR beanTemp = null;\r\n            if (result.next()) {\r\n                // Create the BeanVisitaPR\r\n                java.util.Date dataVisita = new java.util.Date(result.getDate(\"DataVisita\").getTime());\r\n                beanTemp = new BeanVisitaPR(result.getInt(\"IdTurista\"), result.getInt(\"IdPuntoDiRistoro\"),\r\n                        result.getString(\"Comment\"), result.getInt(\"IdTurista\"), dataVisita);\r\n            }\r\n            // Return the BeanTemp\r\n            return beanTemp;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement\r\n            // And Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        }
    ]
}