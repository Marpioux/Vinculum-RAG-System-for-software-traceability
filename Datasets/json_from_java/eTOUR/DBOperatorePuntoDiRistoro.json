{
    "DBOperatorePuntoDiRistoro": [
        {
            "parentClass": "DBOperatorePuntoDiRistoro",
            "name": "DBOperatorePuntoDiRistoro",
            "sourceCode": "public DBOperatorePuntoDiRistoro() {\r\n    }"
        },
        {
            "parentClass": "DBOperatorePuntoDiRistoro",
            "name": "cancellaOperatorePuntoDiRistoro",
            "sourceCode": "public boolean cancellaOperatorePuntoDiRistoro(int pIdOperatore) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query cancellation\r\n            String query = \"DELETE FROM operatorepuntodiristoro WHERE Id =\" + pIdOperatore;\r\n            // Execute the query Cancellation\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } catch (SQLException e) {\r\n            throw e;\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the Connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBOperatorePuntoDiRistoro",
            "name": "inserisciOperatorePuntoDiRistoro",
            "sourceCode": "public boolean inserisciOperatorePuntoDiRistoro(BeanOperatorePuntoDiRistoro pOperatore) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet unico = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for the insertion\r\n            String query = \"INSERT INTO operatorepuntodiristoro (Name, Surname, Username, Password, Email, IdPuntoDiRistoro) VALUES ('\"\r\n                    + pOperatore.getNome() + \"','\" + pOperatore.getCognome() + \"','\" + pOperatore.getUsername() + \"','\"\r\n                    + pOperatore.getPassword() + \"','\" + pOperatore.getEmail() + \"',\" + pOperatore.getIdPuntoDiRistoro() + \")\";\r\n            // Query for checking the ID of the PuntoDiRistoro as the association is 1 to 1 between OPPR and PR\r\n            String unicoQuery = \"SELECT IdPuntoDiRistoro FROM operatorepuntodiristoro WHERE IdPuntoDiRistoro =\"\r\n                    + pOperatore.getIdPuntoDiRistoro();\r\n            // Execute the query to control\r\n            unico = stat.executeQuery(unicoQuery);\r\n            int j = 0;\r\n            // Check if there are tuples\r\n            while (unico.next()) {\r\n                j++;\r\n            }\r\n            // If it is empty\r\n            if (j == 0) {\r\n                // Execute the insert query\r\n                int i = stat.executeUpdate(query);\r\n                // This returns the backup\r\n                System.out.println(\"If you include the PR\");\r\n                return (i == 1);\r\n            } else {\r\n                // If not already exist\r\n                System.out.println(\"Operator PR already exists for the PR\");\r\n                return false;\r\n            }\r\n        } catch (SQLException e) {\r\n            throw e;\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the Connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n            if (unico != null) {\r\n                unico.close();\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBOperatorePuntoDiRistoro",
            "name": "modificaOperatorePuntoDiRistoro",
            "sourceCode": "public boolean modificaOperatorePuntoDiRistoro(BeanOperatorePuntoDiRistoro pOperatore) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for amendment\r\n            String query = \"UPDATE operatorepuntodiristoro SET Name = '\"\r\n                    + pOperatore.getNome() + \"', Surname ='\" + pOperatore.getCognome() + \"', Password ='\"\r\n                    + pOperatore.getPassword() + \"', Email ='\" + pOperatore.getEmail() + \"' WHERE IdPuntoDiRistoro =\"\r\n                    + pOperatore.getIdPuntoDiRistoro();\r\n            // Execute the query for Change\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } catch (SQLException e) {\r\n            throw e;\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the Connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBOperatorePuntoDiRistoro",
            "name": "ottieniOperatorePuntoDiRistoro",
            "sourceCode": "public BeanOperatorePuntoDiRistoro ottieniOperatorePuntoDiRistoro(int pIdOperatore) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for the extraction of the dot Refreshments required\r\n            String query = \"SELECT * FROM operatorepuntodiristoro WHERE id = \" + pIdOperatore;\r\n            // The query is executed\r\n            result = stat.executeQuery(query);\r\n            // Get the bean Operator refreshment passing the id\r\n            BeanOperatorePuntoDiRistoro beanTemp = null;\r\n            if (result.next()) {\r\n                // Built on BeanOPR\r\n                beanTemp = new BeanOperatorePuntoDiRistoro(result.getInt(\"Id\"), result.getString(\"Name\"),\r\n                        result.getString(\"Surname\"), result.getString(\"Username\"), result.getString(\"Password\"),\r\n                        result.getString(\"Email\"), result.getInt(\"IdPuntoDiRistoro\"));\r\n            }\r\n            return beanTemp;\r\n        } catch (SQLException e) {\r\n            throw e;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        }
    ]
}