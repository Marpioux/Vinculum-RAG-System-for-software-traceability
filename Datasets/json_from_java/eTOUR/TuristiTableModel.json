{
    "TuristiTableModel": [
        {
            "parentClass": "TuristiTableModel",
            "name": "TuristiTableModel",
            "sourceCode": "public TuristiTableModel() {\r\n        data = new Vector<>();\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "TuristiTableModel",
            "sourceCode": "public TuristiTableModel() {\r\n        data = new Vector<>();\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "getColumnCount",
            "sourceCode": "public int getColumnCount() {\r\n        return headers.length;\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "getRowCount",
            "sourceCode": "public int getRowCount() {\r\n        return data.size();\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "getColumnName",
            "sourceCode": "public String getColumnName(int pColumn) throws IllegalArgumentException {\r\n        if (pColumn >= getColumnCount() || pColumn < 0) {\r\n            throw new IllegalArgumentException(\"The column index is not provided in the model.\");\r\n        }\r\n        return headers[pColumn];\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "getValueAt",
            "sourceCode": "public Object getValueAt(int pRow, int pColumn) throws IllegalArgumentException {\r\n        if (pRow >= getRowCount() || pRow < 0) {\r\n            throw new IllegalArgumentException(\"The row index is not provided in the model.\");\r\n        }\r\n        if (pColumn >= getColumnCount() || pColumn < 0) {\r\n            throw new IllegalArgumentException(\"The column index is not provided in the model.\");\r\n        }\r\n        return data.get(pRow)[pColumn];\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "getColumnClass",
            "sourceCode": "public Class<?> getColumnClass(int pColumn) throws IllegalArgumentException {\r\n        if (pColumn >= getColumnCount() || pColumn < 0) {\r\n            throw new IllegalArgumentException(\"The column index is not provided in the model.\");\r\n        }\r\n        return columnClasses[pColumn];\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "isCellEditable",
            "sourceCode": "public boolean isCellEditable(int pRow, int pColumn) throws IllegalArgumentException {\r\n        return false;\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "setValueAt",
            "sourceCode": "public void setValueAt(Object value, int row, int col) {\r\n        // Method intentionally left blank\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "attivaTurista",
            "sourceCode": "public int attivaTurista(int pRow) throws IllegalArgumentException {\r\n        data.get(pRow)[0] = isAttivato(pRow) ? false : true;\r\n        fireTableDataChanged();\r\n        return getID(pRow);\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "isAttivato",
            "sourceCode": "public boolean isAttivato(int pRow) throws IllegalArgumentException {\r\n        return (Boolean) getValueAt(pRow, 0);\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "insertTurista",
            "sourceCode": "public void insertTurista(BeanTurista pTurista) throws IllegalArgumentException {\r\n        if (pTurista == null) {\r\n            throw new IllegalArgumentException(\"The bean provided cannot be null.\");\r\n        }\r\n        Object[] aRow = new Object[13];\r\n        aRow[0] = pTurista.isAttiva();\r\n        aRow[1] = pTurista.getNome();\r\n        aRow[2] = pTurista.getCognome();\r\n        aRow[3] = pTurista.getEmail();\r\n        aRow[4] = pTurista.getTelefono();\r\n        aRow[5] = pTurista.getDataNascita();\r\n        aRow[6] = pTurista.getCittaNascita();\r\n        aRow[7] = pTurista.getVia();\r\n        aRow[8] = pTurista.getCittaResidenza();\r\n        aRow[9] = pTurista.getCap();\r\n        aRow[10] = pTurista.getProvincia();\r\n        aRow[11] = pTurista.getDataRegistrazione();\r\n        aRow[12] = pTurista.getId();\r\n        data.add(aRow);\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "updateTurista",
            "sourceCode": "public void updateTurista(BeanTurista pTurista) throws IllegalArgumentException {\r\n        if (pTurista == null) {\r\n            throw new IllegalArgumentException(\"The bean provided cannot be null.\");\r\n        }\r\n        int i;\r\n        for (i = 0; i < data.size(); i++) {\r\n            int id = (Integer) data.get(i)[12];\r\n            if (id == pTurista.getId()) {\r\n                break;\r\n            }\r\n        }\r\n        if (i < data.size()) {\r\n            Object[] aRow = new Object[13];\r\n            aRow[0] = pTurista.isAttiva();\r\n            aRow[1] = pTurista.getNome();\r\n            aRow[2] = pTurista.getCognome();\r\n            aRow[3] = pTurista.getEmail();\r\n            aRow[4] = pTurista.getTelefono();\r\n            aRow[5] = pTurista.getDataNascita();\r\n            aRow[6] = pTurista.getCittaNascita();\r\n            aRow[7] = pTurista.getVia();\r\n            aRow[8] = pTurista.getCittaResidenza();\r\n            aRow[9] = pTurista.getCap();\r\n            aRow[10] = pTurista.getProvincia();\r\n            aRow[11] = pTurista.getDataRegistrazione();\r\n            aRow[12] = pTurista.getId();\r\n            data.set(i, aRow);\r\n            fireTableDataChanged();\r\n        }\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "getID",
            "sourceCode": "public int getID(int pRow) throws IllegalArgumentException {\r\n        if (pRow >= getRowCount() || pRow < 0) {\r\n            throw new IllegalArgumentException(\"The row index is not provided in the model.\");\r\n        }\r\n        return (Integer) data.get(pRow)[12];\r\n    }"
        },
        {
            "parentClass": "TuristiTableModel",
            "name": "removeTurista",
            "sourceCode": "public int removeTurista(int pRow) throws IllegalArgumentException {\r\n        int id = getID(pRow);\r\n        data.remove(pRow);\r\n        return id;\r\n    }"
        }
    ]
}