{
    "DBPuntoDiRistoro": [
        {
            "parentClass": "DBPuntoDiRistoro",
            "name": "DBPuntoDiRistoro",
            "sourceCode": "public DBPuntoDiRistoro() {\r\n    }"
        },
        {
            "parentClass": "DBPuntoDiRistoro",
            "name": "cancellaPuntoDiRistoro",
            "sourceCode": "public boolean cancellaPuntoDiRistoro(int pIdPuntoDiRistoro) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query cancellation\r\n            String query = \"DELETE FROM puntodiristoro WHERE Id =\" + pIdPuntoDiRistoro;\r\n            // You run the query Cancellation\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPuntoDiRistoro",
            "name": "inserisciPuntoDiRistoro",
            "sourceCode": "public boolean inserisciPuntoDiRistoro(BeanPuntoDiRistoro pPuntoDiRistoro) throws SQLException {\r\n        // Create the organization of the Opening and Closing\r\n        Time orarioApertura = new Time(pPuntoDiRistoro.getOrarioApertura().getTime());\r\n        Time orarioChiusura = new Time(pPuntoDiRistoro.getOrarioChiusura().getTime());\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for the insertion of a refreshment\r\n            String query = \"INSERT INTO puntodiristoro (Name, Description, Telephone, Latitude, Longitude, Altitude, OrarioApertura, OrarioChiusura, GiornoChiusura, Town, City, Street, Postcode, Province, MediaVoti, NumeroVoti, PartitaIva) VALUES ('\" \r\n                + pPuntoDiRistoro.getNome() + \"','\" \r\n                + pPuntoDiRistoro.getDescrizione() + \"','\" \r\n                + pPuntoDiRistoro.getTelefono() + \"',\" \r\n                + pPuntoDiRistoro.getPosizione().getLatitudine() + \",\" \r\n                + pPuntoDiRistoro.getPosizione().getLongitudine() + \",\" \r\n                + pPuntoDiRistoro.getPosizione().getAltitudine() + \",'\" \r\n                + orarioApertura.toString() + \"','\" \r\n                + orarioChiusura.toString() + \"','\" \r\n                + pPuntoDiRistoro.getGiornoChiusura() + \"','\" \r\n                + pPuntoDiRistoro.getLocalita() + \"','\" \r\n                + pPuntoDiRistoro.getCitta() + \"','\" \r\n                + pPuntoDiRistoro.getVia() + \"','\" \r\n                + pPuntoDiRistoro.getCap() + \"','\" \r\n                + pPuntoDiRistoro.getProvincia() + \"',\" \r\n                + pPuntoDiRistoro.getMediaVoti() + \",\" \r\n                + pPuntoDiRistoro.getNumeroVoti() + \",'\" \r\n                + pPuntoDiRistoro.getPartitaIva() + \"');\";\r\n            // You run the insert query\r\n            int i = stat.executeUpdate(query);\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPuntoDiRistoro",
            "name": "modificaPuntoDiRistoro",
            "sourceCode": "public boolean modificaPuntoDiRistoro(BeanPuntoDiRistoro pPuntoDiRistoro) throws SQLException {\r\n        // Create the organization of the Opening and Closing\r\n        Time orarioApertura = new Time(pPuntoDiRistoro.getOrarioApertura().getTime());\r\n        Time orarioChiusura = new Time(pPuntoDiRistoro.getOrarioChiusura().getTime());\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for amendment\r\n            String query = \"UPDATE puntodiristoro SET Name = '\" \r\n                + pPuntoDiRistoro.getNome() + \"', Description ='\" \r\n                + pPuntoDiRistoro.getDescrizione() + \"', Phone ='\" \r\n                + pPuntoDiRistoro.getTelefono() + \"', Latitude =\" \r\n                + pPuntoDiRistoro.getPosizione().getLatitudine() + \", Longitude =\" \r\n                + pPuntoDiRistoro.getPosizione().getLongitudine() + \", Height =\" \r\n                + pPuntoDiRistoro.getPosizione().getAltitudine() + \", OrarioApertura = '\" \r\n                + orarioApertura.toString() + \"', OrarioChiusura ='\" \r\n                + orarioChiusura.toString() + \"', GiornoChiusura ='\" \r\n                + pPuntoDiRistoro.getGiornoChiusura() + \"', Location ='\" \r\n                + pPuntoDiRistoro.getLocalita() + \"', City ='\" \r\n                + pPuntoDiRistoro.getCitta() + \"', Via ='\" \r\n                + pPuntoDiRistoro.getVia() + \"', postcode ='\" \r\n                + pPuntoDiRistoro.getCap() + \"', State ='\" \r\n                + pPuntoDiRistoro.getProvincia() + \"', MediaVoti =\" \r\n                + pPuntoDiRistoro.getMediaVoti() + \", NumeroVoti =\" \r\n                + pPuntoDiRistoro.getNumeroVoti() + \", party = '\" \r\n                + pPuntoDiRistoro.getPartitaIva() + \"' WHERE Id =\" \r\n                + pPuntoDiRistoro.getId() + \";\";\r\n            // You run the query for Change\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPuntoDiRistoro",
            "name": "ottieniNumeroElementiRicerca",
            "sourceCode": "public int ottieniNumeroElementiRicerca(String pKeyword, ArrayList<BeanTag> pTags, Punto3D pPosizione, double pDistanzaMassima) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query to get the number of pages\r\n            String query = \"\";\r\n            if (pTags.size() == 0) {\r\n                // Query without the control tag\r\n                query = \"SELECT count(number) FROM (SELECT count(puntodiristoro.Id) AS number FROM puntodiristoro WHERE (puntodiristoro.Nome LIKE '%\" \r\n                    + pKeyword + \"%' OR puntodiristoro.Descrizione LIKE '%\" \r\n                    + pKeyword + \"%') AND distance(puntodiristoro.Latitudine, puntodiristoro.Longitudine, \" \r\n                    + pPosizione.getLatitudine() + \", \" + pPosizione.getLongitudine() + \") < \" \r\n                    + pDistanzaMassima + \" GROUP BY puntodiristoro.Id ORDER BY count(puntodiristoro.Id) DESC) AS table\";\r\n            } else {\r\n                // Query with tags\r\n                query = \"SELECT count(number) FROM (SELECT count(puntodiristoro.Id) AS number FROM puntodiristoro JOIN (appartenenzapr JOIN tag ON IdTag = Id) ON puntodiristoro.Id = appartenenzapr.IdPuntoDiRistoro WHERE (puntodiristoro.Nome LIKE '%\" \r\n                    + pKeyword + \"%' OR puntodiristoro.Descrizione LIKE '%\" \r\n                    + pKeyword + \"%') AND (tag.Nome = '\" + pTags.get(0).getName() + \"'\";\r\n                if (pTags.size() >= 2) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(1).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 3) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(2).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 4) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(3).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 5) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(4).getName() + \"'\";\r\n                }\r\n                query += \") AND distance(puntodiristoro.Latitudine, puntodiristoro.Longitudine, \" \r\n                    + pPosizione.getLatitudine() + \", \" + pPosizione.getLongitudine() + \") < \" \r\n                    + pDistanzaMassima + \" GROUP BY puntodiristoro.Id ORDER BY count(puntodiristoro.Id) DESC) AS table\";\r\n            }\r\n            // You run the query\r\n            result = stat.executeQuery(query);\r\n            // It returns the value of count() that contains the number of tuples\r\n            int i = 0;\r\n            if (result.next()) {\r\n                i = result.getInt(1);\r\n            }\r\n            return i;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPuntoDiRistoro",
            "name": "ottieniNumeroElementiRicercaAvanzata",
            "sourceCode": "public int ottieniNumeroElementiRicercaAvanzata(int pIdTurista, String pKeyword, ArrayList<BeanTag> pTags, Punto3D pPosizione, double pDistanzaMassima) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query to get the number of pages of advanced\r\n            String query = \"\";\r\n            if (pTags.size() == 0) {\r\n                // Query without the control tag\r\n                query = \"SELECT count(number) FROM (SELECT count(puntodiristoro.Id) AS number FROM (puntodiristoro LEFT JOIN (SELECT IdPuntoDiRistoro FROM associazionepr, (SELECT IdPreferenzeDiRicerca FROM rating WHERE IdTurista =\" \r\n                    + pIdTurista + \") AS pref WHERE associazionepr.IdPreferenzeDiRicerca = pref.IdPreferenzeDiRicerca) AS preferenze ON puntodiristoro.Id = preferenze.IdPuntoDiRistoro) WHERE (puntodiristoro.Nome LIKE '%\" \r\n                    + pKeyword + \"%' OR puntodiristoro.Descrizione LIKE '%\" \r\n                    + pKeyword + \"%') AND distance(puntodiristoro.Latitudine, puntodiristoro.Longitudine, \" \r\n                    + pPosizione.getLatitudine() + \", \" + pPosizione.getLongitudine() + \") < \" \r\n                    + pDistanzaMassima + \" GROUP BY puntodiristoro.Id ORDER BY count(puntodiristoro.Id) DESC) AS table\";\r\n            } else {\r\n                // Query with tags\r\n                query = \"SELECT count(number) FROM (SELECT count(puntodiristoro.Id) AS number FROM (puntodiristoro LEFT JOIN (SELECT IdPuntoDiRistoro FROM associazionepr, (SELECT IdPreferenzeDiRicerca FROM rating WHERE IdTurista =\" \r\n                    + pIdTurista + \") AS pref WHERE associazionepr.IdPreferenzeDiRicerca = pref.IdPreferenzeDiRicerca) AS preferenze ON puntodiristoro.Id = preferenze.IdPuntoDiRistoro JOIN (appartenenzapr JOIN tag ON IdTag = Id) ON puntodiristoro.Id = appartenenzapr.IdPuntoDiRistoro WHERE (puntodiristoro.Nome LIKE '%\" \r\n                    + pKeyword + \"%' OR puntodiristoro.Descrizione LIKE '%\" \r\n                    + pKeyword + \"%') AND (tag.Nome = '\" + pTags.get(0).getName() + \"'\";\r\n                if (pTags.size() >= 2) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(1).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 3) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(2).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 4) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(3).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 5) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(4).getName() + \"'\";\r\n                }\r\n                query += \") AND distance(puntodiristoro.Latitudine, puntodiristoro.Longitudine, \" \r\n                    + pPosizione.getLatitudine() + \", \" + pPosizione.getLongitudine() + \") < \" \r\n                    + pDistanzaMassima + \" GROUP BY puntodiristoro.Id ORDER BY count(puntodiristoro.Id) DESC) AS table\";\r\n            }\r\n            // You run the query\r\n            result = stat.executeQuery(query);\r\n            // It returns the value of count() that contains the number of tuples\r\n            int i = 0;\r\n            if (result.next()) {\r\n                i = result.getInt(1);\r\n            }\r\n            return i;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPuntoDiRistoro",
            "name": "ottieniPuntoDiRistoro",
            "sourceCode": "public BeanPuntoDiRistoro ottieniPuntoDiRistoro(int pid) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query\r\n            String query = \"SELECT * FROM puntodiristoro WHERE Id =\" + pid;\r\n            // You run the query\r\n            result = stat.executeQuery(query);\r\n            if (result.next()) {\r\n                // We create the objects to be returned\r\n                Punto3D point = new Punto3D(result.getDouble(\"Latitude\"), result.getDouble(\"Longitude\"), result.getDouble(\"Elevation\"));\r\n                Date orarioApertura = new Date(result.getTime(\"OrarioApertura\"));\r\n                Date orarioChiusura = new Date(result.getTime(\"OrarioChiusura\"));\r\n                // This generates the resting spot of bean\r\n                BeanPuntoDiRistoro puntoTemp = new BeanPuntoDiRistoro(result.getInt(\"Id\"), result.getInt(\"NumeroVoti\"), result.getDouble(\"MediaVoti\"), result.getString(\"Name\"), result.getString(\"Description\"), result.getString(\"Phone\"), result.getString(\"Location\"), result.getString(\"City\"), result.getString(\"Way\"), result.getString(\"Cap\"), result.getString(\"Province\"), result.getString(\"PartitaIva\"), point, orarioApertura, orarioChiusura, result.getString(\"GiornoChiusura\"));\r\n                // It returns the refreshment\r\n                return puntoTemp;\r\n            } else {\r\n                return null;\r\n            }\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPuntoDiRistoro",
            "name": "search",
            "sourceCode": "public ArrayList<BeanPuntoDiRistoro> search(String pKeyword, ArrayList<BeanTag> pTags, int pNumeroPagina, int pNumeroElementiPerPagina, Punto3D pPosizione, double pDistanzaMassima) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for search\r\n            String query = \"\";\r\n            if (pTags.size() == 0) {\r\n                // Query without the control tag\r\n                query = \"SELECT * FROM puntodiristoro WHERE (puntodiristoro.Nome LIKE '%\" \r\n                    + pKeyword + \"%' OR puntodiristoro.Descrizione LIKE '%\" \r\n                    + pKeyword + \"%') AND distance(puntodiristoro.Latitudine, puntodiristoro.Longitudine, \" \r\n                    + pPosizione.getLatitudine() + \", \" + pPosizione.getLongitudine() + \") < \" \r\n                    + pDistanzaMassima + \" GROUP BY puntodiristoro.Id ORDER BY count(puntodiristoro.Id) DESC LIMIT \" \r\n                    + (pNumeroPagina * pNumeroElementiPerPagina) + \", \" + pNumeroElementiPerPagina;\r\n            } else {\r\n                // Query with tags\r\n                query = \"SELECT * FROM puntodiristoro JOIN (appartenenzapr JOIN tag ON IdTag = Id) ON puntodiristoro.Id = appartenenzapr.IdPuntoDiRistoro WHERE (puntodiristoro.Nome LIKE '%\" \r\n                    + pKeyword + \"%' OR puntodiristoro.Descrizione LIKE '%\" \r\n                    + pKeyword + \"%') AND (tag.Nome = '\" + pTags.get(0).getName() + \"'\";\r\n                if (pTags.size() >= 2) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(1).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 3) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(2).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 4) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(3).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 5) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(4).getName() + \"'\";\r\n                }\r\n                query += \") AND distance(puntodiristoro.Latitudine, puntodiristoro.Longitudine, \" \r\n                    + pPosizione.getLatitudine() + \", \" + pPosizione.getLongitudine() + \") < \" \r\n                    + pDistanzaMassima + \" GROUP BY puntodiristoro.Id ORDER BY count(puntodiristoro.Id) DESC LIMIT \" \r\n                    + (pNumeroPagina * pNumeroElementiPerPagina) + \", \" + pNumeroElementiPerPagina;\r\n            }\r\n            // You run the query\r\n            result = stat.executeQuery(query);\r\n            // List that will contain the BeanPuntoDiRistoro\r\n            ArrayList<BeanPuntoDiRistoro> list = new ArrayList<BeanPuntoDiRistoro>();\r\n            while (result.next()) {\r\n                // We create the objects to be returned\r\n                Punto3D point = new Punto3D(result.getDouble(\"Latitude\"), result.getDouble(\"Longitude\"), result.getDouble(\"Elevation\"));\r\n                Date orarioApertura = new Date(result.getTime(\"OrarioApertura\"));\r\n                Date orarioChiusura = new Date(result.getTime(\"OrarioChiusura\"));\r\n                // Build the refreshment\r\n                BeanPuntoDiRistoro puntoTemp = new BeanPuntoDiRistoro(result.getInt(\"Id\"), result.getInt(\"NumeroVoti\"), result.getDouble(\"MediaVoti\"), result.getString(\"Name\"), result.getString(\"Description\"), result.getString(\"Phone\"), result.getString(\"Location\"), result.getString(\"City\"), result.getString(\"Way\"), result.getString(\"Cap\"), result.getString(\"Province\"), result.getString(\"PartitaIva\"), point, orarioApertura, orarioChiusura, result.getString(\"GiornoChiusura\"));\r\n                // Insert the bean in the list\r\n                list.add(puntoTemp);\r\n            }\r\n            // It returns the list\r\n            return list;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPuntoDiRistoro",
            "name": "ricercaAvanzata",
            "sourceCode": "public ArrayList<BeanPuntoDiRistoro> ricercaAvanzata(int pIdTurista, String pKeyword, ArrayList<BeanTag> pTags, int pNumeroPagina, int pNumeroElementiPerPagina, Punto3D pPosizione, double pDistanzaMassima) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for advanced search\r\n            String query = \"\";\r\n            if (pTags.size() == 0) {\r\n                // Query without tags\r\n                query = \"SELECT * FROM (puntodiristoro LEFT JOIN (SELECT IdPuntoDiRistoro FROM associazionepr, (SELECT IdPreferenzeDiRicerca FROM rating WHERE IdTurista =\" \r\n                    + pIdTurista + \") AS pref WHERE associazionepr.IdPreferenzeDiRicerca = pref.IdPreferenzeDiRicerca) AS preferenze ON puntodiristoro.Id = preferenze.IdPuntoDiRistoro) WHERE (puntodiristoro.Nome LIKE '%\" \r\n                    + pKeyword + \"%' OR puntodiristoro.Descrizione LIKE '%\" \r\n                    + pKeyword + \"%') AND distance(puntodiristoro.Latitudine, puntodiristoro.Longitudine, \" \r\n                    + pPosizione.getLatitudine() + \", \" + pPosizione.getLongitudine() + \") < \" \r\n                    + pDistanzaMassima + \" GROUP BY puntodiristoro.Id ORDER BY count(puntodiristoro.Id) DESC LIMIT \" \r\n                    + (pNumeroPagina * pNumeroElementiPerPagina) + \", \" + pNumeroElementiPerPagina;\r\n            } else {\r\n                // Query with tags\r\n                query = \"SELECT * FROM (puntodiristoro LEFT JOIN (SELECT IdPuntoDiRistoro FROM associazionepr, (SELECT IdPreferenzeDiRicerca FROM rating WHERE IdTurista =\" \r\n                    + pIdTurista + \") AS pref WHERE associazionepr.IdPreferenzeDiRicerca = pref.IdPreferenzeDiRicerca) AS preferenze ON puntodiristoro.Id = preferenze.IdPuntoDiRistoro JOIN (appartenenzapr JOIN tag ON IdTag = Id) ON puntodiristoro.Id = appartenenzapr.IdPuntoDiRistoro WHERE (puntodiristoro.Nome LIKE '%\" \r\n                    + pKeyword + \"%' OR puntodiristoro.Descrizione LIKE '%\" \r\n                    + pKeyword + \"%') AND (tag.Nome = '\" + pTags.get(0).getName() + \"'\";\r\n                if (pTags.size() >= 2) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(1).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 3) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(2).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 4) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(3).getName() + \"'\";\r\n                }\r\n                if (pTags.size() >= 5) {\r\n                    query += \" OR tag.Nome ='\" + pTags.get(4).getName() + \"'\";\r\n                }\r\n                query += \") AND distance(puntodiristoro.Latitudine, puntodiristoro.Longitudine, \" \r\n                    + pPosizione.getLatitudine() + \", \" + pPosizione.getLongitudine() + \") < \" \r\n                    + pDistanzaMassima + \" GROUP BY puntodiristoro.Id ORDER BY count(puntodiristoro.Id) DESC LIMIT \" \r\n                    + (pNumeroPagina * pNumeroElementiPerPagina) + \", \" + pNumeroElementiPerPagina;\r\n            }\r\n            // You run the query\r\n            result = stat.executeQuery(query);\r\n            ArrayList<BeanPuntoDiRistoro> list = new ArrayList<BeanPuntoDiRistoro>();\r\n            while (result.next()) {\r\n                // We create the objects to be returned\r\n                Punto3D point = new Punto3D(result.getDouble(\"Latitude\"), result.getDouble(\"Longitude\"), result.getDouble(\"Elevation\"));\r\n                Date orarioApertura = new Date(result.getTime(\"OrarioApertura\"));\r\n                Date orarioChiusura = new Date(result.getTime(\"OrarioChiusura\"));\r\n                // This creates the cultural\r\n                BeanPuntoDiRistoro beneTemp = new BeanPuntoDiRistoro(result.getInt(\"Id\"), result.getInt(\"NumeroVoti\"), result.getDouble(\"MediaVoti\"), result.getString(\"Name\"), result.getString(\"Description\"), result.getString(\"Phone\"), result.getString(\"Location\"), result.getString(\"City\"), result.getString(\"Way\"), result.getString(\"Cap\"), result.getString(\"Province\"), result.getString(\"PartitaIva\"), point, orarioApertura, orarioChiusura, result.getString(\"GiornoChiusura\"));\r\n                // Insert the bean in the list\r\n                list.add(beneTemp);\r\n            }\r\n            // It returns the list\r\n            return list;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPuntoDiRistoro",
            "name": "ottieniListaPR",
            "sourceCode": "public ArrayList<BeanPuntoDiRistoro> ottieniListaPR() throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for a list of all the refreshment\r\n            String query = \"SELECT * FROM puntodiristoro\";\r\n            // You run the query\r\n            result = stat.executeQuery(query);\r\n            // List that will contain the BeanPuntoDiRistoro\r\n            ArrayList<BeanPuntoDiRistoro> list = new ArrayList<BeanPuntoDiRistoro>();\r\n            while (result.next()) {\r\n                // We create the objects to be returned\r\n                Punto3D point = new Punto3D(result.getDouble(\"Latitude\"), result.getDouble(\"Longitude\"), result.getDouble(\"Elevation\"));\r\n                Date orarioApertura = new Date(result.getTime(\"OrarioApertura\"));\r\n                Date orarioChiusura = new Date(result.getTime(\"OrarioChiusura\"));\r\n                // Build the refreshment\r\n                BeanPuntoDiRistoro puntoTemp = new BeanPuntoDiRistoro(result.getInt(\"Id\"), result.getInt(\"NumeroVoti\"), result.getDouble(\"MediaVoti\"), result.getString(\"Name\"), result.getString(\"Description\"), result.getString(\"Phone\"), result.getString(\"Location\"), result.getString(\"City\"), result.getString(\"Way\"), result.getString(\"Cap\"), result.getString(\"Province\"), result.getString(\"PartitaIva\"), point, orarioApertura, orarioChiusura, result.getString(\"GiornoChiusura\"));\r\n                // Insert the bean in the list\r\n                list.add(puntoTemp);\r\n            }\r\n            // It returns the list\r\n            return list;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        }
    ]
}