{
    "GestioneTagOperatoreAgenzia": [
        {
            "parentClass": "GestioneTagOperatoreAgenzia",
            "name": "GestioneTagOperatoreAgenzia",
            "sourceCode": "public GestioneTagOperatoreAgenzia() throws RemoteException {\r\n        // Invoke the constructor of the superclass for communication with\r\n        // Database\r\n        super();\r\n    }"
        },
        {
            "parentClass": "GestioneTagOperatoreAgenzia",
            "name": "cancellaTag",
            "sourceCode": "public boolean cancellaTag(int pTagID) throws RemoteException {\r\n        // Check the validity of past data\r\n        if (pTagID <= 0)\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n        try {\r\n            // Make the database operation\r\n            tag.cancellaTag(pTagID);\r\n            return true;\r\n        } catch (SQLException e) {\r\n            // Exception in the execution of database operations\r\n            System.out.println(\"Error in method cancellaTag: \" + e.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception ee) {\r\n            // Unexpected exceptions caused by other factors\r\n            System.out.println(\"Error in method cancellaTag: \" + ee.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTagOperatoreAgenzia",
            "name": "inserisciTag",
            "sourceCode": "public boolean inserisciTag(BeanTag pTagNuovo) throws RemoteException {\r\n        // Check the validity of the Bean and the data contained within\r\n        if (null == pTagNuovo)\r\n            throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n        if ((pTagNuovo = checkTag(pTagNuovo)) == null)\r\n            throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n        try {\r\n            // Execute the operation on the Database\r\n            tag.inserisciTag(pTagNuovo);\r\n            return true;\r\n        } catch (SQLException e) {\r\n            // Exception running the operation on Database\r\n            System.out.println(\"Error in method inserisciTag: \" + e.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception ee) {\r\n            // Unexpected exceptions caused by other factors\r\n            System.out.println(\"Error in method inserisciTag: \" + ee.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTagOperatoreAgenzia",
            "name": "modificaTag",
            "sourceCode": "public boolean modificaTag(BeanTag pTagModificato) throws RemoteException {\r\n        // Check the validity of data\r\n        if ((pTagModificato = checkTag(pTagModificato)) == null)\r\n            throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n        try {\r\n            // Execute the operation on the Database\r\n            tag.modificaTag(pTagModificato);\r\n            return true;\r\n        } catch (SQLException e) {\r\n            // Exception running the operation on Database\r\n            System.out.println(\"Error in method modificaTag: \" + e.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception ee) {\r\n            // Unexpected exceptions caused by other factors\r\n            System.out.println(\"Error in method modificaTag: \" + ee.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTagOperatoreAgenzia",
            "name": "ottieniTag",
            "sourceCode": "public BeanTag ottieniTag(int pTagID) throws RemoteException {\r\n        // Check the validity of data\r\n        if (pTagID <= 0)\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n        // Bean to return\r\n        BeanTag toReturn;\r\n        try {\r\n            // Execute the operation on the Database\r\n            toReturn = tag.ottieniTag(pTagID);\r\n        } catch (SQLException e) {\r\n            // Exception running the operation on Database\r\n            System.out.println(\"Error in method ottieniTag: \" + e.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        } catch (Exception ee) {\r\n            // Unexpected exceptions caused by other factors\r\n            System.out.println(\"Error in method ottieniTag: \" + ee.toString());\r\n            throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n        }\r\n        if (null == toReturn)\r\n            throw new RemoteException(MessaggiErrore.ERRORE_FORMATO_BEAN);\r\n        return toReturn;\r\n    }"
        },
        {
            "parentClass": "GestioneTagOperatoreAgenzia",
            "name": "checkTag",
            "sourceCode": "private BeanTag checkTag(BeanTag toControl) {\r\n        // Check the ID\r\n        if (toControl.getId() <= 0)\r\n            return null;\r\n        // Check the description\r\n        if (toControl.getDescrizione().equals(\"\"))\r\n            toControl.setDescrizione(\"***\");\r\n        // Check the name\r\n        if (toControl.getNome().equals(\"\"))\r\n            return null;\r\n        // Check that the name does not contain a space\r\n        if (toControl.getNome().contains(\" \"))\r\n            return null;\r\n        return toControl;\r\n    }"
        }
    ]
}