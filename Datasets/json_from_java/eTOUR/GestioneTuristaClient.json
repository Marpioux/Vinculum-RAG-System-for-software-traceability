{
    "GestioneTuristaClient": [
        {
            "parentClass": "GestioneTuristaClient",
            "name": "GestioneTuristaClient",
            "sourceCode": "public GestioneTuristaClient() throws RemoteException {\r\n        super();\r\n\r\n        profiloTurista = new DBTurista();\r\n        prefGenTurista = new DBPreferenzeGeneriche();\r\n        prefRicTurista = new DBPreferenzeDiRicerca();\r\n        visitatiBC = new DBVisitaBC();\r\n        visitatiPR = new DBVisitaPR();\r\n        beneCulturale = new DBBeneCulturale();\r\n        puntoDiRistoro = new DBPuntoDiRistoro();\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "cancellaPreferenzeDiRicerca",
            "sourceCode": "public BeanPreferenzaDiRicerca cancellaPreferenzeDiRicerca(int pIdTurista, int pIdPreferenzaDiRicerca) throws RemoteException {\r\n        try {\r\n            boolean delete = true;\r\n            BeanPreferenzaDiRicerca prefRic = new BeanPreferenzaDiRicerca();\r\n            ArrayList<BeanPreferenzaDiRicerca> elencoPrefRic = new ArrayList<>();\r\n\r\n            elencoPrefRic = prefRicTurista.ottieniPreferenzeDiRicercaDelTurista(pIdTurista);\r\n            Iterator<BeanPreferenzaDiRicerca> elenco = elencoPrefRic.iterator();\r\n\r\n            while (elenco.hasNext() && delete == true) {\r\n                prefRic = elenco.next();\r\n                if (prefRic.getId() == pIdPreferenzaDiRicerca)\r\n                    delete = false; // Find the anniversary with the id\r\n                // We leave the interested\r\n                // Cycle\r\n            }\r\n\r\n            prefRicTurista.cancellaPreferenzaDiRicercaTurista(pIdTurista, pIdPreferenzaDiRicerca);\r\n            return prefRic;\r\n        } catch (SQLException e) {\r\n            // If the data layer is thrown an exception SQLException\r\n            // It throws RemoteException the remote exception\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "cancellaPreferenzeGeneriche",
            "sourceCode": "public BeanPreferenzeGeneriche cancellaPreferenzeGeneriche(int pIdTurista) throws RemoteException {\r\n        try {\r\n            BeanPreferenzeGeneriche temp = prefGenTurista.ottieniPreferenzaGenerica(pIdTurista);\r\n            boolean canceled = prefGenTurista.cancellaPreferenzaGenerica(temp.getId());\r\n\r\n            if (canceled)\r\n                return temp;\r\n            else\r\n                return null; // The cancellation occurred\r\n        } catch (SQLException e) {\r\n            // If the data layer is thrown an exception SQLException\r\n            // It throws RemoteException the remote exception\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "inserisciPreferenzaDiRicerca",
            "sourceCode": "public boolean inserisciPreferenzaDiRicerca(int pIdTurista, BeanPreferenzaDiRicerca pPreferenzaDiRicerca) throws RemoteException {\r\n        try {\r\n            boolean checkdate = ControlloDati.checkBeanPreferenzaDiRicerca(pPreferenzaDiRicerca);\r\n\r\n            if (checkdate) {\r\n                // If the data control is positive\r\n                return prefRicTurista.inserisciPreferenzaDiRicercaDelTurista(pIdTurista, pPreferenzaDiRicerca.getId());\r\n            } else {\r\n                return false; // Data error\r\n            }\r\n        } catch (SQLException e) {\r\n            // If the data layer is thrown an exception SQLException\r\n            // It throws RemoteException the remote exception\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "inserisciPreferenzeGeneriche",
            "sourceCode": "public boolean inserisciPreferenzeGeneriche(BeanPreferenzeGeneriche pPreferenzeGeneriche) throws RemoteException {\r\n        try {\r\n            boolean checkdate = ControlloDati.checkBeanPreferenzeGeneriche(pPreferenzeGeneriche);\r\n\r\n            if (checkdate) {\r\n                // If the data control is positive\r\n                return prefGenTurista.inserisciPreferenzaGenerica(pPreferenzeGeneriche);\r\n            } else {\r\n                return false; // Data error\r\n            }\r\n        } catch (SQLException e) {\r\n            // If the data layer is thrown an exception SQLException\r\n            // It throws RemoteException the remote exception\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "inserisciTurista",
            "sourceCode": "public boolean inserisciTurista(BeanTurista pTurista) throws RemoteException {\r\n        try {\r\n            // Check if the username entered is already present in DB\r\n            BeanTurista temp = profiloTurista.ottieniTurista(pTurista.getUsername());\r\n\r\n            // If there is no choice all'username Tourist Offices\r\n            if (temp == null) {\r\n                boolean checkdate = ControlloDati.checkBeanTurista(pTurista);\r\n\r\n                if (checkdate) {\r\n                    // If the data control is positive\r\n                    return profiloTurista.inserisciTurista(pTurista);\r\n                } else {\r\n                    return false; // Data error\r\n                }\r\n            } else {\r\n                return false; // Username already exists in DB\r\n            }\r\n        } catch (SQLException e) {\r\n            // If the data layer is thrown an exception SQLException\r\n            // It throws RemoteException the remote exception\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "modificaPreferenzeGeneriche",
            "sourceCode": "public boolean modificaPreferenzeGeneriche(BeanPreferenzeGeneriche pPreferenzeGenericheNuove) throws RemoteException {\r\n        try {\r\n            boolean checkdate = ControlloDati.checkBeanPreferenzeGeneriche(pPreferenzeGenericheNuove);\r\n\r\n            if (checkdate) {\r\n                // If the data control is positive\r\n                return prefGenTurista.modificaPreferenzaGenerica(pPreferenzeGenericheNuove);\r\n            } else {\r\n                return false; // Data error\r\n            }\r\n        } catch (SQLException e) {\r\n            // If the data layer is thrown an exception SQLException\r\n            // It throws RemoteException the remote exception\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "ottieniPreferenzeDiRicerca",
            "sourceCode": "public BeanPreferenzaDiRicerca[] ottieniPreferenzeDiRicerca(int pIdTurista) throws RemoteException {\r\n        // Array containing the list of search preferences tourists ID = pIdTurista\r\n        BeanPreferenzaDiRicerca[] preferences = null;\r\n\r\n        try {\r\n            // ** Convert ArrayList (return type of method \"ottieniPreferenzeDiRicerca\") to simple array **\r\n            ArrayList<BeanPreferenzaDiRicerca> listaPreferenze = prefRicTurista.ottieniPreferenzeDiRicercaDelTurista(pIdTurista);\r\n            preferences = new BeanPreferenzaDiRicerca[listaPreferenze.size()];\r\n            preferences = listaPreferenze.toArray(preferences);\r\n            // ** ** End Conversion\r\n        } catch (SQLException e) {\r\n            // If the data layer is thrown an exception SQLException\r\n            // It throws RemoteException the remote exception\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        }\r\n\r\n        return preferences;\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "ottieniPreferenzeGeneriche",
            "sourceCode": "public BeanPreferenzeGeneriche ottieniPreferenzeGeneriche(int pIdTurista) throws RemoteException {\r\n        try {\r\n            return prefGenTurista.ottieniPreferenzaGenerica(pIdTurista);\r\n        } catch (SQLException e) {\r\n            // If the data layer is thrown an exception SQLException\r\n            // It throws RemoteException the remote exception\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "modificaTurista",
            "sourceCode": "public boolean modificaTurista(BeanTurista pprofiloTurista) throws RemoteException {\r\n        try {\r\n            // Boolean variable that will hold true if the bean is correct, false otherwise\r\n            boolean checkdate = ControlloDati.checkBeanTurista(pprofiloTurista);\r\n\r\n            if (checkdate) {\r\n                // If the data control is positive\r\n                return profiloTurista.modificaTurista(pprofiloTurista);\r\n            } else {\r\n                return false; // Data error\r\n            }\r\n        } catch (SQLException e) {\r\n            // If the data layer is thrown an exception SQLException\r\n            // It throws RemoteException the remote exception\r\n            throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "ottieniBeniCulturaliVisitati",
            "sourceCode": "public BeanVisitaBC[] ottieniBeniCulturaliVisitati(int pIdTurista) throws RemoteException {\r\n        BeanVisitaBC[] visited = null;\r\n        if (pIdTurista > 0) {\r\n            try {\r\n                ArrayList<BeanVisitaBC> listavisitati = visitatiBC.ottieniListaVisitaBCTurista(pIdTurista);\r\n                visited = new BeanVisitaBC[listavisitati.size()];\r\n                visited = listavisitati.toArray(visited);\r\n            } catch (SQLException e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n            } catch (Exception e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n        return visited;\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "ottieniPuntiDiRistoroVisitati",
            "sourceCode": "public BeanVisitaPR[] ottieniPuntiDiRistoroVisitati(int pIdTurista) throws RemoteException {\r\n        // Array containing the list of catering outlets visited by tourists with id \"pIdTurista\"\r\n        BeanVisitaPR[] visited = null;\r\n        if (pIdTurista > 0) {\r\n            try {\r\n                ArrayList<BeanVisitaPR> listavisitati = visitatiPR.ottieniListaVisitaPRTurista(pIdTurista);\r\n                visited = new BeanVisitaPR[listavisitati.size()];\r\n                visited = listavisitati.toArray(visited);\r\n            } catch (SQLException e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n            } catch (Exception e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n        return visited;\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "inserisciBeneCulturaleVisitato",
            "sourceCode": "public boolean inserisciBeneCulturaleVisitato(BeanVisitaBC pVisitaBC) throws RemoteException {\r\n        if (ControlloDati.checkBeanVisitaBC(pVisitaBC)) {\r\n            try {\r\n                return visitatiBC.inserisciVisitaBC(pVisitaBC);\r\n            } catch (SQLException e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n            } catch (Exception e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n        return false;\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "inserisciPuntoDiRistoroVisitato",
            "sourceCode": "public boolean inserisciPuntoDiRistoroVisitato(BeanVisitaPR pVisitaPR) throws RemoteException {\r\n        if (ControlloDati.checkBeanVisitaPR(pVisitaPR)) {\r\n            try {\r\n                return visitatiPR.inserisciVisitaPR(pVisitaPR);\r\n            } catch (SQLException e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n            } catch (Exception e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n        return false;\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "inserisciBeneCulturalePreferito",
            "sourceCode": "public boolean inserisciBeneCulturalePreferito(int pIdTurista, int pIdBeneCulturale) throws RemoteException {\r\n        if (pIdTurista > 0 && pIdBeneCulturale > 0) {\r\n            try {\r\n                return profiloTurista.inserisciBeneCulturalePreferito(pIdTurista, pIdBeneCulturale);\r\n            } catch (SQLException e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n            } catch (Exception e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n        return false;\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "inserisciPuntoDiRistoroPreferito",
            "sourceCode": "public boolean inserisciPuntoDiRistoroPreferito(int pIdTurista, int pIdPuntoDiRistoro) throws RemoteException {\r\n        if (pIdTurista > 0 && pIdPuntoDiRistoro > 0) {\r\n            try {\r\n                return profiloTurista.inserisciPuntoDiRistoroPreferito(pIdTurista, pIdPuntoDiRistoro);\r\n            } catch (SQLException e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n            } catch (Exception e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n        return false;\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "cancellaBeneCulturalePreferito",
            "sourceCode": "public boolean cancellaBeneCulturalePreferito(int pIdTurista, int pIdBeneCulturale) throws RemoteException {\r\n        if (pIdTurista > 0 && pIdBeneCulturale > 0) {\r\n            try {\r\n                return profiloTurista.cancellaBeneCulturalePreferito(pIdTurista, pIdBeneCulturale);\r\n            } catch (SQLException e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n            } catch (Exception e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n        return false;\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "cancellaPuntoDiRistoroPreferito",
            "sourceCode": "public boolean cancellaPuntoDiRistoroPreferito(int pIdTurista, int pIdPuntoDiRistoro) throws RemoteException {\r\n        if (pIdTurista > 0 && pIdPuntoDiRistoro > 0) {\r\n            try {\r\n                return profiloTurista.cancellaPuntoDiRistoroPreferito(pIdTurista, pIdPuntoDiRistoro);\r\n            } catch (SQLException e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n            } catch (Exception e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n        return false;\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "ottieniBeniCulturaliPreferiti",
            "sourceCode": "public BeanBeneCulturale[] ottieniBeniCulturaliPreferiti(int pIdTurista) throws RemoteException {\r\n        if (pIdTurista > 0) {\r\n            try {\r\n                // List of cultural favorites of tourists with id = \"pIdTurista\"\r\n                ArrayList<Integer> listaPreferiti = profiloTurista.ottieniBeniCulturaliPreferiti(pIdTurista);\r\n                // Convert ArrayList to simple array\r\n                BeanBeneCulturale[] favorites = new BeanBeneCulturale[listaPreferiti.size()];\r\n                favorites = new BeanBeneCulturale[listaPreferiti.size()];\r\n                listaPreferiti.toArray(favorites);\r\n\r\n                int k = 0; // Cycle counter\r\n                for (Integer i : listaPreferiti) {\r\n                    // Fill the array with the favorite bean of all cultural favorites from the tourist\r\n                    favorites[k++] = beneCulturale.ottieniBeneCulturale(i);\r\n                }\r\n                return favorites;\r\n            } catch (SQLException e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n            } catch (Exception e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n        return null;\r\n    }"
        },
        {
            "parentClass": "GestioneTuristaClient",
            "name": "ottieniPuntiDiRistoroPreferiti",
            "sourceCode": "public BeanPuntoDiRistoro[] ottieniPuntiDiRistoroPreferiti(int pIdTurista) throws RemoteException {\r\n        if (pIdTurista > 0) {\r\n            try {\r\n                // List of places for refreshment favorite tourist with id = \"pIdTurista\"\r\n                ArrayList<Integer> listaPreferiti = profiloTurista.ottieniPuntoDiRistoroPreferiti(pIdTurista);\r\n\r\n                // Convert ArrayList to simple array\r\n                BeanPuntoDiRistoro[] favorites = new BeanPuntoDiRistoro[listaPreferiti.size()];\r\n                listaPreferiti.toArray(favorites);\r\n\r\n                int k = 0; // Cycle counter\r\n                for (Integer i : listaPreferiti) {\r\n                    // Fill the array with the favorite bean of all cultural favorites from the tourist\r\n                    favorites[k++] = puntoDiRistoro.ottieniPuntoDiRistoro(i);\r\n                }\r\n                return favorites;\r\n            } catch (SQLException e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DBMS);\r\n            } catch (Exception e) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n        return null;\r\n    }"
        }
    ]
}