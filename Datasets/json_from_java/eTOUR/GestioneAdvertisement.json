{
    "GestioneAdvertisement": [
        {
            "parentClass": "GestioneAdvertisement",
            "name": "GestioneAdvertisement",
            "sourceCode": "public GestioneAdvertisement() throws RemoteException {\r\n        super();\r\n        dbBanner = new DBBanner();\r\n    }"
        },
        {
            "parentClass": "GestioneAdvertisement",
            "name": "cancellaBanner",
            "sourceCode": "public boolean cancellaBanner(int pIdBanner) throws RemoteException {\r\n        /* Bean containing the data of the banner */\r\n        BeanBanner banner;\r\n\r\n        try {\r\n            /* Load the banner and check the data */\r\n            banner = dbBanner.ottieniBannerDaID(pIdBanner);\r\n            if (!ControlloDati.checkBeanBanner(banner)) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n            }\r\n            /* Remove the image associated with the banner */\r\n            File imageFile = new File(banner.getPercorsoFile());\r\n            imageFile.delete();\r\n            /* Clear the whole bean banner */\r\n            return dbBanner.cancellaBanner(pIdBanner);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneAdvertisement",
            "name": "modificaBanner",
            "sourceCode": "public boolean modificaBanner(int pBannerID, ImageIcon pImmagine) throws RemoteException {\r\n        try {\r\n            /* Performs a check on the image of the banner */\r\n            if (!ControlloDati.checkImmagine(pImmagine)) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n            }\r\n            /* Load the icon image */\r\n            BufferedImage buffImg = (BufferedImage) pImmagine.getImage();\r\n            /* Load the data of the banner */\r\n            BeanBanner banner = dbBanner.ottieniBannerDaID(pBannerID);\r\n            /* Check the banner on the data uploaded */\r\n            if (!ControlloDati.checkBeanBanner(banner)) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n            }\r\n            /* Rewrite the image file and returns the result of the operation */\r\n            File imgFile = new File(banner.getPercorsoFile());\r\n            return ImageIO.write(buffImg, \"jpg\", imgFile);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\r\n        } catch (Exception e) {\r\n            if (e instanceof RemoteException) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n            } else {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_FILE);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneAdvertisement",
            "name": "ottieniBannersDaID",
            "sourceCode": "public HashMap<BeanBanner, ImageIcon> ottieniBannersDaID(int pIdPuntoDiRistoro) throws RemoteException {\r\n        /* Create a HashMap that will hold the banner and associated images */\r\n        HashMap<BeanBanner, ImageIcon> toReturn = new HashMap<>();\r\n\r\n        try {\r\n            /* Get the list of banners for a refreshment point */\r\n            ArrayList<BeanBanner> listaBanner = dbBanner.ottieniBanner(pIdPuntoDiRistoro);\r\n            /* For each banner valid list */\r\n            for (BeanBanner banner : listaBanner) {\r\n                /* If the banner is valid charge in the HashMap with the image file */\r\n                if (ControlloDati.checkBeanBanner(banner)) {\r\n                    /* Create the image file */\r\n                    File imgFile = new File(banner.getPercorsoFile());\r\n                    /* Create an object ImageIcon from the image file */\r\n                    ImageIcon icon = new ImageIcon(ImageIO.read(imgFile));\r\n                    /* Add the banner and the image to the HashMap */\r\n                    toReturn.put(banner, icon);\r\n                }\r\n            }\r\n            return toReturn;\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_FILE);\r\n        }\r\n    }"
        },
        {
            "parentClass": "GestioneAdvertisement",
            "name": "inserisciBanner",
            "sourceCode": "public boolean inserisciBanner(int pIdPuntoDiRistoro, ImageIcon pImmagineBanner) throws RemoteException {\r\n        try {\r\n            /* Performs a check on the image */\r\n            if (!ControlloDati.checkImmagine(pImmagineBanner)) {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_DATI);\r\n            }\r\n            /* Create an object that handles the conventions */\r\n            IDBConvenzione dbConvenzione = new DBConvenzione();\r\n            /* Load the data of the convention of a refreshment point */\r\n            BeanConvenzione convenzione = dbConvenzione.ottieniConvezioneAttiva(pIdPuntoDiRistoro);\r\n            /* Get the number of banners displayed by the Convention Maximum */\r\n            int maxBanner = convenzione.getMaxBanner();\r\n            /* Load the list of banners for a refreshment and stores the number */\r\n            int numBanner = (dbBanner.ottieniBanner(pIdPuntoDiRistoro)).size();\r\n            /* Check that the maximum number of banners is not reached */\r\n            if (!(numBanner < maxBanner)) {\r\n                throw new Exception(MessaggiErrore.ERRORE_NUM_BANNER);\r\n            }\r\n            /* Create a blank banner */\r\n            BeanBanner banner = new BeanBanner();\r\n            /* Create a unique file name */\r\n            String path = CostantiGlobali.SERVER_IMAGE_PATH + pIdPuntoDiRistoro;\r\n            int i = 0;\r\n            File imgFile = new File(path + \"_\" + i + \".jpg\");\r\n            while (imgFile.exists()) {\r\n                i++;\r\n                imgFile = new File(path + \"_\" + i + \".jpg\");\r\n            }\r\n            /* Stores the image in the file system */\r\n            BufferedImage im = (BufferedImage) pImmagineBanner.getImage();\r\n            if (!ImageIO.write(im, \"jpg\", imgFile)) {\r\n                /* Write failed */\r\n                throw new IOException();\r\n            }\r\n            /* Loads the data in the banner */\r\n            banner.setIdPuntoDiRistoro(pIdPuntoDiRistoro);\r\n            banner.setPercorsoFile(imgFile.getPath());\r\n            /* Insert the banner in the database */\r\n            return dbBanner.inserisciBanner(banner);\r\n        } catch (SQLException e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_CONNESSIONE_DBMS);\r\n        } catch (Exception e) {\r\n            throw new RemoteException(MessaggiErrore.ERRORE_FILE);\r\n        } catch (Exception e) {\r\n            if (e.getMessage().equals(MessaggiErrore.ERRORE_NUM_BANNER)) {\r\n                /* Has been reached on most of banner inserted num */\r\n                throw new RemoteException(MessaggiErrore.ERRORE_NUM_BANNER);\r\n            } else {\r\n                throw new RemoteException(MessaggiErrore.ERRORE_SCONOSCIUTO);\r\n            }\r\n        }\r\n    }"
        }
    ]
}