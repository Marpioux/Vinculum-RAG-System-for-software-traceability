{
    "DBPreferenzeDiRicerca": [
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "DBPreferenzeDiRicerca",
            "sourceCode": "public DBPreferenzeDiRicerca() {\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "cancellaPreferenzaDiRicerca",
            "sourceCode": "public boolean cancellaPreferenzaDiRicerca(int pIdPreferenza) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query cancellation\r\n            String query = \"DELETE FROM preferenzediricerca WHERE Id =\" + pIdPreferenza;\r\n            // You run the query Cancellation\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "cancellaPreferenzaDiRicercaBC",
            "sourceCode": "public boolean cancellaPreferenzaDiRicercaBC(int pIdBeneCulturale, int pIdPreferenzaDiRicerca) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query cancellation\r\n            String query = \"DELETE FROM associazionebc WHERE IdPreferenzeDiRicerca =\" + pIdPreferenzaDiRicerca\r\n                    + \" AND IdBeneCulturale =\" + pIdBeneCulturale;\r\n            // You run the query Cancellation\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "cancellaPreferenzaDiRicercaPR",
            "sourceCode": "public boolean cancellaPreferenzaDiRicercaPR(int pIdPuntoDiRistoro, int pIdPreferenza) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query cancellation\r\n            String query = \"DELETE FROM associazionepr WHERE IdPreferenzeDiRicerca =\" + pIdPreferenza\r\n                    + \" AND IdPuntoDiRistoro =\" + pIdPuntoDiRistoro;\r\n            // You run the query Cancellation\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "cancellaPreferenzaDiRicercaTurista",
            "sourceCode": "public boolean cancellaPreferenzaDiRicercaTurista(int pIdTurista, int pIdPreferenza) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query cancellation\r\n            String query = \"DELETE FROM rating WHERE IdTurista =\" + pIdTurista + \" AND IdPreferenzeDiRicerca =\"\r\n                    + pIdPreferenza;\r\n            // You run the query Cancellation\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "inserisciPreferenzaDiRicercaDelBC",
            "sourceCode": "public boolean inserisciPreferenzaDiRicercaDelBC(int pIdBeneCulturale, int pIdPreferenzaDiRicerca) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for the insertion\r\n            String query = \"INSERT INTO associazionebc (IdPreferenzeDiRicerca, IdBeneCulturale) VALUES (\"\r\n                    + pIdPreferenzaDiRicerca + \", \" + pIdBeneCulturale + \")\";\r\n            // You run the insert query\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "inserisciPreferenzaDiRicerca",
            "sourceCode": "public boolean inserisciPreferenzaDiRicerca(BeanPreferenzaDiRicerca pPreferenza) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for the insertion\r\n            String query = \"INSERT INTO preferenzediricerca (Id, Name) VALUES (\" + pPreferenza.getId() + \", '\"\r\n                    + pPreferenza.getNome() + \"')\";\r\n            // You run the insert query\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "inserisciPreferenzaDiRicercaDelPR",
            "sourceCode": "public boolean inserisciPreferenzaDiRicercaDelPR(int pIdPuntoDiRistoro, int pIdPreferenzaDiRicerca) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for the insertion\r\n            String query = \"INSERT INTO associazionepr (IdPreferenzeDiRicerca, IdPuntoDiRistoro) VALUES (\"\r\n                    + pIdPreferenzaDiRicerca + \", \" + pIdPuntoDiRistoro + \")\";\r\n            // You run the insert query\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "inserisciPreferenzaDiRicercaDelTurista",
            "sourceCode": "public boolean inserisciPreferenzaDiRicercaDelTurista(int pIdTurista, int pIdPreferenzaDiRicerca) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query for the insertion\r\n            String query = \"INSERT INTO rating (IdTurista, IdPreferenzeDiRicerca) VALUES (\" + pIdTurista + \", \"\r\n                    + pIdPreferenzaDiRicerca + \")\";\r\n            // You run the insert query\r\n            int i = stat.executeUpdate(query);\r\n            // This returns the backup\r\n            return (i == 1);\r\n        } finally {\r\n            // Always runs and takes care of closing the Statement and the connection\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "ottieniPreferenzeDiRicercaDelBC",
            "sourceCode": "public ArrayList<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelBC(int pIdBeneCulturale) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query to extract the list of search preferences\r\n            String query = \"SELECT * FROM associazionebc, preferenzediricerca WHERE IdBeneCulturale =\"\r\n                    + pIdBeneCulturale\r\n                    + \" AND IdPreferenzeDiRicerca = preferenzediricerca.Id\";\r\n            // The query is executed\r\n            result = stat.executeQuery(query);\r\n            // List that will contain the BeanPreferenzaDiRicerca\r\n            ArrayList<BeanPreferenzaDiRicerca> list = new ArrayList<BeanPreferenzaDiRicerca>();\r\n            // We extract the results from the result set and moves in the list\r\n            while (result.next()) {\r\n                // Add to the list BeanPreferenzaDiRicerca\r\n                list.add(new BeanPreferenzaDiRicerca(result.getInt(\"Id\"), result.getString(\"Name\")));\r\n            }\r\n            return list;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "ottieniPreferenzeDiRicercaDelPR",
            "sourceCode": "public ArrayList<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelPR(int pIdPuntoDiRistoro) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query to extract the list of search preferences\r\n            String query = \"SELECT * FROM associazionepr, preferenzediricerca WHERE IdPuntoDiRistoro =\"\r\n                    + pIdPuntoDiRistoro\r\n                    + \" AND IdPreferenzeDiRicerca = preferenzediricerca.Id\";\r\n            // The query is executed\r\n            result = stat.executeQuery(query);\r\n            // List that will contain the BeanPreferenzaDiRicerca\r\n            ArrayList<BeanPreferenzaDiRicerca> list = new ArrayList<BeanPreferenzaDiRicerca>();\r\n            // We extract the results from the result set and moves in the list\r\n            while (result.next()) {\r\n                // Add to the list BeanPreferenzaDiRicerca\r\n                list.add(new BeanPreferenzaDiRicerca(result.getInt(\"Id\"), result.getString(\"Name\")));\r\n            }\r\n            return list;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "ottieniPreferenzeDiRicercaDelTurista",
            "sourceCode": "public ArrayList<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicercaDelTurista(int pIdTurista) throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query to extract the list of search preferences\r\n            String query = \"SELECT * FROM rating, preferenzediricerca WHERE IdTurista =\"\r\n                    + pIdTurista\r\n                    + \" AND IdPreferenzeDiRicerca = preferenzediricerca.Id\";\r\n            // The query is executed\r\n            result = stat.executeQuery(query);\r\n            // List that will contain the BeanPreferenzaDiRicerca\r\n            ArrayList<BeanPreferenzaDiRicerca> list = new ArrayList<BeanPreferenzaDiRicerca>();\r\n            // We extract the results from the result set and moves in the list\r\n            while (result.next()) {\r\n                // Add to the list BeanPreferenzaDiRicerca\r\n                list.add(new BeanPreferenzaDiRicerca(result.getInt(\"Id\"), result.getString(\"Name\")));\r\n            }\r\n            return list;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        },
        {
            "parentClass": "DBPreferenzeDiRicerca",
            "name": "ottieniPreferenzeDiRicerca",
            "sourceCode": "public ArrayList<BeanPreferenzaDiRicerca> ottieniPreferenzeDiRicerca() throws SQLException {\r\n        // Variables for database connection\r\n        Connection conn = null;\r\n        // Variable for the query\r\n        Statement stat = null;\r\n        // Variable for the query results\r\n        ResultSet result = null;\r\n        try {\r\n            // Get the connection\r\n            conn = DBConnessionePool.ottieniConnessione();\r\n            // Create the Statement\r\n            stat = conn.createStatement();\r\n            // Query to extract the list of search preferences\r\n            String query = \"SELECT * FROM preferenzediricerca\";\r\n            // The query is executed\r\n            result = stat.executeQuery(query);\r\n            // List that will contain the BeanPreferenzaDiRicerca\r\n            ArrayList<BeanPreferenzaDiRicerca> list = new ArrayList<BeanPreferenzaDiRicerca>();\r\n            // We extract the results from the result set and moves in the list\r\n            while (result.next()) {\r\n                // Add to the list BeanPreferenzaDiRicerca\r\n                list.add(new BeanPreferenzaDiRicerca(result.getInt(\"Id\"), result.getString(\"Name\")));\r\n            }\r\n            // Return the list of search preferences in the DB\r\n            return list;\r\n        } finally {\r\n            // Always runs and takes care to close the Result, the Statement and Connection\r\n            if (result != null) {\r\n                result.close();\r\n            }\r\n            if (stat != null) {\r\n                stat.close();\r\n            }\r\n            if (conn != null) {\r\n                DBConnessionePool.rilasciaConnessione(conn);\r\n            }\r\n        }\r\n    }"
        }
    ]
}