{
    "ResetPasswordAction": [
        {
            "parentClass": "ResetPasswordAction",
            "name": "ResetPasswordAction",
            "sourceCode": "public ResetPasswordAction(DAOFactory factory) {\r\n\t\tthis.authDAO = factory.getAuthDAO();\r\n\t\tthis.patientDAO = factory.getPatientDAO();\r\n\t\tthis.factory = factory;\r\n\t}"
        },
        {
            "parentClass": "ResetPasswordAction",
            "name": "checkMID",
            "sourceCode": "public long checkMID(String midString) {\r\n\t\ttry {\r\n\t\t\tlong mid = Long.valueOf(midString);\r\n\t\t\tif (!authDAO.checkUserExists(mid))\r\n\t\t\t\treturn 0;\r\n\t\t\treturn mid;\r\n\t\t} catch (NumberFormatException e) {\r\n\t\t\treturn 0L;\r\n\t\t} catch (DBException e) {\r\n\t\t\treturn 0L;\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "ResetPasswordAction",
            "name": "isMaxedOut",
            "sourceCode": "public boolean isMaxedOut(String ipAddress) throws DBException {\r\n\t\treturn authDAO.getResetPasswordFailures(ipAddress) >= MAX_RESET_ATTEMPTS;\r\n\t}"
        },
        {
            "parentClass": "ResetPasswordAction",
            "name": "checkRole",
            "sourceCode": "public String checkRole(long mid, String role) throws iTrustException {\r\n\t\ttry {\r\n\t\t\tif ((\"patient\".equals(role) && patientDAO.getRole(mid, role).equals(\"patient\"))\r\n\t\t\t\t\t|| (\"hcp\".equals(role) && patientDAO.getRole(mid, role).equals(\"hcp\"))\r\n\t\t\t\t\t|| (\"uap\".equals(role) && patientDAO.getRole(mid, role).equals(\"uap\"))\r\n\t\t\t\t\t|| (\"pha\".equals(role) && patientDAO.getRole(mid, role).equals(\"pha\"))\r\n\t\t\t\t\t|| (\"er\".equals(role) && patientDAO.getRole(mid, role).equals(\"er\")))\r\n\t\t\t\treturn role;\r\n\t\t\telse\r\n\t\t\t\treturn null;\r\n\t\t} catch (DBException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (iTrustException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t\treturn null;\r\n\t}"
        },
        {
            "parentClass": "ResetPasswordAction",
            "name": "checkAnswerNull",
            "sourceCode": "public String checkAnswerNull(String answer) {\r\n\t\tif (answer == null || \"\".equals(answer))\r\n\t\t\treturn null;\r\n\t\telse\r\n\t\t\treturn answer;\r\n\t}"
        },
        {
            "parentClass": "ResetPasswordAction",
            "name": "getSecurityQuestion",
            "sourceCode": "public String getSecurityQuestion(long mid) throws iTrustException {\r\n\t\ttry {\r\n\t\t\tif (null == authDAO.getSecurityQuestion(mid) || authDAO.getSecurityQuestion(mid).equals(\"\"))\r\n\t\t\t\tthrow new iTrustException(\"No security question or answer for this user has been set.\");\r\n\t\t\telse\r\n\t\t\t\treturn authDAO.getSecurityQuestion(mid);\r\n\t\t} catch (DBException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "ResetPasswordAction",
            "name": "resetPassword",
            "sourceCode": "public String resetPassword(long mid, String role, String answer, String password,\r\n\t\t\tString confirmPassword, String ipAddr) throws FormValidationException, DBException,\r\n\t\t\tiTrustException {\r\n\r\n\t\tRole r = authDAO.getUserRole(mid);\r\n\t\ttry {\r\n\t\t\tRole.parse(role);\r\n\t\t} catch (IllegalArgumentException e) {\r\n\t\t\treturn \"Invalid role\";\r\n\t\t}\r\n\r\n\t\tif (r.equals(Role.ADMIN))\r\n\t\t\treturn \"This role cannot be changed here\";\r\n\t\tif (!r.equals(Role.parse(role)))\r\n\t\t\treturn \"Role mismatch\";\r\n\r\n\t\tif (authDAO.getResetPasswordFailures(ipAddr) >= MAX_RESET_ATTEMPTS) {\r\n\t\t\treturn \"Too many retries\";\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tvalidatePassword(password, confirmPassword);\r\n\r\n\t\t\tif (answer.equals(authDAO.getSecurityAnswer(mid))) {\r\n\t\t\t\tauthDAO.resetPassword(mid, password);\r\n\t\t\t\tnew EmailUtil(factory).sendEmail(makeEmailApp(mid, role));\r\n\t\t\t\treturn \"Password changed\";\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tauthDAO.recordResetPasswordFailure(ipAddr);\r\n\t\t\t\treturn \"Answer did not match\";\r\n\t\t\t}\r\n\r\n\t\t} catch (DBException e) {\r\n\t\t\treturn \"Error in validation of security answer\";\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "ResetPasswordAction",
            "name": "makeEmailApp",
            "sourceCode": "private Email makeEmailApp(long mid, String role) throws DBException{\r\n\t\t\r\n\t\tif(Role.parse(role) == Role.PATIENT){\r\n\t\t\tPatientBean p = new PatientDAO(factory).getPatient(mid);\r\n\t\t\tEmail email = new Email();\r\n\t\t\temail.setFrom(\"no-reply@itrust.com\");\r\n\t\t\temail.setToList(Arrays.asList(p.getEmail()));\r\n\t\t\temail.setSubject(\"Your password has been changed in iTrust\");\r\n\t\t\temail.setBody(String.format(\"Dear %s, \\n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\r\n\r\n\t\t\treturn email;\r\n\t\t}\r\n\t\telse{ //UAP or HCP - admin taken out in \"resetPassword\"\r\n\t\t\tPersonnelBean p = new PersonnelDAO(factory).getPersonnel(mid);\r\n\t\t\tEmail email = new Email();\r\n\t\t\temail.setFrom(\"no-reply@itrust.com\");\r\n\t\t\temail.setToList(Arrays.asList(p.getEmail()));\r\n\t\t\temail.setSubject(\"Your password has been changed in iTrust\");\r\n\t\t\temail.setBody(String.format(\"Dear %s, \\n You have chosen to change your iTrust password for user %s\", p.getFullName(), mid));\r\n\r\n\t\t\treturn email;\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "ResetPasswordAction",
            "name": "validatePassword",
            "sourceCode": "private void validatePassword(String password, String confirmPassword) throws FormValidationException {\r\n\t\tErrorList errorList = new ErrorList();\r\n\t\tif (password == null || \"\".equals(password)) {\r\n\t\t\terrorList.addIfNotNull(\"Password cannot be empty\");\r\n\t\t} else {\r\n\t\t\tif (!password.equals(confirmPassword))\r\n\t\t\t\terrorList.addIfNotNull(\"Passwords don't match\");\r\n\t\t\tif (!ValidationFormat.PASSWORD.getRegex().matcher(password).matches()) {\r\n\t\t\t\terrorList.addIfNotNull(\"Password must be in the following format: \"\r\n\t\t\t\t\t\t+ ValidationFormat.PASSWORD.getDescription());\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (errorList.hasErrors())\r\n\t\t\tthrow new FormValidationException(errorList);\r\n\t}"
        }
    ]
}