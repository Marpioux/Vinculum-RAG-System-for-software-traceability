{
    "RemoteMonitoringDAO": [
        {
            "parentClass": "RemoteMonitoringDAO",
            "name": "RemoteMonitoringDAO",
            "sourceCode": "public RemoteMonitoringDAO(DAOFactory factory) {\r\n\t\tthis.factory = factory;\r\n\t}"
        },
        {
            "parentClass": "RemoteMonitoringDAO",
            "name": "getPatientsData",
            "sourceCode": "public List<RemoteMonitoringDataBean> getPatientsData(long loggedInMID) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringLists WHERE HCPMID=? ORDER BY PatientMID\");\r\n\t\t\tps.setLong(1, loggedInMID);\r\n\t\t\tResultSet patientRS = ps.executeQuery();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringData WHERE timelogged >= CURRENT_DATE ORDER BY PatientID, timeLogged DESC\");\r\n\t\t\tResultSet dataRS = ps.executeQuery();\r\n\t\t\t\r\n\t\t\tList<String> patientList = new ArrayList<String>();\r\n\t\t\twhile(patientRS.next()) {\r\n\t\t\t\tpatientList.add(patientRS.getLong(\"PatientMID\") + \"\");\r\n\t\t\t}\r\n\t\t\tList<RemoteMonitoringDataBean> dataList = loader.loadList(dataRS);\t\t\t\r\n\t\t\t\r\n\t\t\tint i, j;\r\n\t\t\t//Go through all patients and remove any that aren't monitored by this HCP\r\n\t\t\tfor(i = 0; i < dataList.size(); i++) {\r\n\t\t\t\tif(!patientList.contains(dataList.get(i).getPatientMID() + \"\")) {\r\n\t\t\t\t\tdataList.remove(i);\r\n\t\t\t\t\ti--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Add values in patient list with no data for today to list.\r\n\t\t\tboolean itsThere;\r\n\t\t\tfor(i = 0; i < patientList.size(); i++) {\r\n\t\t\t\titsThere = false;\r\n\t\t\t\tfor(j = 0; j < dataList.size(); j++) {\r\n\t\t\t\t\tif((dataList.get(j).getPatientMID() + \"\").equals(patientList.get(i))) {\r\n\t\t\t\t\t\titsThere = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!itsThere) {\r\n\t\t\t\t\tdataList.add(new RemoteMonitoringDataBean(Long.parseLong(patientList.get(i))));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn dataList;\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "RemoteMonitoringDAO",
            "name": "getPatientDataByDate",
            "sourceCode": "public List<RemoteMonitoringDataBean> getPatientDataByDate(long patientMID, Date lower, Date upper) throws DBException{\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry{\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM remotemonitoringdata WHERE PatientID=? AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n\t\t\t// add 1 day's worth to include the upper\r\n\t\t\tps.setTimestamp(3, new Timestamp(upper.getTime() + 1000L * 60L * 60 * 24L));\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tList<RemoteMonitoringDataBean> dataList = loader.loadList(rs);\r\n\t\t\treturn dataList;\r\n\t\t}catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "RemoteMonitoringDAO",
            "name": "storePatientData",
            "sourceCode": "public void storePatientData(long patientMID, int systolicBloodPressure, int diastolicBloodPressure, int glucoseLevel, String reporterRole, long reporterMID)\r\n\t\t\tthrows DBException, iTrustException {\r\n\t\tif(getNumberOfDailyEntries(patientMID) >= 10)\r\n\t\t\tthrow new iTrustException(\"Patient entries for today cannot exceed 10.\");\r\n\t\t\r\n\t\tif(reporterRole.equals(\"patient representative\"))\r\n\t\t\tvalidatePR(reporterMID, patientMID);\r\n\t\t\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, systolicBloodPressure, \"\r\n\t\t\t\t\t+ \"diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?)\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tps.setLong(2, systolicBloodPressure);\r\n\t\t\tps.setInt(3, diastolicBloodPressure);\r\n\t\t\tps.setInt(4, glucoseLevel);\r\n\t\t\tps.setString(5, reporterRole);\r\n\t\t\tps.setLong(6, reporterMID);\r\n\t\t\tps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "RemoteMonitoringDAO",
            "name": "storePatientData",
            "sourceCode": "public void storePatientData(long patientMID, int systolicBloodPressure, int diastolicBloodPressure, int glucoseLevel, String reporterRole, long reporterMID)\r\n\t\t\tthrows DBException, iTrustException {\r\n\t\tif(getNumberOfDailyEntries(patientMID) >= 10)\r\n\t\t\tthrow new iTrustException(\"Patient entries for today cannot exceed 10.\");\r\n\t\t\r\n\t\tif(reporterRole.equals(\"patient representative\"))\r\n\t\t\tvalidatePR(reporterMID, patientMID);\r\n\t\t\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, systolicBloodPressure, \"\r\n\t\t\t\t\t+ \"diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?)\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tps.setLong(2, systolicBloodPressure);\r\n\t\t\tps.setInt(3, diastolicBloodPressure);\r\n\t\t\tps.setInt(4, glucoseLevel);\r\n\t\t\tps.setString(5, reporterRole);\r\n\t\t\tps.setLong(6, reporterMID);\r\n\t\t\tps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "RemoteMonitoringDAO",
            "name": "storePatientData",
            "sourceCode": "public void storePatientData(long patientMID, int systolicBloodPressure, int diastolicBloodPressure, int glucoseLevel, String reporterRole, long reporterMID)\r\n\t\t\tthrows DBException, iTrustException {\r\n\t\tif(getNumberOfDailyEntries(patientMID) >= 10)\r\n\t\t\tthrow new iTrustException(\"Patient entries for today cannot exceed 10.\");\r\n\t\t\r\n\t\tif(reporterRole.equals(\"patient representative\"))\r\n\t\t\tvalidatePR(reporterMID, patientMID);\r\n\t\t\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringData(PatientID, systolicBloodPressure, \"\r\n\t\t\t\t\t+ \"diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?)\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tps.setLong(2, systolicBloodPressure);\r\n\t\t\tps.setInt(3, diastolicBloodPressure);\r\n\t\t\tps.setInt(4, glucoseLevel);\r\n\t\t\tps.setString(5, reporterRole);\r\n\t\t\tps.setLong(6, reporterMID);\r\n\t\t\tps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "RemoteMonitoringDAO",
            "name": "getNumberOfDailyEntries",
            "sourceCode": "private int getNumberOfDailyEntries(long patientMID) throws DBException{\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringData WHERE PatientID=? AND DATE(timeLogged)=CURRENT_DATE\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tList<RemoteMonitoringDataBean> patients = loader.loadList(rs);\r\n\t\t\treturn patients.size();\r\n\t\t\t\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "RemoteMonitoringDAO",
            "name": "validatePR",
            "sourceCode": "public void validatePR(long representativeMID, long patientMID)\r\n\t\t\tthrows iTrustException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n\t\t\tps.setLong(1, representativeMID);\r\n\t\t\tps.setLong(2, patientMID);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tif(!rs.next()) //no rows\r\n\t\t\t\tthrow new iTrustException(\"Representer is not valid for patient \" + patientMID);\r\n\t\t\t\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "RemoteMonitoringDAO",
            "name": "addPatientToList",
            "sourceCode": "public boolean addPatientToList(long patientMID, long HCPMID) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringLists WHERE PatientMID = ? AND HCPMID = ?\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tps.setLong(2, HCPMID);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tif(rs.next())\r\n\t\t\t\treturn false;\r\n\t\t\tps = conn.prepareStatement(\"INSERT INTO RemoteMonitoringLists(PatientMID, HCPMID) VALUES(?,?)\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tps.setLong(2, HCPMID);\r\n\t\t\tps.executeUpdate();\r\n\t\t\treturn true;\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "RemoteMonitoringDAO",
            "name": "removePatientFromList",
            "sourceCode": "public boolean removePatientFromList(long patientMID, long HCPMID) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\t/*ps = conn.prepareStatement(\"SELECT * FROM RemoteMonitoringList WHERE PatientMID = ? AND HCPMID = ?\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tps.setLong(2, HCPMID);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tif(!rs.next())\r\n\t\t\t\treturn false;*/\r\n\t\t\tps = conn.prepareStatement(\"DELETE FROM RemoteMonitoringLists WHERE PatientMID = ? AND HCPMID = ?\");\r\n\t\t\tps.setLong(1, patientMID);\r\n\t\t\tps.setLong(2, HCPMID);\r\n\t\t\tif(ps.executeUpdate() == 0)\r\n\t\t\t\treturn false;\r\n\t\t\treturn true;\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        }
    ]
}