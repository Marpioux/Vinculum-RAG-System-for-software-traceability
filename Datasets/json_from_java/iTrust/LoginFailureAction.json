{
    "LoginFailureAction": [
        {
            "parentClass": "LoginFailureAction",
            "name": "LoginFailureAction",
            "sourceCode": "public LoginFailureAction(DAOFactory factory, String ipAddr) {\r\n\t\tthis.authDAO = factory.getAuthDAO();\r\n\t\tthis.ipAddr = ipAddr;\r\n\t\tthis.transactionDAO = factory.getTransactionDAO();\r\n\t}"
        },
        {
            "parentClass": "LoginFailureAction",
            "name": "recordLoginFailure",
            "sourceCode": "public String recordLoginFailure() {\r\n\t\ttry {\r\n\t\t\tauthDAO.recordLoginFailure(ipAddr);\r\n\t\t\tint loginFailures = authDAO.getLoginFailures(ipAddr);\r\n\t\t\ttransactionDAO.logTransaction(TransactionType.LOGIN_FAILURE, 0L, 0L, \"IP: \" + ipAddr);\r\n\t\t\treturn \"Login failed, attempt \" + loginFailures;\r\n\t\t} catch (DBException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\treturn e.getMessage();\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "LoginFailureAction",
            "name": "isValidForLogin",
            "sourceCode": "public boolean isValidForLogin() {\r\n\t\ttry {\r\n\t\t\treturn authDAO.getLoginFailures(ipAddr) < 3;\r\n\t\t} catch (DBException e) {\r\n\t\t\tSystem.err.println(\"Denying access due to DBException\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}"
        }
    ]
}