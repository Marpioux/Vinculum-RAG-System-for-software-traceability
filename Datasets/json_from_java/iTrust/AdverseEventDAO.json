{
    "AdverseEventDAO": [
        {
            "parentClass": "AdverseEventDAO",
            "name": "AdverseEventDAO",
            "sourceCode": "public AdverseEventDAO(DAOFactory factory) {\r\n\t\tthis.factory = factory;\r\n\t\tthis.aeLoader = new AdverseEventBeanLoader();\r\n\t}"
        },
        {
            "parentClass": "AdverseEventDAO",
            "name": "getReportsFor",
            "sourceCode": "public List<AdverseEventBean> getReportsFor(long mid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\t\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM AdverseEvents WHERE PatientMID = ?\");\r\n\t\t\tps.setLong(1, mid);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\r\n\t\t\tList<AdverseEventBean> aeList = this.aeLoader.loadList(rs);\r\n\t\t\treturn aeList;\r\n\t\t} catch(SQLException e){\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally{\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AdverseEventDAO",
            "name": "addReport",
            "sourceCode": "public void addReport(AdverseEventBean aeBean, long hcpmid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry{\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\r\n\t\t\t\t\t\"INSERT INTO AdverseEvents (PatientMID, PresImmu, Code, Comment, Prescriber, Status) \"\r\n\t\t\t\t\t  + \"VALUES (?, ?, ?, ?, ?, ?)\");\r\n\t\t\tps.setString(1, aeBean.getMID());\r\n\t\t\tps.setString(2, aeBean.getDrug());\r\n\t\t\tps.setString(3, aeBean.getCode());\r\n\t\t\tps.setString(4, aeBean.getDescription());\r\n\t\t\tps.setLong(5, hcpmid);\r\n\t\t\tps.setString(6,\"Active\");\r\n\t\t\tps.executeUpdate();\r\n\t\t} catch(SQLException e){\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AdverseEventDAO",
            "name": "getHCPMID",
            "sourceCode": "public long getHCPMID(int id) throws DBException{\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM AdverseEvents WHERE id=?\");\r\n\t\t\tps.setInt(1, id);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\r\n\t\t\tlong hcpMID = 0;\r\n\t\t\tif(rs.next()) {\r\n\t\t\t\t\r\n\t\t\t\t hcpMID = rs.getLong(\"Prescriber\");\r\n\t\t\t}\r\n\t\t\treturn hcpMID;\r\n\t\t} catch(SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AdverseEventDAO",
            "name": "getReport",
            "sourceCode": "public AdverseEventBean getReport(int id) throws DBException{\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM AdverseEvents WHERE id=?\");\r\n\t\t\tps.setInt(1, id);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\r\n\t\t\tList<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n\t\t\treturn aeList.get(0);\r\n\t\t} catch(SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\t\t\t\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AdverseEventDAO",
            "name": "removeReport",
            "sourceCode": "public long removeReport(int id) throws DBException{\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"UPDATE AdverseEvents SET Status = ? WHERE id = ?\");\r\n\t\t\tString removed = \"removed\";\r\n\t\t\tps.setString(1, removed);\r\n\t\t\tps.setInt(2,id);\r\n\t\t\tps.executeUpdate();\r\n\t\t\tlong a = DBUtil.getLastInsert(conn);\r\n\t\t\treturn a;\r\n\t\t} catch(SQLException e){\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\t\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AdverseEventDAO",
            "name": "getUnremovedAdverseEventsByCode",
            "sourceCode": "public List<AdverseEventBean> getUnremovedAdverseEventsByCode(String code) throws DBException\r\n\t{\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM adverseevents WHERE code=? AND status=?\");\r\n\t\t\tps.setString(1, code);\r\n\t\t\tps.setString(2, \"Active\");\r\n\t\t\tResultSet rs;\r\n\t\t\trs = ps.executeQuery();\r\n\t\t\treturn aeLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AdverseEventDAO",
            "name": "getNameForCode",
            "sourceCode": "public String getNameForCode(String code) throws DBException\r\n\t{\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT PresImmu FROM adverseevents WHERE code=?\");\r\n\t\t\tps.setString(1, code);\r\n\t\t\tResultSet rs;\r\n\t\t\trs = ps.executeQuery();\r\n\t\t\tif(rs.next()) {\r\n\t\t\t\t return rs.getString(\"PresImmu\");\r\n\t\t\t}\r\n\t\t\treturn \"Name not Found\";\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AdverseEventDAO",
            "name": "getPerscriptions",
            "sourceCode": "public List<AdverseEventBean> getPerscriptions(String start, String end) throws ParseException, DBException{\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\t\r\n\t\ttry{\r\n\t\t\tSimpleDateFormat fmt = new SimpleDateFormat(\"MM/dd/yyy\");\r\n\t\t\tDate beginning = fmt.parse(start);\r\n\t\t\tDate ending = fmt.parse(end);\r\n\t \r\n\t\t\tconn = factory.getConnection();\r\n\t\t\t//AND NDCodes.Code=AdverseEvents.Code \r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM AdverseEvents,NDCodes WHERE AdverseEvents.TimeLogged >= ? AND AdverseEvents.TimeLogged <= ? AND NDCodes.Code=AdverseEvents.Code ORDER BY AdverseEvents.Code, AdverseEvents.TimeLogged DESC\");\r\n\t\t\t \r\n\t\t\tps.setTimestamp(1, new Timestamp(beginning.getTime()));\r\n\t\t\tps.setTimestamp(2, new Timestamp(ending.getTime() + 1000L * 60L * 60 * 24L));\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\r\n\t\t\tList<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n\t\t\treturn aeList;\r\n\t\t} catch(SQLException e){\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\t\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AdverseEventDAO",
            "name": "getImmunizations",
            "sourceCode": "public List<AdverseEventBean> getImmunizations(String start, String end) throws ParseException, DBException{\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tSimpleDateFormat fmt = new SimpleDateFormat(\"MM/dd/yyy\");\r\n\t\t\tDate beginning = fmt.parse(start);\r\n\t\t\tDate ending = fmt.parse(end);\r\n\t \r\n\t\t\tconn = factory.getConnection();\r\n\t\t\t//AND NDCodes.Code=AdverseEvents.Code \r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM AdverseEvents,CPTCodes WHERE AdverseEvents.TimeLogged >= ? AND AdverseEvents.TimeLogged <= ? AND CPTCodes.Code=AdverseEvents.Code ORDER BY AdverseEvents.Code, AdverseEvents.TimeLogged DESC\");\r\n\t\t\t \r\n\t\t\tps.setTimestamp(1, new Timestamp(beginning.getTime()));\r\n\t\t\tps.setTimestamp(2, new Timestamp(ending.getTime() + 1000L * 60L * 60 * 24L));\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\r\n\t\t\tList<AdverseEventBean> aeList = aeLoader.loadList(rs);\r\n\t\t\treturn aeList;\r\n\t\t} catch(SQLException e){\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\t\t\t\r\n\t\t}\r\n\t}"
        }
    ]
}