{
    "PrescriptionReportAction": [
        {
            "parentClass": "PrescriptionReportAction",
            "name": "PrescriptionReportAction",
            "sourceCode": "public PrescriptionReportAction(DAOFactory factory, long loggedInMID, String pidString)\r\n\t\t\tthrows iTrustException, DBException, NoHealthRecordsException {\r\n\t\tsuper(factory, pidString);\r\n\t\tthis.transDAO = factory.getTransactionDAO();\r\n\t\tthis.ovDAO = factory.getOfficeVisitDAO();\r\n\t\tthis.patientDAO = factory.getPatientDAO();\r\n\t\tthis.loggedInMID = loggedInMID;\r\n\t}"
        },
        {
            "parentClass": "PrescriptionReportAction",
            "name": "representPatient",
            "sourceCode": "public long representPatient(String input) throws iTrustException {\r\n\t\ttry {\r\n\t\t\tlong reppeeMID = Long.valueOf(input);\r\n\t\t\tif (patientDAO.represents(loggedInMID, reppeeMID)) {\r\n\t\t\t\tloggedInMID = reppeeMID;\r\n\t\t\t\tpid = reppeeMID;\r\n\t\t\t\tisRepresenting = true;\r\n\t\t\t\treturn reppeeMID;\r\n\t\t\t} else\r\n\t\t\t\tthrow new iTrustException(\"You do not represent patient \" + reppeeMID);\r\n\t\t} catch (NumberFormatException e) {\r\n\t\t\tthrow new iTrustException(\"MID is not a number\");\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PrescriptionReportAction",
            "name": "getAllOfficeVisits",
            "sourceCode": "public List<OfficeVisitBean> getAllOfficeVisits() throws DBException {\r\n\t\treturn ovDAO.getAllOfficeVisits(pid);\r\n\t}"
        },
        {
            "parentClass": "PrescriptionReportAction",
            "name": "getPrescriptionReports",
            "sourceCode": "@SuppressWarnings(\"unchecked\")\r\n\tpublic List<PrescriptionReportBean> getPrescriptionReports(Map params, List<OfficeVisitBean> officeVisits)\r\n\t\t\tthrows DBException {\r\n\t\tHashMap<String, String> myParams = ParameterUtil.convertMap(params);\r\n\t\tList<Long> ovIDs = new ArrayList<Long>();\r\n\t\tfor (int i = 0; i < officeVisits.size(); i++) {\r\n\t\t\ttry {\r\n\t\t\t\tif (params.get(\"ovOff\" + i) != null) {\r\n\t\t\t\t\tint offset = Integer.valueOf(myParams.get(\"ovOff\" + i));\r\n\t\t\t\t\tovIDs.add(officeVisits.get(offset).getVisitID());\r\n\t\t\t\t}\r\n\t\t\t} catch (NumberFormatException e) {\r\n\t\t\t\t// just skip it\r\n\t\t\t}\r\n\t\t}\r\n\t\ttransDAO.logTransaction(TransactionType.VIEW_PRESCRIPTION_REPORT, loggedInMID, pid,\r\n\t\t\t\t\"Getting reports for office visits \" + ovIDs.toString());\r\n\t\tif (ovIDs.size() == 0)\r\n\t\t\treturn new ArrayList<PrescriptionReportBean>();\r\n\r\n\t\treturn ovDAO.getPrescriptionReports(ovIDs, pid);\r\n\t}"
        },
        {
            "parentClass": "PrescriptionReportAction",
            "name": "getPatient",
            "sourceCode": "public PatientBean getPatient() throws DBException {\r\n\t\treturn patientDAO.getPatient(pid);\r\n\t}"
        },
        {
            "parentClass": "PrescriptionReportAction",
            "name": "getQueryString",
            "sourceCode": "@SuppressWarnings(\"unchecked\")\r\n\tpublic String getQueryString(Map paramMap, List<OfficeVisitBean> officeVisits)\r\n\t\t\tthrows FormValidationException, DBException {\r\n\t\tHashMap<String, String> myParams = ParameterUtil.convertMap(paramMap);\r\n\t\tList<Integer> ovOffsets = checkOfficeVisits(myParams, officeVisits);\r\n\t\tString queryString = buildQueryString(ovOffsets);\r\n\t\tif (isRepresenting)\r\n\t\t\tqueryString += \"&rep=\" + pid;\r\n\t\treturn queryString;\r\n\t}"
        },
        {
            "parentClass": "PrescriptionReportAction",
            "name": "checkOfficeVisits",
            "sourceCode": "private ArrayList<Integer> checkOfficeVisits(HashMap<String, String> myParams,\r\n\t\t\tList<OfficeVisitBean> officeVisits) {\r\n\t\tArrayList<Integer> list = new ArrayList<Integer>();\r\n\t\tfor (int i = 0; i < officeVisits.size(); i++) {\r\n\t\t\tif (\"on\".equals(myParams.get(\"ov\" + i)))\r\n\t\t\t\tlist.add(i);\r\n\t\t}\r\n\t\treturn list;\r\n\t}"
        },
        {
            "parentClass": "PrescriptionReportAction",
            "name": "buildQueryString",
            "sourceCode": "private String buildQueryString(List<Integer> ovOffsets) {\r\n\t\tint n = ovOffsets.size();\r\n\t\tif (n == 0)\r\n\t\t\treturn \"\";\r\n\t\tString str = \"&n=\" + n;\r\n\t\tfor (int i = 0; i < ovOffsets.size(); i++) {\r\n\t\t\tstr += \"&ovOff\" + i + \"=\" + ovOffsets.get(i);\r\n\t\t}\r\n\t\treturn str;\r\n\t}"
        }
    ]
}