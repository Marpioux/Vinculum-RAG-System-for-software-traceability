{
    "SurveyResultDAO": [
        {
            "parentClass": "SurveyResultDAO",
            "name": "SurveyResultDAO",
            "sourceCode": "public SurveyResultDAO(DAOFactory factory) {\r\n\t\tthis.factory = factory;\r\n\t\tthis.loader = new SurveyResultBeanLoader();\r\n\t}"
        },
        {
            "parentClass": "SurveyResultDAO",
            "name": "getSurveyResultsForZip",
            "sourceCode": "public List<SurveyResultBean> getSurveyResultsForZip(String zip, String specialty) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\r\n\t\tStringBuffer sql = new StringBuffer();\r\n\t\tsql.append(\"select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, \");\r\n\t\tsql.append(\"'na' hospitalID, \");\r\n\t\tsql.append(\"avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, \");\r\n\t\tsql.append(\"avg(s.ExamRoomMinutes) AvgExamRoomMinutes, \");\r\n\t\tsql.append(\"avg(s.VisitSatisfaction) AvgVisitSatisfaction, \");\r\n\t\tsql.append(\"avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, \");\r\n\t\tsql.append(\"count(*) / \");\r\n\t\tsql.append(\"\t(select count(*) from personnel p1, officevisits v1 \");\r\n\t\tsql.append(\"\t where v1.hcpid = p1.mid \");\r\n\t\tsql.append(\"\t and substr(p1.zip,1,3) = ? \");\r\n\t\tsql.append(\"\t and p1.mid = p.mid) * 100 PercentSatisfactionResults \");\r\n\t\tsql.append(\"from ovsurvey s, personnel p, officevisits v \");\r\n\t\tsql.append(\"where s.visitid = v.id \");\r\n\t\tsql.append(\"and v.hcpid = p.mid \");\r\n\t\tsql.append(\"and substr(p.zip,1,3) = ? \");\r\n\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))\r\n\t\t\tsql.append(\"and specialty = ?\");\r\n\t\tsql.append(\"group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID \");\r\n\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))\r\n\t\t\tsql.append(\", p.specialty \");\r\n\t\tsql.append(\"order by p.mid \");\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(sql.toString());\r\n\t\t\tps.setString(1, zip.substring(0, 3));\r\n\t\t\tps.setString(2, zip.substring(0, 3));\r\n\t\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))\r\n\t\t\t\tps.setString(3, specialty);\r\n\t\t\treturn loader.loadList(ps.executeQuery());\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "SurveyResultDAO",
            "name": "getSurveyResultsForHospital",
            "sourceCode": "public List<SurveyResultBean> getSurveyResultsForHospital(String hospitalID, String specialty) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\r\n\t\tStringBuffer sql = new StringBuffer();\r\n\t\tsql.append(\"select p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, p.specialty, \");\r\n\t\tsql.append(\"h.hosid hospitalID, \");\r\n\t\tsql.append(\"avg(s.WaitingRoomMinutes) AvgWaitingRoomMinutes, \");\r\n\t\tsql.append(\"avg(s.ExamRoomMinutes) AvgExamRoomMinutes, \");\r\n\t\tsql.append(\"avg(s.VisitSatisfaction) AvgVisitSatisfaction, \");\r\n\t\tsql.append(\"avg(s.TreatmentSatisfaction) AvgTreatmentSatisfation, \");\r\n\t\tsql.append(\"count(*) / \");\r\n\t\tsql.append(\"\t(select count(*) from personnel p1, officevisits v1, HCPAssignedHos h1 \");\r\n\t\tsql.append(\"\t where v1.hcpid = p1.mid \");\r\n\t\tsql.append(\"\t and v1.hcpid = h1.hcpid \");\r\n\t\tsql.append(\"\t and h1.hosid = ? \");\r\n\t\tsql.append(\"\t and p1.mid = p.mid) * 100 PercentSatisfactionResults \");\r\n\t\tsql.append(\"from ovsurvey s, personnel p, officevisits v, HCPAssignedHos h \");\r\n\t\tsql.append(\"where s.visitid = v.id \");\r\n\t\tsql.append(\"and v.hcpid = p.mid \");\r\n\t\tsql.append(\"and v.hcpid = h.hcpid \");\r\n\t\tsql.append(\"and h.hosid = ? \");\r\n\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))\r\n\t\t\tsql.append(\"and p.specialty = ?\");\r\n\t\tsql.append(\"group by p.mid, p.firstname, p.lastname, p.address1, p.address2, p.city, p.state, p.zip, hospitalID \");\r\n\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY))\r\n\t\t\tsql.append(\", p.specialty \");\r\n\t\tsql.append(\"order by p.mid \");\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(sql.toString());\r\n\t\t\tps.setString(1, hospitalID);\r\n\t\t\tps.setString(2, hospitalID);\r\n\t\t\tif (!specialty.equals(SurveyResultBean.ANY_SPECIALTY)) {\r\n\t\t\t\tps.setString(3, specialty);\r\n\t\t\t}\r\n\t\t\treturn loader.loadList(ps.executeQuery());\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t\t\r\n\t}"
        }
    ]
}