{
    "PatientDAO": [
        {
            "parentClass": "PatientDAO",
            "name": "PatientDAO",
            "sourceCode": "public PatientDAO(DAOFactory factory) {\r\n\t\tthis.factory = factory;\r\n\t\tthis.patientLoader = new PatientLoader();\r\n\t\tthis.personnelLoader = new PersonnelLoader();\r\n\t\tthis.diagnosisLoader = new DiagnosisBeanLoader(true);\r\n\t\tthis.prescriptionLoader = new PrescriptionBeanLoader();\r\n\t\tthis.procedureLoader = new ProcedureBeanLoader(true);\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getName",
            "sourceCode": "public String getName(long mid) throws iTrustException, DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT firstName, lastName FROM Patients WHERE MID=?\");\r\n\t\t\tps.setLong(1, mid);\r\n\t\t\tResultSet rs;\r\n\t\t\trs = ps.executeQuery();\r\n\t\t\tif (rs.next()) {\r\n\t\t\t\treturn rs.getString(\"firstName\") + \" \" + rs.getString(\"lastName\");\r\n\t\t\t} else {\r\n\t\t\t\tthrow new iTrustException(\"User does not exist\");\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getRole",
            "sourceCode": "public String getRole(long mid, String role) throws iTrustException, DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT role FROM Users WHERE MID=? AND Role=?\");\r\n\t\t\tps.setLong(1, mid);\r\n\t\t\tps.setString(2, role);\r\n\t\t\tResultSet rs;\r\n\t\t\trs = ps.executeQuery();\r\n\t\t\tif (rs.next()) {\r\n\t\t\t\treturn rs.getString(\"role\");\r\n\t\t\t} else {\r\n\t\t\t\tthrow new iTrustException(\"User does not exist with the designated role\");\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "addEmptyPatient",
            "sourceCode": "public long addEmptyPatient() throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"INSERT INTO Patients(MID) VALUES(NULL)\");\r\n\t\t\tps.executeUpdate();\r\n\t\t\treturn DBUtil.getLastInsert(conn);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getPatient",
            "sourceCode": "public PatientBean getPatient(long mid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Patients WHERE MID = ?\");\r\n\t\t\tps.setLong(1, mid);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\t// pdao.logTransaction(type, loggedInMID, secondaryMID, addedInfo)\r\n\t\t\tif (rs.next()) {\r\n\t\t\t\treturn patientLoader.loadSingle(rs);\r\n\t\t\t} else\r\n\t\t\t\treturn null;\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "editPatient",
            "sourceCode": "public void editPatient(PatientBean p) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"UPDATE Patients SET firstName=?,lastName=?,email=?,\"\r\n\t\t\t\t\t+ \"address1=?,address2=?,city=?,state=?,zip1=?, zip2=?,phone1=?,phone2=?,phone3=?,\"\r\n\t\t\t\t\t+ \"eName=?,ePhone1=?,ePhone2=?,ePhone3=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,\"\r\n\t\t\t\t\t+ \"ICState=?,iCZip1=?, iCZip2=?, iCPhone1=?,iCPhone2=?,iCPhone3=?,iCID=?,DateOfBirth=?,\"\r\n\t\t\t\t\t+ \"DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,\"\r\n\t\t\t\t\t+ \"BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, MessageFilter=? WHERE MID=?\");\r\n\t\t\tpatientLoader.loadParameters(ps, p);\r\n\t\t\tps.setLong(40, p.getMID());\r\n\t\t\tps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "checkPatientExists",
            "sourceCode": "public boolean checkPatientExists(long pid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Patients WHERE MID=?\");\r\n\t\t\tps.setLong(1, pid);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn rs.next();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getDeclaredHCPs",
            "sourceCode": "public List<PersonnelBean> getDeclaredHCPs(long pid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tif (pid == 0L) throw new SQLException(\"pid cannot be 0\");\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM DeclaredHCP, Personnel \"\r\n\t\t\t\t\t+ \"WHERE PatientID=? AND Personnel.MID=DeclaredHCP.HCPID\");\r\n\t\t\tps.setLong(1, pid);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn personnelLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "declareHCP",
            "sourceCode": "public boolean declareHCP(long pid, long hcpID) throws DBException, iTrustException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"INSERT INTO DeclaredHCP(PatientID, HCPID) VALUES(?,?)\");\r\n\t\t\tps.setLong(1, pid);\r\n\t\t\tps.setLong(2, hcpID);\r\n\t\t\treturn 1 == ps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\tif (1062 == e.getErrorCode())\r\n\t\t\t\tthrow new iTrustException(\"HCP \" + hcpID + \" has already been declared for patient \" + pid);\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "undeclareHCP",
            "sourceCode": "public boolean undeclareHCP(long pid, long hcpID) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"DELETE FROM DeclaredHCP WHERE PatientID=? AND HCPID=?\");\r\n\t\t\tps.setLong(1, pid);\r\n\t\t\tps.setLong(2, hcpID);\r\n\t\t\treturn 1 == ps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "checkDeclaredHCP",
            "sourceCode": "public boolean checkDeclaredHCP(long pid, long hcpid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM DeclaredHCP WHERE PatientID=? AND HCPID=?\");\r\n\t\t\tps.setLong(1, pid);\r\n\t\t\tps.setLong(2, hcpid);\r\n\t\t\treturn ps.executeQuery().next();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getRepresented",
            "sourceCode": "public List<PatientBean> getRepresented(long pid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT Patients.* FROM Representatives, Patients \"\r\n\t\t\t\t\t+ \"WHERE RepresenterMID=? AND RepresenteeMID=Patients.MID\");\r\n\t\t\tps.setLong(1, pid);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn patientLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getRepresenting",
            "sourceCode": "public List<PatientBean> getRepresenting(long pid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT Patients.* FROM Representatives, Patients \"\r\n\t\t\t\t\t+ \"WHERE RepresenteeMID=? AND RepresenterMID=Patients.MID\");\r\n\t\t\tps.setLong(1, pid);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn patientLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "represents",
            "sourceCode": "public boolean represents(long representer, long representee) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn\r\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n\t\t\tps.setLong(1, representer);\r\n\t\t\tps.setLong(2, representee);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn rs.next();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "addRepresentative",
            "sourceCode": "public boolean addRepresentative(long representer, long representee) throws DBException, iTrustException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn\r\n\t\t\t\t\t.prepareStatement(\"INSERT INTO Representatives(RepresenterMID,RepresenteeMID) VALUES (?,?)\");\r\n\t\t\tps.setLong(1, representer);\r\n\t\t\tps.setLong(2, representee);\r\n\t\t\treturn 1 == ps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\tif (1062 == e.getErrorCode())\r\n\t\t\t\tthrow new iTrustException(\"Patient \" + representer + \" already represents patient \"\r\n\t\t\t\t\t\t+ representee);\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "removeRepresentative",
            "sourceCode": "public boolean removeRepresentative(long representer, long representee) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn\r\n\t\t\t\t\t.prepareStatement(\"DELETE FROM Representatives WHERE RepresenterMID=? AND RepresenteeMID=?\");\r\n\t\t\tps.setLong(1, representer);\r\n\t\t\tps.setLong(2, representee);\r\n\t\t\treturn 1 == ps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getDiagnoses",
            "sourceCode": "public List<DiagnosisBean> getDiagnoses(long pid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tif (pid == 0L) throw new SQLException(\"pid cannot be 0\");\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM OVDiagnosis ovd, OfficeVisits ov, ICDCodes icd \"\r\n\t\t\t\t\t+ \"WHERE ovd.VisitID=ov.ID and icd.Code=ovd.ICDCode and ov.PatientID=? \"\r\n\t\t\t\t\t+ \"ORDER BY ov.visitDate DESC\");\r\n\t\t\tps.setLong(1, pid);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn diagnosisLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getProcedures",
            "sourceCode": "public List<ProcedureBean> getProcedures(long pid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tif (pid == 0L) throw new SQLException(\"pid cannot be 0\");\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt \"\r\n\t\t\t\t\t+ \"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? \"\r\n\t\t\t\t\t+ \"ORDER BY ov.visitDate desc\");\r\n\t\t\tps.setLong(1, pid);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn procedureLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getImmunizationProcedures",
            "sourceCode": "public List<ProcedureBean> getImmunizationProcedures(long pid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tif (pid == 0L) throw new SQLException(\"pid cannot be 0\");\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"Select * From OVProcedure ovp, OfficeVisits ov, CPTCodes cpt \"\r\n\t\t\t\t\t+ \"Where ovp.VisitID=ov.ID and cpt.code=ovp.cptcode and ov.patientID=? and cpt.attribute='immunization'\"\r\n\t\t\t\t\t+ \"ORDER BY ov.visitDate desc\");\r\n\t\t\tps.setLong(1, pid);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn procedureLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getPrescriptions",
            "sourceCode": "public List<PrescriptionBean> getPrescriptions(long patientID) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tif (patientID == 0L) throw new SQLException(\"pid cannot be 0\");\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \"\r\n\t\t\t\t\t+ \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \"\r\n\t\t\t\t\t+ \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode \"\r\n\t\t\t\t\t+ \"ORDER BY OfficeVisits.visitDate DESC, OVMedication.NDCode ASC;\");\r\n\t\t\tps.setLong(1, patientID);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn prescriptionLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getCurrentPrescriptions",
            "sourceCode": "public List<PrescriptionBean> getCurrentPrescriptions(long patientID) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tif (patientID == 0L) throw new SQLException(\"pid cannot be 0\");\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\t\r\n\t\t\tps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \"\r\n\t\t\t\t\t+ \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \"\r\n\t\t\t\t\t+ \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND \"\r\n\t\t\t\t\t+ \"OVMedication.EndDate >= ?\" + \"ORDER BY OVMedication.ID DESC;\");\r\n\t\t\tps.setLong(1, patientID);\r\n\t\t\tps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(91));\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn prescriptionLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getExpiredPrescriptions",
            "sourceCode": "public List<PrescriptionBean> getExpiredPrescriptions (long patientID) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tif (patientID == 0L) throw new SQLException(\"pid cannot be 0\");\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"Select * From OVMedication,NDCodes,OfficeVisits \"\r\n\t\t\t\t\t+ \"Where OfficeVisits.PatientID = ? AND OVMedication.VisitID = \"\r\n\t\t\t\t\t+ \"OfficeVisits.ID AND NDCodes.Code=OVMedication.NDCode AND \"\r\n\t\t\t\t\t+ \"OVMedication.EndDate < ?\" + \"ORDER BY OVMedication.ID DESC;\");\r\n\t\t\tps.setLong(1, patientID);\r\n\t\t\tps.setDate(2, DateUtil.getSQLdateXDaysAgoFromNow(0));\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn prescriptionLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getAllPatients",
            "sourceCode": "public List<PatientBean> getAllPatients() throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM patients \");\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn patientLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "getRenewalNeedsPatients",
            "sourceCode": "public List<PatientBean> getRenewalNeedsPatients(long hcpMID) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tps = conn.prepareStatement(\"SELECT * FROM ( \" + \r\n\r\n\t\t\t\t\"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication \" + \r\n\t\t\t\t\"Where \" + \r\n\t\t\t\t\r\n\t\t\t\t\"declaredHCP.HCPID = ? AND \" + \r\n\t\t\t\t\"patients.MID = declaredhcp.PatientID AND \" + \r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\"( \" + \r\n\t\t\t\t\"ovdiagnosis.VisitID = officevisits.ID AND officevisits.PatientID = declaredhcp.PatientID \" + \r\n\t\t\t\t\"AND \" + \r\n\t\t\t\t\r\n\t\t\t\t\"((ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) \" + \r\n\t\t\t\t\"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?) \" + \r\n\t\t\t\t\"OR (ovdiagnosis.ICDCode >= ? AND ovdiagnosis.ICDCode < ?)) \" + \r\n\t\t\t\t\") \" + \r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\"UNION ALL \" + \r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\"SELECT DISTINCT patients.* From patients, declaredhcp, ovdiagnosis, officevisits, ovmedication \" + \r\n\t\t\t\t\"Where \" + \r\n\t\t\t\t\r\n\t\t\t\t\"declaredHCP.HCPID = ? AND \" + \r\n\t\t\t\t\"patients.MID = declaredhcp.PatientID AND \" + \r\n\t\t\t\t\r\n\t\t\t\t\"( \" + \r\n\t\t\t\t\"declaredhcp.PatientID = officevisits.PatientID AND officevisits.ID = ovmedication.VisitID \" + \r\n\t\t\t\t\"AND \" + \r\n\t\t\t\t\"ovmedication.EndDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) \" + \r\n\t\t\t\t\") \" + \r\n\t\t\t\t\r\n\t\t\t\t\") AS final \" + \r\n\t\t\t\t\r\n\t\t\t\t\"GROUP BY final.MID HAVING COUNT(*) = 2 \" + \r\n\t\t\t\t\r\n\t\t\t\t\"ORDER BY final.lastname ASC, final.firstname ASC\"); \r\n\t\t\t\r\n\t\t\tps.setLong(1, hcpMID);\r\n\t\t\t\r\n\t\t\tps.setFloat(2, 250.0f);\r\n\t\t\tps.setFloat(3, 251.0f);\r\n\t\t\t\t\r\n\t\t\tps.setFloat(4, 493.0f);\r\n\t\t\tps.setFloat(5, 494.0f);\r\n\t\t\t\r\n\t\t\tps.setFloat(6, 390.0f);\r\n\t\t\tps.setFloat(7, 460.99f);\r\n\r\n\t\t\tps.setLong(8, hcpMID);\r\n\t\t\t\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn patientLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "PatientDAO",
            "name": "searchForPatientsWithName",
            "sourceCode": "public List<PatientBean> searchForPatientsWithName(String first, String last) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\t\r\n\t\tif (first.equals(\"%\") && last.equals(\"%\")) return new Vector<PatientBean>();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\t\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM patients WHERE firstName LIKE ? AND lastName LIKE ?\");\r\n\t\t\tps.setString(1, first);\r\n\t\t\tps.setString(2, last);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn patientLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        }
    ]
}