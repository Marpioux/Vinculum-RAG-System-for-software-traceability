{
    "AdverseEventsData": [
        {
            "parentClass": "AdverseEventsData",
            "name": "setAdverseEventsList",
            "sourceCode": "public void setAdverseEventsList(List<AdverseEventBean> adEvents, String name)\r\n    {\r\n    \tadverseEvents = adEvents;\r\n    \tthis.codeName = name;\r\n    }"
        },
        {
            "parentClass": "AdverseEventsData",
            "name": "produceDataset",
            "sourceCode": "@SuppressWarnings(\"unchecked\")\r\n\tpublic Object produceDataset(Map params) throws DatasetProduceException {\r\n    \t// The DefaultCategoryDataset is used for bar charts.\r\n    \t// This dataset class may change based on the type of chart you wish to produce.\r\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset(){\r\n\t\t\t/**\r\n\t\t\t * The generated serializable ID.\r\n\t\t\t */\r\n\t\t\tprivate static final long serialVersionUID = -8238489914590553747L;\r\n\r\n\t\t\t/**\r\n\t\t\t * @see java.lang.Object#finalize()\r\n\t\t\t */\r\n\t\t\tprotected void finalize() throws Throwable {\r\n\t\t\t\tsuper.finalize();\r\n\t\t\t}\r\n        };\r\n        \r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\r\n        // For each Adverse Event in the list,\r\n        // parse the string repreentation of the report date\r\n        // to a Java Date object. Then, get the month of the\r\n        // Date object and increment the value count for that month.\r\n        for(AdverseEventBean event : adverseEvents)\r\n        {\r\n        \tCalendar cal = Calendar.getInstance();\r\n        \ttry {\r\n\t\t\t\tcal.setTime(sdf.parse(event.getDate()));\r\n\t\t\t} catch (ParseException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t\tthrow new DatasetProduceException(e.getMessage());\r\n\t\t\t}\r\n        \tint monthOfReport = cal.get(Calendar.MONTH);\r\n        \tvalues[monthOfReport]++;\r\n        }\r\n        \r\n        // For each month, add the monthly values to the dataset for\r\n        // producing the chart.\r\n        for(int i = 0; i < 12; i++)\r\n        {\r\n        \t// values[i] represents the number of adverse events for month i\r\n        \t// codeName represents the given prescription/immunization being analyzed\r\n        \t// month[i] is the static array of month names, to be used as labels on the chart\r\n        \tdataset.addValue(values[i],codeName,months[i]);\r\n        }\r\n          \r\n        return dataset;\r\n    }"
        },
        {
            "parentClass": "AdverseEventsData",
            "name": "hasExpired",
            "sourceCode": "@SuppressWarnings(\"unchecked\")\r\n\tpublic boolean hasExpired(Map params, Date since) {\t\t\r\n\t\treturn (System.currentTimeMillis() - since.getTime())  > 5000;\r\n\t}"
        },
        {
            "parentClass": "AdverseEventsData",
            "name": "getProducerId",
            "sourceCode": "public String getProducerId() {\r\n\t\treturn \"AdverseEventsData DatasetProducer\";\r\n\t}"
        },
        {
            "parentClass": "AdverseEventsData",
            "name": "generateLink",
            "sourceCode": "public String generateLink(Object data, int series, Object category) {\r\n        return months[series];\r\n    }"
        },
        {
            "parentClass": "noname",
            "name": "finalize",
            "sourceCode": "protected void finalize() throws Throwable {\r\n\t\t\t\tsuper.finalize();\r\n\t\t\t}"
        },
        {
            "parentClass": "AdverseEventsData",
            "name": "generateToolTip",
            "sourceCode": "public String generateToolTip(CategoryDataset arg0, int series, int arg2) {\r\n\t\treturn months[series];\r\n\t}"
        }
    ]
}