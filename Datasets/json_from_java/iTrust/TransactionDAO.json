{
    "TransactionDAO": [
        {
            "parentClass": "TransactionDAO",
            "name": "TransactionDAO",
            "sourceCode": "public TransactionDAO(DAOFactory factory) {\r\n\t\tthis.factory = factory;\r\n\t}"
        },
        {
            "parentClass": "TransactionDAO",
            "name": "getAllTransactions",
            "sourceCode": "public List<TransactionBean> getAllTransactions() throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM TransactionLog ORDER BY timeLogged DESC\");\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn loader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "TransactionDAO",
            "name": "logTransaction",
            "sourceCode": "public void logTransaction(TransactionType type, long loggedInMID) throws DBException {\r\n\t\tlogTransaction(type, loggedInMID, 0L, \"\");\r\n\t}"
        },
        {
            "parentClass": "TransactionDAO",
            "name": "logTransaction",
            "sourceCode": "public void logTransaction(TransactionType type, long loggedInMID) throws DBException {\r\n\t\tlogTransaction(type, loggedInMID, 0L, \"\");\r\n\t}"
        },
        {
            "parentClass": "TransactionDAO",
            "name": "getAllRecordAccesses",
            "sourceCode": "public List<TransactionBean> getAllRecordAccesses(long patientID, boolean getByRole) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn\r\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM TransactionLog WHERE secondaryMID=? AND transactionCode \"\r\n\t\t\t\t\t\t\t+ \"IN(\" + TransactionType.patientViewableStr + \") ORDER BY timeLogged DESC\");\r\n\t\t\tps.setLong(1, patientID);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tList<TransactionBean> tbList = loader.loadList(rs);\r\n\r\n\t\t\ttbList = addAndSortRoles(tbList, patientID, getByRole);\r\n\t\t\t\r\n\t\t\treturn tbList;\r\n\t\t\t\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "TransactionDAO",
            "name": "getTransactionsFor",
            "sourceCode": "public List<TransactionBean> getTransactionsFor(String loggedInRole, String secondaryRole, Date begin, Date end, TransactionType type) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(loggedInRole.compareTo(\"any\") == 0) {\r\n\t\t\t\tloggedInRole = \"*\";\r\n\t\t\t}\r\n\t\t\tif(secondaryRole.compareTo(\"any\") == 0) {\r\n\t\t\t\tsecondaryRole = \"*\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tps = conn\r\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM TransactionLog, Users  WHERE (MID=loggedInMID OR MID=secondaryMID) AND (Role=? OR Role=?) \"\r\n\t\t\t\t\t\t\t+ \" AND transactionCode=? AND timeLogged >= ? AND timeLogged <= ?\" + \" ORDER BY timeLogged DESC\");\r\n\t\t\tps.setString(1, loggedInRole);\r\n\t\t\tps.setString(2, secondaryRole);\r\n\t\t\tps.setInt(3, type.getCode());\r\n\t\t\tps.setDate(4, begin);\r\n\t\t\tps.setDate(5, end);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tList<TransactionBean> tbList = loader.loadList(rs);\r\n\r\n\t\t\t//tbList = addAndSortRoles(tbList, patientID, getByRole);\r\n\t\t\t\r\n\t\t\treturn tbList;\r\n\t\t\t\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "TransactionDAO",
            "name": "getRecordAccesses",
            "sourceCode": "public List<TransactionBean> getRecordAccesses(long patientID, java.util.Date lower, java.util.Date upper, boolean getByRole) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn\r\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM TransactionLog WHERE secondaryMID=? AND transactionCode IN (\"\r\n\t\t\t\t\t\t\t+ TransactionType.patientViewableStr\r\n\t\t\t\t\t\t\t+ \") \"\r\n\t\t\t\t\t\t\t+ \"AND timeLogged >= ? AND timeLogged <= ? ORDER BY timeLogged DESC\");\r\n\t\t\tps.setLong(1, patientID);\r\n\t\t\tps.setTimestamp(2, new Timestamp(lower.getTime()));\r\n\t\t\t// add 1 day's worth to include the upper\r\n\t\t\tps.setTimestamp(3, new Timestamp(upper.getTime() + 1000L * 60L * 60 * 24L));\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tList<TransactionBean> tbList = loader.loadList(rs);\r\n\r\n\t\t\ttbList = addAndSortRoles(tbList, patientID, getByRole);\r\n\t\t\t\r\n\t\t\treturn tbList;\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "TransactionDAO",
            "name": "getOperationalProfile",
            "sourceCode": "public OperationalProfile getOperationalProfile() throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT TransactionCode, count(transactionID) as TotalCount, \"\r\n\t\t\t\t\t+ \"count(if(loggedInMID<9000000000, transactionID, null)) as PatientCount, \"\r\n\t\t\t\t\t+ \"count(if(loggedInMID>=9000000000, transactionID, null)) as PersonnelCount \"\r\n\t\t\t\t\t+ \"FROM TransactionLog GROUP BY transactionCode ORDER BY transactionCode ASC\");\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn operationalProfileLoader.loadSingle(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "TransactionDAO",
            "name": "addAndSortRoles",
            "sourceCode": "private List<TransactionBean> addAndSortRoles(List<TransactionBean> tbList, long patientID, boolean sortByRole) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\t\r\n\t\t\tfor(TransactionBean t : tbList) {\r\n\t\t\t\t\r\n\t\t\t\tps = conn\r\n\t\t\t\t\t\t.prepareStatement(\"SELECT Role FROM Users WHERE MID=?\");\r\n\t\t\t\tps.setLong(1, t.getLoggedInMID());\r\n\t\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\t\tString role = \"\";\r\n\t\t\t\tif(rs.next())\r\n\t\t\t\t\trole = rs.getString(\"Role\");\r\n\t\t\t\tif(role.equals(\"er\"))\r\n\t\t\t\t\trole = \"Emergency Responder\";\r\n\t\t\t\telse if(role.equals(\"uap\"))\r\n\t\t\t\t\trole = \"UAP\";\r\n\t\t\t\telse if(role.equals(\"hcp\")) {\r\n\t\t\t\t\trole = \"LHCP\";\r\n\t\t\t\t\tps = conn\r\n\t\t\t\t\t\t\t.prepareStatement(\"SELECT PatientID FROM DeclaredHCP WHERE HCPID=?\");\r\n\t\t\t\t\tps.setLong(1, t.getLoggedInMID());\r\n\t\t\t\t\tResultSet rs2 = ps.executeQuery();\r\n\t\t\t\t\twhile(rs2.next()) {\r\n\t\t\t\t\t\tif (rs2.getLong(\"PatientID\") == patientID){\r\n\t\t\t\t\t\t\trole = \"DLHCP\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if(role.equals(\"patient\")){\r\n\t\t\t\t\trole = \"Patient\";\r\n\t\t\t\t\tps = conn\r\n\t\t\t\t\t\t\t.prepareStatement(\"SELECT representeeMID FROM Representatives WHERE representerMID=?\");\r\n\t\t\t\t\tps.setLong(1, t.getLoggedInMID());\r\n\t\t\t\t\tResultSet rs2 = ps.executeQuery();\r\n\t\t\t\t\twhile(rs2.next()) {\r\n\t\t\t\t\t\tif (rs2.getLong(\"representeeMID\") == patientID){\r\n\t\t\t\t\t\t\trole = \"Personal Health Representative\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\tt.setRole(role);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(sortByRole){\r\n\t\t\t\tTransactionBean[] array = new TransactionBean[tbList.size()];\r\n\t\t\t\tarray[0] = tbList.get(0);\r\n\t\t\t\tTransactionBean t;\r\n\t\t\t\tfor(int i = 1; i < tbList.size(); i++) {\r\n\t\t\t\t\tt = tbList.get(i);\r\n\t\t\t\t\tString role = t.getRole();\r\n\t\t\t\t\tint j = 0;\r\n\t\t\t\t\twhile(array[j] != null && role.compareToIgnoreCase(array[j].getRole()) >= 0)\r\n\t\t\t\t\t\tj++;\r\n\t\t\t\t\tfor(int k = i; k > j; k--) {\r\n\t\t\t\t\t\tarray[k] = array[k-1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tarray[j] = t;\r\n\t\t\t\t}\r\n\t\t\t\tint size = tbList.size();\r\n\t\t\t\tfor(int i = 0; i < size; i++)\r\n\t\t\t\t\ttbList.set(i, array[i]);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t\t\treturn tbList;\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        }
    ]
}