{
    "AuthDAO": [
        {
            "parentClass": "AuthDAO",
            "name": "AuthDAO",
            "sourceCode": "public AuthDAO(DAOFactory factory) {\r\n\t\tthis.factory = factory;\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "addUser",
            "sourceCode": "public String addUser(Long mid, Role role, String password) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement pstmt = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tpstmt = conn\r\n\t\t\t\t\t.prepareStatement(\"INSERT INTO Users (MID, PASSWORD, ROLE, sQuestion, sAnswer) VALUES (?,?,?,?,?)\");\r\n\t\t\tpstmt.setLong(1, mid);\r\n\t\t\tpstmt.setString(2, password);\r\n\t\t\tpstmt.setString(3, role.toString());\r\n\t\t\tpstmt.setString(4, \"Enter the random password given in your account email\");\r\n\t\t\tString pwd = RandomPassword.getRandomPassword();\r\n\t\t\tpstmt.setString(5, pwd);\r\n\t\t\tpstmt.executeUpdate();\r\n\t\t\treturn pwd;\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, pstmt);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "setSecurityQuestionAnswer",
            "sourceCode": "public void setSecurityQuestionAnswer(String question, String answer, long mid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement pstmt = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tpstmt = conn.prepareStatement(\"UPDATE Users SET sQuestion = ?, sAnswer = ? WHERE MID = ?\");\r\n\t\t\tpstmt.setString(1, question);\r\n\t\t\tpstmt.setString(2, answer);\r\n\t\t\tpstmt.setLong(3, mid);\r\n\t\t\tpstmt.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, pstmt);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "getUserName",
            "sourceCode": "public String getUserName(long mid) throws DBException, iTrustException {\r\n\t\tRole role = getUserRole(mid);\r\n\t\tswitch (role) {\r\n\t\t\tcase HCP:\r\n\t\t\tcase PHA:\r\n\t\t\tcase ADMIN:\r\n\t\t\tcase UAP:\r\n\t\t\tcase ER:\r\n\t\t\t\treturn factory.getPersonnelDAO().getName(mid);\r\n\t\t\tcase PATIENT:\r\n\t\t\t\treturn factory.getPatientDAO().getName(mid);\r\n\t\t\tcase TESTER:\r\n\t\t\t\treturn String.valueOf(mid);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new iTrustException(\"Role \" + role + \" not supported\");\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "getUserRole",
            "sourceCode": "public Role getUserRole(long mid) throws DBException, iTrustException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement pstmt = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tpstmt = conn.prepareStatement(\"SELECT role FROM Users WHERE MID=?\");\r\n\t\t\tpstmt.setLong(1, mid);\r\n\t\t\tResultSet rs;\r\n\t\t\trs = pstmt.executeQuery();\r\n\t\t\tif (rs.next()) {\r\n\t\t\t\treturn Role.parse(rs.getString(\"role\"));\r\n\t\t\t} else {\r\n\t\t\t\tthrow new iTrustException(\"User does not exist\");\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, pstmt);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "resetPassword",
            "sourceCode": "public void resetPassword(long mid, String password) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"UPDATE Users SET password=? WHERE MID=?\");\r\n\t\t\tps.setString(1, password);\r\n\t\t\tps.setLong(2, mid);\r\n\t\t\tps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "getSecurityQuestion",
            "sourceCode": "public String getSecurityQuestion(long mid) throws iTrustException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT sQuestion FROM Users WHERE MID=?\");\r\n\t\t\tps.setLong(1, mid);\r\n\t\t\tResultSet r = ps.executeQuery();\r\n\t\t\tif (r.next())\r\n\t\t\t\treturn r.getString(\"sQuestion\");\r\n\t\t\telse\r\n\t\t\t\tthrow new iTrustException(\"No security question set for MID: \" + mid);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "getSecurityAnswer",
            "sourceCode": "public String getSecurityAnswer(long mid) throws iTrustException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT sAnswer FROM Users WHERE MID=?\");\r\n\t\t\tps.setLong(1, mid);\r\n\t\t\tResultSet r = ps.executeQuery();\r\n\t\t\tif (r.next())\r\n\t\t\t\treturn r.getString(\"sAnswer\");\r\n\t\t\telse\r\n\t\t\t\tthrow new iTrustException(\"No security answer set for MID \" + mid);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "recordLoginFailure",
            "sourceCode": "public void recordLoginFailure(String ipAddr) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn\r\n\t\t\t\t\t.prepareStatement(\"UPDATE LoginFailures SET FailureCount=FailureCount+1, lastFailure=CURRENT_TIMESTAMP WHERE IPAddress=?\");\r\n\t\t\t\t\t//.prepareStatement(\"INSERT INTO LoginFailures VALUES(?,?,?)\");\r\n\t\t\tps.setString(1, ipAddr);\r\n\t\t\t//ps.setInt(2, failures);\r\n\t\t\t//ps.setDate(3, Calendar.getInstance().getTime());\r\n\t\t\tint numUpdated = ps.executeUpdate();\r\n\t\t\tif (numUpdated == 0) // if there wasn't an empty row to begin with\r\n\t\t\t\tinsertLoginFailureRow(ipAddr, 1, conn);// now they have a row AND a strike against\r\n\t\t\t// 'em\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "recordResetPasswordFailure",
            "sourceCode": "public void recordResetPasswordFailure(String ipAddr) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn\r\n\t\t\t\t\t.prepareStatement(\"UPDATE ResetPasswordFailures SET failurecount=failurecount+1 WHERE ipaddress=?\");\r\n\t\t\tps.setString(1, ipAddr);\r\n\t\t\tint numUpdated = ps.executeUpdate();\r\n\t\t\tif (numUpdated == 0) // if there wasn't an empty row to begin with\r\n\t\t\t\tinsertResetPasswordRow(ipAddr, 1, conn);// now they have a row AND a strike against\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "getResetPasswordFailures",
            "sourceCode": "public int getResetPasswordFailures(String ipAddr) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM ResetPasswordFailures WHERE IPADDRESS=?\");\r\n\t\t\tps.setString(1, ipAddr);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tif (rs.next()) {\r\n\t\t\t\t// if we're more than X minutes out, clear the failure count\r\n\t\t\t\tif (System.currentTimeMillis() - rs.getTimestamp(\"lastFailure\").getTime() > LOGIN_TIMEOUT) {\r\n\t\t\t\t\tupdateResetFailuresToZero(ipAddr, conn);\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn rs.getInt(\"failureCount\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tinsertResetPasswordRow(ipAddr, 0, conn);\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "getLoginFailures",
            "sourceCode": "public int getLoginFailures(String ipAddr) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM LoginFailures WHERE IPADDRESS=?\");\r\n\t\t\tps.setString(1, ipAddr);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tif (rs.next()) {\r\n\t\t\t\t// if we're more than X minutes out, clear the failure count\r\n\t\t\t\tif (System.currentTimeMillis() - rs.getTimestamp(\"lastFailure\").getTime() > LOGIN_TIMEOUT) {\r\n\t\t\t\t\tupdateFailuresToZero(ipAddr, conn);\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn rs.getInt(\"failureCount\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tinsertLoginFailureRow(ipAddr, 0, conn);\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "insertLoginFailureRow",
            "sourceCode": "private void insertLoginFailureRow(String ipAddr, int failureCount, Connection conn) throws DBException,\r\n\t\t\tSQLException {\r\n\t\tPreparedStatement ps = conn\r\n\t\t\t\t.prepareStatement(\"INSERT INTO LoginFailures(IPAddress, failureCount) VALUES(?,?)\");\r\n\t\tps.setString(1, ipAddr);\r\n\t\tps.setInt(2, failureCount);\r\n\t\tps.executeUpdate();\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "insertResetPasswordRow",
            "sourceCode": "private void insertResetPasswordRow(String ipAddr, int failureCount, Connection conn) throws DBException,\r\n\t\t\tSQLException {\r\n\t\tPreparedStatement ps = conn\r\n\t\t\t\t.prepareStatement(\"INSERT INTO ResetPasswordFailures(IPAddress, failureCount) VALUES(?,?)\");\r\n\t\tps.setString(1, ipAddr);\r\n\t\tps.setInt(2, failureCount);\r\n\t\tps.executeUpdate();\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "updateFailuresToZero",
            "sourceCode": "private void updateFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {\r\n\t\tPreparedStatement ps = conn\r\n\t\t\t\t.prepareStatement(\"UPDATE LoginFailures SET failureCount=0 WHERE IPAddress=?\");\r\n\t\tps.setString(1, ipAddr);\r\n\t\tps.executeUpdate();\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "resetLoginFailuresToZero",
            "sourceCode": "public void resetLoginFailuresToZero(String ipAddr) throws DBException, SQLException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry{\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn\r\n\t\t\t\t\t.prepareStatement(\"UPDATE LoginFailures SET failureCount=0 WHERE IPAddress=?\");\r\n\t\t\tps.setString(1, ipAddr);\r\n\t\t\tps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "updateResetFailuresToZero",
            "sourceCode": "private void updateResetFailuresToZero(String ipAddr, Connection conn) throws DBException, SQLException {\r\n\t\tPreparedStatement ps = conn\r\n\t\t\t\t.prepareStatement(\"UPDATE ResetPasswordFailures SET failureCount=0 WHERE IPAddress=?\");\r\n\t\tps.setString(1, ipAddr);\r\n\t\tps.executeUpdate();\r\n\t}"
        },
        {
            "parentClass": "AuthDAO",
            "name": "checkUserExists",
            "sourceCode": "public boolean checkUserExists(long mid) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Users WHERE MID=?\");\r\n\t\t\tps.setLong(1, mid);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn rs.next();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        }
    ]
}