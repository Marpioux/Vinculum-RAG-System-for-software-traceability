{
    "HospitalsDAO": [
        {
            "parentClass": "HospitalsDAO",
            "name": "HospitalsDAO",
            "sourceCode": "public HospitalsDAO(DAOFactory factory) {\r\n\t\tthis.factory = factory;\r\n\t}"
        },
        {
            "parentClass": "HospitalsDAO",
            "name": "getAllHospitals",
            "sourceCode": "public List<HospitalBean> getAllHospitals() throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Hospitals ORDER BY HospitalName\");\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\treturn hospitalLoader.loadList(rs);\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "HospitalsDAO",
            "name": "getHospital",
            "sourceCode": "public HospitalBean getHospital(String id) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"SELECT * FROM Hospitals WHERE HospitalID = ?\");\r\n\t\t\tps.setString(1, id);\r\n\t\t\tResultSet rs = ps.executeQuery();\r\n\t\t\tif (rs.next())\r\n\t\t\t\treturn hospitalLoader.loadSingle(rs);\r\n\t\t\treturn null;\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "HospitalsDAO",
            "name": "addHospital",
            "sourceCode": "public boolean addHospital(HospitalBean hosp) throws DBException, iTrustException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"INSERT INTO Hospitals (HospitalID, HospitalName) \" + \"VALUES (?,?)\");\r\n\t\t\tps.setString(1, hosp.getHospitalID());\r\n\t\t\tps.setString(2, hosp.getHospitalName());\r\n\t\t\treturn (1 == ps.executeUpdate());\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tif (1062 == e.getErrorCode())\r\n\t\t\t\tthrow new iTrustException(\"Error: Hospital already exists.\");\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "HospitalsDAO",
            "name": "updateHospital",
            "sourceCode": "public int updateHospital(HospitalBean hosp) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"UPDATE Hospitals SET HospitalName = ? \" + \"WHERE HospitalID = ?\");\r\n\t\t\tps.setString(1, hosp.getHospitalName());\r\n\t\t\tps.setString(2, hosp.getHospitalID());\r\n\t\t\treturn ps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "HospitalsDAO",
            "name": "assignHospital",
            "sourceCode": "public boolean assignHospital(long hcpID, String hospitalID) throws DBException, iTrustException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"INSERT INTO HCPAssignedHos (HCPID, HosID) VALUES (?,?)\");\r\n\t\t\tps.setLong(1, hcpID);\r\n\t\t\tps.setString(2, hospitalID);\r\n\t\t\treturn (1 == ps.executeUpdate());\r\n\t\t} catch (SQLException e) {\r\n\t\t\tif (1062 == e.getErrorCode())\r\n\t\t\t\tthrow new iTrustException(\"HCP \" + hcpID + \" already assigned to hospital \" + hospitalID);\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "HospitalsDAO",
            "name": "removeHospitalAssignment",
            "sourceCode": "public boolean removeHospitalAssignment(long hcpID, String hospitalID) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"DELETE FROM HCPAssignedHos WHERE HCPID = ? AND HosID = ?\");\r\n\t\t\tps.setLong(1, hcpID);\r\n\t\t\tps.setString(2, hospitalID);\r\n\t\t\treturn (1 == ps.executeUpdate());\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        },
        {
            "parentClass": "HospitalsDAO",
            "name": "removeAllHospitalAssignmentsFrom",
            "sourceCode": "public int removeAllHospitalAssignmentsFrom(long hcpID) throws DBException {\r\n\t\tConnection conn = null;\r\n\t\tPreparedStatement ps = null;\r\n\t\ttry {\r\n\t\t\tconn = factory.getConnection();\r\n\t\t\tps = conn.prepareStatement(\"DELETE FROM HCPAssignedHos WHERE HCPID = ?\");\r\n\t\t\tps.setLong(1, hcpID);\r\n\t\t\treturn ps.executeUpdate();\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tthrow new DBException(e);\r\n\t\t} finally {\r\n\t\t\tDBUtil.closeConnection(conn, ps);\r\n\t\t}\r\n\t}"
        }
    ]
}