{
    "MascheraVisualizzazioneConto": [
        {
            "parentClass": "MascheraVisualizzazioneConto",
            "name": "MascheraVisualizzazioneConto",
            "sourceCode": "public MascheraVisualizzazioneConto(String t0, String t1, String t2, String t3, \n   \t\t\t\t\t\t\t\t\t\tString t4, int tipo)\n   \t{\n      \tsuper(\"Visualizzazione del conto\");\n      \tchiusura = tipo;\n      \tsetup(t0,t1,t2,t3,t4);\n   \t  \treadConto();\t\n      \tinit();\n      \tpack();\n   \t}"
        },
        {
            "parentClass": "MascheraVisualizzazioneConto",
            "name": "setup",
            "sourceCode": "void setup(String t0, String t1, String t2, String t3, String t4)\n   {\n      for (int i=0; i<conto.testo.length-1; i++)\n\t\t\tconto.testo[i].setText(\"\");\n\t  this.setFont(ConfigurazioneSistema.font_base);\n      etichetta = new Label(\"Intestazione\");\n      etichetta.setFont(ConfigurazioneSistema.font_titolo);\n      label1 = new Label(\"Stanza numero\");\n      label2 = new Label(\"Cognome\");\n      label3 = new Label(\"Nome\");\n      label4 = new Label(\"Lista stanze\");\n      Stampa = new Button(\"  Stampa  \");\n      OK = new Button(\" Indietro \");\n      Partenza = new Button(\" Chiudi conto \");\n      testo1 = new TextField(\"\",4);\n      testo2 = new TextField(\"\",20);\n      testo3 = new TextField(\"\",20);\n      testo4 = new TextField(\"\",30);\n      testo1.setText(t0+t3);\n      testo2.setText(t1);\n      testo3.setText(t2);\n      testo4.setText(t4);\n      testo1.setEditable(false);\n      testo2.setEditable(false);\n      testo3.setEditable(false);\n      testo4.setEditable(false);\n      \n      text = new TextArea(25,50);\n      text.setEditable(false);\n      text.setFont(ConfigurazioneSistema.font_allineato);\n\n      panel1=new Panel();\n      panel1.setLayout(gridbag);\n      Utils.constrain(panel1,etichetta,0,0,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,0,0,5,0);   \n      Utils.constrain(panel1,label1,0,1,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,0.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,testo1,1,1,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,label2,0,2,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,0.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,testo2,1,2,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,label3,2,2,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,testo3,3,2,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,label4,0,3,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);   \n      Utils.constrain(panel1,testo4,1,3,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,5,0,5,0);                  \n\n\n      panel2=new Panel();\n      panel2.setLayout(gridbag);\n      Utils.constrain(panel2,text,0,0,4,4,GridBagConstraints.BOTH,\n                     GridBagConstraints.NORTHWEST,1.0,1.0,5,0,5,0);   \n\n\n      panel3=new Panel();\n      panel3.setLayout(gridbag);\n      Utils.constrain(panel3,Stampa,0,0,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.SOUTHEAST,0,0.0,5,5,5,5);   \n      Utils.constrain(panel3,Partenza,1,0,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.CENTER,0,0.0,5,5,5,5);   \n      Utils.constrain(panel3,OK,2,0,1,1,GridBagConstraints.NONE,\n                     GridBagConstraints.SOUTHWEST,0.0,0.0,5,5,5,5);   \n\n      this.setLayout(gridbag);\n      Utils.constrain(this,panel1,0,0,4,3,GridBagConstraints.HORIZONTAL,\n                     GridBagConstraints.NORTHWEST,1.0,0.0,10,10,10,10);   \n      Utils.constrain(this,panel2,0,3,4,6,GridBagConstraints.BOTH,\n                     GridBagConstraints.NORTHWEST,1.0,1.0,10,10,10,10);   \n      Utils.constrain(this,panel3,0,9,4,1,GridBagConstraints.HORIZONTAL,\n                     GridBagConstraints.SOUTHWEST,1.0,0.0,10,10,10,10);   \n\n   }"
        },
        {
            "parentClass": "MascheraVisualizzazioneConto",
            "name": "init",
            "sourceCode": "public void init()\n   {\n      OK.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n            dispose();\n\t      \tconto.setEnabled(true);\n         }\n      });\n      \n      Stampa.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tstartStampa();\n         }\n      });\n      \n      Partenza.addActionListener(new ActionListener()\n      {\n         public void actionPerformed(ActionEvent e)\n         {\n\t\t\tstartChiudiConto();\t         \t\n         \t\n         }\n      });\n   \n   }"
        },
        {
            "parentClass": "MascheraVisualizzazioneConto",
            "name": "readConto",
            "sourceCode": "void readConto()\n\t{\n\t\tFrame msg;\n\t\tDataInputStream inStream;\n\t\ttry\n\t\t{\n\t\t\tinStream = new DataInputStream(new FileInputStream(\"conto.abg\"));\n\t\t}\n\t\tcatch (IOException ex)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Errore nell'apertura del file del conto! \");\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tString newText=\"\";\n\t\t\tString line;\n\t\t\twhile((line=inStream.readLine())!=null)\n\t\t\t\tnewText=newText+line+\"\\n\";\n\t\t\ttext.setText(newText);\n\t\t\tinStream.close();\n\t\t}\n\t\tcatch (IOException ex)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Errore durante la lettura del file del conto! \");\n\t\t}\t\t\n\t}"
        },
        {
            "parentClass": "MascheraVisualizzazioneConto",
            "name": "startChiudiConto",
            "sourceCode": "void startChiudiConto()\n\t{\n\t\tFrame msg;\n\t\tAskChiudiConto ask;\n\n\t\tDate today = new Date();\n\t\tDate fine_effettiva;\n\t\tif (conto.checkboxes[3].getState())\n\t\t\tfine_effettiva = conto.fine_sogg_anticipato;\n\t\telse\n\t\t\tfine_effettiva = conto.data_fine_magg;\n\t\tif ( Utils.data1MinoreData2( fine_effettiva, today ) )\n\t\t\task = new AskChiudiConto(this);\n\t\telse\n\t\t{\n\t\t\tmsg = new AvvisoDialog(this, \" Non e' possibile chiudere il conto fino al giorno della partenza! \");\n\t\t}\n\t}"
        },
        {
            "parentClass": "MascheraVisualizzazioneConto",
            "name": "startChiusura",
            "sourceCode": "void startChiusura()\n\t{\n\t\tswitch (chiusura)\n\t\t{\n\t\t\tcase 1: chiudiStanza(testo1.getText(), conto.date_inizio[0], conto.date_fine[0],1); break;\n\t\t\tcase 2: chiudiSingolo(); break;\n\t\t\tcase 3: chiudiComitiva(); break;\t\n\t\t}\n\t}"
        },
        {
            "parentClass": "MascheraVisualizzazioneConto",
            "name": "chiudiStanza",
            "sourceCode": "void chiudiStanza(String stanza, Date data_inizio, Date data_fine,int caller)\n\t{\n\t\tlong id;\n\t\tSoggiornante sogg;\n\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(stanza, false);\n\t\tid = (L_sogg.getSoggiornante(1)).getIdPrenotazione();\n\t\tListaDisponibilita L_disp = (Principale.db).elencoDisponibilita();\n\t\tFrame msg;\n\n\t\tif (L_disp == null)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella lettura delle disponibilita'! \");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// cancellazione della prenotazione \n\t\t(Principale.db).delPrenotazione(id);\n\n\t\t// spostamento nello storico e cancellazione dei soggiornanti\n\t\tfor(int i = 1; i <= L_sogg.length(); i++)\n\t\t{\t\n\t\t\tsogg = L_sogg.getSoggiornante(i);\n\t\t\tif ( !(sogg.getCognome()).equals(\"\") &&\n\t\t\t\t !(sogg.getNome()).equals(\"\") &&\n\t\t\t\t !(sogg.getIndirizzo()).equals(\"\") &&\n\t\t\t\t !(sogg.getComune()).equals(\"\") &&\n\t\t\t\t !(sogg.getCitta()).equals(\"\") &&\n\t\t\t\t !(sogg.getNumTel()).equals(\"\") &&\n\t\t\t\t !(sogg.getCap()).equals(\"\") &&\n\t\t\t\t !(sogg.getNumDoc()).equals(\"\") )\n\t\t\t{\n\t\t\t\tint j =\t(Principale.db).writeStorico(sogg.toCliente());\n\t\t\t\tif (j != DataBase.OK)\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Problemi con il database nella scrittura nello storico! \");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t(Principale.db).delSoggiornante(stanza,sogg.getIdSoggiornante());\n\t\t}\n\t\t// cancellazione degli addebiti\n\t\t(Principale.db).delAddebito(stanza);\n\t\t\n\t\t// cancellazione dei supp e rid dai beni/servizi\n\t\t(Principale.db).delSuppRid(stanza);\n\t\t\n\t\t// cancellazione delle telefonate\n\t\t(Principale.db).delTelefonate(stanza);\n\t\t\n\t\t// aggiornamento delle disponibilita: questo devono essere fatto affinche'\n\t\t// le informazioni riportate dalla machera di visualizzazione delle disponibilita'\n\t\t// sia coerente\n\t\tif (conto.qualcuno_tramite_agenzia)\n\t\t{\n\t\t\tUtils.aggiornaDisp(L_disp, stanza, data_inizio, data_fine, Flag.DISPONIBILE, Flag.OCCUPATA, true);\n\t\t\tUtils.restoreCommissioni(stanza);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tDisponibilita disp = (Principale.db).readDisponibilita(stanza);\n\t\t\tif (disp != null)\n\t\t\t{\n\t\t\t\tdisp.setDisponibilita(data_inizio, data_fine, Flag.DISPONIBILE, Flag.OCCUPATA);\n\t\t\t\t(Principale.db).changeDisponibilita(disp.getNumStanza(), disp.getDispAnnoCorr(), disp.getDispAnnoProx());\n\t\t\t}\n\t\t}\n\t\tif (caller == 1)\n\t\t\tstartStampa();\n\t}"
        },
        {
            "parentClass": "MascheraVisualizzazioneConto",
            "name": "chiudiSingolo",
            "sourceCode": "void  chiudiSingolo()\n\t{\n\t\tif (conto.checkboxes[3].getState())\n\t\t{\n\t\t\t(Principale.db).anticipaFineSogg(conto.sogg_x_conto_sing.getNumStanza(),\n\t\t\t\t\t\t\t\t\tconto.sogg_x_conto_sing.getIdSoggiornante(),\n\t\t\t\t\t\t\t\t\tconto.fine_sogg_anticipato);\n\t\t}\n\t\t(Principale.db).reversePagato(conto.sogg_x_conto_sing.getNumStanza(),\n\t\t\t\t\t\t\t\t\t  conto.sogg_x_conto_sing.getIdSoggiornante());\n\t}"
        },
        {
            "parentClass": "MascheraVisualizzazioneConto",
            "name": "chiudiComitiva",
            "sourceCode": "void  chiudiComitiva()\n\t{\n\t\tfor (int i=0; i < conto.L_st.length; i++)\n\t\t\tchiudiStanza(conto.L_st[i], conto.date_inizio[i], conto.date_fine[i],2);\n\t\tstartStampa();\n\t}"
        },
        {
            "parentClass": "MascheraVisualizzazioneConto",
            "name": "startStampa",
            "sourceCode": "void startStampa()\n\t{\n\t\tProperties prop = new Properties();\n\t\tToolkit tk = Toolkit.getDefaultToolkit();\n\t\tPrintJob pj = tk.getPrintJob(this,\"Stampa del conto\",prop);\n\t\t\n\t\tif (pj != null)\n\t\t{\n\t\t\tGraphics g = pj.getGraphics();\n\t\t\ttext.printAll(g);\n\t\t\tg.dispose();\n\t\t\tpj.end();\n\t\t}\n\t}"
        }
    ]
}