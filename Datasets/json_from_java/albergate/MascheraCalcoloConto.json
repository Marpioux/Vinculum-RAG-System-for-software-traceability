{
    "MascheraCalcoloConto": [
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "MascheraCalcoloConto",
            "sourceCode": "public MascheraCalcoloConto(Frame parent)\n   \t{\n      super(\"Calcolo del Conto\");\n      padre = parent;\n      padre.setEnabled(false);\n      setupPanels();\n      init();\n      pack();\n   }"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "setupPanels",
            "sourceCode": "void setupPanels()\n   {\n\t  this.setFont(ConfigurazioneSistema.font_base);\n      //Creo i pulsanti\n      Annulla = new Button(\"   Annulla   \");\n      //Annulla.setFont(new Font(\"Courier\", Font.PLAIN, 12));\n      Visualizza = new Button(\"   Calcola   \");\n      //Visualizza.setFont(new Font(\"Courier\", Font.PLAIN, 12));\n\t  Visualizza.setEnabled(false);\n      \n      //Creo le etichette\n      etichetta1 = new Label(\"Selezionare il tipo di conto che si desidera calcolare:\");\n      etichetta1.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta2 = new Label(\"Conto su una stanza:\");\n      etichetta2.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta3 = new Label(\"Conto su un cliente:\");\n      etichetta3.setFont(ConfigurazioneSistema.font_titolo);\n      etichetta4 = new Label(\"Conto su piu' stanze:\");\n      etichetta4.setFont(ConfigurazioneSistema.font_titolo);\n      stanza = new Label(\"Stanza numero\");\n      cognome = new Label(\"Cognome\");\n      nome = new Label(\"Nome\");\n      stanza1 = new Label(\"Stanza\");\n      stanza2 = new Label(\"Stanze Numero\");\n\n      //Creo i TextField e li rendo non editabili\n      testo=new TextField[6];\n      testo[0] = new TextField(\"\", 4);\n      testo[1] = new TextField(\"\", 20);\n      testo[2] = new TextField(\"\", 20);\n      testo[3] = new TextField(\"\", 4);\n      testo[4] = new TextField(\"\", 30);\n      testo[5] = new TextField(\"\",10);\n      for(int i=0;i<6;++i)\n      \ttesto[i].setEditable(false);\n       \n\n      //Creo un Checkbox ad esclusione\n      checkbox_group = new CheckboxGroup();\n      checkboxes = new Checkbox[4];\n      checkboxes[0] = new Checkbox(\" Conto su una stanza\",checkbox_group, false);\n      checkboxes[1] = new Checkbox(\" Conto su un cliente\",checkbox_group, false);\n      checkboxes[2] = new Checkbox(\" Conto su piu'stanze\",checkbox_group, false);\n\t  checkboxes[3] = new Checkbox(\" Partenza anticipata\", false);\t\n      panel=new Panel[5];\n      for(int i=0;i<5;++i)\n         {\n            panel[i]=new Panel();\n            panel[i].setLayout(gridbag);\n         }\n      //Creo il pannello in alto a sinistra\n      Utils.constrain(panel[1], etichetta1, 0, 0, 3, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0); \n      Utils.constrain(panel[1], checkboxes[0], 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0); \n      Utils.constrain(panel[1], checkboxes[1], 0, 2, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n      Utils.constrain(panel[1], checkboxes[2], 0, 3, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n      Utils.constrain(panel[1], checkboxes[3], 0, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n      Utils.constrain(panel[1], testo[5], 1, 4, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);                  \n            \n      //Creo il pannello in alto a destra\n      Utils.constrain(panel[0], Annulla, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.3, 0.0, 20, 0, 5, 20);\n      Utils.constrain(panel[0], Visualizza, 0, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.3, 0.0, 5, 0, 0, 20);\n      \n\n      //Creo il pannello conto su una stanza \n      Utils.constrain(panel[2], etichetta2, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[2], stanza, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[2], testo[0], 1, 1, 1, 1, GridBagConstraints.NONE,\n                      GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n\n      //Creo il pannello conto su un cliente\n      Utils.constrain(panel[3], etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[3], cognome, 0, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[3], testo[1], 1, 1, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n      Utils.constrain(panel[3], nome, 0, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.SOUTHWEST, 0.0, 0.0, 20, 5, 0, 20);\n      Utils.constrain(panel[3], testo[2], 1, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.SOUTHWEST, 1.0, 0.0, 20, 0, 0, 0);\n      Utils.constrain(panel[3], stanza1, 4, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[3], testo[3], 5, 2, 1, 1, GridBagConstraints.NONE,\n                         GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n\n      //Creo il pannello conto su piu' stanze\n      Utils.constrain(panel[4], etichetta4, 0, 0, 2, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n      Utils.constrain(panel[4], stanza2, 0, 1, 1, 1, GridBagConstraints.NONE,\n                        GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 5, 0, 20);\n      Utils.constrain(panel[4], testo[4], 1, 1, 1, 1, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 5); \n            \n      //Attacco i pannelli al frame\n      this.setLayout(gridbag);\n      Utils.constrain(this, panel[1], 0, 0, 6, 4, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.NORTHWEST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[0], 6, 0, 1, 4, GridBagConstraints.BOTH,\n                        GridBagConstraints.SOUTHEAST, 1.0, 0.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[2], 0, 4, 7, 2, GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n      Utils.constrain(this, panel[3], 0, 6, 7, 3,GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n      Utils.constrain(this,panel[4], 0, 9, 7, 2,GridBagConstraints.HORIZONTAL,\n                        GridBagConstraints.WEST, 1.0, 1.0, 5, 5, 5, 5);\n   }"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "init",
            "sourceCode": "public void init()\n   \t{\n      \tcheckboxes[0].addItemListener(new ItemListener()   \n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n           \t \tif(checkboxes[0].getState())\n            \t{\n               \t\ttipo_conto = 1;\n               \t\ttesto[0].setEditable(true);\n               \t\tVisualizza.setEnabled(true);\n               \t\tfor(int i=1;i<5;++i)\n               \t\t{    \n                   \t\ttesto[i].setEditable(false);\n        \t\t\t\ttesto[i].setText(\"\");\n        \t\t\t}     \t \n            \t}\n         \t}\n      \t});\n                      \n      \tcheckboxes[1].addItemListener(new ItemListener()   \n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n            \tif(checkboxes[1].getState())\n            \t{\n               \t\ttipo_conto = 2;\n               \t\tVisualizza.setEnabled(true);\n               \t\tfor(int i=1;i<4;++i)\n                  \t\ttesto[i].setEditable(true);\n               \t\ttesto[0].setEditable(false);\n               \t\ttesto[0].setText(\"\");\n              \t\ttesto[4].setEditable(false);\n             \t\ttesto[4].setText(\"\");\n             \t}\n         \t}\n      \t});\n\n      \tcheckboxes[2].addItemListener(new ItemListener()\n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n            \tif(checkboxes[2].getState())\n            \t{\n               \t\ttipo_conto = 3;\n               \t\tVisualizza.setEnabled(true);\n               \t\ttesto[4].setEditable(true);\n               \t\tfor(int i=0;i<4;++i)\n                  \t{\t\n                  \t\ttesto[i].setEditable(false);\n            \t\t\ttesto[i].setText(\"\");\n            \t\t}\n            \t}\n         \t}\n      \t});\n      \t\n      \tcheckboxes[3].addItemListener(new ItemListener()\n      \t{\n         \tpublic void itemStateChanged(ItemEvent e)\n         \t{\n               \tif (!checkboxes[3].getState())\n               \t{\n               \t\ttesto[5].setEditable(false);\n         \t\t\ttesto[5].setText(\"\");\n         \t\t}\n         \t\telse\n         \t\t{\n         \t\t\ttesto[5].setEditable(true);\n         \t\t\ttesto[5].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(new Date())));\n         \t\t}\n         \t}\n      \t});\n\n\t\tAnnulla.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tpadre.setEnabled(true);\n\t\t\t}\n\t\t});\n       \n       \tVisualizza.addActionListener(new ActionListener()\n      \t{\n         \tpublic void actionPerformed(ActionEvent e)\n         \t{\n\t\t\t\tstartVisualizza();\n         \t}\n       \t});\n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "startVisualizza",
            "sourceCode": "void startVisualizza()\n\t{\n   \t\tif (!errori())\n   \t\t{\t\n\t  \t\tthis.setEnabled(false);\n   \t\t\tif (checkboxes[0].getState())\n\t\t\t\tstartContoStanza();\n   \t\t\telse\n   \t\t\t{\n   \t\t\t\tif (checkboxes[1].getState())\n   \t\t\t\t{\n   \t\t\t\t\tstartContoSingolo();\n   \t\t\t\t}\n   \t\t\t\telse\t\n   \t\t       \t\tstartContoComitiva();\n   \t\t    }\n   \t\t\tdisplayConto();\n     \t}\n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "displayConto",
            "sourceCode": "void displayConto()\n  \t{\n  \t\tvisual = new MascheraVisualizzazioneConto(testo[0].getText(),testo[1].getText(),\n  \t\t\t\t\t\t\t\t\ttesto[2].getText(),testo[3].getText(),testo[4].getText(),tipo_conto);\n  \t\tvisual.setVisible(true);\n  \t\tvisual.conto = this;\n  \t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "problemiStanza",
            "sourceCode": "boolean problemiStanza(String stanza)\n\t{\t\n\t\tFrame msg;\n\t\tListaSoggiornanti L_sogg;\n\t\t\n\t\tif ((stanza).equals(\"\") )\n\t\t{\t\n\t\t\tmsg = new AvvisoDialog(this, \" Inserire il numero di stanza \");\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\tif ((Principale.db).readStanza(stanza) == null )\n\t\t\t{\n\t\t\t\tmsg = new MessageDialog(this, \" La stanza \"+stanza+\" e' inesistente! \");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tL_sogg = (Principale.db).foundSoggiornanti(stanza, false);\n\t\t\t\tif (L_sogg == null)\n\t\t\t\t{\t\n\t\t\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\t\t\treturn true;\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tif (L_sogg.length() == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmsg = new MessageDialog(this, \" La stanza \"+stanza+\" non e' attualmente occupata \");\n\t\t\t\t\t\treturn true;\t\n\t\t\t\t\t}\t\n\t\t\t}\t\n\t\treturn false;\n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "chkDouble",
            "sourceCode": "int chkDouble()\n\t{\n\t\tfor(int i = 0; i<L_st.length; i++)\n\t\t\tfor(int j = 0; j<L_st.length; j++)\n\t\t\t\tif ( (!L_st[i].equals(\"\")) && (!L_st[j].equals(\"\")) && (i!=j) \n\t\t\t\t\t&& (L_st[i].equals(L_st[j]))  )\n\t\t\t\t\treturn j;\n\t\treturn -1;\t\t\t  \n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "tornaDateFineMagg",
            "sourceCode": "Date[] tornaDateFineMagg(String elenco[])\n\t{\n\t\tDate data_fine_stanza = null;\n\t\tDate fine_sogg = null;\n\t\tDate date_fine_loc[] = new Date[elenco.length];\n\t\t\n\t\tfor (int i = 0; i < elenco.length; i++)\n\t\t{\n\t\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(elenco[i], false);\n\t\t\tif (L_sogg != null)\n\t\t\t{\n\t\t\t\tdata_fine_stanza = new Date(0, 0, 1);\n\t\t\t\tfor (int j = 1; j <= L_sogg.length(); j++)\n\t\t\t\t{\n\t\t\t\t\tfine_sogg = L_sogg.getSoggiornante(j).getFineSogg();\n\t\t\t\t\tif ( Utils.data1MaggioreData2( fine_sogg, data_fine_stanza ) )\n\t\t\t\t\t\tdata_fine_stanza = new Date(fine_sogg.getYear(), fine_sogg.getMonth(), fine_sogg.getDate());\n\t\t\t\t}\n\t\t\t\tdate_fine_loc[i] = data_fine_stanza;\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn null;\n\t\t}\n\t\treturn date_fine_loc;\n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "tornaDateInizioMin",
            "sourceCode": "Date[] tornaDateInizioMin(String elenco[])\n\t{\n\t\tDate data_inizio_stanza = null;\n\t\tDate inizio_sogg = null;\n\t\tDate date_inizio_loc[] = new Date[elenco.length];\n\t\t\n\t\tfor (int i = 0; i < elenco.length; i++)\n\t\t{\n\t\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(elenco[i], false);\n\t\t\tif (L_sogg != null)\n\t\t\t{\n\t\t\t\tdata_inizio_stanza = new Date(3000, 0, 1);\n\t\t\t\tfor (int j = 1; j <= L_sogg.length(); j++)\n\t\t\t\t{\n\t\t\t\t\tinizio_sogg = L_sogg.getSoggiornante(j).getInizioSogg();\n\t\t\t\t\tif ( Utils.data1MinoreData2( inizio_sogg, data_inizio_stanza ) )\n\t\t\t\t\t\tdata_inizio_stanza = new Date(inizio_sogg.getYear(), inizio_sogg.getMonth(), inizio_sogg.getDate());\n\t\t\t\t}\n\t\t\t\tdate_inizio_loc[i] = data_inizio_stanza;\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn null;\n\t\t}\n\t\treturn date_inizio_loc;\n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "aggiornamentoFlagsEffettuato",
            "sourceCode": "boolean aggiornamentoFlagsEffettuato(String elenco[])\n\t{\n\t\tqualcuno_tramite_agenzia = false;\n\t\tqualcuno_senza_agenzia = false;\n\t\tPrenotazione pren;\n\t\t\n\t\tfor (int i = 0; i<elenco.length; i++)\n\t\t{\n\t\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(elenco[i], false);\n\t\t\tif (L_sogg != null)\n\t\t\t{\n\t\t\t\tfor (int j = 1; j <= L_sogg.length(); j++)\n\t\t\t\t{\n\t\t\t\t\tpren = (Principale.db).readPrenotazione((L_sogg.getSoggiornante(j)).getIdPrenotazione());\n\t\t\t\t\tif (pren == null)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pren.getTramiteAgenzia() == Const.SI)\n\t\t\t\t\t\t\tqualcuno_tramite_agenzia = qualcuno_tramite_agenzia || true;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tqualcuno_senza_agenzia = qualcuno_tramite_agenzia || true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "errori",
            "sourceCode": "boolean errori()\n\t{\n\t\tFrame msg;\n\t\tSoggiornante sogg = new Soggiornante();\n\n\t\tif (checkboxes[0].getState())\n\t\t{\n\t\t\tif (problemiStanza(testo[0].getText()))\n\t\t\t\treturn true;\n\t\t\tL_st = new String[1];\n\t\t\tL_st[0] = new String(testo[0].getText());\n\t\t}\n\t\telse\n\t\t\tif (checkboxes[1].getState())\n\t\t\t{\n\t\t\t\tL_st = new String[1];\n\t\t\t\tL_st[0] = new String(testo[3].getText());\n\t\t\t\tsogg = (Principale.db).foundSoggiornante(testo[3].getText(),testo[2].getText(),testo[1].getText());\n\t\t\t\tif (sogg == null)\n\t\t\t\t{\n\t\t\t\t\tmsg = new AvvisoDialog(this, \" Nessun soggiornante presente nella stanza \"+testo[3].getText()+ \" risponde al nominativo inserito! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tListaSoggiornanti L_sogg = (Principale.db).foundSoggiornanti(testo[3].getText(), false);\n\t\t\t\tif (L_sogg == null)\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\t\t\treturn true;\n\t\t\t\t} \n\t\t\t\tif (sogg.getPagato() == Const.SI)\n\t\t\t\t{\n\t\t\t\t\tmsg = new AvvisoDialog(this, \" Il soggiornante selezionato o ha gia' pagato o se ne e' gia' andato! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// procedo con il verificare se il cliente e' l'ultimo rimasto\n\t\t\t\t\tListaSoggiornanti sogg_no_pagato = new ListaSoggiornanti();\n\t\t\t\t\tfor (int i=1; i<=L_sogg.length(); i++)\n\t\t\t\t\t\tif (L_sogg.getSoggiornante(i).getPagato() == Const.NO)\n\t\t\t\t\t\t\tsogg_no_pagato.addSoggiornante(L_sogg.getSoggiornante(i));\n\t\t\t\t\tif (sogg_no_pagato.length() == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmsg = new AvvisoDialog(this, \" Il soggiornante e' l'ultimo rimasto. Scegliere 'conto per stanza'! \");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tsogg_x_conto_sing = sogg;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\t\t\n\t\t\t\tif (checkboxes[2].getState())\n\t\t\t\t{\n\t\t\t\t\tL_st = Utils.parseStanze(testo[4].getText());\n\t\t\t\t\tif (L_st == null)\n\t\t\t\t\t{\t\n\t\t\t\t\t\tmsg = new MessageDialog(this, \" Errore nell'elenco delle stanze. Inserire le stanze nell'elenco nel modo seguente: 101,102,103,...\");\n\t\t\t\t\t\treturn true;\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tStanza room;\n\t\t\t\t\t\tfor (int i = 0; i < L_st.length; i++)\n\t\t\t\t\t\t\tif  (problemiStanza(L_st[i]))\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tint res = chkDouble();\n\t\t\t\t\t\tif ( res != -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmsg = new MessageDialog(this, \" Errore nell'elenco delle stanze. La stanza \"+L_st[res]+\" e presente piu' volte nell'elenco! \");\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\tif (checkboxes[0].getState() || checkboxes[2].getState())\n\t\t{\n\t\t\tdate_fine = tornaDateFineMagg(L_st);\n\t\t\tdate_inizio = tornaDateInizioMin(L_st);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tPrenotazione pren = (Principale.db).readPrenotazione(sogg.getIdPrenotazione());\n\t\t\tif (pren != null)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tdate_fine = new Date[1];\n\t\t\t\tdate_inizio = new Date[1];\n\t\t\t\tdate_fine[0] = sogg.getFineSogg();\n\t\t\t\tdate_inizio[0] = sogg.getInizioSogg();\n\t\t\t}\n\t\t\telse\n\t\t\t\tdate_fine = null;\n\t\t}\n\t\tif (date_fine == null || date_inizio == null)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\treturn true;\n\t\t}\n\t\t// la variabile data_fine contiene le date di fine corrette\n\n\t\tdata_fine_magg = new Date(0, 0, 1);\n\t\tfor (int i=0; i<date_fine.length; i++)\n\t\t\tif (Utils.data1MaggioreData2(date_fine[i], data_fine_magg))\n\t\t\t\tdata_fine_magg = date_fine[i];\n\t\t// ora la variabile data_fine_magg contiene la data di fine maggiore\n\t\t\n\t\tif (!aggiornamentoFlagsEffettuato(L_st))\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Problemi con il database! \");\n\t\t\treturn true;\n\t\t}\n \t\t// da ora in poi le flags per l'agenzia contengono valori significativi\n\n\t\t// questo if deve essere messo prima di quello che segue\n\t\tif (qualcuno_tramite_agenzia && qualcuno_senza_agenzia)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" L'elenco delle stanze include stanze commissionate e non! Procedere al calcolo separato. \");\n\t\t\treturn true;\n\t\t}\n\t\t// L'if che segue deve essere posto dopo a quello che precede\n\t\tif (checkboxes[2].getState() && qualcuno_tramite_agenzia)\n\t\t{\n\t\t\tmsg = new MessageDialog(this, \" Il conto comitiva non e' possibile per le agenzie! \");\n\t\t\treturn true;\n\t\t}\n\n\t\t// se arrivo qui significa che si puo' fare il conto normale,\n\t\t// rimane da verificare se si desidera fare una partenza anticipata\n\t\t// e in tal caso verificare che la data inserita sia corretta!\n\t\tif ( (checkboxes[3].getState()) && (DateUtils.dataCorretta(testo[5].getText())) )\n\t\t{\t\n\t\t\tDate data = DateUtils.convertDate(testo[5].getText());\n\t\t\tDate data_oggi = new Date();\n\t\t\t// controllo che la data di partenza anticipata abbia senso:\n\t\t\t// 1) controllo che il cliente abbia soggiornato almento un giorno\n\t\t\tfor (int i=0; i<date_inizio.length; i++)\n\t\t\t\tif (Utils.data1MaggioreData2(date_inizio[i], DateUtils.giornoPrimaDi(data)))\n\t\t\t\t{\n\t\t\t\t\tmsg = new MessageDialog(this, \" I clienti devono soggiornare almeno un giorno prima di partire! \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t// 2) controllo che la partenza anticipata non sia prima di oggi\n\t\t\tif (Utils.data1MinoreData2(data, data_oggi))\n\t\t\t{\n\t\t\t\tmsg = new AvvisoDialog(this, \" La data non puo' essere precedente a quella odierna! \");\n\t\t\t\ttesto[5].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(data_oggi)));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t\t// 3)  controllo che il fine soggiorno anticipato (ossia il giorno prima della\n\t\t\t\t//     partenza anticipata) non sia dopo il fine soggiorno effettivo\n\t\t\t\tfor (int i=0; i<date_fine.length; i++)\n\t\t\t\t\tif (Utils.data1MaggioreData2(data, date_fine[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tmsg = new AvvisoDialog(this, \" Non si tratta di una partenza anticipata per la stanza \"+L_st[i]+\" con tale data! \");\n\t\t\t\t\t\ttesto[5].setText(DateUtils.parseDate(DateUtils.giveStringOfDate(data_oggi)));\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\tfine_sogg_anticipato = DateUtils.giornoPrimaDi(data);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif  ( (checkboxes[3].getState()) && !DateUtils.dataCorretta(testo[5].getText()))\n\t\t\t{\t\n\t\t\t\tmsg = new MessageDialog(this, \" La data di partenza anticipata e' errata! \");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// il checkboxes[3] non e' attivo\n\t\t\t\tfine_sogg_anticipato = data_fine_magg;\n\t\t\t\tif (qualcuno_tramite_agenzia && checkboxes[1].getState())\n\t\t\t\t{\t\n\t\t\t\t\tmsg = new MessageDialog(this, \" Il cliente e' in una stanza di agenzia! Se deve andarsene scegliere 'partenza anticipata'. \");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "startContoStanza",
            "sourceCode": "void startContoStanza()\n\t{\n\t\tFrame msg;\n\t\t\n\t\tif (!qualcuno_tramite_agenzia)\n\t\t{\n\t\t\tif (checkboxes[3].getState())\n\t\t\t\tCalcoloConto.calcolaContoStanza(testo[0].getText(), 1, false, fine_sogg_anticipato);\n\t\t\telse\n\t\t\t\tCalcoloConto.calcolaContoStanza(testo[0].getText(), 1, false, null);\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tCalcoloConto.calcolaContoStanzaAgenzia(testo[0].getText());\n\t\t}\t\t\n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "startContoSingolo",
            "sourceCode": "void startContoSingolo()\n\t{\n\t\tif (qualcuno_tramite_agenzia)\n\t\t{\n\t\t\tFrame msg;\n\t\t\tDate fine_effettiva;\n\t\t\tif (checkboxes[3].getState())\n\t\t\t\tfine_effettiva = fine_sogg_anticipato;\n\t\t\telse\n\t\t\t\tfine_effettiva = data_fine_magg;\n\t\t\t\n   \t\t\tif ( Utils.data1MinoreData2(fine_effettiva, new Date()) )\n\t\t\t\tmsg = new AskChiudiSingoloConAgenzia(this);\n\t\t\telse\n\t\t\t\tmsg = new MessageDialog(this, \" La data e' posteriore ad oggi: non e' possibile chiudere! \");\n   \t\t\treturn;\n   \t\t}\n   \t\telse\n\t\t\tif ( (checkboxes[3].getState()) )\n\t\t\t\tCalcoloConto.calcolaContoSingolo(sogg_x_conto_sing, fine_sogg_anticipato);\n\t\t\telse\n\t\t\t\tCalcoloConto.calcolaContoSingolo(sogg_x_conto_sing, null);\n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "startContoComitiva",
            "sourceCode": "void startContoComitiva()\n\t{\n\t\tif ( (checkboxes[3].getState()) )\n\t\t\tCalcoloConto.calcolaContoComitiva(L_st, fine_sogg_anticipato);\n\t\telse\n\t\t\tCalcoloConto.calcolaContoComitiva(L_st, null);\n\t}"
        },
        {
            "parentClass": "MascheraCalcoloConto",
            "name": "startChiudiSingoloConAgenzia",
            "sourceCode": "void startChiudiSingoloConAgenzia()\n\t{\n\t\tif (checkboxes[3].getState())\n\t\t{\n\t\t\tDate new_data = DateUtils.convertDate(testo[5].getText());\n\t\t\tnew_data = DateUtils.giornoPrimaDi(new_data);\n\t\t\t(Principale.db).anticipaFineSogg(sogg_x_conto_sing.getNumStanza(),\n\t\t\t\t\t\t\t\t\tsogg_x_conto_sing.getIdSoggiornante(),\n\t\t\t\t\t\t\t\t\tnew_data);\n\t\t}\n\t\t(Principale.db).reversePagato(sogg_x_conto_sing.getNumStanza(),\n\t\t\t\t\t\t\t\t\t  sogg_x_conto_sing.getIdSoggiornante());\n\t\tfor (int i=0; i<testo.length-1; i++)\n\t\t\ttesto[i].setText(\"\");\n\t}"
        }
    ]
}