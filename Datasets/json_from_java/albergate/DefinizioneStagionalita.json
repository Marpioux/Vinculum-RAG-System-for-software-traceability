{
    "DefinizioneStagionalita": [
        {
            "parentClass": "DefinizioneStagionalita",
            "name": "DefinizioneStagionalita",
            "sourceCode": "public DefinizioneStagionalita(Frame parent)\n    {\n        super(\"Definisione delle stagionalita'\");\n        config = parent;\n        config.setEnabled(false);\n        setupPanels();\n\t\tinitVectors();\n        init();\n        pack();\n        setVisible(true);\n    }"
        },
        {
            "parentClass": "DefinizioneStagionalita",
            "name": "setupPanels",
            "sourceCode": "void setupPanels()\n\t{\n\t\tthis.setFont(ConfigurazioneSistema.font_base);\n\t\t//Creo i TextField\n\t\tdata_inizio = new TextField(\"\", 12);\n\t\tdata_fine = new TextField(\"\", 12);\n\n\t\t//Creo i pulsanti e ne disabilito due\n\t\tAnnulla = new Button(\"Annulla\");\n\t\tConferma = new Button(\"Conferma\");\n\t\tAggiungi = new Button(\"Aggiungi\");\n\t\tAggiungi.setEnabled(false);\n\t\t\t\n\t\t//Creo le etichette\n\t\tetichetta= new Label(\"Periodo di soggiorno\");\n\t\tetichetta.setFont(ConfigurazioneSistema.font_titolo);\n\t\tetichetta1 = new Label(\"Data inizio:\");\n\t\tetichetta2 = new Label(\"    Data fine:\");\n\t\tetichetta3 = new Label (\"Prospetto della distriduzione delle staginalita':\");\n\t\tetichetta3.setFont(new Font(\"Courier\", Font.BOLD, 12));\n\t\tLabel space = new Label(\"               \");\n\n\t\t//Creo la lista\n\t\tlist = new List(15,false);\n           \n\t\t//Creo il pannello in alto      \n\t\tpanel1 = new Panel();\n\t\tpanel1.setLayout(gridbag);\n\t\tUtils.constrain(panel1, etichetta, 0, 0, 4, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n\t\tUtils.constrain(panel1, etichetta1, 0, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel1, data_inizio, 1, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST,1.0,0.0,0,0,0,0);\n\t\t//Utils.constrain(panel1, space, 2, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\t//GridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);            \n\t\tUtils.constrain(panel1, etichetta2, 3, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel1,data_fine, 4, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel1, space, 5, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 0.0, 0.0, 0, 0, 0, 0);                         \n\n\t\t//Creo un pannello con due pulsanti\n\t\tpanel2 = new Panel();\n\t\tpanel2.setLayout(gridbag);\n\t\tUtils.constrain(panel2, Aggiungi, 0, 0, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.CENTER, 0.3, 0.0, 0, 0, 0, 10);\n\n\t\t//Creo un Checkbox ad esclusione\n\t\tcheckbox_group = new CheckboxGroup();\n\t\tcheckboxes = new Checkbox[5];\n\t\tcheckboxes[0] = new Checkbox(\" Alta stagione\",checkbox_group,false);\n\t\tcheckboxes[1] = new Checkbox(\" Media stagione\",checkbox_group,false);\n\t\tcheckboxes[2] = new Checkbox(\" Bassa stagione\",checkbox_group,false);\n\t\tcheckboxes[3] = new Checkbox(\" Bassissima stagione\",checkbox_group,false);\n\t\tcheckboxes[4] = new Checkbox(\" Chiusura\",checkbox_group,false);\n\t\t\t\n\t\tetichetta4= new Label(\"Stagionalita' disponibili\");\n\t\tetichetta4.setFont(new Font(\"Courier\", Font.BOLD, 12));\n      \t\t\n\t\t//Creo il pannello \n\t\tpanel3 = new Panel();\n\t\tpanel3.setLayout(gridbag);\n\t\tUtils.constrain(panel3, etichetta4, 0, 1, 4, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 0, 10, 0);\n\t\tUtils.constrain(panel3, checkboxes[0], 0, 2, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0); \n\t\tUtils.constrain(panel3, checkboxes[1], 0, 3, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n\t\tUtils.constrain(panel3, checkboxes[2], 0, 4, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n\t\tUtils.constrain(panel3, checkboxes[3], 0, 5, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);\n\t\tUtils.constrain(panel3, checkboxes[4], 0, 6, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 0, 5, 0, 0);                        \n\n\t\t//Creo il pannello contenente la TextArea\n\t\tpanel4 = new Panel();\n\t\tpanel4.setLayout(gridbag);\n\t\tUtils.constrain(panel4, etichetta3, 0, 0, 2, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.WEST, 1.0, 0.0, 0, 0, 0, 0);\n\t\tUtils.constrain(panel4,list, 0, 1, 4, 3, GridBagConstraints.BOTH,\n\t\t\tGridBagConstraints.CENTER, 3.0, 3.0, 0, 0, 0, 0);\n\n\t\t//Creo il pannello in basso con due pulsanti\n\t\tpanel5 = new Panel();\n\t\tpanel5.setLayout(gridbag);\n\t\tUtils.constrain(panel5, Annulla, 0, 1, 1, 1, GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.SOUTHEAST, 0.3, 0.0, 0, 0, 0, 10);\n\t\tUtils.constrain(panel5, Conferma, 1, 1, 1, 1,GridBagConstraints.NONE,\n\t\t\tGridBagConstraints.SOUTHWEST, 0.3, 0.0, 0, 0, 0, 0);\n\n\t\t//Attacco i pannelli al frame\n\t\tthis.setLayout(gridbag);\n\t\tUtils.constrain(this, panel1, 0, 0, 4, 2, GridBagConstraints.HORIZONTAL,\n\t\t\tGridBagConstraints.NORTHWEST, 1.0, 0.0, 15, 10, 10, 10);\n\t\tUtils.constrain(this, panel3, 0, 2, 4, 1,GridBagConstraints.HORIZONTAL,\n\t\t\tGridBagConstraints.NORTHEAST, 1.0, 0.0, 10, 10, 0, 10);\n\t\tUtils.constrain(this, panel2, 0, 5, 4, 1,GridBagConstraints.HORIZONTAL,\n\t\t\tGridBagConstraints.NORTHEAST, 1.0, 0.0, 10, 10, 0, 10);\n\t\tUtils.constrain(this, panel4, 0, 6, 4, 3, GridBagConstraints.BOTH,\n\t\t\tGridBagConstraints.CENTER, 2.0, 2.0, 10, 10, 10, 10);\n\t\tUtils.constrain(this, panel5, 0, 10, 4, 1, GridBagConstraints.HORIZONTAL,\n\t\t\tGridBagConstraints.SOUTHWEST, 1.0, 1.0, 10, 10, 15, 10);\n\t}"
        },
        {
            "parentClass": "DefinizioneStagionalita",
            "name": "init",
            "sourceCode": "public void init()\n\t{\n\t\t//Ascoltatore degli eventi della finestra\n\t\tcheckboxes[0].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif ( (checkboxes[0].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\")) )\n\t\t\t\t{\n\t\t\t\t\tAggiungi.setEnabled(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcheckboxes[1].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif ( (checkboxes[1].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\")) )\n\t\t\t\t{\n\t\t\t\t\tAggiungi.setEnabled(true);\n\t\t\t\t}\n            }\n\t\t});\n\n\t\tcheckboxes[2].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif ( (checkboxes[2].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\")) )\n\t\t\t\t{\n\t\t\t\t\tAggiungi.setEnabled(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcheckboxes[3].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif ( (checkboxes[3].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\")) )\n\t\t\t\t{\n\t\t\t\t\tAggiungi.setEnabled(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcheckboxes[4].addItemListener(new ItemListener()\n\t\t{\n\t\t\tpublic void itemStateChanged(ItemEvent e)\n\t\t\t{\n\t\t\t\tif ( (checkboxes[4].getState()) && (!(data_inizio.getText()).equals(\"\")) && (!(data_fine.getText()).equals(\"\")) )\n\t\t\t\t{\n\t\t\t\t\tAggiungi.setEnabled(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n       \n\t\t/* Nel caso di annullamento dell'operazione ripristino i vettori\n\t\t * originali della Configurazione\n\t\t */   \n            \n\t\tAnnulla.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tdispose();\n\t\t\t\tconfig.setEnabled(true);\n\t\t\t}\n\t\t});\n            \n\t\t//Ascoltatore del pulsante Conferma, se il pulsante viene premuto si apre\n\t\t//la finestra riguardante l'inserimento della prenotazione\n\t\tAggiungi.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tstartAggiungi();\n            }\n        });\n        \n        Conferma.addActionListener(new ActionListener()\n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent e)\n            {\n\t\t\t\tConfigurazioneSistema.new_stag_anno_corr = (config_locale.getStagAnnoCorr());\n\t\t\t\tConfigurazioneSistema.new_stag_anno_prox = (config_locale.getStagAnnoProx());\n\t\t\t\tdispose();\n\t\t\t\tconfig.setEnabled(true);\n\t\t\t}\n\t\t});\n    }"
        },
        {
            "parentClass": "DefinizioneStagionalita",
            "name": "startAggiungi",
            "sourceCode": "void startAggiungi()\n\t{\n\t\tchar flag;\n\t\tString lista[];\n\t\t\n\t\tif (Utils.dateEPeriodoCorretti(this, data_inizio.getText(), data_fine.getText()))\n\t\t{\n\t\t\tif (checkboxes[0].getState() == true)\n\t\t\t\tflag = Flag.ALTA_STAGIONE;\n\t\t\telse\t\n\t\t\t\tif (checkboxes[1].getState() == true)\n\t\t\t\t\tflag = Flag.MEDIA_STAGIONE;\n\t\t\t\telse\n\t\t\t\t\tif (checkboxes[2].getState() == true)\n\t\t\t\t\t\tflag = Flag.BASSA_STAGIONE;\n\t\t\t\t\telse\n\t\t\t\t\t\tif (checkboxes[3].getState() == true)\n\t\t\t\t\t\t\tflag = Flag.BASSISSIMA_STAGIONE;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tflag = Flag.CHIUSO;\n\t\t\tconfig_locale.setStagione(new Date(DateUtils.invertDate(DateUtils.parseDate(data_inizio.getText()))), new Date(DateUtils.invertDate(DateUtils.parseDate(data_fine.getText()))), flag);\n\t        conf_stag_corr = config_locale.getStagionalita(Const.ANNO_CORRENTE);\n\t        conf_stag_prox = config_locale.getStagionalita(Const.ANNO_PROSSIMO);\n\t\t\tvisStagionalita();\n\t\t\tdata_inizio.setText(\"\");\t\n\t\t\tdata_fine.setText(\"\");\n\t\t\tfor (int i = 0; i<checkboxes.length; i++)\n\t\t\t\tcheckboxes[i].setState(false);\n\t\t\tAggiungi.setEnabled(false);\n\t\t}\n\t}"
        },
        {
            "parentClass": "DefinizioneStagionalita",
            "name": "initVectors",
            "sourceCode": "void initVectors()\n    {\n        config_locale = new Configurazione();\n        config_locale.setStagAnnoCorr(ConfigurazioneSistema.new_stag_anno_corr);\n        config_locale.setStagAnnoProx(ConfigurazioneSistema.new_stag_anno_prox);\n        conf_stag_corr = config_locale.getStagionalita(Const.ANNO_CORRENTE);\n        conf_stag_prox = config_locale.getStagionalita(Const.ANNO_PROSSIMO);\n        Costanti cost = new Costanti();\n        anno_corr = cost.getAnnoCorr();\n        anno_prox = cost.getAnnoProx();\n  \t\tvisStagionalita();\n    }"
        },
        {
            "parentClass": "DefinizioneStagionalita",
            "name": "visStagionalita",
            "sourceCode": "void visStagionalita()\n\t{\n\t\tString lista[] = reportStagionalita();\n\t\tif (list.getItemCount() > 0)\n\t\t\tlist.removeAll();\n\t\tfor (int k = 0; k<lista.length; k++)\n\t\t\tlist.addItem(lista[k]);\n\t}"
        },
        {
            "parentClass": "DefinizioneStagionalita",
            "name": "reportStagionalita",
            "sourceCode": "String[] reportStagionalita()\n\t{\n\t\tString lista_loc[] = new String[30];\n\t\tint index = 0;\n\t\tString str_aus;\n\t\tinitLista(lista_loc);\n\t\t\n\t//Scansione dei 5 tipi di stagionalita per l'anno corrente\n \t\tstr_aus = Utils.scanVector(Flag.ALTA_STAGIONE, conf_stag_corr, anno_corr);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di alta stagione per l'anno \"+anno_corr);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.MEDIA_STAGIONE, conf_stag_corr, anno_corr);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di media stagione per l'anno \"+anno_corr);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.BASSA_STAGIONE, conf_stag_corr, anno_corr);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di bassa stagione per l'anno \"+anno_corr);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.BASSISSIMA_STAGIONE, conf_stag_corr, anno_corr);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di bassissima stagione per l'anno \"+anno_corr);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.CHIUSO, conf_stag_corr, anno_corr);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di chiusura per l'anno \"+anno_corr);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\n\t//\tScansione dei 5 tipi di stagionalita per l'anno seguente \t\n\t\tstr_aus = Utils.scanVector(Flag.ALTA_STAGIONE, conf_stag_prox, anno_prox);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di alta stagione per l'anno \"+anno_prox);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.MEDIA_STAGIONE, conf_stag_prox, anno_prox);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di media stagione per l'anno \"+anno_prox);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.BASSA_STAGIONE, conf_stag_prox, anno_prox);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di bassa stagione per l'anno \"+anno_prox);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.BASSISSIMA_STAGIONE, conf_stag_prox, anno_prox);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di bassissima stagione per l'anno \"+anno_prox);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\tstr_aus = Utils.scanVector(Flag.CHIUSO, conf_stag_prox, anno_prox);\n \t\tif ( !( str_aus.equals(\"\") ) )\n\t\t{\t\n\t\t\tlista_loc[index] = new String(\"Periodi di chiusura per l'anno \"+anno_prox);\n\t\t\tlista_loc[index+1] = new String(str_aus);\n\t\t\tindex = index+3;\n\t\t}\n\t\treturn lista_loc;\n\t}"
        },
        {
            "parentClass": "DefinizioneStagionalita",
            "name": "initLista",
            "sourceCode": "void initLista(String lista[])\n\t{\n\t\tfor (int k = 0; k < lista.length; k++)\n\t\t\tlista[k] = new String(\"\");\n\t}"
        }
    ]
}